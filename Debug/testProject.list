
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a904  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800aa10  0800aa10  0001aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa84  0800aa84  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa84  0800aa84  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa84  0800aa84  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800aa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000188  0800ac14  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001330  0800ac14  00021330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b20  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038eb  00000000  00000000  00036d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5f  00000000  00000000  0003b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197d0  00000000  00000000  0003c957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c63  00000000  00000000  00056127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094327  00000000  00000000  0006ed8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005314  00000000  00000000  001030b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001083c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a9f8 	.word	0x0800a9f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	0800a9f8 	.word	0x0800a9f8

0800014c <HAL_TIM_PeriodElapsedCallback>:
void handleUSBCommunication();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a08      	ldr	r2, [pc, #32]	; (800017c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d109      	bne.n	8000172 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if (time10ms)
 800015e:	4b08      	ldr	r3, [pc, #32]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d005      	beq.n	8000172 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			time10ms--;
 8000166:	4b06      	ldr	r3, [pc, #24]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	3b01      	subs	r3, #1
 800016c:	b2da      	uxtb	r2, r3
 800016e:	4b04      	ldr	r3, [pc, #16]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000170:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000172:	bf00      	nop
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	40012c00 	.word	0x40012c00
 8000180:	20000000 	.word	0x20000000

08000184 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <HAL_UART_RxCpltCallback+0x3c>)
 8000192:	4293      	cmp	r3, r2
 8000194:	d110      	bne.n	80001b8 <HAL_UART_RxCpltCallback+0x34>
		datosComSerie.indexWriteRx++;
 8000196:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <HAL_UART_RxCpltCallback+0x40>)
 8000198:	78db      	ldrb	r3, [r3, #3]
 800019a:	3301      	adds	r3, #1
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <HAL_UART_RxCpltCallback+0x40>)
 80001a0:	70da      	strb	r2, [r3, #3]
		HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <HAL_UART_RxCpltCallback+0x40>)
 80001a4:	78db      	ldrb	r3, [r3, #3]
 80001a6:	461a      	mov	r2, r3
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <HAL_UART_RxCpltCallback+0x40>)
 80001aa:	4413      	add	r3, r2
 80001ac:	3307      	adds	r3, #7
 80001ae:	2201      	movs	r2, #1
 80001b0:	4619      	mov	r1, r3
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <HAL_UART_RxCpltCallback+0x44>)
 80001b4:	f005 fa90 	bl	80056d8 <HAL_UART_Receive_IT>
	}
}
 80001b8:	bf00      	nop
 80001ba:	3708      	adds	r7, #8
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	40013800 	.word	0x40013800
 80001c4:	20000324 	.word	0x20000324
 80001c8:	200002d8 	.word	0x200002d8

080001cc <USB_Receive>:

void USB_Receive(uint8_t *buf, uint16_t len){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	807b      	strh	r3, [r7, #2]
	memcpy(&datosComUSB.bufferRx[datosComUSB.indexWriteRx], buf, len);
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <USB_Receive+0x40>)
 80001da:	78db      	ldrb	r3, [r3, #3]
 80001dc:	461a      	mov	r2, r3
 80001de:	4b0b      	ldr	r3, [pc, #44]	; (800020c <USB_Receive+0x40>)
 80001e0:	4413      	add	r3, r2
 80001e2:	3307      	adds	r3, #7
 80001e4:	887a      	ldrh	r2, [r7, #2]
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f00a fbf7 	bl	800a9dc <memcpy>
	datosComUSB.indexWriteRx += len;
 80001ee:	4b07      	ldr	r3, [pc, #28]	; (800020c <USB_Receive+0x40>)
 80001f0:	78da      	ldrb	r2, [r3, #3]
 80001f2:	887b      	ldrh	r3, [r7, #2]
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	4413      	add	r3, r2
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <USB_Receive+0x40>)
 80001fc:	70da      	strb	r2, [r3, #3]
	datosComUSB.newData = true;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <USB_Receive+0x40>)
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	2000052c 	.word	0x2000052c

08000210 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
	...

08000224 <heartbeatTask>:

void heartbeatTask(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (myHB & mask)
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <heartbeatTask+0x4c>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <heartbeatTask+0x50>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4013      	ands	r3, r2
 8000232:	2b00      	cmp	r3, #0
 8000234:	d006      	beq.n	8000244 <heartbeatTask+0x20>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	// ON
 8000236:	2200      	movs	r2, #0
 8000238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023c:	480e      	ldr	r0, [pc, #56]	; (8000278 <heartbeatTask+0x54>)
 800023e:	f002 f917 	bl	8002470 <HAL_GPIO_WritePin>
 8000242:	e005      	b.n	8000250 <heartbeatTask+0x2c>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);	// OFF
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <heartbeatTask+0x54>)
 800024c:	f002 f910 	bl	8002470 <HAL_GPIO_WritePin>

	mask >>= 1;									// Displace hbMask one place to the right
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <heartbeatTask+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	085b      	lsrs	r3, r3, #1
 8000256:	4a07      	ldr	r2, [pc, #28]	; (8000274 <heartbeatTask+0x50>)
 8000258:	6013      	str	r3, [r2, #0]
	if (!mask)
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <heartbeatTask+0x50>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d103      	bne.n	800026a <heartbeatTask+0x46>
		mask = 0x80000000;						// If there's a 0 in that place, changes the actual positions to compare the right way
 8000262:	4b04      	ldr	r3, [pc, #16]	; (8000274 <heartbeatTask+0x50>)
 8000264:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000268:	601a      	str	r2, [r3, #0]

}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000008 	.word	0x20000008
 8000274:	20000004 	.word	0x20000004
 8000278:	40011000 	.word	0x40011000

0800027c <decodeProtocol>:

void decodeProtocol(_sDato *datosCom){
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
    static uint8_t nBytes=0;
    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	78db      	ldrb	r3, [r3, #3]
 8000288:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800028a:	e0df      	b.n	800044c <decodeProtocol+0x1d0>
    {
        switch (estadoProtocolo) {
 800028c:	4b75      	ldr	r3, [pc, #468]	; (8000464 <decodeProtocol+0x1e8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b06      	cmp	r3, #6
 8000292:	f200 80d7 	bhi.w	8000444 <decodeProtocol+0x1c8>
 8000296:	a201      	add	r2, pc, #4	; (adr r2, 800029c <decodeProtocol+0x20>)
 8000298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029c:	080002b9 	.word	0x080002b9
 80002a0:	080002e1 	.word	0x080002e1
 80002a4:	08000315 	.word	0x08000315
 80002a8:	08000349 	.word	0x08000349
 80002ac:	0800037d 	.word	0x0800037d
 80002b0:	080003a5 	.word	0x080003a5
 80002b4:	080003e7 	.word	0x080003e7
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	b2d1      	uxtb	r1, r2
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	7111      	strb	r1, [r2, #4]
 80002c4:	461a      	mov	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4413      	add	r3, r2
 80002ca:	79db      	ldrb	r3, [r3, #7]
 80002cc:	2b55      	cmp	r3, #85	; 0x55
 80002ce:	f040 80bd 	bne.w	800044c <decodeProtocol+0x1d0>
                    estadoProtocolo=HEADER_1;
 80002d2:	4b64      	ldr	r3, [pc, #400]	; (8000464 <decodeProtocol+0x1e8>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	709a      	strb	r2, [r3, #2]
                }
                break;
 80002de:	e0b5      	b.n	800044c <decodeProtocol+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	791b      	ldrb	r3, [r3, #4]
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	b2d1      	uxtb	r1, r2
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	7111      	strb	r1, [r2, #4]
 80002ec:	461a      	mov	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	79db      	ldrb	r3, [r3, #7]
 80002f4:	2b4e      	cmp	r3, #78	; 0x4e
 80002f6:	d103      	bne.n	8000300 <decodeProtocol+0x84>
                   estadoProtocolo=HEADER_2;
 80002f8:	4b5a      	ldr	r3, [pc, #360]	; (8000464 <decodeProtocol+0x1e8>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	701a      	strb	r2, [r3, #0]
 80002fe:	e0a5      	b.n	800044c <decodeProtocol+0x1d0>
                else{
                    datosCom->indexReadRx--;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	791b      	ldrb	r3, [r3, #4]
 8000304:	3b01      	subs	r3, #1
 8000306:	b2da      	uxtb	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800030c:	4b55      	ldr	r3, [pc, #340]	; (8000464 <decodeProtocol+0x1e8>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000312:	e09b      	b.n	800044c <decodeProtocol+0x1d0>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	791b      	ldrb	r3, [r3, #4]
 8000318:	1c5a      	adds	r2, r3, #1
 800031a:	b2d1      	uxtb	r1, r2
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	7111      	strb	r1, [r2, #4]
 8000320:	461a      	mov	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	79db      	ldrb	r3, [r3, #7]
 8000328:	2b45      	cmp	r3, #69	; 0x45
 800032a:	d103      	bne.n	8000334 <decodeProtocol+0xb8>
                    estadoProtocolo=HEADER_3;
 800032c:	4b4d      	ldr	r3, [pc, #308]	; (8000464 <decodeProtocol+0x1e8>)
 800032e:	2203      	movs	r2, #3
 8000330:	701a      	strb	r2, [r3, #0]
 8000332:	e08b      	b.n	800044c <decodeProtocol+0x1d0>
                else{
                    datosCom->indexReadRx--;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	3b01      	subs	r3, #1
 800033a:	b2da      	uxtb	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000340:	4b48      	ldr	r3, [pc, #288]	; (8000464 <decodeProtocol+0x1e8>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000346:	e081      	b.n	800044c <decodeProtocol+0x1d0>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	b2d1      	uxtb	r1, r2
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	7111      	strb	r1, [r2, #4]
 8000354:	461a      	mov	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	79db      	ldrb	r3, [r3, #7]
 800035c:	2b52      	cmp	r3, #82	; 0x52
 800035e:	d103      	bne.n	8000368 <decodeProtocol+0xec>
                estadoProtocolo=NBYTES;
 8000360:	4b40      	ldr	r3, [pc, #256]	; (8000464 <decodeProtocol+0x1e8>)
 8000362:	2204      	movs	r2, #4
 8000364:	701a      	strb	r2, [r3, #0]
 8000366:	e071      	b.n	800044c <decodeProtocol+0x1d0>
            else{
                datosCom->indexReadRx--;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	791b      	ldrb	r3, [r3, #4]
 800036c:	3b01      	subs	r3, #1
 800036e:	b2da      	uxtb	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	711a      	strb	r2, [r3, #4]
                estadoProtocolo=START;
 8000374:	4b3b      	ldr	r3, [pc, #236]	; (8000464 <decodeProtocol+0x1e8>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
            }
            break;
 800037a:	e067      	b.n	800044c <decodeProtocol+0x1d0>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	791a      	ldrb	r2, [r3, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	b2d1      	uxtb	r1, r2
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	7111      	strb	r1, [r2, #4]
 8000390:	461a      	mov	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	79da      	ldrb	r2, [r3, #7]
 8000398:	4b33      	ldr	r3, [pc, #204]	; (8000468 <decodeProtocol+0x1ec>)
 800039a:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 800039c:	4b31      	ldr	r3, [pc, #196]	; (8000464 <decodeProtocol+0x1e8>)
 800039e:	2205      	movs	r2, #5
 80003a0:	701a      	strb	r2, [r3, #0]
                break;
 80003a2:	e053      	b.n	800044c <decodeProtocol+0x1d0>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	1c5a      	adds	r2, r3, #1
 80003aa:	b2d1      	uxtb	r1, r2
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	7111      	strb	r1, [r2, #4]
 80003b0:	461a      	mov	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4413      	add	r3, r2
 80003b6:	79db      	ldrb	r3, [r3, #7]
 80003b8:	2b3a      	cmp	r3, #58	; 0x3a
 80003ba:	d10a      	bne.n	80003d2 <decodeProtocol+0x156>
                   estadoProtocolo=PAYLOAD;
 80003bc:	4b29      	ldr	r3, [pc, #164]	; (8000464 <decodeProtocol+0x1e8>)
 80003be:	2206      	movs	r2, #6
 80003c0:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <decodeProtocol+0x1ec>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	709a      	strb	r2, [r3, #2]
 80003d0:	e03c      	b.n	800044c <decodeProtocol+0x1d0>
                }
                else{
                    datosCom->indexReadRx--;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <decodeProtocol+0x1e8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
                }
                break;
 80003e4:	e032      	b.n	800044c <decodeProtocol+0x1d0>
            case PAYLOAD:
                if (nBytes>1){
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <decodeProtocol+0x1ec>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d90f      	bls.n	800040e <decodeProtocol+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	b2d1      	uxtb	r1, r2
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7111      	strb	r1, [r2, #4]
 80003fa:	461a      	mov	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	79da      	ldrb	r2, [r3, #7]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	4053      	eors	r3, r2
 8000408:	b2da      	uxtb	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <decodeProtocol+0x1ec>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <decodeProtocol+0x1ec>)
 8000418:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <decodeProtocol+0x1ec>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d114      	bne.n	800044c <decodeProtocol+0x1d0>
                    estadoProtocolo=START;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <decodeProtocol+0x1e8>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	789a      	ldrb	r2, [r3, #2]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	4619      	mov	r1, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	440b      	add	r3, r1
 8000436:	79db      	ldrb	r3, [r3, #7]
 8000438:	429a      	cmp	r2, r3
 800043a:	d107      	bne.n	800044c <decodeProtocol+0x1d0>
                        decodeData(datosCom);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 f815 	bl	800046c <decodeData>
                    }
                }
                break;
 8000442:	e003      	b.n	800044c <decodeProtocol+0x1d0>
            default:
                estadoProtocolo=START;
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <decodeProtocol+0x1e8>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
                break;
 800044a:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	791b      	ldrb	r3, [r3, #4]
 8000450:	7bfa      	ldrb	r2, [r7, #15]
 8000452:	429a      	cmp	r2, r3
 8000454:	f47f af1a 	bne.w	800028c <decodeProtocol+0x10>
        }
    }
}
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000320 	.word	0x20000320
 8000468:	20000744 	.word	0x20000744

0800046c <decodeData>:

void decodeData(_sDato *datosCom){
 800046c:	b480      	push	{r7}
 800046e:	b091      	sub	sp, #68	; 0x44
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
    uint8_t auxBuffTx[50], indiceAux=0, checksum;
 8000474:	2300      	movs	r3, #0
 8000476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    auxBuffTx[indiceAux++]='U';
 800047a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000484:	3340      	adds	r3, #64	; 0x40
 8000486:	443b      	add	r3, r7
 8000488:	2255      	movs	r2, #85	; 0x55
 800048a:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='N';
 800048e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000498:	3340      	adds	r3, #64	; 0x40
 800049a:	443b      	add	r3, r7
 800049c:	224e      	movs	r2, #78	; 0x4e
 800049e:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='E';
 80004a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80004ac:	3340      	adds	r3, #64	; 0x40
 80004ae:	443b      	add	r3, r7
 80004b0:	2245      	movs	r2, #69	; 0x45
 80004b2:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='R';
 80004b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80004c0:	3340      	adds	r3, #64	; 0x40
 80004c2:	443b      	add	r3, r7
 80004c4:	2252      	movs	r2, #82	; 0x52
 80004c6:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]=0;
 80004ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80004d4:	3340      	adds	r3, #64	; 0x40
 80004d6:	443b      	add	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]=':';
 80004de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80004e8:	3340      	adds	r3, #64	; 0x40
 80004ea:	443b      	add	r3, r7
 80004ec:	223a      	movs	r2, #58	; 0x3a
 80004ee:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='9';
 80004f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80004fc:	3340      	adds	r3, #64	; 0x40
 80004fe:	443b      	add	r3, r7
 8000500:	2239      	movs	r2, #57	; 0x39
 8000502:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='7';
 8000506:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000510:	3340      	adds	r3, #64	; 0x40
 8000512:	443b      	add	r3, r7
 8000514:	2237      	movs	r2, #55	; 0x37
 8000516:	f803 2c38 	strb.w	r2, [r3, #-56]

    switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	3304      	adds	r3, #4
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	79db      	ldrb	r3, [r3, #7]
 8000526:	2bf0      	cmp	r3, #240	; 0xf0
 8000528:	d002      	beq.n	8000530 <decodeData+0xc4>
 800052a:	2bf1      	cmp	r3, #241	; 0xf1
 800052c:	d017      	beq.n	800055e <decodeData+0xf2>
 800052e:	e023      	b.n	8000578 <decodeData+0x10c>
        case ALIVE:
            auxBuffTx[indiceAux++] = ALIVE;
 8000530:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800053a:	3340      	adds	r3, #64	; 0x40
 800053c:	443b      	add	r3, r7
 800053e:	22f0      	movs	r2, #240	; 0xf0
 8000540:	f803 2c38 	strb.w	r2, [r3, #-56]
            auxBuffTx[indiceAux++] = ACKNOWLEDGE;
 8000544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800054e:	3340      	adds	r3, #64	; 0x40
 8000550:	443b      	add	r3, r7
 8000552:	220d      	movs	r2, #13
 8000554:	f803 2c38 	strb.w	r2, [r3, #-56]
            auxBuffTx[bytesSent] = 0x05;
 8000558:	2305      	movs	r3, #5
 800055a:	733b      	strb	r3, [r7, #12]
            break;
 800055c:	e019      	b.n	8000592 <decodeData+0x126>
        case FIRMWARE:
        	auxBuffTx[indiceAux++] = FIRMWARE;
 800055e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000568:	3340      	adds	r3, #64	; 0x40
 800056a:	443b      	add	r3, r7
 800056c:	22f1      	movs	r2, #241	; 0xf1
 800056e:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[bytesSent] = 0x04;
 8000572:	2304      	movs	r3, #4
 8000574:	733b      	strb	r3, [r7, #12]
        	break;
 8000576:	e00c      	b.n	8000592 <decodeData+0x126>
        default:
			auxBuffTx[indiceAux++] = UNKNOWNCOMMAND;
 8000578:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000582:	3340      	adds	r3, #64	; 0x40
 8000584:	443b      	add	r3, r7
 8000586:	22ff      	movs	r2, #255	; 0xff
 8000588:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[bytesSent] = 0x04;
 800058c:	2304      	movs	r3, #4
 800058e:	733b      	strb	r3, [r7, #12]
			break;
 8000590:	bf00      	nop
	}
    checksum = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(uint8_t a=0; a<indiceAux; a++)
 8000598:	2300      	movs	r3, #0
 800059a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800059e:	e021      	b.n	80005e4 <decodeData+0x178>
	{
		checksum ^= auxBuffTx[a];
 80005a0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80005a4:	3340      	adds	r3, #64	; 0x40
 80005a6:	443b      	add	r3, r7
 80005a8:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80005b0:	4053      	eors	r3, r2
 80005b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		datosCom->bufferTx[datosCom->indexWriteTx++] = auxBuffTx[a];
 80005b6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	1c59      	adds	r1, r3, #1
 80005c0:	b2c8      	uxtb	r0, r1
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	7148      	strb	r0, [r1, #5]
 80005c6:	4619      	mov	r1, r3
 80005c8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80005cc:	443b      	add	r3, r7
 80005ce:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	440b      	add	r3, r1
 80005d6:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	for(uint8_t a=0; a<indiceAux; a++)
 80005da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80005de:	3301      	adds	r3, #1
 80005e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80005e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80005e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d3d7      	bcc.n	80005a0 <decodeData+0x134>
	}
	datosCom->bufferTx[datosCom->indexWriteTx++] = checksum;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	b2d1      	uxtb	r1, r2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7151      	strb	r1, [r2, #5]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000606:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

}
 800060a:	bf00      	nop
 800060c:	3744      	adds	r7, #68	; 0x44
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <communicationTask>:

void communicationTask(_sDato *datosCom, uint8_t source){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	if (datosCom->indexReadRx != datosCom->indexWriteRx)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791a      	ldrb	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	429a      	cmp	r2, r3
 800062a:	d002      	beq.n	8000632 <communicationTask+0x1e>
		decodeProtocol(datosCom);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fe25 	bl	800027c <decodeProtocol>

	if (source == viaUART){
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d11a      	bne.n	800066e <communicationTask+0x5a>
		if (datosCom->indexReadTx != datosCom->indexWriteTx){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799a      	ldrb	r2, [r3, #6]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	429a      	cmp	r2, r3
 8000642:	d028      	beq.n	8000696 <communicationTask+0x82>
			if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <communicationTask+0x8c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064e:	2b80      	cmp	r3, #128	; 0x80
 8000650:	d121      	bne.n	8000696 <communicationTask+0x82>
				USART1->DR = datosCom->bufferTx[datosCom->indexReadTx++];
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	799b      	ldrb	r3, [r3, #6]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	b2d1      	uxtb	r1, r2
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7191      	strb	r1, [r2, #6]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <communicationTask+0x90>)
 800066a:	605a      	str	r2, [r3, #4]
			if ((CDC_Transmit_FS(datosComUSB.bufferRx, datosComUSB.indexWriteRx)) == USBD_OK){
				datosCom->newData = false;
			}
		}
	}
}
 800066c:	e013      	b.n	8000696 <communicationTask+0x82>
	else if (source == viaUSB){
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d110      	bne.n	8000696 <communicationTask+0x82>
		if (datosCom->newData == true){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10c      	bne.n	8000696 <communicationTask+0x82>
			if ((CDC_Transmit_FS(datosComUSB.bufferRx, datosComUSB.indexWriteRx)) == USBD_OK){
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <communicationTask+0x94>)
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <communicationTask+0x98>)
 8000686:	f009 fd91 	bl	800a1ac <CDC_Transmit_FS>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <communicationTask+0x82>
				datosCom->newData = false;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200002d8 	.word	0x200002d8
 80006a4:	40013800 	.word	0x40013800
 80006a8:	2000052c 	.word	0x2000052c
 80006ac:	20000533 	.word	0x20000533

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fd84 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f876 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 fac4 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c0:	f000 faa4 	bl	8000c0c <MX_DMA_Init>
  MX_TIM1_Init();
 80006c4:	f000 f9ae 	bl	8000a24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 fa76 	bl	8000bb8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006cc:	f009 fc48 	bl	8009f60 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80006d0:	f000 f8c8 	bl	8000864 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006d4:	f000 f968 	bl	80009a8 <MX_ADC2_Init>
  MX_TIM4_Init();
 80006d8:	f000 f9f4 	bl	8000ac4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006dc:	4828      	ldr	r0, [pc, #160]	; (8000780 <main+0xd0>)
 80006de:	f004 f963 	bl	80049a8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <main+0xd4>)
 80006e4:	78db      	ldrb	r3, [r3, #3]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <main+0xd4>)
 80006ea:	4413      	add	r3, r2
 80006ec:	3307      	adds	r3, #7
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	4825      	ldr	r0, [pc, #148]	; (8000788 <main+0xd8>)
 80006f4:	f004 fff0 	bl	80056d8 <HAL_UART_Receive_IT>
  CDC_AttachRxData(USB_Receive);
 80006f8:	4824      	ldr	r0, [pc, #144]	; (800078c <main+0xdc>)
 80006fa:	f009 fd7d 	bl	800a1f8 <CDC_AttachRxData>
  // START CONVERSION -> CALL EVERY 250 US (fs = 4kHz)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 80006fe:	2208      	movs	r2, #8
 8000700:	4923      	ldr	r1, [pc, #140]	; (8000790 <main+0xe0>)
 8000702:	4824      	ldr	r0, [pc, #144]	; (8000794 <main+0xe4>)
 8000704:	f000 fe96 	bl	8001434 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!time10ms)						// Every 10 ms
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <main+0xe8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d12e      	bne.n	800076e <main+0xbe>
	  {
		  if (!time100ms)					// Every 100 ms
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0xec>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d121      	bne.n	800075c <main+0xac>
		  {
			  heartbeatTask();
 8000718:	f7ff fd84 	bl	8000224 <heartbeatTask>
			  time100ms = 10;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <main+0xec>)
 800071e:	220a      	movs	r2, #10
 8000720:	701a      	strb	r2, [r3, #0]
			  if (!time500ms)				// Every 500 ms
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <main+0xf0>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d111      	bne.n	800074e <main+0x9e>
			  {
				  datosComSerie.bufferRx[datosComSerie.indexWriteRx+POSID]=ALIVE;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <main+0xd4>)
 800072c:	78db      	ldrb	r3, [r3, #3]
 800072e:	3304      	adds	r3, #4
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <main+0xd4>)
 8000732:	4413      	add	r3, r2
 8000734:	22f0      	movs	r2, #240	; 0xf0
 8000736:	71da      	strb	r2, [r3, #7]
				  datosComSerie.indexStart=datosComSerie.indexWriteRx;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <main+0xd4>)
 800073a:	78da      	ldrb	r2, [r3, #3]
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <main+0xd4>)
 800073e:	705a      	strb	r2, [r3, #1]
				  decodeData(&datosComSerie);
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <main+0xd4>)
 8000742:	f7ff fe93 	bl	800046c <decodeData>
				  time500ms = 5;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <main+0xf0>)
 8000748:	2205      	movs	r2, #5
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e00c      	b.n	8000768 <main+0xb8>
			  }
			  else
			  {
				  time500ms--;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <main+0xf0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <main+0xf0>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e005      	b.n	8000768 <main+0xb8>
			  }
		  }
		  else
		  {
			  time100ms--;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <main+0xec>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <main+0xec>)
 8000766:	701a      	strb	r2, [r3, #0]
		  }
		  time10ms = 40;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <main+0xe8>)
 800076a:	2228      	movs	r2, #40	; 0x28
 800076c:	701a      	strb	r2, [r3, #0]
	  }
	  communicationTask(&datosComSerie, viaUART);
 800076e:	2100      	movs	r1, #0
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <main+0xd4>)
 8000772:	f7ff ff4f 	bl	8000614 <communicationTask>
	  communicationTask(&datosComUSB, viaUSB);
 8000776:	2102      	movs	r1, #2
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <main+0xf4>)
 800077a:	f7ff ff4b 	bl	8000614 <communicationTask>
	  if (!time10ms)						// Every 10 ms
 800077e:	e7c3      	b.n	8000708 <main+0x58>
 8000780:	20000248 	.word	0x20000248
 8000784:	20000324 	.word	0x20000324
 8000788:	200002d8 	.word	0x200002d8
 800078c:	080001cd 	.word	0x080001cd
 8000790:	20000734 	.word	0x20000734
 8000794:	200001a4 	.word	0x200001a4
 8000798:	20000000 	.word	0x20000000
 800079c:	20000001 	.word	0x20000001
 80007a0:	20000002 	.word	0x20000002
 80007a4:	2000052c 	.word	0x2000052c

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b2:	2228      	movs	r2, #40	; 0x28
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a f8e4 	bl	800a984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e6:	2301      	movs	r3, #1
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fbbc 	bl	8003f7c <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800080a:	f000 fac7 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2102      	movs	r1, #2
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fe28 	bl	8004480 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000836:	f000 fab1 	bl	8000d9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800083a:	2312      	movs	r3, #18
 800083c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800083e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000842:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f003 ffa6 	bl	800479c <HAL_RCCEx_PeriphCLKConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000856:	f000 faa1 	bl	8000d9c <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000874:	4b4a      	ldr	r3, [pc, #296]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000876:	4a4b      	ldr	r2, [pc, #300]	; (80009a4 <MX_ADC1_Init+0x140>)
 8000878:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <MX_ADC1_Init+0x13c>)
 800087c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b47      	ldr	r3, [pc, #284]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000884:	2200      	movs	r2, #0
 8000886:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <MX_ADC1_Init+0x13c>)
 800088a:	2200      	movs	r2, #0
 800088c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088e:	4b44      	ldr	r3, [pc, #272]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000890:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000894:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800089c:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <MX_ADC1_Init+0x13c>)
 800089e:	2208      	movs	r2, #8
 80008a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a2:	483f      	ldr	r0, [pc, #252]	; (80009a0 <MX_ADC1_Init+0x13c>)
 80008a4:	f000 fcee 	bl	8001284 <HAL_ADC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80008ae:	f000 fa75 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4837      	ldr	r0, [pc, #220]	; (80009a0 <MX_ADC1_Init+0x13c>)
 80008c4:	f000 fea6 	bl	8001614 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 fa65 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4830      	ldr	r0, [pc, #192]	; (80009a0 <MX_ADC1_Init+0x13c>)
 80008e0:	f000 fe98 	bl	8001614 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80008ea:	f000 fa57 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008f2:	2303      	movs	r3, #3
 80008f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <MX_ADC1_Init+0x13c>)
 80008fc:	f000 fe8a 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000906:	f000 fa49 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800090a:	2303      	movs	r3, #3
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800090e:	2304      	movs	r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4822      	ldr	r0, [pc, #136]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000918:	f000 fe7c 	bl	8001614 <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000922:	f000 fa3b 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000926:	2304      	movs	r3, #4
 8000928:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800092a:	2305      	movs	r3, #5
 800092c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	481b      	ldr	r0, [pc, #108]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000934:	f000 fe6e 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800093e:	f000 fa2d 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000942:	2305      	movs	r3, #5
 8000944:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000946:	2306      	movs	r3, #6
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4814      	ldr	r0, [pc, #80]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000950:	f000 fe60 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800095a:	f000 fa1f 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800095e:	2306      	movs	r3, #6
 8000960:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000962:	2307      	movs	r3, #7
 8000964:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_ADC1_Init+0x13c>)
 800096c:	f000 fe52 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000976:	f000 fa11 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800097a:	2307      	movs	r3, #7
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800097e:	2308      	movs	r3, #8
 8000980:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_ADC1_Init+0x13c>)
 8000988:	f000 fe44 	bl	8001614 <HAL_ADC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000992:	f000 fa03 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001a4 	.word	0x200001a4
 80009a4:	40012400 	.word	0x40012400

080009a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009ba:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <MX_ADC2_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC2_Init+0x74>)
 80009e6:	f000 fc4d 	bl	8001284 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f9d4 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC2_Init+0x74>)
 8000a06:	f000 fe05 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000a10:	f000 f9c4 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001d4 	.word	0x200001d4
 8000a20:	40012800 	.word	0x40012800

08000a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <MX_TIM1_Init+0x9c>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a48:	2247      	movs	r2, #71	; 0x47
 8000a4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a54:	22fa      	movs	r2, #250	; 0xfa
 8000a56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a6c:	f003 ff4c 	bl	8004908 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000a76:	f000 f991 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a88:	f004 f9fa 	bl	8004e80 <HAL_TIM_ConfigClockSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000a92:	f000 f983 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM1_Init+0x98>)
 8000aa4:	f004 fd58 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000aae:	f000 f975 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000248 	.word	0x20000248
 8000ac0:	40012c00 	.word	0x40012c00

08000ac4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000ae8:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <MX_TIM4_Init+0xf0>)
 8000aea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000aec:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b0c:	4828      	ldr	r0, [pc, #160]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b0e:	f003 ff9d 	bl	8004a4c <HAL_TIM_PWM_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f940 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b2c:	f004 fd14 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b36:	f000 f931 	bl	8000d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b52:	f004 f8d3 	bl	8004cfc <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000b5c:	f000 f91e 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2204      	movs	r2, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b68:	f004 f8c8 	bl	8004cfc <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b72:	f000 f913 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2208      	movs	r2, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b7e:	f004 f8bd 	bl	8004cfc <HAL_TIM_PWM_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000b88:	f000 f908 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	220c      	movs	r2, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000b94:	f004 f8b2 	bl	8004cfc <HAL_TIM_PWM_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000b9e:	f000 f8fd 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <MX_TIM4_Init+0xec>)
 8000ba4:	f000 fa08 	bl	8000fb8 <HAL_TIM_MspPostInit>

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000290 	.word	0x20000290
 8000bb4:	40000800 	.word	0x40000800

08000bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <MX_USART1_UART_Init+0x50>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	f004 fd22 	bl	8005638 <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f000 f8cf 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200002d8 	.word	0x200002d8
 8000c08:	40013800 	.word	0x40013800

08000c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_DMA_Init+0x38>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <MX_DMA_Init+0x38>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_DMA_Init+0x38>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200b      	movs	r0, #11
 8000c30:	f000 ffc1 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c34:	200b      	movs	r0, #11
 8000c36:	f000 ffda 	bl	8001bee <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b47      	ldr	r3, [pc, #284]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c74:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a43      	ldr	r2, [pc, #268]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b41      	ldr	r3, [pc, #260]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0320 	and.w	r3, r3, #32
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a3d      	ldr	r2, [pc, #244]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a37      	ldr	r2, [pc, #220]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <MX_GPIO_Init+0x140>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	4832      	ldr	r0, [pc, #200]	; (8000d8c <MX_GPIO_Init+0x144>)
 8000cc4:	f001 fbd4 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHIP_ENABLE_ESP01_GPIO_Port, CHIP_ENABLE_ESP01_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	4830      	ldr	r0, [pc, #192]	; (8000d90 <MX_GPIO_Init+0x148>)
 8000cd0:	f001 fbce 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4827      	ldr	r0, [pc, #156]	; (8000d8c <MX_GPIO_Init+0x144>)
 8000cee:	f001 fa3b 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4823      	ldr	r0, [pc, #140]	; (8000d94 <MX_GPIO_Init+0x14c>)
 8000d08:	f001 fa2e 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <MX_GPIO_Init+0x14c>)
 8000d22:	f001 fa21 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHIP_ENABLE_ESP01_Pin */
  GPIO_InitStruct.Pin = CHIP_ENABLE_ESP01_Pin;
 8000d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHIP_ENABLE_ESP01_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4814      	ldr	r0, [pc, #80]	; (8000d90 <MX_GPIO_Init+0x148>)
 8000d40:	f001 fa12 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d44:	2330      	movs	r3, #48	; 0x30
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	480f      	ldr	r0, [pc, #60]	; (8000d94 <MX_GPIO_Init+0x14c>)
 8000d58:	f001 fa06 	bl	8002168 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_GPIO_Init+0x150>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <MX_GPIO_Init+0x150>)
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40011000 	.word	0x40011000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40010000 	.word	0x40010000

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <HAL_MspInit+0x5c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_MspInit+0x60>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_MspInit+0x60>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a3c      	ldr	r2, [pc, #240]	; (8000f18 <HAL_ADC_MspInit+0x10c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d14a      	bne.n	8000ec2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a3a      	ldr	r2, [pc, #232]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e5c:	23ff      	movs	r3, #255	; 0xff
 8000e5e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e60:	2303      	movs	r3, #3
 8000e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482d      	ldr	r0, [pc, #180]	; (8000f20 <HAL_ADC_MspInit+0x114>)
 8000e6c:	f001 f97c 	bl	8002168 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e70:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000e72:	4a2d      	ldr	r2, [pc, #180]	; (8000f28 <HAL_ADC_MspInit+0x11c>)
 8000e74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ea4:	481f      	ldr	r0, [pc, #124]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000ea6:	f000 febd 	bl	8001c24 <HAL_DMA_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000eb0:	f7ff ff74 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000eb8:	621a      	str	r2, [r3, #32]
 8000eba:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_ADC_MspInit+0x118>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ec0:	e026      	b.n	8000f10 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_ADC_MspInit+0x120>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d121      	bne.n	8000f10 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_ADC_MspInit+0x110>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efc:	2304      	movs	r3, #4
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f00:	2303      	movs	r3, #3
 8000f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_ADC_MspInit+0x114>)
 8000f0c:	f001 f92c 	bl	8002168 <HAL_GPIO_Init>
}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40012400 	.word	0x40012400
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010800 	.word	0x40010800
 8000f24:	20000204 	.word	0x20000204
 8000f28:	40020008 	.word	0x40020008
 8000f2c:	40012800 	.word	0x40012800

08000f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_TIM_Base_MspInit+0x44>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d113      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_TIM_Base_MspInit+0x48>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <HAL_TIM_Base_MspInit+0x48>)
 8000f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_Base_MspInit+0x48>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2019      	movs	r0, #25
 8000f60:	f000 fe29 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f64:	2019      	movs	r0, #25
 8000f66:	f000 fe42 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40012c00 	.word	0x40012c00
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <HAL_TIM_PWM_MspInit+0x34>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_TIM_PWM_MspInit+0x38>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_TIM_PWM_MspInit+0x38>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_TIM_PWM_MspInit+0x38>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40000800 	.word	0x40000800
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_TIM_MspPostInit+0x5c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d118      	bne.n	800100a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_TIM_MspPostInit+0x60>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_TIM_MspPostInit+0x60>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_TIM_MspPostInit+0x60>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ff0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ff4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_TIM_MspPostInit+0x64>)
 8001006:	f001 f8af 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40000800 	.word	0x40000800
 8001018:	40021000 	.word	0x40021000
 800101c:	40010c00 	.word	0x40010c00

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a20      	ldr	r2, [pc, #128]	; (80010bc <HAL_UART_MspInit+0x9c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d139      	bne.n	80010b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <HAL_UART_MspInit+0xa0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <HAL_UART_MspInit+0xa0>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UART_MspInit+0xa0>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_UART_MspInit+0xa0>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <HAL_UART_MspInit+0xa0>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_UART_MspInit+0xa0>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <HAL_UART_MspInit+0xa4>)
 8001086:	f001 f86f 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800108a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <HAL_UART_MspInit+0xa4>)
 80010a0:	f001 f862 	bl	8002168 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2025      	movs	r0, #37	; 0x25
 80010aa:	f000 fd84 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ae:	2025      	movs	r0, #37	; 0x25
 80010b0:	f000 fd9d 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010800 	.word	0x40010800

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110e:	f000 f89d 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <DMA1_Channel1_IRQHandler+0x10>)
 800111e:	f000 feef 	bl	8001f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000204 	.word	0x20000204

0800112c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001132:	f001 fada 	bl	80026ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000e20 	.word	0x20000e20

08001140 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM1_UP_IRQHandler+0x10>)
 8001146:	f003 fcd0 	bl	8004aea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000248 	.word	0x20000248

08001154 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <USART1_IRQHandler+0x10>)
 800115a:	f004 fae3 	bl	8005724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002d8 	.word	0x200002d8

08001168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff fff8 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117a:	490c      	ldr	r1, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001190:	4c09      	ldr	r4, [pc, #36]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f009 fbf9 	bl	800a994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a2:	f7ff fa85 	bl	80006b0 <main>
  bx lr
 80011a6:	4770      	bx	lr
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80011b0:	0800aa8c 	.word	0x0800aa8c
  ldr r2, =_sbss
 80011b4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80011b8:	20001330 	.word	0x20001330

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 fce5 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fde4 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fcfd 	bl	8001c0a <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 fcc5 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000000c 	.word	0x2000000c
 8001244:	20000014 	.word	0x20000014
 8001248:	20000010 	.word	0x20000010

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000014 	.word	0x20000014
 800126c:	20000748 	.word	0x20000748

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000748 	.word	0x20000748

08001284 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e0be      	b.n	8001424 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fda2 	bl	8000e0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 faf5 	bl	80018b8 <ADC_ConversionStop_Disable>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 8099 	bne.w	8001412 <HAL_ADC_Init+0x18e>
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 8095 	bne.w	8001412 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f0:	f023 0302 	bic.w	r3, r3, #2
 80012f4:	f043 0202 	orr.w	r2, r3, #2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001304:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7b1b      	ldrb	r3, [r3, #12]
 800130a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800130c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4313      	orrs	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800131c:	d003      	beq.n	8001326 <HAL_ADC_Init+0xa2>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d102      	bne.n	800132c <HAL_ADC_Init+0xa8>
 8001326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132a:	e000      	b.n	800132e <HAL_ADC_Init+0xaa>
 800132c:	2300      	movs	r3, #0
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d119      	bne.n	8001370 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7b1b      	ldrb	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	3b01      	subs	r3, #1
 800134a:	035a      	lsls	r2, r3, #13
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	e00b      	b.n	8001370 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f043 0220 	orr.w	r2, r3, #32
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <HAL_ADC_Init+0x1a8>)
 800138c:	4013      	ands	r3, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	430b      	orrs	r3, r1
 8001396:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_Init+0x126>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d104      	bne.n	80013b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	051b      	lsls	r3, r3, #20
 80013b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_ADC_Init+0x1ac>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d10b      	bne.n	80013f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	f023 0303 	bic.w	r3, r3, #3
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ee:	e018      	b.n	8001422 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f023 0312 	bic.w	r3, r3, #18
 80013f8:	f043 0210 	orr.w	r2, r3, #16
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001410:	e007      	b.n	8001422 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	f043 0210 	orr.w	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001422:	7dfb      	ldrb	r3, [r7, #23]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	ffe1f7fd 	.word	0xffe1f7fd
 8001430:	ff1f0efe 	.word	0xff1f0efe

08001434 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a64      	ldr	r2, [pc, #400]	; (80015dc <HAL_ADC_Start_DMA+0x1a8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d004      	beq.n	8001458 <HAL_ADC_Start_DMA+0x24>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a63      	ldr	r2, [pc, #396]	; (80015e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d106      	bne.n	8001466 <HAL_ADC_Start_DMA+0x32>
 8001458:	4b60      	ldr	r3, [pc, #384]	; (80015dc <HAL_ADC_Start_DMA+0x1a8>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f040 80b3 	bne.w	80015cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_ADC_Start_DMA+0x40>
 8001470:	2302      	movs	r3, #2
 8001472:	e0ae      	b.n	80015d2 <HAL_ADC_Start_DMA+0x19e>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f9c1 	bl	8001804 <ADC_Enable>
 8001482:	4603      	mov	r3, r0
 8001484:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 809a 	bne.w	80015c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_ADC_Start_DMA+0x1ac>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d105      	bne.n	80014b8 <HAL_ADC_Start_DMA+0x84>
 80014ac:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <HAL_ADC_Start_DMA+0x1a8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d115      	bne.n	80014e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d026      	beq.n	8001520 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014e2:	e01d      	b.n	8001520 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a39      	ldr	r2, [pc, #228]	; (80015dc <HAL_ADC_Start_DMA+0x1a8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d004      	beq.n	8001504 <HAL_ADC_Start_DMA+0xd0>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d10d      	bne.n	8001520 <HAL_ADC_Start_DMA+0xec>
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <HAL_ADC_Start_DMA+0x1a8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001518:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	f023 0206 	bic.w	r2, r3, #6
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
 8001538:	e002      	b.n	8001540 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <HAL_ADC_Start_DMA+0x1b0>)
 800154e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <HAL_ADC_Start_DMA+0x1b4>)
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4a23      	ldr	r2, [pc, #140]	; (80015ec <HAL_ADC_Start_DMA+0x1b8>)
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f06f 0202 	mvn.w	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001578:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a18      	ldr	r0, [r3, #32]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	334c      	adds	r3, #76	; 0x4c
 8001584:	4619      	mov	r1, r3
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f000 fba5 	bl	8001cd8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001598:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800159c:	d108      	bne.n	80015b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015ae:	e00f      	b.n	80015d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015c0:	e006      	b.n	80015d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80015ca:	e001      	b.n	80015d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40012400 	.word	0x40012400
 80015e0:	40012800 	.word	0x40012800
 80015e4:	0800193b 	.word	0x0800193b
 80015e8:	080019b7 	.word	0x080019b7
 80015ec:	080019d3 	.word	0x080019d3

080015f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x20>
 8001630:	2302      	movs	r3, #2
 8001632:	e0dc      	b.n	80017ee <HAL_ADC_ConfigChannel+0x1da>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b06      	cmp	r3, #6
 8001642:	d81c      	bhi.n	800167e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	3b05      	subs	r3, #5
 8001656:	221f      	movs	r2, #31
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	4019      	ands	r1, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b05      	subs	r3, #5
 8001670:	fa00 f203 	lsl.w	r2, r0, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
 800167c:	e03c      	b.n	80016f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d81c      	bhi.n	80016c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	3b23      	subs	r3, #35	; 0x23
 8001698:	221f      	movs	r2, #31
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	4019      	ands	r1, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b23      	subs	r3, #35	; 0x23
 80016b2:	fa00 f203 	lsl.w	r2, r0, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
 80016be:	e01b      	b.n	80016f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b41      	subs	r3, #65	; 0x41
 80016d2:	221f      	movs	r2, #31
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	4019      	ands	r1, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b41      	subs	r3, #65	; 0x41
 80016ec:	fa00 f203 	lsl.w	r2, r0, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d91c      	bls.n	800173a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3b1e      	subs	r3, #30
 8001712:	2207      	movs	r2, #7
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	4019      	ands	r1, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6898      	ldr	r0, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	3b1e      	subs	r3, #30
 800172c:	fa00 f203 	lsl.w	r2, r0, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	e019      	b.n	800176e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6919      	ldr	r1, [r3, #16]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	2207      	movs	r2, #7
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6898      	ldr	r0, [r3, #8]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800177a:	2b11      	cmp	r3, #17
 800177c:	d132      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d126      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d11a      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_ADC_ConfigChannel+0x1e8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_ADC_ConfigChannel+0x1ec>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	0c9a      	lsrs	r2, r3, #18
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c4:	e002      	b.n	80017cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f9      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x1b2>
 80017d2:	e007      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f043 0220 	orr.w	r2, r3, #32
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40012400 	.word	0x40012400
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	431bde83 	.word	0x431bde83

08001804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b01      	cmp	r3, #1
 8001820:	d040      	beq.n	80018a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0201 	orr.w	r2, r2, #1
 8001830:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <ADC_Enable+0xac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <ADC_Enable+0xb0>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001840:	e002      	b.n	8001848 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3b01      	subs	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800184e:	f7ff fd0f 	bl	8001270 <HAL_GetTick>
 8001852:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001854:	e01f      	b.n	8001896 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001856:	f7ff fd0b 	bl	8001270 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d918      	bls.n	8001896 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d011      	beq.n	8001896 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e007      	b.n	80018a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d1d8      	bne.n	8001856 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	431bde83 	.word	0x431bde83

080018b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d12e      	bne.n	8001930 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018e2:	f7ff fcc5 	bl	8001270 <HAL_GetTick>
 80018e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e8:	e01b      	b.n	8001922 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ea:	f7ff fcc1 	bl	8001270 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d914      	bls.n	8001922 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10d      	bne.n	8001922 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e007      	b.n	8001932 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d0dc      	beq.n	80018ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001950:	2b00      	cmp	r3, #0
 8001952:	d127      	bne.n	80019a4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800196a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800196e:	d115      	bne.n	800199c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001974:	2b00      	cmp	r3, #0
 8001976:	d111      	bne.n	800199c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7fe fc37 	bl	8000210 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019a2:	e004      	b.n	80019ae <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fe13 	bl	80015f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff fe02 	bl	8001602 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <__NVIC_EnableIRQ+0x34>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff90 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff2d 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff42 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff90 	bl	8001af8 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff35 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e043      	b.n	8001cc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_DMA_Init+0xa8>)
 8001c42:	4413      	add	r3, r2
 8001c44:	4a22      	ldr	r2, [pc, #136]	; (8001cd0 <HAL_DMA_Init+0xac>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	009a      	lsls	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_DMA_Init+0xb0>)
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	bffdfff8 	.word	0xbffdfff8
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DMA_Start_IT+0x20>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e04b      	b.n	8001d90 <HAL_DMA_Start_IT+0xb8>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d13a      	bne.n	8001d82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f9eb 	bl	800210c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 020e 	orr.w	r2, r2, #14
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e00f      	b.n	8001d70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0204 	bic.w	r2, r2, #4
 8001d5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 020a 	orr.w	r2, r2, #10
 8001d6e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e005      	b.n	8001d8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d008      	beq.n	8001dc2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2204      	movs	r2, #4
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e020      	b.n	8001e04 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 020e 	bic.w	r2, r2, #14
 8001dd0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d005      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	e051      	b.n	8001ed8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 020e 	bic.w	r2, r2, #14
 8001e42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_DMA_Abort_IT+0xd4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d029      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0xa2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <HAL_DMA_Abort_IT+0xd8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <HAL_DMA_Abort_IT+0x9e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_DMA_Abort_IT+0xdc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01a      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0x98>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <HAL_DMA_Abort_IT+0xe0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d012      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x92>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_DMA_Abort_IT+0xe4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00a      	beq.n	8001e9c <HAL_DMA_Abort_IT+0x8c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ef8 <HAL_DMA_Abort_IT+0xe8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d102      	bne.n	8001e96 <HAL_DMA_Abort_IT+0x86>
 8001e90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e94:	e00e      	b.n	8001eb4 <HAL_DMA_Abort_IT+0xa4>
 8001e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e9a:	e00b      	b.n	8001eb4 <HAL_DMA_Abort_IT+0xa4>
 8001e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea0:	e008      	b.n	8001eb4 <HAL_DMA_Abort_IT+0xa4>
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	e005      	b.n	8001eb4 <HAL_DMA_Abort_IT+0xa4>
 8001ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eac:	e002      	b.n	8001eb4 <HAL_DMA_Abort_IT+0xa4>
 8001eae:	2310      	movs	r3, #16
 8001eb0:	e000      	b.n	8001eb4 <HAL_DMA_Abort_IT+0xa4>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_DMA_Abort_IT+0xec>)
 8001eb6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
    } 
  }
  return status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40020008 	.word	0x40020008
 8001ee8:	4002001c 	.word	0x4002001c
 8001eec:	40020030 	.word	0x40020030
 8001ef0:	40020044 	.word	0x40020044
 8001ef4:	40020058 	.word	0x40020058
 8001ef8:	4002006c 	.word	0x4002006c
 8001efc:	40020000 	.word	0x40020000

08001f00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d04f      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0xc8>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a66      	ldr	r2, [pc, #408]	; (80020f0 <HAL_DMA_IRQHandler+0x1f0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d029      	beq.n	8001fae <HAL_DMA_IRQHandler+0xae>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a65      	ldr	r2, [pc, #404]	; (80020f4 <HAL_DMA_IRQHandler+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <HAL_DMA_IRQHandler+0xaa>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a63      	ldr	r2, [pc, #396]	; (80020f8 <HAL_DMA_IRQHandler+0x1f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01a      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0xa4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a62      	ldr	r2, [pc, #392]	; (80020fc <HAL_DMA_IRQHandler+0x1fc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d012      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x9e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a60      	ldr	r2, [pc, #384]	; (8002100 <HAL_DMA_IRQHandler+0x200>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00a      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x98>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5f      	ldr	r2, [pc, #380]	; (8002104 <HAL_DMA_IRQHandler+0x204>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d102      	bne.n	8001f92 <HAL_DMA_IRQHandler+0x92>
 8001f8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f90:	e00e      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xb0>
 8001f92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f96:	e00b      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xb0>
 8001f98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f9c:	e008      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xb0>
 8001f9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa2:	e005      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xb0>
 8001fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa8:	e002      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xb0>
 8001faa:	2340      	movs	r3, #64	; 0x40
 8001fac:	e000      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xb0>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	4a55      	ldr	r2, [pc, #340]	; (8002108 <HAL_DMA_IRQHandler+0x208>)
 8001fb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8094 	beq.w	80020e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc6:	e08e      	b.n	80020e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	2202      	movs	r2, #2
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d056      	beq.n	8002086 <HAL_DMA_IRQHandler+0x186>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d051      	beq.n	8002086 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 020a 	bic.w	r2, r2, #10
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a38      	ldr	r2, [pc, #224]	; (80020f0 <HAL_DMA_IRQHandler+0x1f0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d029      	beq.n	8002066 <HAL_DMA_IRQHandler+0x166>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a37      	ldr	r2, [pc, #220]	; (80020f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <HAL_DMA_IRQHandler+0x162>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a35      	ldr	r2, [pc, #212]	; (80020f8 <HAL_DMA_IRQHandler+0x1f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01a      	beq.n	800205c <HAL_DMA_IRQHandler+0x15c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a34      	ldr	r2, [pc, #208]	; (80020fc <HAL_DMA_IRQHandler+0x1fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d012      	beq.n	8002056 <HAL_DMA_IRQHandler+0x156>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a32      	ldr	r2, [pc, #200]	; (8002100 <HAL_DMA_IRQHandler+0x200>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00a      	beq.n	8002050 <HAL_DMA_IRQHandler+0x150>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a31      	ldr	r2, [pc, #196]	; (8002104 <HAL_DMA_IRQHandler+0x204>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d102      	bne.n	800204a <HAL_DMA_IRQHandler+0x14a>
 8002044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002048:	e00e      	b.n	8002068 <HAL_DMA_IRQHandler+0x168>
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	e00b      	b.n	8002068 <HAL_DMA_IRQHandler+0x168>
 8002050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002054:	e008      	b.n	8002068 <HAL_DMA_IRQHandler+0x168>
 8002056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205a:	e005      	b.n	8002068 <HAL_DMA_IRQHandler+0x168>
 800205c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002060:	e002      	b.n	8002068 <HAL_DMA_IRQHandler+0x168>
 8002062:	2320      	movs	r3, #32
 8002064:	e000      	b.n	8002068 <HAL_DMA_IRQHandler+0x168>
 8002066:	2302      	movs	r3, #2
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_DMA_IRQHandler+0x208>)
 800206a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d034      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002084:	e02f      	b.n	80020e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2208      	movs	r2, #8
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d028      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x1e8>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d023      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 020e 	bic.w	r2, r2, #14
 80020ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
    }
  }
  return;
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
}
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020008 	.word	0x40020008
 80020f4:	4002001c 	.word	0x4002001c
 80020f8:	40020030 	.word	0x40020030
 80020fc:	40020044 	.word	0x40020044
 8002100:	40020058 	.word	0x40020058
 8002104:	4002006c 	.word	0x4002006c
 8002108:	40020000 	.word	0x40020000

0800210c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d108      	bne.n	800214c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800214a:	e007      	b.n	800215c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
	...

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b08b      	sub	sp, #44	; 0x2c
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e169      	b.n	8002450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800217c:	2201      	movs	r2, #1
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8158 	bne.w	800244a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a9a      	ldr	r2, [pc, #616]	; (8002408 <HAL_GPIO_Init+0x2a0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d05e      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021a4:	4a98      	ldr	r2, [pc, #608]	; (8002408 <HAL_GPIO_Init+0x2a0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d875      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021aa:	4a98      	ldr	r2, [pc, #608]	; (800240c <HAL_GPIO_Init+0x2a4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d058      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021b0:	4a96      	ldr	r2, [pc, #600]	; (800240c <HAL_GPIO_Init+0x2a4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d86f      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021b6:	4a96      	ldr	r2, [pc, #600]	; (8002410 <HAL_GPIO_Init+0x2a8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d052      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021bc:	4a94      	ldr	r2, [pc, #592]	; (8002410 <HAL_GPIO_Init+0x2a8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d869      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021c2:	4a94      	ldr	r2, [pc, #592]	; (8002414 <HAL_GPIO_Init+0x2ac>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d04c      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021c8:	4a92      	ldr	r2, [pc, #584]	; (8002414 <HAL_GPIO_Init+0x2ac>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d863      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021ce:	4a92      	ldr	r2, [pc, #584]	; (8002418 <HAL_GPIO_Init+0x2b0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d046      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021d4:	4a90      	ldr	r2, [pc, #576]	; (8002418 <HAL_GPIO_Init+0x2b0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d85d      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021da:	2b12      	cmp	r3, #18
 80021dc:	d82a      	bhi.n	8002234 <HAL_GPIO_Init+0xcc>
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d859      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021e2:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <HAL_GPIO_Init+0x80>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	08002263 	.word	0x08002263
 80021ec:	0800223d 	.word	0x0800223d
 80021f0:	0800224f 	.word	0x0800224f
 80021f4:	08002291 	.word	0x08002291
 80021f8:	08002297 	.word	0x08002297
 80021fc:	08002297 	.word	0x08002297
 8002200:	08002297 	.word	0x08002297
 8002204:	08002297 	.word	0x08002297
 8002208:	08002297 	.word	0x08002297
 800220c:	08002297 	.word	0x08002297
 8002210:	08002297 	.word	0x08002297
 8002214:	08002297 	.word	0x08002297
 8002218:	08002297 	.word	0x08002297
 800221c:	08002297 	.word	0x08002297
 8002220:	08002297 	.word	0x08002297
 8002224:	08002297 	.word	0x08002297
 8002228:	08002297 	.word	0x08002297
 800222c:	08002245 	.word	0x08002245
 8002230:	08002259 	.word	0x08002259
 8002234:	4a79      	ldr	r2, [pc, #484]	; (800241c <HAL_GPIO_Init+0x2b4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800223a:	e02c      	b.n	8002296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e029      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	3304      	adds	r3, #4
 800224a:	623b      	str	r3, [r7, #32]
          break;
 800224c:	e024      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	3308      	adds	r3, #8
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e01f      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	330c      	adds	r3, #12
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e01a      	b.n	8002298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800226a:	2304      	movs	r3, #4
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e013      	b.n	8002298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002278:	2308      	movs	r3, #8
 800227a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	611a      	str	r2, [r3, #16]
          break;
 8002282:	e009      	b.n	8002298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002284:	2308      	movs	r3, #8
 8002286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	615a      	str	r2, [r3, #20]
          break;
 800228e:	e003      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x130>
          break;
 8002296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2bff      	cmp	r3, #255	; 0xff
 800229c:	d801      	bhi.n	80022a2 <HAL_GPIO_Init+0x13a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_Init+0x13e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2bff      	cmp	r3, #255	; 0xff
 80022ac:	d802      	bhi.n	80022b4 <HAL_GPIO_Init+0x14c>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x152>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	3b08      	subs	r3, #8
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	210f      	movs	r1, #15
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	401a      	ands	r2, r3
 80022cc:	6a39      	ldr	r1, [r7, #32]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	431a      	orrs	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80b1 	beq.w	800244a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e8:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <HAL_GPIO_Init+0x2b8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_GPIO_Init+0x2b8>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_GPIO_Init+0x2b8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002300:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_GPIO_Init+0x2bc>)
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a40      	ldr	r2, [pc, #256]	; (8002428 <HAL_GPIO_Init+0x2c0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_GPIO_Init+0x1ec>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3f      	ldr	r2, [pc, #252]	; (800242c <HAL_GPIO_Init+0x2c4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00d      	beq.n	8002350 <HAL_GPIO_Init+0x1e8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3e      	ldr	r2, [pc, #248]	; (8002430 <HAL_GPIO_Init+0x2c8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <HAL_GPIO_Init+0x1e4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <HAL_GPIO_Init+0x2cc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_GPIO_Init+0x1e0>
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002348:	2304      	movs	r3, #4
 800234a:	e004      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 800234c:	2302      	movs	r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002354:	2300      	movs	r3, #0
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	f002 0203 	and.w	r2, r2, #3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4093      	lsls	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002366:	492f      	ldr	r1, [pc, #188]	; (8002424 <HAL_GPIO_Init+0x2bc>)
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	492c      	ldr	r1, [pc, #176]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	43db      	mvns	r3, r3
 8002396:	4928      	ldr	r1, [pc, #160]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002398:	4013      	ands	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4922      	ldr	r1, [pc, #136]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	491e      	ldr	r1, [pc, #120]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4918      	ldr	r1, [pc, #96]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4914      	ldr	r1, [pc, #80]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d021      	beq.n	800243c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e021      	b.n	800244a <HAL_GPIO_Init+0x2e2>
 8002406:	bf00      	nop
 8002408:	10320000 	.word	0x10320000
 800240c:	10310000 	.word	0x10310000
 8002410:	10220000 	.word	0x10220000
 8002414:	10210000 	.word	0x10210000
 8002418:	10120000 	.word	0x10120000
 800241c:	10110000 	.word	0x10110000
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	40010800 	.word	0x40010800
 800242c:	40010c00 	.word	0x40010c00
 8002430:	40011000 	.word	0x40011000
 8002434:	40011400 	.word	0x40011400
 8002438:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_GPIO_Init+0x304>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	43db      	mvns	r3, r3
 8002444:	4909      	ldr	r1, [pc, #36]	; (800246c <HAL_GPIO_Init+0x304>)
 8002446:	4013      	ands	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3301      	adds	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	f47f ae8e 	bne.w	800217c <HAL_GPIO_Init+0x14>
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	372c      	adds	r7, #44	; 0x2c
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40010400 	.word	0x40010400

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800248c:	e003      	b.n	8002496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	041a      	lsls	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	b08b      	sub	sp, #44	; 0x2c
 80024a4:	af06      	add	r7, sp, #24
 80024a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0f1      	b.n	8002696 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f007 ffb2 	bl	800a430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 fe5b 	bl	8006194 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	687e      	ldr	r6, [r7, #4]
 80024e6:	466d      	mov	r5, sp
 80024e8:	f106 0410 	add.w	r4, r6, #16
 80024ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	602b      	str	r3, [r5, #0]
 80024f4:	1d33      	adds	r3, r6, #4
 80024f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f003 fe25 	bl	8006148 <USB_CoreInit>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0c2      	b.n	8002696 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fe56 	bl	80061c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e040      	b.n	80025a4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	3301      	adds	r3, #1
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	3303      	adds	r3, #3
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	3338      	adds	r3, #56	; 0x38
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	333c      	adds	r3, #60	; 0x3c
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	3340      	adds	r3, #64	; 0x40
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3b9      	bcc.n	8002522 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e044      	b.n	800263e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3b5      	bcc.n	80025b4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	687e      	ldr	r6, [r7, #4]
 8002650:	466d      	mov	r5, sp
 8002652:	f106 0410 	add.w	r4, r6, #16
 8002656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	602b      	str	r3, [r5, #0]
 800265e:	1d33      	adds	r3, r6, #4
 8002660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002662:	6838      	ldr	r0, [r7, #0]
 8002664:	f003 fdbc 	bl	80061e0 <USB_DevInit>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e00d      	b.n	8002696 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f006 f83d 	bl	800870e <USB_DevDisconnect>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_PCD_Start+0x16>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e016      	b.n	80026e2 <HAL_PCD_Start+0x44>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 fd51 	bl	8006168 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80026c6:	2101      	movs	r1, #1
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f008 f924 	bl	800a916 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f006 f811 	bl	80086fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b088      	sub	sp, #32
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f006 f813 	bl	8008722 <USB_ReadInterrupts>
 80026fc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fb1b 	bl	8002d44 <PCD_EP_ISR_Handler>

    return;
 800270e:	e119      	b.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	2b00      	cmp	r3, #0
 8002718:	d013      	beq.n	8002742 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	b292      	uxth	r2, r2
 800272e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f007 fef7 	bl	800a526 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002738:	2100      	movs	r1, #0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f905 	bl	800294a <HAL_PCD_SetAddress>

    return;
 8002740:	e100      	b.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00c      	beq.n	8002766 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800275e:	b292      	uxth	r2, r2
 8002760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002764:	e0ee      	b.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00c      	beq.n	800278a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002782:	b292      	uxth	r2, r2
 8002784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002788:	e0dc      	b.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d027      	beq.n	80027e4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800279c:	b29a      	uxth	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	b292      	uxth	r2, r2
 80027a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0208 	bic.w	r2, r2, #8
 80027be:	b292      	uxth	r2, r2
 80027c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f007 fee7 	bl	800a598 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027dc:	b292      	uxth	r2, r2
 80027de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80027e2:	e0af      	b.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8083 	beq.w	80028f6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	77fb      	strb	r3, [r7, #31]
 80027f4:	e010      	b.n	8002818 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	7ffb      	ldrb	r3, [r7, #31]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	441a      	add	r2, r3
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	b292      	uxth	r2, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	3320      	adds	r3, #32
 800280c:	443b      	add	r3, r7
 800280e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002812:	7ffb      	ldrb	r3, [r7, #31]
 8002814:	3301      	adds	r3, #1
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	2b07      	cmp	r3, #7
 800281c:	d9eb      	bls.n	80027f6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	b292      	uxth	r2, r2
 8002832:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	b292      	uxth	r2, r2
 800284a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800284e:	bf00      	nop
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002858:	b29b      	uxth	r3, r3
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f6      	beq.n	8002850 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002874:	b292      	uxth	r2, r2
 8002876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800287a:	2300      	movs	r3, #0
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e00f      	b.n	80028a0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002880:	7ffb      	ldrb	r3, [r7, #31]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4611      	mov	r1, r2
 8002888:	7ffa      	ldrb	r2, [r7, #31]
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	440a      	add	r2, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	3320      	adds	r3, #32
 8002892:	443b      	add	r3, r7
 8002894:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002898:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800289a:	7ffb      	ldrb	r3, [r7, #31]
 800289c:	3301      	adds	r3, #1
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	7ffb      	ldrb	r3, [r7, #31]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d9ec      	bls.n	8002880 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0208 	orr.w	r2, r2, #8
 80028b8:	b292      	uxth	r2, r2
 80028ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d0:	b292      	uxth	r2, r2
 80028d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0204 	orr.w	r2, r2, #4
 80028e8:	b292      	uxth	r2, r2
 80028ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f007 fe38 	bl	800a564 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028f4:	e026      	b.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00f      	beq.n	8002920 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002912:	b292      	uxth	r2, r2
 8002914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f007 fdf6 	bl	800a50a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800291e:	e011      	b.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002932:	b29a      	uxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800293c:	b292      	uxth	r2, r2
 800293e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002942:	bf00      	nop
  }
}
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_PCD_SetAddress+0x1a>
 8002960:	2302      	movs	r3, #2
 8002962:	e013      	b.n	800298c <HAL_PCD_SetAddress+0x42>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f005 fea9 	bl	80086d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	70fb      	strb	r3, [r7, #3]
 80029a6:	460b      	mov	r3, r1
 80029a8:	803b      	strh	r3, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0e      	bge.n	80029d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	705a      	strb	r2, [r3, #1]
 80029d6:	e00e      	b.n	80029f6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0207 	and.w	r2, r3, #7
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a02:	883a      	ldrh	r2, [r7, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	78ba      	ldrb	r2, [r7, #2]
 8002a0c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a0e:	78bb      	ldrb	r3, [r7, #2]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d102      	bne.n	8002a1a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_EP_Open+0x94>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e00e      	b.n	8002a46 <HAL_PCD_EP_Open+0xb2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68f9      	ldr	r1, [r7, #12]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fbf2 	bl	8006220 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a44:	7afb      	ldrb	r3, [r7, #11]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da0e      	bge.n	8002a80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	705a      	strb	r2, [r3, #1]
 8002a7e:	e00e      	b.n	8002a9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 0207 	and.w	r2, r3, #7
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_EP_Close+0x6a>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e00e      	b.n	8002ad6 <HAL_PCD_EP_Close+0x88>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 ff6a 	bl	80069a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	460b      	mov	r3, r1
 8002aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	f003 0207 	and.w	r2, r3, #7
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6979      	ldr	r1, [r7, #20]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f004 f921 	bl	8006d78 <USB_EPStartXfer>

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 0207 	and.w	r2, r3, #7
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6979      	ldr	r1, [r7, #20]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 f8d3 	bl	8006d78 <USB_EPStartXfer>

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 0207 	and.w	r2, r3, #7
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d901      	bls.n	8002bfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e04c      	b.n	8002c94 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da0e      	bge.n	8002c20 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	705a      	strb	r2, [r3, #1]
 8002c1e:	e00c      	b.n	8002c3a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_PCD_EP_SetStall+0x7e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e01c      	b.n	8002c94 <HAL_PCD_EP_SetStall+0xb8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f005 fc36 	bl	80084da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d108      	bne.n	8002c8a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f005 fd5b 	bl	8008740 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d901      	bls.n	8002cba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e040      	b.n	8002d3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	da0e      	bge.n	8002ce0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	705a      	strb	r2, [r3, #1]
 8002cde:	e00e      	b.n	8002cfe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 0207 	and.w	r2, r3, #7
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_PCD_EP_ClrStall+0x82>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e00e      	b.n	8002d3c <HAL_PCD_EP_ClrStall+0xa0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68f9      	ldr	r1, [r7, #12]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f005 fc24 	bl	800857a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b096      	sub	sp, #88	; 0x58
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d4c:	e3bf      	b.n	80034ce <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002d68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 8179 	bne.w	8003064 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d152      	bne.n	8002e24 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	81fb      	strh	r3, [r7, #14]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3328      	adds	r3, #40	; 0x28
 8002da6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	441a      	add	r2, r3
 8002dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002de2:	2100      	movs	r1, #0
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f007 fb76 	bl	800a4d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 836b 	beq.w	80034ce <PCD_EP_ISR_Handler+0x78a>
 8002df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 8366 	bne.w	80034ce <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b292      	uxth	r2, r2
 8002e16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e22:	e354      	b.n	80034ce <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e2a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d034      	beq.n	8002eac <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	3306      	adds	r3, #6
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f005 fcad 	bl	80087e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e92:	4013      	ands	r3, r2
 8002e94:	823b      	strh	r3, [r7, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	8a3a      	ldrh	r2, [r7, #16]
 8002e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f007 fae9 	bl	800a47c <HAL_PCD_SetupStageCallback>
 8002eaa:	e310      	b.n	80034ce <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002eac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f280 830c 	bge.w	80034ce <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	83fb      	strh	r3, [r7, #30]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	8bfa      	ldrh	r2, [r7, #30]
 8002ecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3306      	adds	r3, #6
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d019      	beq.n	8002f3c <PCD_EP_ISR_Handler+0x1f8>
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d015      	beq.n	8002f3c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f16:	6959      	ldr	r1, [r3, #20]
 8002f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f005 fc5d 	bl	80087e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	441a      	add	r2, r3
 8002f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f34:	2100      	movs	r1, #0
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f007 fab2 	bl	800a4a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 82bd 	bne.w	80034ce <PCD_EP_ISR_Handler+0x78a>
 8002f54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f60:	f000 82b5 	beq.w	80034ce <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4413      	add	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	801a      	strh	r2, [r3, #0]
 8002f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9a:	d91d      	bls.n	8002fd8 <PCD_EP_ISR_Handler+0x294>
 8002f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <PCD_EP_ISR_Handler+0x272>
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	029b      	lsls	r3, r3, #10
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	801a      	strh	r2, [r3, #0]
 8002fd6:	e026      	b.n	8003026 <PCD_EP_ISR_Handler+0x2e2>
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <PCD_EP_ISR_Handler+0x2b2>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	e017      	b.n	8003026 <PCD_EP_ISR_Handler+0x2e2>
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <PCD_EP_ISR_Handler+0x2cc>
 800300a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300c:	3301      	adds	r3, #1
 800300e:	647b      	str	r3, [r7, #68]	; 0x44
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29a      	uxth	r2, r3
 8003016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003018:	b29b      	uxth	r3, r3
 800301a:	029b      	lsls	r3, r3, #10
 800301c:	b29b      	uxth	r3, r3
 800301e:	4313      	orrs	r3, r2
 8003020:	b29a      	uxth	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	827b      	strh	r3, [r7, #18]
 8003038:	8a7b      	ldrh	r3, [r7, #18]
 800303a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800303e:	827b      	strh	r3, [r7, #18]
 8003040:	8a7b      	ldrh	r3, [r7, #18]
 8003042:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003046:	827b      	strh	r3, [r7, #18]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	8a7b      	ldrh	r3, [r7, #18]
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
 8003062:	e234      	b.n	80034ce <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003078:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800307c:	2b00      	cmp	r3, #0
 800307e:	f280 80fc 	bge.w	800327a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29a      	uxth	r2, r3
 8003094:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003098:	4013      	ands	r3, r2
 800309a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b4:	b292      	uxth	r2, r2
 80030b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030b8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	7b1b      	ldrb	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d125      	bne.n	8003122 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	3306      	adds	r3, #6
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003102:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8092 	beq.w	8003230 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003112:	6959      	ldr	r1, [r3, #20]
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	88da      	ldrh	r2, [r3, #6]
 8003118:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800311c:	f005 fb60 	bl	80087e0 <USB_ReadPMA>
 8003120:	e086      	b.n	8003230 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003124:	78db      	ldrb	r3, [r3, #3]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d10a      	bne.n	8003140 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800312a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800312e:	461a      	mov	r2, r3
 8003130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9d9 	bl	80034ea <HAL_PCD_EP_DB_Receive>
 8003138:	4603      	mov	r3, r0
 800313a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800313e:	e077      	b.n	8003230 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003180:	b29b      	uxth	r3, r3
 8003182:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d024      	beq.n	80031e8 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	3302      	adds	r3, #2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80031ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02e      	beq.n	8003230 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d8:	6959      	ldr	r1, [r3, #20]
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	891a      	ldrh	r2, [r3, #8]
 80031de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031e2:	f005 fafd 	bl	80087e0 <USB_ReadPMA>
 80031e6:	e023      	b.n	8003230 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	3306      	adds	r3, #6
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003210:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003214:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	6959      	ldr	r1, [r3, #20]
 8003224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003226:	895a      	ldrh	r2, [r3, #10]
 8003228:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800322c:	f005 fad8 	bl	80087e0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003238:	441a      	add	r2, r3
 800323a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800323e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003246:	441a      	add	r2, r3
 8003248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800324c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <PCD_EP_ISR_Handler+0x51c>
 8003254:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	d206      	bcs.n	800326e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f007 f91a 	bl	800a4a0 <HAL_PCD_DataOutStageCallback>
 800326c:	e005      	b.n	800327a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fd7f 	bl	8006d78 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800327a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8123 	beq.w	80034ce <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003288:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	441a      	add	r2, r3
 80032c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80032d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032da:	78db      	ldrb	r3, [r3, #3]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 80a2 	bne.w	8003426 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80032e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80032e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ea:	7b1b      	ldrb	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8093 	beq.w	8003418 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d046      	beq.n	800338c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d126      	bne.n	8003354 <PCD_EP_ISR_Handler+0x610>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003314:	b29b      	uxth	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	4413      	add	r3, r2
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	011a      	lsls	r2, r3, #4
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	4413      	add	r3, r2
 8003328:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003338:	b29a      	uxth	r2, r3
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334c:	b29a      	uxth	r2, r3
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	e061      	b.n	8003418 <PCD_EP_ISR_Handler+0x6d4>
 8003354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d15d      	bne.n	8003418 <PCD_EP_ISR_Handler+0x6d4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	4413      	add	r3, r2
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	011a      	lsls	r2, r3, #4
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	4413      	add	r3, r2
 800337e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	2200      	movs	r2, #0
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	e045      	b.n	8003418 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d126      	bne.n	80033e8 <PCD_EP_ISR_Handler+0x6a4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ae:	4413      	add	r3, r2
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	011a      	lsls	r2, r3, #4
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	4413      	add	r3, r2
 80033bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	e017      	b.n	8003418 <PCD_EP_ISR_Handler+0x6d4>
 80033e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d113      	bne.n	8003418 <PCD_EP_ISR_Handler+0x6d4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fe:	4413      	add	r3, r2
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	011a      	lsls	r2, r3, #4
 8003408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340a:	4413      	add	r3, r2
 800340c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003410:	63bb      	str	r3, [r7, #56]	; 0x38
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	2200      	movs	r2, #0
 8003416:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f007 f859 	bl	800a4d6 <HAL_PCD_DataInStageCallback>
 8003424:	e053      	b.n	80034ce <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003426:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d146      	bne.n	80034c0 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	3302      	adds	r3, #2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800345e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003466:	429a      	cmp	r2, r3
 8003468:	d907      	bls.n	800347a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003476:	619a      	str	r2, [r3, #24]
 8003478:	e002      	b.n	8003480 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f007 f821 	bl	800a4d6 <HAL_PCD_DataInStageCallback>
 8003494:	e01b      	b.n	80034ce <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800349e:	441a      	add	r2, r3
 80034a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034ac:	441a      	add	r2, r3
 80034ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 fc5d 	bl	8006d78 <USB_EPStartXfer>
 80034be:	e006      	b.n	80034ce <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034c4:	461a      	mov	r2, r3
 80034c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f91b 	bl	8003704 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	b21b      	sxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f6ff ac37 	blt.w	8002d4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3758      	adds	r7, #88	; 0x58
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b088      	sub	sp, #32
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d07e      	beq.n	8003600 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	3302      	adds	r3, #2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	8b7b      	ldrh	r3, [r7, #26]
 8003532:	429a      	cmp	r2, r3
 8003534:	d306      	bcc.n	8003544 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	8b7b      	ldrh	r3, [r7, #26]
 800353c:	1ad2      	subs	r2, r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	619a      	str	r2, [r3, #24]
 8003542:	e002      	b.n	800354a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d123      	bne.n	800359a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356c:	833b      	strh	r3, [r7, #24]
 800356e:	8b3b      	ldrh	r3, [r7, #24]
 8003570:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003574:	833b      	strh	r3, [r7, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	441a      	add	r2, r3
 8003584:	8b3b      	ldrh	r3, [r7, #24]
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01f      	beq.n	80035e4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	82fb      	strh	r3, [r7, #22]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	441a      	add	r2, r3
 80035ce:	8afb      	ldrh	r3, [r7, #22]
 80035d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035e4:	8b7b      	ldrh	r3, [r7, #26]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8087 	beq.w	80036fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6959      	ldr	r1, [r3, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	891a      	ldrh	r2, [r3, #8]
 80035f8:	8b7b      	ldrh	r3, [r7, #26]
 80035fa:	f005 f8f1 	bl	80087e0 <USB_ReadPMA>
 80035fe:	e07c      	b.n	80036fa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003608:	b29b      	uxth	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	3306      	adds	r3, #6
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003628:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	8b7b      	ldrh	r3, [r7, #26]
 8003630:	429a      	cmp	r2, r3
 8003632:	d306      	bcc.n	8003642 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	8b7b      	ldrh	r3, [r7, #26]
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	619a      	str	r2, [r3, #24]
 8003640:	e002      	b.n	8003648 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d123      	bne.n	8003698 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	83fb      	strh	r3, [r7, #30]
 800366c:	8bfb      	ldrh	r3, [r7, #30]
 800366e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003672:	83fb      	strh	r3, [r7, #30]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	8bfb      	ldrh	r3, [r7, #30]
 8003684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003694:	b29b      	uxth	r3, r3
 8003696:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11f      	bne.n	80036e2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	83bb      	strh	r3, [r7, #28]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	441a      	add	r2, r3
 80036cc:	8bbb      	ldrh	r3, [r7, #28]
 80036ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036de:	b29b      	uxth	r3, r3
 80036e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036e2:	8b7b      	ldrh	r3, [r7, #26]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6959      	ldr	r1, [r3, #20]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	895a      	ldrh	r2, [r3, #10]
 80036f4:	8b7b      	ldrh	r3, [r7, #26]
 80036f6:	f005 f873 	bl	80087e0 <USB_ReadPMA>
    }
  }

  return count;
 80036fa:	8b7b      	ldrh	r3, [r7, #26]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b0a4      	sub	sp, #144	; 0x90
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 81dd 	beq.w	8003ad8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	3302      	adds	r3, #2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003746:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003752:	429a      	cmp	r2, r3
 8003754:	d907      	bls.n	8003766 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800375e:	1ad2      	subs	r2, r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	619a      	str	r2, [r3, #24]
 8003764:	e002      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 80b9 	bne.w	80038e8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d126      	bne.n	80037cc <HAL_PCD_EP_DB_Transmit+0xc8>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	4413      	add	r3, r2
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	011a      	lsls	r2, r3, #4
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	4413      	add	r3, r2
 80037a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	e01a      	b.n	8003802 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d116      	bne.n	8003802 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	4413      	add	r3, r2
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	011a      	lsls	r2, r3, #4
 80037f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f4:	4413      	add	r3, r2
 80037f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	2200      	movs	r2, #0
 8003800:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d126      	bne.n	800385e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381e:	b29b      	uxth	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	011a      	lsls	r2, r3, #4
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003842:	b29a      	uxth	r2, r3
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003856:	b29a      	uxth	r2, r3
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	801a      	strh	r2, [r3, #0]
 800385c:	e017      	b.n	800388e <HAL_PCD_EP_DB_Transmit+0x18a>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d113      	bne.n	800388e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386e:	b29b      	uxth	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	4413      	add	r3, r2
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	011a      	lsls	r2, r3, #4
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	4413      	add	r3, r2
 8003882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2200      	movs	r2, #0
 800388c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f006 fe1e 	bl	800a4d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 82fc 	beq.w	8003e9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c0:	82fb      	strh	r3, [r7, #22]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	8afb      	ldrh	r3, [r7, #22]
 80038d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	8013      	strh	r3, [r2, #0]
 80038e6:	e2da      	b.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d021      	beq.n	8003936 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800392a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800392e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800393c:	2b01      	cmp	r3, #1
 800393e:	f040 82ae 	bne.w	8003e9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800394a:	441a      	add	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003958:	441a      	add	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	429a      	cmp	r2, r3
 8003968:	d30b      	bcc.n	8003982 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800397a:	1ad2      	subs	r2, r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	621a      	str	r2, [r3, #32]
 8003980:	e017      	b.n	80039b2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800398a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800398e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800399a:	e00a      	b.n	80039b2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2200      	movs	r2, #0
 80039b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d165      	bne.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x382>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ce:	4413      	add	r3, r2
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	011a      	lsls	r2, r3, #4
 80039d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039da:	4413      	add	r3, r2
 80039dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039f6:	2b3e      	cmp	r3, #62	; 0x3e
 80039f8:	d91d      	bls.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x332>
 80039fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <HAL_PCD_EP_DB_Transmit+0x310>
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a10:	3b01      	subs	r3, #1
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4313      	orrs	r3, r2
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	e044      	b.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_PCD_EP_DB_Transmit+0x350>
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	e035      	b.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	029b      	lsls	r3, r3, #10
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	e01c      	b.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d118      	bne.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	647b      	str	r3, [r7, #68]	; 0x44
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	4413      	add	r3, r2
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	011a      	lsls	r2, r3, #4
 8003aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aae:	4413      	add	r3, r2
 8003ab0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	6959      	ldr	r1, [r3, #20]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	891a      	ldrh	r2, [r3, #8]
 8003acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f004 fe40 	bl	8008756 <USB_WritePMA>
 8003ad6:	e1e2      	b.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	3306      	adds	r3, #6
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b00:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d307      	bcc.n	8003b20 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	e002      	b.n	8003b26 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2200      	movs	r2, #0
 8003b24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 80c0 	bne.w	8003cb0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d126      	bne.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x482>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b4c:	4413      	add	r3, r2
 8003b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	011a      	lsls	r2, r3, #4
 8003b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b58:	4413      	add	r3, r2
 8003b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	e01a      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d116      	bne.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	667b      	str	r3, [r7, #100]	; 0x64
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ba2:	4413      	add	r3, r2
 8003ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	011a      	lsls	r2, r3, #4
 8003bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bae:	4413      	add	r3, r2
 8003bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb8:	2200      	movs	r2, #0
 8003bba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	677b      	str	r3, [r7, #116]	; 0x74
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12b      	bne.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	4413      	add	r3, r2
 8003be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	011a      	lsls	r2, r3, #4
 8003be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bea:	4413      	add	r3, r2
 8003bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	e017      	b.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d113      	bne.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c38:	4413      	add	r3, r2
 8003c3a:	677b      	str	r3, [r7, #116]	; 0x74
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	011a      	lsls	r2, r3, #4
 8003c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c44:	4413      	add	r3, r2
 8003c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c4e:	2200      	movs	r2, #0
 8003c50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f006 fc3c 	bl	800a4d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f040 811a 	bne.w	8003e9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8013      	strh	r3, [r2, #0]
 8003cae:	e0f6      	b.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d121      	bne.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	f040 80ca 	bne.w	8003e9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d12:	441a      	add	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d20:	441a      	add	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d30b      	bcc.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	621a      	str	r2, [r3, #32]
 8003d48:	e017      	b.n	8003d7a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003d52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d62:	e00a      	b.n	8003d7a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d165      	bne.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x750>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9c:	4413      	add	r3, r2
 8003d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	011a      	lsls	r2, r3, #4
 8003da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da8:	4413      	add	r3, r2
 8003daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8003db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8003dc6:	d91d      	bls.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x700>
 8003dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dde:	3b01      	subs	r3, #1
 8003de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	029b      	lsls	r3, r3, #10
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e041      	b.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e032      	b.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x738>
 8003e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e38:	3301      	adds	r3, #1
 8003e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	029b      	lsls	r3, r3, #10
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	e019      	b.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	785b      	ldrb	r3, [r3, #1]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d115      	bne.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6a:	4413      	add	r3, r2
 8003e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	011a      	lsls	r2, r3, #4
 8003e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e76:	4413      	add	r3, r2
 8003e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e86:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6959      	ldr	r1, [r3, #20]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	895a      	ldrh	r2, [r3, #10]
 8003e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f004 fc5c 	bl	8008756 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb8:	82bb      	strh	r3, [r7, #20]
 8003eba:	8abb      	ldrh	r3, [r7, #20]
 8003ebc:	f083 0310 	eor.w	r3, r3, #16
 8003ec0:	82bb      	strh	r3, [r7, #20]
 8003ec2:	8abb      	ldrh	r3, [r7, #20]
 8003ec4:	f083 0320 	eor.w	r3, r3, #32
 8003ec8:	82bb      	strh	r3, [r7, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	441a      	add	r2, r3
 8003ed8:	8abb      	ldrh	r3, [r7, #20]
 8003eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3790      	adds	r7, #144	; 0x90
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	4613      	mov	r3, r2
 8003f08:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e009      	b.n	8003f42 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f2e:	897a      	ldrh	r2, [r7, #10]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	80da      	strh	r2, [r3, #6]
 8003f56:	e00b      	b.n	8003f70 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e272      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8087 	beq.w	80040aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f9c:	4b92      	ldr	r3, [pc, #584]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fa8:	4b8f      	ldr	r3, [pc, #572]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d112      	bne.n	8003fda <HAL_RCC_OscConfig+0x5e>
 8003fb4:	4b8c      	ldr	r3, [pc, #560]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc2:	4b89      	ldr	r3, [pc, #548]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d06c      	beq.n	80040a8 <HAL_RCC_OscConfig+0x12c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d168      	bne.n	80040a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e24c      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x76>
 8003fe4:	4b80      	ldr	r3, [pc, #512]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a7f      	ldr	r2, [pc, #508]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e02e      	b.n	8004050 <HAL_RCC_OscConfig+0xd4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x98>
 8003ffa:	4b7b      	ldr	r3, [pc, #492]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b78      	ldr	r3, [pc, #480]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a77      	ldr	r2, [pc, #476]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800400c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e01d      	b.n	8004050 <HAL_RCC_OscConfig+0xd4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0xbc>
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a71      	ldr	r2, [pc, #452]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6e      	ldr	r2, [pc, #440]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0xd4>
 8004038:	4b6b      	ldr	r3, [pc, #428]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6a      	ldr	r2, [pc, #424]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800403e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a67      	ldr	r2, [pc, #412]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800404a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fd f90a 	bl	8001270 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7fd f906 	bl	8001270 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e200      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0xe4>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fd f8f6 	bl	8001270 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fd f8f2 	bl	8001270 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e1ec      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x10c>
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d063      	beq.n	800417e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040b6:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040c2:	4b49      	ldr	r3, [pc, #292]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d11c      	bne.n	8004108 <HAL_RCC_OscConfig+0x18c>
 80040ce:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d116      	bne.n	8004108 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_RCC_OscConfig+0x176>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e1c0      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b3d      	ldr	r3, [pc, #244]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4939      	ldr	r1, [pc, #228]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	e03a      	b.n	800417e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004110:	4b36      	ldr	r3, [pc, #216]	; (80041ec <HAL_RCC_OscConfig+0x270>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fd f8ab 	bl	8001270 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411e:	f7fd f8a7 	bl	8001270 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e1a1      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413c:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4927      	ldr	r1, [pc, #156]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
 8004150:	e015      	b.n	800417e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <HAL_RCC_OscConfig+0x270>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd f88a 	bl	8001270 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004160:	f7fd f886 	bl	8001270 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e180      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03a      	beq.n	8004200 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d019      	beq.n	80041c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_RCC_OscConfig+0x274>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004198:	f7fd f86a 	bl	8001270 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a0:	f7fd f866 	bl	8001270 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e160      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041be:	2001      	movs	r0, #1
 80041c0:	f000 face 	bl	8004760 <RCC_Delay>
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_OscConfig+0x274>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fd f850 	bl	8001270 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d2:	e00f      	b.n	80041f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fd f84c 	bl	8001270 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d908      	bls.n	80041f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e146      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	42420000 	.word	0x42420000
 80041f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	4b92      	ldr	r3, [pc, #584]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e9      	bne.n	80041d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a6 	beq.w	800435a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b8b      	ldr	r3, [pc, #556]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4a87      	ldr	r2, [pc, #540]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	61d3      	str	r3, [r2, #28]
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b82      	ldr	r3, [pc, #520]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d118      	bne.n	8004278 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004246:	4b7f      	ldr	r3, [pc, #508]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7e      	ldr	r2, [pc, #504]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004252:	f7fd f80d 	bl	8001270 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425a:	f7fd f809 	bl	8001270 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b64      	cmp	r3, #100	; 0x64
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e103      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	4b75      	ldr	r3, [pc, #468]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d106      	bne.n	800428e <HAL_RCC_OscConfig+0x312>
 8004280:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4a6e      	ldr	r2, [pc, #440]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	6213      	str	r3, [r2, #32]
 800428c:	e02d      	b.n	80042ea <HAL_RCC_OscConfig+0x36e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x334>
 8004296:	4b6a      	ldr	r3, [pc, #424]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4a69      	ldr	r2, [pc, #420]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6213      	str	r3, [r2, #32]
 80042a2:	4b67      	ldr	r3, [pc, #412]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4a66      	ldr	r2, [pc, #408]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6213      	str	r3, [r2, #32]
 80042ae:	e01c      	b.n	80042ea <HAL_RCC_OscConfig+0x36e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d10c      	bne.n	80042d2 <HAL_RCC_OscConfig+0x356>
 80042b8:	4b61      	ldr	r3, [pc, #388]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4a60      	ldr	r2, [pc, #384]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	6213      	str	r3, [r2, #32]
 80042c4:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	4a5d      	ldr	r2, [pc, #372]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6213      	str	r3, [r2, #32]
 80042d0:	e00b      	b.n	80042ea <HAL_RCC_OscConfig+0x36e>
 80042d2:	4b5b      	ldr	r3, [pc, #364]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	4a5a      	ldr	r2, [pc, #360]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	6213      	str	r3, [r2, #32]
 80042de:	4b58      	ldr	r3, [pc, #352]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	4a57      	ldr	r2, [pc, #348]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d015      	beq.n	800431e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fc ffbd 	bl	8001270 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fc ffb9 	bl	8001270 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0b1      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	4b4b      	ldr	r3, [pc, #300]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ee      	beq.n	80042fa <HAL_RCC_OscConfig+0x37e>
 800431c:	e014      	b.n	8004348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431e:	f7fc ffa7 	bl	8001270 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fc ffa3 	bl	8001270 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e09b      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433c:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ee      	bne.n	8004326 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d105      	bne.n	800435a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434e:	4b3c      	ldr	r3, [pc, #240]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004358:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8087 	beq.w	8004472 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d061      	beq.n	8004434 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d146      	bne.n	8004406 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b33      	ldr	r3, [pc, #204]	; (8004448 <HAL_RCC_OscConfig+0x4cc>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fc ff77 	bl	8001270 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004386:	f7fc ff73 	bl	8001270 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e06d      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d108      	bne.n	80043c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4921      	ldr	r1, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a19      	ldr	r1, [r3, #32]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	430b      	orrs	r3, r1
 80043d2:	491b      	ldr	r1, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x4cc>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fc ff47 	bl	8001270 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fc ff43 	bl	8001270 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e03d      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x46a>
 8004404:	e035      	b.n	8004472 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_RCC_OscConfig+0x4cc>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fc ff30 	bl	8001270 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fc ff2c 	bl	8001270 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e026      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x498>
 8004432:	e01e      	b.n	8004472 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e019      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
 8004448:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_OscConfig+0x500>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	429a      	cmp	r2, r3
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000

08004480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0d0      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004494:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d910      	bls.n	80044c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b67      	ldr	r3, [pc, #412]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 0207 	bic.w	r2, r3, #7
 80044aa:	4965      	ldr	r1, [pc, #404]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b63      	ldr	r3, [pc, #396]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0b8      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d020      	beq.n	8004512 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a58      	ldr	r2, [pc, #352]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f4:	4b53      	ldr	r3, [pc, #332]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4a52      	ldr	r2, [pc, #328]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004500:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	494d      	ldr	r1, [pc, #308]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d040      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d115      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07f      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e073      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454e:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e06b      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800455e:	4b39      	ldr	r3, [pc, #228]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f023 0203 	bic.w	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4936      	ldr	r1, [pc, #216]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004570:	f7fc fe7e 	bl	8001270 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	e00a      	b.n	800458e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004578:	f7fc fe7a 	bl	8001270 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e053      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 020c 	and.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	429a      	cmp	r2, r3
 800459e:	d1eb      	bne.n	8004578 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d210      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4922      	ldr	r1, [pc, #136]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e032      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4916      	ldr	r1, [pc, #88]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800460e:	f000 f821 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004612:	4602      	mov	r2, r0
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	490a      	ldr	r1, [pc, #40]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004620:	5ccb      	ldrb	r3, [r1, r3]
 8004622:	fa22 f303 	lsr.w	r3, r2, r3
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x1cc>)
 8004628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_RCC_ClockConfig+0x1d0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fddc 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40022000 	.word	0x40022000
 8004644:	40021000 	.word	0x40021000
 8004648:	0800aa58 	.word	0x0800aa58
 800464c:	2000000c 	.word	0x2000000c
 8004650:	20000010 	.word	0x20000010

08004654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800466e:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b04      	cmp	r3, #4
 800467c:	d002      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x30>
 800467e:	2b08      	cmp	r3, #8
 8004680:	d003      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x36>
 8004682:	e027      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCC_GetSysClockFreq+0x98>)
 8004686:	613b      	str	r3, [r7, #16]
      break;
 8004688:	e027      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	0c9b      	lsrs	r3, r3, #18
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004694:	5cd3      	ldrb	r3, [r2, r3]
 8004696:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	0c5b      	lsrs	r3, r3, #17
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	4a11      	ldr	r2, [pc, #68]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <HAL_RCC_GetSysClockFreq+0x98>)
 80046b6:	fb03 f202 	mul.w	r2, r3, r2
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e004      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	613b      	str	r3, [r7, #16]
      break;
 80046d2:	e002      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetSysClockFreq+0x98>)
 80046d6:	613b      	str	r3, [r7, #16]
      break;
 80046d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046da:	693b      	ldr	r3, [r7, #16]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	007a1200 	.word	0x007a1200
 80046f0:	0800aa70 	.word	0x0800aa70
 80046f4:	0800aa80 	.word	0x0800aa80
 80046f8:	003d0900 	.word	0x003d0900

080046fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <HAL_RCC_GetHCLKFreq+0x10>)
 8004702:	681b      	ldr	r3, [r3, #0]
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	2000000c 	.word	0x2000000c

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004714:	f7ff fff2 	bl	80046fc <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800aa68 	.word	0x0800aa68

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800473c:	f7ff ffde 	bl	80046fc <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	0adb      	lsrs	r3, r3, #11
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	; (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000
 800475c:	0800aa68 	.word	0x0800aa68

08004760 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <RCC_Delay+0x34>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <RCC_Delay+0x38>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0a5b      	lsrs	r3, r3, #9
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800477c:	bf00      	nop
  }
  while (Delay --);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1e5a      	subs	r2, r3, #1
 8004782:	60fa      	str	r2, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f9      	bne.n	800477c <RCC_Delay+0x1c>
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	2000000c 	.word	0x2000000c
 8004798:	10624dd3 	.word	0x10624dd3

0800479c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d07d      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c8:	4b4c      	ldr	r3, [pc, #304]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4a4b      	ldr	r2, [pc, #300]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d2:	61d3      	str	r3, [r2, #28]
 80047d4:	4b49      	ldr	r3, [pc, #292]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	4b46      	ldr	r3, [pc, #280]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d118      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a42      	ldr	r2, [pc, #264]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fc:	f7fc fd38 	bl	8001270 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004802:	e008      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004804:	f7fc fd34 	bl	8001270 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e06d      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02e      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	429a      	cmp	r2, r3
 800483e:	d027      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004840:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004848:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484a:	4b2e      	ldr	r3, [pc, #184]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004850:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004856:	4a29      	ldr	r2, [pc, #164]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d014      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fc fd03 	bl	8001270 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486c:	e00a      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fc fcff 	bl	8001270 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e036      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ee      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4917      	ldr	r1, [pc, #92]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d105      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a8:	4b14      	ldr	r3, [pc, #80]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	4a13      	ldr	r2, [pc, #76]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c0:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	490b      	ldr	r1, [pc, #44]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	40007000 	.word	0x40007000
 8004904:	42420440 	.word	0x42420440

08004908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e041      	b.n	800499e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc fafe 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f000 fb86 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e03a      	b.n	8004a36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_TIM_Base_Start_IT+0x98>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00e      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x58>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d009      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x58>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <HAL_TIM_Base_Start_IT+0x9c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x58>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <HAL_TIM_Base_Start_IT+0xa0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d111      	bne.n	8004a24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d010      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a22:	e007      	b.n	8004a34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800

08004a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e041      	b.n	8004ae2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc fa82 	bl	8000f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f000 fae4 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d122      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d11b      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f06f 0202 	mvn.w	r2, #2
 8004b16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa77 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004b32:	e005      	b.n	8004b40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa6a 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa79 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d122      	bne.n	8004b9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d11b      	bne.n	8004b9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f06f 0204 	mvn.w	r2, #4
 8004b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fa4d 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004b86:	e005      	b.n	8004b94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa40 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa4f 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d122      	bne.n	8004bee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d11b      	bne.n	8004bee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0208 	mvn.w	r2, #8
 8004bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa23 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004bda:	e005      	b.n	8004be8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa16 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa25 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d122      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d11b      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f06f 0210 	mvn.w	r2, #16
 8004c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2208      	movs	r2, #8
 8004c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f9f9 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004c2e:	e005      	b.n	8004c3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9ec 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9fb 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10e      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0201 	mvn.w	r2, #1
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fb fa6f 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b80      	cmp	r3, #128	; 0x80
 8004c7a:	d10e      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d107      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fcc6 	bl	8005626 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d107      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f9bf 	bl	8005044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d10e      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d107      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f06f 0220 	mvn.w	r2, #32
 8004cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fc91 	bl	8005614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e0ae      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	f200 809f 	bhi.w	8004e68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004e69 	.word	0x08004e69
 8004d38:	08004e69 	.word	0x08004e69
 8004d3c:	08004e69 	.word	0x08004e69
 8004d40:	08004da5 	.word	0x08004da5
 8004d44:	08004e69 	.word	0x08004e69
 8004d48:	08004e69 	.word	0x08004e69
 8004d4c:	08004e69 	.word	0x08004e69
 8004d50:	08004de7 	.word	0x08004de7
 8004d54:	08004e69 	.word	0x08004e69
 8004d58:	08004e69 	.word	0x08004e69
 8004d5c:	08004e69 	.word	0x08004e69
 8004d60:	08004e27 	.word	0x08004e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f9d6 	bl	800511c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0208 	orr.w	r2, r2, #8
 8004d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0204 	bic.w	r2, r2, #4
 8004d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6999      	ldr	r1, [r3, #24]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	619a      	str	r2, [r3, #24]
      break;
 8004da2:	e064      	b.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fa1c 	bl	80051e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6999      	ldr	r1, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	619a      	str	r2, [r3, #24]
      break;
 8004de4:	e043      	b.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fa65 	bl	80052bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0208 	orr.w	r2, r2, #8
 8004e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0204 	bic.w	r2, r2, #4
 8004e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69d9      	ldr	r1, [r3, #28]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	61da      	str	r2, [r3, #28]
      break;
 8004e24:	e023      	b.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 faaf 	bl	8005390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69d9      	ldr	r1, [r3, #28]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	021a      	lsls	r2, r3, #8
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	61da      	str	r2, [r3, #28]
      break;
 8004e66:	e002      	b.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_ConfigClockSource+0x1c>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0b4      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x186>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	d03e      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0xd4>
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	f200 8087 	bhi.w	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	f000 8086 	beq.w	8004ff2 <HAL_TIM_ConfigClockSource+0x172>
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eea:	d87f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b70      	cmp	r3, #112	; 0x70
 8004eee:	d01a      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0xa6>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d87b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b60      	cmp	r3, #96	; 0x60
 8004ef6:	d050      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x11a>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d877      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b50      	cmp	r3, #80	; 0x50
 8004efe:	d03c      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xfa>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d873      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d058      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x13a>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d86f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b30      	cmp	r3, #48	; 0x30
 8004f0e:	d064      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d86b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d060      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d867      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d05c      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d05a      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	e062      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f36:	f000 faf0 	bl	800551a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	609a      	str	r2, [r3, #8]
      break;
 8004f52:	e04f      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f64:	f000 fad9 	bl	800551a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f76:	609a      	str	r2, [r3, #8]
      break;
 8004f78:	e03c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	461a      	mov	r2, r3
 8004f88:	f000 fa50 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2150      	movs	r1, #80	; 0x50
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 faa7 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004f98:	e02c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 fa6e 	bl	8005488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2160      	movs	r1, #96	; 0x60
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fa97 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e01c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 fa30 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fa87 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e00c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f000 fa7e 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004fea:	e003      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e000      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
	...

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a29      	ldr	r2, [pc, #164]	; (8005110 <TIM_Base_SetConfig+0xb8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d007      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a26      	ldr	r2, [pc, #152]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d108      	bne.n	800509a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <TIM_Base_SetConfig+0xb8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a18      	ldr	r2, [pc, #96]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a07      	ldr	r2, [pc, #28]	; (8005110 <TIM_Base_SetConfig+0xb8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800

0800511c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f023 0201 	bic.w	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f023 0302 	bic.w	r3, r3, #2
 8005164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <TIM_OC1_SetConfig+0xc8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d10c      	bne.n	8005192 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0308 	bic.w	r3, r3, #8
 800517e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f023 0304 	bic.w	r3, r3, #4
 8005190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <TIM_OC1_SetConfig+0xc8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d111      	bne.n	80051be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	621a      	str	r2, [r3, #32]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00

080051e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 0210 	bic.w	r2, r3, #16
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0320 	bic.w	r3, r3, #32
 8005232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <TIM_OC2_SetConfig+0xd0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10d      	bne.n	8005264 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <TIM_OC2_SetConfig+0xd0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d113      	bne.n	8005294 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	40012c00 	.word	0x40012c00

080052bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1d      	ldr	r2, [pc, #116]	; (800538c <TIM_OC3_SetConfig+0xd0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d10d      	bne.n	8005336 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <TIM_OC3_SetConfig+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d113      	bne.n	8005366 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	621a      	str	r2, [r3, #32]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40012c00 	.word	0x40012c00

08005390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	031b      	lsls	r3, r3, #12
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <TIM_OC4_SetConfig+0x98>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d109      	bne.n	8005404 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	40012c00 	.word	0x40012c00

0800542c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 030a 	bic.w	r3, r3, #10
 8005468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0210 	bic.w	r2, r3, #16
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	031b      	lsls	r3, r3, #12
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	f043 0307 	orr.w	r3, r3, #7
 8005508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800551a:	b480      	push	{r7}
 800551c:	b087      	sub	sp, #28
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005534:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	021a      	lsls	r2, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	431a      	orrs	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4313      	orrs	r3, r2
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	609a      	str	r2, [r3, #8]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e046      	b.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a16      	ldr	r2, [pc, #88]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d009      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a12      	ldr	r2, [pc, #72]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a10      	ldr	r2, [pc, #64]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10c      	bne.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800

08005614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e042      	b.n	80056d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fb fcde 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	; 0x24
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800567a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fcd5 	bl	800602c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d112      	bne.n	8005718 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_UART_Receive_IT+0x26>
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e00b      	b.n	800571a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	461a      	mov	r2, r3
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fab7 	bl	8005c82 <UART_Start_Receive_IT>
 8005714:	4603      	mov	r3, r0
 8005716:	e000      	b.n	800571a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b0ba      	sub	sp, #232	; 0xe8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_UART_IRQHandler+0x66>
 8005776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fb93 	bl	8005eae <UART_Receive_IT>
      return;
 8005788:	e25b      	b.n	8005c42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800578a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 80de 	beq.w	8005950 <HAL_UART_IRQHandler+0x22c>
 8005794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80d1 	beq.w	8005950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00b      	beq.n	80057d2 <HAL_UART_IRQHandler+0xae>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_UART_IRQHandler+0xd2>
 80057de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f043 0202 	orr.w	r2, r3, #2
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_UART_IRQHandler+0xf6>
 8005802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005812:	f043 0204 	orr.w	r2, r3, #4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d011      	beq.n	800584a <HAL_UART_IRQHandler+0x126>
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	f043 0208 	orr.w	r2, r3, #8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 81f2 	beq.w	8005c38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_UART_IRQHandler+0x14e>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fb1e 	bl	8005eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_UART_IRQHandler+0x17a>
 8005896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d04f      	beq.n	800593e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa28 	bl	8005cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d041      	beq.n	8005936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3314      	adds	r3, #20
 80058b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3314      	adds	r3, #20
 80058da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1d9      	bne.n	80058b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d013      	beq.n	800592e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	4a7e      	ldr	r2, [pc, #504]	; (8005b04 <HAL_UART_IRQHandler+0x3e0>)
 800590c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	4618      	mov	r0, r3
 8005914:	f7fc fa7c 	bl	8001e10 <HAL_DMA_Abort_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	e00e      	b.n	800594c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f993 	bl	8005c5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	e00a      	b.n	800594c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f98f 	bl	8005c5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	e006      	b.n	800594c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f98b 	bl	8005c5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800594a:	e175      	b.n	8005c38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	bf00      	nop
    return;
 800594e:	e173      	b.n	8005c38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	f040 814f 	bne.w	8005bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8148 	beq.w	8005bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8141 	beq.w	8005bf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80b6 	beq.w	8005b08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8145 	beq.w	8005c3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ba:	429a      	cmp	r2, r3
 80059bc:	f080 813e 	bcs.w	8005c3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	f000 8088 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1d9      	bne.n	80059d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3314      	adds	r3, #20
 8005a26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e1      	bne.n	8005a20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3314      	adds	r3, #20
 8005a62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3314      	adds	r3, #20
 8005a7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e3      	bne.n	8005a5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ac6:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ac8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fc f95a 	bl	8001d98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f8b6 	bl	8005c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b00:	e09c      	b.n	8005c3c <HAL_UART_IRQHandler+0x518>
 8005b02:	bf00      	nop
 8005b04:	08005db9 	.word	0x08005db9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 808e 	beq.w	8005c40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8089 	beq.w	8005c40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b52:	647a      	str	r2, [r7, #68]	; 0x44
 8005b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e3      	bne.n	8005b2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	623b      	str	r3, [r7, #32]
   return(result);
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3314      	adds	r3, #20
 8005b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e3      	bne.n	8005b66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bd0:	61fa      	str	r2, [r7, #28]
 8005bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	69b9      	ldr	r1, [r7, #24]
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e3      	bne.n	8005bac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f83b 	bl	8005c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bf6:	e023      	b.n	8005c40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <HAL_UART_IRQHandler+0x4f4>
 8005c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f8e5 	bl	8005de0 <UART_Transmit_IT>
    return;
 8005c16:	e014      	b.n	8005c42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <HAL_UART_IRQHandler+0x51e>
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f924 	bl	8005e7e <UART_EndTransmit_IT>
    return;
 8005c36:	e004      	b.n	8005c42 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c38:	bf00      	nop
 8005c3a:	e002      	b.n	8005c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c3c:	bf00      	nop
 8005c3e:	e000      	b.n	8005c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c40:	bf00      	nop
  }
}
 8005c42:	37e8      	adds	r7, #232	; 0xe8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2222      	movs	r2, #34	; 0x22
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0220 	orr.w	r2, r2, #32
 8005ce6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr

08005cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b095      	sub	sp, #84	; 0x54
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d119      	bne.n	8005da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f023 0310 	bic.w	r3, r3, #16
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d8c:	61ba      	str	r2, [r7, #24]
 8005d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dae:	bf00      	nop
 8005db0:	3754      	adds	r7, #84	; 0x54
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7ff ff41 	bl	8005c5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b21      	cmp	r3, #33	; 0x21
 8005df2:	d13e      	bne.n	8005e72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d114      	bne.n	8005e28 <UART_Transmit_IT+0x48>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d110      	bne.n	8005e28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	1c9a      	adds	r2, r3, #2
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]
 8005e26:	e008      	b.n	8005e3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	1c59      	adds	r1, r3, #1
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6211      	str	r1, [r2, #32]
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4619      	mov	r1, r3
 8005e48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e000      	b.n	8005e74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fed2 	bl	8005c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b08c      	sub	sp, #48	; 0x30
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b22      	cmp	r3, #34	; 0x22
 8005ec0:	f040 80ae 	bne.w	8006020 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ecc:	d117      	bne.n	8005efe <UART_Receive_IT+0x50>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d113      	bne.n	8005efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	629a      	str	r2, [r3, #40]	; 0x28
 8005efc:	e026      	b.n	8005f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f10:	d007      	beq.n	8005f22 <UART_Receive_IT+0x74>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <UART_Receive_IT+0x82>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e008      	b.n	8005f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d15d      	bne.n	800601c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0220 	bic.w	r2, r2, #32
 8005f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d135      	bne.n	8006012 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 0310 	bic.w	r3, r3, #16
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	623a      	str	r2, [r7, #32]
 8005fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d10a      	bne.n	8006004 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fe2e 	bl	8005c6c <HAL_UARTEx_RxEventCallback>
 8006010:	e002      	b.n	8006018 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fa f8b6 	bl	8000184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e002      	b.n	8006022 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006066:	f023 030c 	bic.w	r3, r3, #12
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	430b      	orrs	r3, r1
 8006072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2c      	ldr	r2, [pc, #176]	; (8006140 <UART_SetConfig+0x114>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006094:	f7fe fb50 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	e002      	b.n	80060a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fe fb38 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 80060a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009a      	lsls	r2, r3, #2
 80060ac:	441a      	add	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b8:	4a22      	ldr	r2, [pc, #136]	; (8006144 <UART_SetConfig+0x118>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	0119      	lsls	r1, r3, #4
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009a      	lsls	r2, r3, #2
 80060cc:	441a      	add	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <UART_SetConfig+0x118>)
 80060da:	fba3 0302 	umull	r0, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	2064      	movs	r0, #100	; 0x64
 80060e2:	fb00 f303 	mul.w	r3, r0, r3
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	3332      	adds	r3, #50	; 0x32
 80060ec:	4a15      	ldr	r2, [pc, #84]	; (8006144 <UART_SetConfig+0x118>)
 80060ee:	fba2 2303 	umull	r2, r3, r2, r3
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f8:	4419      	add	r1, r3
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	009a      	lsls	r2, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <UART_SetConfig+0x118>)
 8006112:	fba3 0302 	umull	r0, r3, r3, r2
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	2064      	movs	r0, #100	; 0x64
 800611a:	fb00 f303 	mul.w	r3, r0, r3
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	3332      	adds	r3, #50	; 0x32
 8006124:	4a07      	ldr	r2, [pc, #28]	; (8006144 <UART_SetConfig+0x118>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	440a      	add	r2, r1
 8006136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40013800 	.word	0x40013800
 8006144:	51eb851f 	.word	0x51eb851f

08006148 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006148:	b084      	sub	sp, #16
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	f107 0014 	add.w	r0, r7, #20
 8006156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	b004      	add	sp, #16
 8006166:	4770      	bx	lr

08006168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006178:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800617c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	b29a      	uxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800619c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80061a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	4013      	ands	r3, r2
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr

080061c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061e0:	b084      	sub	sp, #16
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	f107 0014 	add.w	r0, r7, #20
 80061ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	b004      	add	sp, #16
 800621e:	4770      	bx	lr

08006220 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006220:	b480      	push	{r7}
 8006222:	b09d      	sub	sp, #116	; 0x74
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	78db      	ldrb	r3, [r3, #3]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d81f      	bhi.n	8006292 <USB_ActivateEndpoint+0x72>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <USB_ActivateEndpoint+0x38>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006269 	.word	0x08006269
 800625c:	08006285 	.word	0x08006285
 8006260:	0800629b 	.word	0x0800629b
 8006264:	08006277 	.word	0x08006277
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006268:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800626c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006270:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006274:	e012      	b.n	800629c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006276:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800627a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800627e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006282:	e00b      	b.n	800629c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006284:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800628c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006290:	e004      	b.n	800629c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006298:	e000      	b.n	800629c <USB_ActivateEndpoint+0x7c>
      break;
 800629a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80062aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	7b1b      	ldrb	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f040 8178 	bne.w	80065fe <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8084 	beq.w	8006420 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	4413      	add	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	011a      	lsls	r2, r3, #4
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	88db      	ldrh	r3, [r3, #6]
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	b29b      	uxth	r3, r3
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	827b      	strh	r3, [r7, #18]
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01b      	beq.n	800639c <USB_ActivateEndpoint+0x17c>
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	823b      	strh	r3, [r7, #16]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	8a3b      	ldrh	r3, [r7, #16]
 8006388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006398:	b29b      	uxth	r3, r3
 800639a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	78db      	ldrb	r3, [r3, #3]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d020      	beq.n	80063e6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ba:	81bb      	strh	r3, [r7, #12]
 80063bc:	89bb      	ldrh	r3, [r7, #12]
 80063be:	f083 0320 	eor.w	r3, r3, #32
 80063c2:	81bb      	strh	r3, [r7, #12]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	441a      	add	r2, r3
 80063ce:	89bb      	ldrh	r3, [r7, #12]
 80063d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	8013      	strh	r3, [r2, #0]
 80063e4:	e2d5      	b.n	8006992 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063fc:	81fb      	strh	r3, [r7, #14]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]
 800641e:	e2b8      	b.n	8006992 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	633b      	str	r3, [r7, #48]	; 0x30
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	4413      	add	r3, r2
 8006432:	633b      	str	r3, [r7, #48]	; 0x30
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	4413      	add	r3, r2
 800643e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	88db      	ldrh	r3, [r3, #6]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	b29b      	uxth	r3, r3
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	4413      	add	r3, r2
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	011a      	lsls	r2, r3, #4
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	4413      	add	r3, r2
 8006472:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006482:	b29a      	uxth	r2, r3
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b3e      	cmp	r3, #62	; 0x3e
 800648e:	d91d      	bls.n	80064cc <USB_ActivateEndpoint+0x2ac>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	66bb      	str	r3, [r7, #104]	; 0x68
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <USB_ActivateEndpoint+0x28a>
 80064a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064a6:	3b01      	subs	r3, #1
 80064a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e026      	b.n	800651a <USB_ActivateEndpoint+0x2fa>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <USB_ActivateEndpoint+0x2ca>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	e017      	b.n	800651a <USB_ActivateEndpoint+0x2fa>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <USB_ActivateEndpoint+0x2e4>
 80064fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006500:	3301      	adds	r3, #1
 8006502:	66bb      	str	r3, [r7, #104]	; 0x68
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29a      	uxth	r2, r3
 800650a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	847b      	strh	r3, [r7, #34]	; 0x22
 8006528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800652a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01b      	beq.n	800656a <USB_ActivateEndpoint+0x34a>
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006548:	843b      	strh	r3, [r7, #32]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	441a      	add	r2, r3
 8006554:	8c3b      	ldrh	r3, [r7, #32]
 8006556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d124      	bne.n	80065bc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006588:	83bb      	strh	r3, [r7, #28]
 800658a:	8bbb      	ldrh	r3, [r7, #28]
 800658c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006590:	83bb      	strh	r3, [r7, #28]
 8006592:	8bbb      	ldrh	r3, [r7, #28]
 8006594:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006598:	83bb      	strh	r3, [r7, #28]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	8bbb      	ldrh	r3, [r7, #28]
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]
 80065ba:	e1ea      	b.n	8006992 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d2:	83fb      	strh	r3, [r7, #30]
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065da:	83fb      	strh	r3, [r7, #30]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	8bfb      	ldrh	r3, [r7, #30]
 80065e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]
 80065fc:	e1c9      	b.n	8006992 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	78db      	ldrb	r3, [r3, #3]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d11e      	bne.n	8006644 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]
 8006642:	e01d      	b.n	8006680 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800666c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667c:	b29b      	uxth	r3, r3
 800667e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006690:	4413      	add	r3, r2
 8006692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	011a      	lsls	r2, r3, #4
 800669a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800669c:	4413      	add	r3, r2
 800669e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	891b      	ldrh	r3, [r3, #8]
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	657b      	str	r3, [r7, #84]	; 0x54
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c4:	4413      	add	r3, r2
 80066c6:	657b      	str	r3, [r7, #84]	; 0x54
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	011a      	lsls	r2, r3, #4
 80066ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80066d6:	653b      	str	r3, [r7, #80]	; 0x50
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	895b      	ldrh	r3, [r3, #10]
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	b29b      	uxth	r3, r3
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8093 	bne.w	8006818 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <USB_ActivateEndpoint+0x526>
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800673e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006742:	b29b      	uxth	r3, r3
 8006744:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006754:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01b      	beq.n	8006796 <USB_ActivateEndpoint+0x576>
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006774:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	441a      	add	r2, r3
 8006780:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006792:	b29b      	uxth	r3, r3
 8006794:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80067ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80067b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80067b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80067b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067bc:	873b      	strh	r3, [r7, #56]	; 0x38
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	441a      	add	r2, r3
 8006800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	b29b      	uxth	r3, r3
 8006814:	8013      	strh	r3, [r2, #0]
 8006816:	e0bc      	b.n	8006992 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800682c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01d      	beq.n	8006870 <USB_ActivateEndpoint+0x650>
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800685c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686c:	b29b      	uxth	r3, r3
 800686e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006880:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01d      	beq.n	80068c8 <USB_ActivateEndpoint+0x6a8>
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	441a      	add	r2, r3
 80068b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	78db      	ldrb	r3, [r3, #3]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d024      	beq.n	800691a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80068ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068ee:	f083 0320 	eor.w	r3, r3, #32
 80068f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006914:	b29b      	uxth	r3, r3
 8006916:	8013      	strh	r3, [r2, #0]
 8006918:	e01d      	b.n	8006956 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006930:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006992:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006996:	4618      	mov	r0, r3
 8006998:	3774      	adds	r7, #116	; 0x74
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b08d      	sub	sp, #52	; 0x34
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	7b1b      	ldrb	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f040 808e 	bne.w	8006ad0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	785b      	ldrb	r3, [r3, #1]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d044      	beq.n	8006a46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	81bb      	strh	r3, [r7, #12]
 80069ca:	89bb      	ldrh	r3, [r7, #12]
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01b      	beq.n	8006a0c <USB_DeactivateEndpoint+0x6c>
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	817b      	strh	r3, [r7, #10]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	897b      	ldrh	r3, [r7, #10]
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a22:	813b      	strh	r3, [r7, #8]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	893b      	ldrh	r3, [r7, #8]
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]
 8006a44:	e192      	b.n	8006d6c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	827b      	strh	r3, [r7, #18]
 8006a54:	8a7b      	ldrh	r3, [r7, #18]
 8006a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01b      	beq.n	8006a96 <USB_DeactivateEndpoint+0xf6>
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a74:	823b      	strh	r3, [r7, #16]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	8a3b      	ldrh	r3, [r7, #16]
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	81fb      	strh	r3, [r7, #14]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	89fb      	ldrh	r3, [r7, #14]
 8006aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]
 8006ace:	e14d      	b.n	8006d6c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 80a5 	bne.w	8006c24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	843b      	strh	r3, [r7, #32]
 8006ae8:	8c3b      	ldrh	r3, [r7, #32]
 8006aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01b      	beq.n	8006b2a <USB_DeactivateEndpoint+0x18a>
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	83fb      	strh	r3, [r7, #30]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8bfb      	ldrh	r3, [r7, #30]
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	83bb      	strh	r3, [r7, #28]
 8006b38:	8bbb      	ldrh	r3, [r7, #28]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01b      	beq.n	8006b7a <USB_DeactivateEndpoint+0x1da>
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	837b      	strh	r3, [r7, #26]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	8b7b      	ldrh	r3, [r7, #26]
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b90:	833b      	strh	r3, [r7, #24]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	8b3b      	ldrh	r3, [r7, #24]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc8:	82fb      	strh	r3, [r7, #22]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	441a      	add	r2, r3
 8006bd4:	8afb      	ldrh	r3, [r7, #22]
 8006bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c00:	82bb      	strh	r3, [r7, #20]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	441a      	add	r2, r3
 8006c0c:	8abb      	ldrh	r3, [r7, #20]
 8006c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	8013      	strh	r3, [r2, #0]
 8006c22:	e0a3      	b.n	8006d6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01b      	beq.n	8006c74 <USB_DeactivateEndpoint+0x2d4>
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01b      	beq.n	8006cc4 <USB_DeactivateEndpoint+0x324>
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	441a      	add	r2, r3
 8006ce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	441a      	add	r2, r3
 8006d56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3734      	adds	r7, #52	; 0x34
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b0c2      	sub	sp, #264	; 0x108
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d86:	6018      	str	r0, [r3, #0]
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 86b7 	bne.w	8007b12 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d908      	bls.n	8006dd2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006dd0:	e007      	b.n	8006de2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	7b1b      	ldrb	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d13a      	bne.n	8006e68 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6959      	ldr	r1, [r3, #20]
 8006dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	88da      	ldrh	r2, [r3, #6]
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e18:	6800      	ldr	r0, [r0, #0]
 8006e1a:	f001 fc9c 	bl	8008756 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	011a      	lsls	r2, r3, #4
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4413      	add	r3, r2
 8006e54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	f000 be1f 	b.w	8007aa6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	78db      	ldrb	r3, [r3, #3]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	f040 8462 	bne.w	800773e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a1a      	ldr	r2, [r3, #32]
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	f240 83df 	bls.w	8007656 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	441a      	add	r2, r3
 8006edc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6a1a      	ldr	r2, [r3, #32]
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	1ad2      	subs	r2, r2, r3
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 81c7 	beq.w	80072c8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d177      	bne.n	8007046 <USB_EPStartXfer+0x2ce>
 8006f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	4413      	add	r3, r2
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	011a      	lsls	r2, r3, #4
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa6:	2b3e      	cmp	r3, #62	; 0x3e
 8006fa8:	d921      	bls.n	8006fee <USB_EPStartXfer+0x276>
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <USB_EPStartXfer+0x252>
 8006fc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	e050      	b.n	8007090 <USB_EPStartXfer+0x318>
 8006fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <USB_EPStartXfer+0x294>
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007004:	b29a      	uxth	r2, r3
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e041      	b.n	8007090 <USB_EPStartXfer+0x318>
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <USB_EPStartXfer+0x2b4>
 8007022:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007026:	3301      	adds	r3, #1
 8007028:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29a      	uxth	r2, r3
 8007032:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007036:	b29b      	uxth	r3, r3
 8007038:	029b      	lsls	r3, r3, #10
 800703a:	b29b      	uxth	r3, r3
 800703c:	4313      	orrs	r3, r2
 800703e:	b29a      	uxth	r2, r3
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	e024      	b.n	8007090 <USB_EPStartXfer+0x318>
 8007046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d11c      	bne.n	8007090 <USB_EPStartXfer+0x318>
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007064:	b29b      	uxth	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	4413      	add	r3, r2
 800706c:	633b      	str	r3, [r7, #48]	; 0x30
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	011a      	lsls	r2, r3, #4
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	4413      	add	r3, r2
 8007080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	b29a      	uxth	r2, r3
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	895b      	ldrh	r3, [r3, #10]
 800709c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6959      	ldr	r1, [r3, #20]
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	f001 fb49 	bl	8008756 <USB_WritePMA>
            ep->xfer_buff += len;
 80070c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	441a      	add	r2, r3
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6a1a      	ldr	r2, [r3, #32]
 80070ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d90f      	bls.n	800711e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80070fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	621a      	str	r2, [r3, #32]
 800711c:	e00e      	b.n	800713c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800711e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2200      	movs	r2, #0
 800713a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800713c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d177      	bne.n	800723c <USB_EPStartXfer+0x4c4>
 800714c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007166:	b29b      	uxth	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	4413      	add	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	011a      	lsls	r2, r3, #4
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	4413      	add	r3, r2
 8007182:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007192:	b29a      	uxth	r2, r3
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719c:	2b3e      	cmp	r3, #62	; 0x3e
 800719e:	d921      	bls.n	80071e4 <USB_EPStartXfer+0x46c>
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <USB_EPStartXfer+0x448>
 80071b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ba:	3b01      	subs	r3, #1
 80071bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071dc:	b29a      	uxth	r2, r3
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e056      	b.n	8007292 <USB_EPStartXfer+0x51a>
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <USB_EPStartXfer+0x48a>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e047      	b.n	8007292 <USB_EPStartXfer+0x51a>
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <USB_EPStartXfer+0x4aa>
 8007218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721c:	3301      	adds	r3, #1
 800721e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29a      	uxth	r2, r3
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722c:	b29b      	uxth	r3, r3
 800722e:	029b      	lsls	r3, r3, #10
 8007230:	b29b      	uxth	r3, r3
 8007232:	4313      	orrs	r3, r2
 8007234:	b29a      	uxth	r2, r3
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	e02a      	b.n	8007292 <USB_EPStartXfer+0x51a>
 800723c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	785b      	ldrb	r3, [r3, #1]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d122      	bne.n	8007292 <USB_EPStartXfer+0x51a>
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	623b      	str	r3, [r7, #32]
 8007258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	4413      	add	r3, r2
 800726e:	623b      	str	r3, [r7, #32]
 8007270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	011a      	lsls	r2, r3, #4
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	4413      	add	r3, r2
 8007282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728c:	b29a      	uxth	r2, r3
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	891b      	ldrh	r3, [r3, #8]
 800729e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6959      	ldr	r1, [r3, #20]
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072c0:	6800      	ldr	r0, [r0, #0]
 80072c2:	f001 fa48 	bl	8008756 <USB_WritePMA>
 80072c6:	e3ee      	b.n	8007aa6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d177      	bne.n	80073c8 <USB_EPStartXfer+0x650>
 80072d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f8:	4413      	add	r3, r2
 80072fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80072fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	011a      	lsls	r2, r3, #4
 800730a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800730c:	4413      	add	r3, r2
 800730e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007312:	647b      	str	r3, [r7, #68]	; 0x44
 8007314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800731e:	b29a      	uxth	r2, r3
 8007320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	2b3e      	cmp	r3, #62	; 0x3e
 800732a:	d921      	bls.n	8007370 <USB_EPStartXfer+0x5f8>
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733a:	f003 031f 	and.w	r3, r3, #31
 800733e:	2b00      	cmp	r3, #0
 8007340:	d104      	bne.n	800734c <USB_EPStartXfer+0x5d4>
 8007342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007346:	3b01      	subs	r3, #1
 8007348:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800734c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007356:	b29b      	uxth	r3, r3
 8007358:	029b      	lsls	r3, r3, #10
 800735a:	b29b      	uxth	r3, r3
 800735c:	4313      	orrs	r3, r2
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e056      	b.n	800741e <USB_EPStartXfer+0x6a6>
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <USB_EPStartXfer+0x616>
 8007378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007386:	b29a      	uxth	r2, r3
 8007388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	e047      	b.n	800741e <USB_EPStartXfer+0x6a6>
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d004      	beq.n	80073ae <USB_EPStartXfer+0x636>
 80073a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073a8:	3301      	adds	r3, #1
 80073aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	029b      	lsls	r3, r3, #10
 80073bc:	b29b      	uxth	r3, r3
 80073be:	4313      	orrs	r3, r2
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e02a      	b.n	800741e <USB_EPStartXfer+0x6a6>
 80073c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d122      	bne.n	800741e <USB_EPStartXfer+0x6a6>
 80073d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	653b      	str	r3, [r7, #80]	; 0x50
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f8:	4413      	add	r3, r2
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	011a      	lsls	r2, r3, #4
 800740a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740c:	4413      	add	r3, r2
 800740e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007418:	b29a      	uxth	r2, r3
 800741a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800741e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	891b      	ldrh	r3, [r3, #8]
 800742a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800742e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6959      	ldr	r1, [r3, #20]
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743e:	b29b      	uxth	r3, r3
 8007440:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007444:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007448:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800744c:	6800      	ldr	r0, [r0, #0]
 800744e:	f001 f982 	bl	8008756 <USB_WritePMA>
            ep->xfer_buff += len;
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007462:	441a      	add	r2, r3
 8007464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6a1a      	ldr	r2, [r3, #32]
 800747c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	429a      	cmp	r2, r3
 800748a:	d90f      	bls.n	80074ac <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800748c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749c:	1ad2      	subs	r2, r2, r3
 800749e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	621a      	str	r2, [r3, #32]
 80074aa:	e00e      	b.n	80074ca <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80074bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	643b      	str	r3, [r7, #64]	; 0x40
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d177      	bne.n	80075d6 <USB_EPStartXfer+0x85e>
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007500:	b29b      	uxth	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	4413      	add	r3, r2
 8007508:	63bb      	str	r3, [r7, #56]	; 0x38
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	011a      	lsls	r2, r3, #4
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	4413      	add	r3, r2
 800751c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800752c:	b29a      	uxth	r2, r3
 800752e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007536:	2b3e      	cmp	r3, #62	; 0x3e
 8007538:	d921      	bls.n	800757e <USB_EPStartXfer+0x806>
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <USB_EPStartXfer+0x7e2>
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007554:	3b01      	subs	r3, #1
 8007556:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800755a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29a      	uxth	r2, r3
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007564:	b29b      	uxth	r3, r3
 8007566:	029b      	lsls	r3, r3, #10
 8007568:	b29b      	uxth	r3, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	b29b      	uxth	r3, r3
 800756e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007576:	b29a      	uxth	r2, r3
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e050      	b.n	8007620 <USB_EPStartXfer+0x8a8>
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <USB_EPStartXfer+0x824>
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007594:	b29a      	uxth	r2, r3
 8007596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e041      	b.n	8007620 <USB_EPStartXfer+0x8a8>
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <USB_EPStartXfer+0x844>
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	3301      	adds	r3, #1
 80075b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e024      	b.n	8007620 <USB_EPStartXfer+0x8a8>
 80075d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d11c      	bne.n	8007620 <USB_EPStartXfer+0x8a8>
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	4413      	add	r3, r2
 80075fc:	643b      	str	r3, [r7, #64]	; 0x40
 80075fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	011a      	lsls	r2, r3, #4
 800760c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760e:	4413      	add	r3, r2
 8007610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761a:	b29a      	uxth	r2, r3
 800761c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	895b      	ldrh	r3, [r3, #10]
 800762c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6959      	ldr	r1, [r3, #20]
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007640:	b29b      	uxth	r3, r3
 8007642:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007646:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800764a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800764e:	6800      	ldr	r0, [r0, #0]
 8007650:	f001 f881 	bl	8008756 <USB_WritePMA>
 8007654:	e227      	b.n	8007aa6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80076ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076be:	b29b      	uxth	r3, r3
 80076c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076e2:	4413      	add	r3, r2
 80076e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	011a      	lsls	r2, r3, #4
 80076f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f6:	4413      	add	r3, r2
 80076f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007702:	b29a      	uxth	r2, r3
 8007704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007706:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	891b      	ldrh	r3, [r3, #8]
 8007714:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6959      	ldr	r1, [r3, #20]
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007728:	b29b      	uxth	r3, r3
 800772a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800772e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007732:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007736:	6800      	ldr	r0, [r0, #0]
 8007738:	f001 f80d 	bl	8008756 <USB_WritePMA>
 800773c:	e1b3      	b.n	8007aa6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800773e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6a1a      	ldr	r2, [r3, #32]
 800774a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800775c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80c6 	beq.w	8007910 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	673b      	str	r3, [r7, #112]	; 0x70
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d177      	bne.n	8007890 <USB_EPStartXfer+0xb18>
 80077a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c0:	4413      	add	r3, r2
 80077c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80077c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	011a      	lsls	r2, r3, #4
 80077d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077d4:	4413      	add	r3, r2
 80077d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077da:	667b      	str	r3, [r7, #100]	; 0x64
 80077dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f0:	2b3e      	cmp	r3, #62	; 0x3e
 80077f2:	d921      	bls.n	8007838 <USB_EPStartXfer+0xac0>
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <USB_EPStartXfer+0xa9c>
 800780a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800780e:	3b01      	subs	r3, #1
 8007810:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29a      	uxth	r2, r3
 800781a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800781e:	b29b      	uxth	r3, r3
 8007820:	029b      	lsls	r3, r3, #10
 8007822:	b29b      	uxth	r3, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	b29b      	uxth	r3, r3
 8007828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007830:	b29a      	uxth	r2, r3
 8007832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	e050      	b.n	80078da <USB_EPStartXfer+0xb62>
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <USB_EPStartXfer+0xade>
 8007840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784e:	b29a      	uxth	r2, r3
 8007850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e041      	b.n	80078da <USB_EPStartXfer+0xb62>
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <USB_EPStartXfer+0xafe>
 800786c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007870:	3301      	adds	r3, #1
 8007872:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29a      	uxth	r2, r3
 800787c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007880:	b29b      	uxth	r3, r3
 8007882:	029b      	lsls	r3, r3, #10
 8007884:	b29b      	uxth	r3, r3
 8007886:	4313      	orrs	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e024      	b.n	80078da <USB_EPStartXfer+0xb62>
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d11c      	bne.n	80078da <USB_EPStartXfer+0xb62>
 80078a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b4:	4413      	add	r3, r2
 80078b6:	673b      	str	r3, [r7, #112]	; 0x70
 80078b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	011a      	lsls	r2, r3, #4
 80078c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078c8:	4413      	add	r3, r2
 80078ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80078da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	895b      	ldrh	r3, [r3, #10]
 80078e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6959      	ldr	r1, [r3, #20]
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007900:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007904:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007908:	6800      	ldr	r0, [r0, #0]
 800790a:	f000 ff24 	bl	8008756 <USB_WritePMA>
 800790e:	e0ca      	b.n	8007aa6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d177      	bne.n	8007a10 <USB_EPStartXfer+0xc98>
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800792c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793a:	b29b      	uxth	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007940:	4413      	add	r3, r2
 8007942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	011a      	lsls	r2, r3, #4
 8007952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007954:	4413      	add	r3, r2
 8007956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800795a:	67bb      	str	r3, [r7, #120]	; 0x78
 800795c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007966:	b29a      	uxth	r2, r3
 8007968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007970:	2b3e      	cmp	r3, #62	; 0x3e
 8007972:	d921      	bls.n	80079b8 <USB_EPStartXfer+0xc40>
 8007974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	2b00      	cmp	r3, #0
 8007988:	d104      	bne.n	8007994 <USB_EPStartXfer+0xc1c>
 800798a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800798e:	3b01      	subs	r3, #1
 8007990:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29a      	uxth	r2, r3
 800799a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800799e:	b29b      	uxth	r3, r3
 80079a0:	029b      	lsls	r3, r3, #10
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	e05c      	b.n	8007a72 <USB_EPStartXfer+0xcfa>
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <USB_EPStartXfer+0xc5e>
 80079c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	e04d      	b.n	8007a72 <USB_EPStartXfer+0xcfa>
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <USB_EPStartXfer+0xc7e>
 80079ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079f0:	3301      	adds	r3, #1
 80079f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4313      	orrs	r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a0c:	801a      	strh	r2, [r3, #0]
 8007a0e:	e030      	b.n	8007a72 <USB_EPStartXfer+0xcfa>
 8007a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d128      	bne.n	8007a72 <USB_EPStartXfer+0xcfa>
 8007a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a44:	4413      	add	r3, r2
 8007a46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	011a      	lsls	r2, r3, #4
 8007a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	891b      	ldrh	r3, [r3, #8]
 8007a7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6959      	ldr	r1, [r3, #20]
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007aa0:	6800      	ldr	r0, [r0, #0]
 8007aa2:	f000 fe58 	bl	8008756 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007acc:	817b      	strh	r3, [r7, #10]
 8007ace:	897b      	ldrh	r3, [r7, #10]
 8007ad0:	f083 0310 	eor.w	r3, r3, #16
 8007ad4:	817b      	strh	r3, [r7, #10]
 8007ad6:	897b      	ldrh	r3, [r7, #10]
 8007ad8:	f083 0320 	eor.w	r3, r3, #32
 8007adc:	817b      	strh	r3, [r7, #10]
 8007ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	441a      	add	r2, r3
 8007af8:	897b      	ldrh	r3, [r7, #10]
 8007afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	8013      	strh	r3, [r2, #0]
 8007b0e:	f000 bcde 	b.w	80084ce <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	7b1b      	ldrb	r3, [r3, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f040 80bb 	bne.w	8007c9a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d917      	bls.n	8007b70 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b60:	1ad2      	subs	r2, r2, r3
 8007b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	619a      	str	r2, [r3, #24]
 8007b6e:	e00e      	b.n	8007b8e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	011a      	lsls	r2, r3, #4
 8007bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bca:	4413      	add	r3, r2
 8007bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007be6:	801a      	strh	r2, [r3, #0]
 8007be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bec:	2b3e      	cmp	r3, #62	; 0x3e
 8007bee:	d924      	bls.n	8007c3a <USB_EPStartXfer+0xec2>
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <USB_EPStartXfer+0xe98>
 8007c06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	4313      	orrs	r3, r2
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c34:	801a      	strh	r2, [r3, #0]
 8007c36:	f000 bc10 	b.w	800845a <USB_EPStartXfer+0x16e2>
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10c      	bne.n	8007c5c <USB_EPStartXfer+0xee4>
 8007c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	e3fe      	b.n	800845a <USB_EPStartXfer+0x16e2>
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c60:	085b      	lsrs	r3, r3, #1
 8007c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <USB_EPStartXfer+0xf04>
 8007c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c76:	3301      	adds	r3, #1
 8007c78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	029b      	lsls	r3, r3, #10
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	e3df      	b.n	800845a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	78db      	ldrb	r3, [r3, #3]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	f040 8218 	bne.w	80080dc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f040 809d 	bne.w	8007df8 <USB_EPStartXfer+0x1080>
 8007cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	011a      	lsls	r2, r3, #4
 8007cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b3e      	cmp	r3, #62	; 0x3e
 8007d26:	d92b      	bls.n	8007d80 <USB_EPStartXfer+0x1008>
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	095b      	lsrs	r3, r3, #5
 8007d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <USB_EPStartXfer+0xfe0>
 8007d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d52:	3b01      	subs	r3, #1
 8007d54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	029b      	lsls	r3, r3, #10
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d7c:	801a      	strh	r2, [r3, #0]
 8007d7e:	e070      	b.n	8007e62 <USB_EPStartXfer+0x10ea>
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10c      	bne.n	8007daa <USB_EPStartXfer+0x1032>
 8007d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	e05b      	b.n	8007e62 <USB_EPStartXfer+0x10ea>
 8007daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d004      	beq.n	8007dda <USB_EPStartXfer+0x1062>
 8007dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	029b      	lsls	r3, r3, #10
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	4313      	orrs	r3, r2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	e034      	b.n	8007e62 <USB_EPStartXfer+0x10ea>
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d12c      	bne.n	8007e62 <USB_EPStartXfer+0x10ea>
 8007e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	011a      	lsls	r2, r3, #4
 8007e40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e44:	4413      	add	r3, r2
 8007e46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	785b      	ldrb	r3, [r3, #1]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f040 809d 	bne.w	8007fbc <USB_EPStartXfer+0x1244>
 8007e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	011a      	lsls	r2, r3, #4
 8007eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8007eea:	d92b      	bls.n	8007f44 <USB_EPStartXfer+0x11cc>
 8007eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f003 031f 	and.w	r3, r3, #31
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <USB_EPStartXfer+0x11a4>
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f16:	3b01      	subs	r3, #1
 8007f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	029b      	lsls	r3, r3, #10
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f40:	801a      	strh	r2, [r3, #0]
 8007f42:	e069      	b.n	8008018 <USB_EPStartXfer+0x12a0>
 8007f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10c      	bne.n	8007f6e <USB_EPStartXfer+0x11f6>
 8007f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	e054      	b.n	8008018 <USB_EPStartXfer+0x12a0>
 8007f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <USB_EPStartXfer+0x1226>
 8007f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f98:	3301      	adds	r3, #1
 8007f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	029b      	lsls	r3, r3, #10
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e02d      	b.n	8008018 <USB_EPStartXfer+0x12a0>
 8007fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	785b      	ldrb	r3, [r3, #1]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d125      	bne.n	8008018 <USB_EPStartXfer+0x12a0>
 8007fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	011a      	lsls	r2, r3, #4
 8007ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008016:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 8218 	beq.w	800845a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800802a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800804a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800804e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d005      	beq.n	8008062 <USB_EPStartXfer+0x12ea>
 8008056:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800805a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10d      	bne.n	800807e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008062:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800806a:	2b00      	cmp	r3, #0
 800806c:	f040 81f5 	bne.w	800845a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008070:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	f040 81ee 	bne.w	800845a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800807e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80080a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	441a      	add	r2, r3
 80080c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]
 80080da:	e1be      	b.n	800845a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80080dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	78db      	ldrb	r3, [r3, #3]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	f040 81b4 	bne.w	8008456 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80080ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	429a      	cmp	r2, r3
 8008108:	d917      	bls.n	800813a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800810a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800811a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	619a      	str	r2, [r3, #24]
 8008138:	e00e      	b.n	8008158 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800814a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2200      	movs	r2, #0
 8008156:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f040 8085 	bne.w	8008274 <USB_EPStartXfer+0x14fc>
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008186:	b29b      	uxth	r3, r3
 8008188:	461a      	mov	r2, r3
 800818a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800818e:	4413      	add	r3, r2
 8008190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	011a      	lsls	r2, r3, #4
 80081a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081a6:	4413      	add	r3, r2
 80081a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081bc:	b29a      	uxth	r2, r3
 80081be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c8:	2b3e      	cmp	r3, #62	; 0x3e
 80081ca:	d923      	bls.n	8008214 <USB_EPStartXfer+0x149c>
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d104      	bne.n	80081ec <USB_EPStartXfer+0x1474>
 80081e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e6:	3b01      	subs	r3, #1
 80081e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	029b      	lsls	r3, r3, #10
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e060      	b.n	80082d6 <USB_EPStartXfer+0x155e>
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10c      	bne.n	8008236 <USB_EPStartXfer+0x14be>
 800821c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822c:	b29a      	uxth	r2, r3
 800822e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	e04f      	b.n	80082d6 <USB_EPStartXfer+0x155e>
 8008236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <USB_EPStartXfer+0x14de>
 800824c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008250:	3301      	adds	r3, #1
 8008252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29a      	uxth	r2, r3
 800825e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008262:	b29b      	uxth	r3, r3
 8008264:	029b      	lsls	r3, r3, #10
 8008266:	b29b      	uxth	r3, r3
 8008268:	4313      	orrs	r3, r2
 800826a:	b29a      	uxth	r2, r3
 800826c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	e030      	b.n	80082d6 <USB_EPStartXfer+0x155e>
 8008274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d128      	bne.n	80082d6 <USB_EPStartXfer+0x155e>
 8008284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	461a      	mov	r2, r3
 80082a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082a8:	4413      	add	r3, r2
 80082aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	011a      	lsls	r2, r3, #4
 80082bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082c0:	4413      	add	r3, r2
 80082c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f040 8085 	bne.w	8008400 <USB_EPStartXfer+0x1688>
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008312:	b29b      	uxth	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800831a:	4413      	add	r3, r2
 800831c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	011a      	lsls	r2, r3, #4
 800832e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008332:	4413      	add	r3, r2
 8008334:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800833c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008348:	b29a      	uxth	r2, r3
 800834a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800834e:	801a      	strh	r2, [r3, #0]
 8008350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008354:	2b3e      	cmp	r3, #62	; 0x3e
 8008356:	d923      	bls.n	80083a0 <USB_EPStartXfer+0x1628>
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	095b      	lsrs	r3, r3, #5
 800835e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008366:	f003 031f 	and.w	r3, r3, #31
 800836a:	2b00      	cmp	r3, #0
 800836c:	d104      	bne.n	8008378 <USB_EPStartXfer+0x1600>
 800836e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008372:	3b01      	subs	r3, #1
 8008374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008384:	b29b      	uxth	r3, r3
 8008386:	029b      	lsls	r3, r3, #10
 8008388:	b29b      	uxth	r3, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	e05c      	b.n	800845a <USB_EPStartXfer+0x16e2>
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10c      	bne.n	80083c2 <USB_EPStartXfer+0x164a>
 80083a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	e04b      	b.n	800845a <USB_EPStartXfer+0x16e2>
 80083c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c6:	085b      	lsrs	r3, r3, #1
 80083c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <USB_EPStartXfer+0x166a>
 80083d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083dc:	3301      	adds	r3, #1
 80083de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	029b      	lsls	r3, r3, #10
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	4313      	orrs	r3, r2
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083fc:	801a      	strh	r2, [r3, #0]
 80083fe:	e02c      	b.n	800845a <USB_EPStartXfer+0x16e2>
 8008400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	785b      	ldrb	r3, [r3, #1]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d124      	bne.n	800845a <USB_EPStartXfer+0x16e2>
 8008410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800841e:	b29b      	uxth	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008426:	4413      	add	r3, r2
 8008428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800842c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	011a      	lsls	r2, r3, #4
 800843a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800843e:	4413      	add	r3, r2
 8008440:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800844c:	b29a      	uxth	r2, r3
 800844e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	e001      	b.n	800845a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e03a      	b.n	80084d0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800845a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800847c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008480:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008484:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008488:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800848c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008490:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008494:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008498:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800849c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	441a      	add	r2, r3
 80084b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d020      	beq.n	800852e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008502:	81bb      	strh	r3, [r7, #12]
 8008504:	89bb      	ldrh	r3, [r7, #12]
 8008506:	f083 0310 	eor.w	r3, r3, #16
 800850a:	81bb      	strh	r3, [r7, #12]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	441a      	add	r2, r3
 8008516:	89bb      	ldrh	r3, [r7, #12]
 8008518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008528:	b29b      	uxth	r3, r3
 800852a:	8013      	strh	r3, [r2, #0]
 800852c:	e01f      	b.n	800856e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	b29b      	uxth	r3, r3
 800853c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008544:	81fb      	strh	r3, [r7, #14]
 8008546:	89fb      	ldrh	r3, [r7, #14]
 8008548:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800854c:	81fb      	strh	r3, [r7, #14]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	441a      	add	r2, r3
 8008558:	89fb      	ldrh	r3, [r7, #14]
 800855a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856a:	b29b      	uxth	r3, r3
 800856c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800857a:	b480      	push	{r7}
 800857c:	b087      	sub	sp, #28
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	7b1b      	ldrb	r3, [r3, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 809d 	bne.w	80086c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d04c      	beq.n	8008630 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	823b      	strh	r3, [r7, #16]
 80085a4:	8a3b      	ldrh	r3, [r7, #16]
 80085a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01b      	beq.n	80085e6 <USB_EPClearStall+0x6c>
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c4:	81fb      	strh	r3, [r7, #14]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	441a      	add	r2, r3
 80085d0:	89fb      	ldrh	r3, [r7, #14]
 80085d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	78db      	ldrb	r3, [r3, #3]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d06c      	beq.n	80086c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008604:	81bb      	strh	r3, [r7, #12]
 8008606:	89bb      	ldrh	r3, [r7, #12]
 8008608:	f083 0320 	eor.w	r3, r3, #32
 800860c:	81bb      	strh	r3, [r7, #12]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	441a      	add	r2, r3
 8008618:	89bb      	ldrh	r3, [r7, #12]
 800861a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862a:	b29b      	uxth	r3, r3
 800862c:	8013      	strh	r3, [r2, #0]
 800862e:	e04b      	b.n	80086c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	82fb      	strh	r3, [r7, #22]
 800863e:	8afb      	ldrh	r3, [r7, #22]
 8008640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01b      	beq.n	8008680 <USB_EPClearStall+0x106>
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	82bb      	strh	r3, [r7, #20]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	441a      	add	r2, r3
 800866a:	8abb      	ldrh	r3, [r7, #20]
 800866c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867c:	b29b      	uxth	r3, r3
 800867e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008696:	827b      	strh	r3, [r7, #18]
 8008698:	8a7b      	ldrh	r3, [r7, #18]
 800869a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800869e:	827b      	strh	r3, [r7, #18]
 80086a0:	8a7b      	ldrh	r3, [r7, #18]
 80086a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086a6:	827b      	strh	r3, [r7, #18]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	441a      	add	r2, r3
 80086b2:	8a7b      	ldrh	r3, [r7, #18]
 80086b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr

080086d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d103      	bne.n	80086ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2280      	movs	r2, #128	; 0x80
 80086ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr

08008722 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008730:	b29b      	uxth	r3, r3
 8008732:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008734:	68fb      	ldr	r3, [r7, #12]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr

08008756 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008756:	b480      	push	{r7}
 8008758:	b08b      	sub	sp, #44	; 0x2c
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4611      	mov	r1, r2
 8008762:	461a      	mov	r2, r3
 8008764:	460b      	mov	r3, r1
 8008766:	80fb      	strh	r3, [r7, #6]
 8008768:	4613      	mov	r3, r2
 800876a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800876c:	88bb      	ldrh	r3, [r7, #4]
 800876e:	3301      	adds	r3, #1
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	005a      	lsls	r2, r3, #1
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008788:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
 800878e:	e01e      	b.n	80087ce <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3301      	adds	r3, #1
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	b21a      	sxth	r2, r3
 80087a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	b21b      	sxth	r3, r3
 80087a8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	8a7a      	ldrh	r2, [r7, #18]
 80087ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	3302      	adds	r3, #2
 80087b4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	3302      	adds	r3, #2
 80087ba:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	3301      	adds	r3, #1
 80087c0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	3301      	adds	r3, #1
 80087c6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	3b01      	subs	r3, #1
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1dd      	bne.n	8008790 <USB_WritePMA+0x3a>
  }
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	372c      	adds	r7, #44	; 0x2c
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr

080087e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b08b      	sub	sp, #44	; 0x2c
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4611      	mov	r1, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	460b      	mov	r3, r1
 80087f0:	80fb      	strh	r3, [r7, #6]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087f6:	88bb      	ldrh	r3, [r7, #4]
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	005a      	lsls	r2, r3, #1
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008812:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
 8008818:	e01b      	b.n	8008852 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	3302      	adds	r3, #2
 8008826:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	3301      	adds	r3, #1
 8008834:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	0a1b      	lsrs	r3, r3, #8
 800883a:	b2da      	uxtb	r2, r3
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	3301      	adds	r3, #1
 8008844:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	3302      	adds	r3, #2
 800884a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	3b01      	subs	r3, #1
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e0      	bne.n	800881a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008858:	88bb      	ldrh	r3, [r7, #4]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d007      	beq.n	8008874 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29b      	uxth	r3, r3
 800886a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	b2da      	uxtb	r2, r3
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	701a      	strb	r2, [r3, #0]
  }
}
 8008874:	bf00      	nop
 8008876:	372c      	adds	r7, #44	; 0x2c
 8008878:	46bd      	mov	sp, r7
 800887a:	bc80      	pop	{r7}
 800887c:	4770      	bx	lr

0800887e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7c1b      	ldrb	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d115      	bne.n	80088c2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800889a:	2202      	movs	r2, #2
 800889c:	2181      	movs	r1, #129	; 0x81
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fefd 	bl	800a69e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ae:	2202      	movs	r2, #2
 80088b0:	2101      	movs	r1, #1
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 fef3 	bl	800a69e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80088c0:	e012      	b.n	80088e8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	2202      	movs	r2, #2
 80088c6:	2181      	movs	r1, #129	; 0x81
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fee8 	bl	800a69e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088d4:	2340      	movs	r3, #64	; 0x40
 80088d6:	2202      	movs	r2, #2
 80088d8:	2101      	movs	r1, #1
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fedf 	bl	800a69e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088e8:	2308      	movs	r3, #8
 80088ea:	2203      	movs	r2, #3
 80088ec:	2182      	movs	r1, #130	; 0x82
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fed5 	bl	800a69e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088fa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088fe:	f001 fff5 	bl	800a8ec <USBD_static_malloc>
 8008902:	4602      	mov	r2, r0
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
 8008918:	e026      	b.n	8008968 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008920:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7c1b      	ldrb	r3, [r3, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800894a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800894e:	2101      	movs	r1, #1
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 ff95 	bl	800a880 <USBD_LL_PrepareReceive>
 8008956:	e007      	b.n	8008968 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800895e:	2340      	movs	r3, #64	; 0x40
 8008960:	2101      	movs	r1, #1
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 ff8c 	bl	800a880 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008982:	2181      	movs	r1, #129	; 0x81
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 feb0 	bl	800a6ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008990:	2101      	movs	r1, #1
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 fea9 	bl	800a6ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089a0:	2182      	movs	r1, #130	; 0x82
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 fea1 	bl	800a6ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 ff9b 	bl	800a904 <USBD_static_free>
    pdev->pClassData = NULL;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d039      	beq.n	8008a7e <USBD_CDC_Setup+0x9e>
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	d17f      	bne.n	8008b0e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	88db      	ldrh	r3, [r3, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d029      	beq.n	8008a6a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	b25b      	sxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	da11      	bge.n	8008a44 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	88d2      	ldrh	r2, [r2, #6]
 8008a32:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a34:	6939      	ldr	r1, [r7, #16]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	88db      	ldrh	r3, [r3, #6]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 fa0a 	bl	8009e56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a42:	e06b      	b.n	8008b1c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	785a      	ldrb	r2, [r3, #1]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a5a:	6939      	ldr	r1, [r7, #16]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	88db      	ldrh	r3, [r3, #6]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fa25 	bl	8009eb2 <USBD_CtlPrepareRx>
      break;
 8008a68:	e058      	b.n	8008b1c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	7850      	ldrb	r0, [r2, #1]
 8008a76:	2200      	movs	r2, #0
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	4798      	blx	r3
      break;
 8008a7c:	e04e      	b.n	8008b1c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	2b0b      	cmp	r3, #11
 8008a84:	d02e      	beq.n	8008ae4 <USBD_CDC_Setup+0x104>
 8008a86:	2b0b      	cmp	r3, #11
 8008a88:	dc38      	bgt.n	8008afc <USBD_CDC_Setup+0x11c>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <USBD_CDC_Setup+0xb4>
 8008a8e:	2b0a      	cmp	r3, #10
 8008a90:	d014      	beq.n	8008abc <USBD_CDC_Setup+0xdc>
 8008a92:	e033      	b.n	8008afc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d107      	bne.n	8008aae <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a9e:	f107 030c 	add.w	r3, r7, #12
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 f9d5 	bl	8009e56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aac:	e02e      	b.n	8008b0c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f966 	bl	8009d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8008aba:	e027      	b.n	8008b0c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d107      	bne.n	8008ad6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ac6:	f107 030f 	add.w	r3, r7, #15
 8008aca:	2201      	movs	r2, #1
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 f9c1 	bl	8009e56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ad4:	e01a      	b.n	8008b0c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f952 	bl	8009d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae2:	e013      	b.n	8008b0c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d00d      	beq.n	8008b0a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 f946 	bl	8009d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8008af6:	2302      	movs	r3, #2
 8008af8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008afa:	e006      	b.n	8008b0a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f93f 	bl	8009d82 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b04:	2302      	movs	r3, #2
 8008b06:	75fb      	strb	r3, [r7, #23]
          break;
 8008b08:	e000      	b.n	8008b0c <USBD_CDC_Setup+0x12c>
          break;
 8008b0a:	bf00      	nop
      }
      break;
 8008b0c:	e006      	b.n	8008b1c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 f936 	bl	8009d82 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b16:	2302      	movs	r3, #2
 8008b18:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1a:	bf00      	nop
  }

  return ret;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b38:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b40:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d03a      	beq.n	8008bc2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b4c:	78fa      	ldrb	r2, [r7, #3]
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	331c      	adds	r3, #28
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d029      	beq.n	8008bb6 <USBD_CDC_DataIn+0x90>
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	331c      	adds	r3, #28
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	78f9      	ldrb	r1, [r7, #3]
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	4403      	add	r3, r0
 8008b82:	3338      	adds	r3, #56	; 0x38
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b8a:	fb01 f303 	mul.w	r3, r1, r3
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d110      	bne.n	8008bb6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	331c      	adds	r3, #28
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ba8:	78f9      	ldrb	r1, [r7, #3]
 8008baa:	2300      	movs	r3, #0
 8008bac:	2200      	movs	r2, #0
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 fe43 	bl	800a83a <USBD_LL_Transmit>
 8008bb4:	e003      	b.n	8008bbe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e000      	b.n	8008bc4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008bc2:	2302      	movs	r3, #2
  }
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 fe6e 	bl	800a8c6 <USBD_LL_GetRxDataSize>
 8008bea:	4602      	mov	r2, r0
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00d      	beq.n	8008c18 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c10:	4611      	mov	r1, r2
 8008c12:	4798      	blx	r3

    return USBD_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e000      	b.n	8008c1a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c18:	2302      	movs	r3, #2
  }
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c30:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d015      	beq.n	8008c68 <USBD_CDC_EP0_RxReady+0x46>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c42:	2bff      	cmp	r3, #255	; 0xff
 8008c44:	d010      	beq.n	8008c68 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c5c:	b292      	uxth	r2, r2
 8008c5e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	22ff      	movs	r2, #255	; 0xff
 8008c64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2243      	movs	r2, #67	; 0x43
 8008c80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c82:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	200000a0 	.word	0x200000a0

08008c94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2243      	movs	r2, #67	; 0x43
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	2000005c 	.word	0x2000005c

08008cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2243      	movs	r2, #67	; 0x43
 8008cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008cc2:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bc80      	pop	{r7}
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	200000e4 	.word	0x200000e4

08008cd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	220a      	movs	r2, #10
 8008ce0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bc80      	pop	{r7}
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20000018 	.word	0x20000018

08008cf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr

08008d20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	371c      	adds	r7, #28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr

08008d78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d01c      	beq.n	8008dcc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d115      	bne.n	8008dc8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	2181      	movs	r1, #129	; 0x81
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 fd3b 	bl	800a83a <USBD_LL_Transmit>

      return USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e002      	b.n	8008dce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008dcc:	2302      	movs	r3, #2
  }
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d017      	beq.n	8008e20 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	7c1b      	ldrb	r3, [r3, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e02:	2101      	movs	r1, #1
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fd3b 	bl	800a880 <USBD_LL_PrepareReceive>
 8008e0a:	e007      	b.n	8008e1c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	2101      	movs	r1, #1
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 fd32 	bl	800a880 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e000      	b.n	8008e22 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e20:	2302      	movs	r3, #2
  }
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	4613      	mov	r3, r2
 8008e36:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e01a      	b.n	8008e78 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	79fa      	ldrb	r2, [r7, #7]
 8008e6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 fb9f 	bl	800a5b4 <USBD_LL_Init>

  return USBD_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]
 8008ea0:	e001      	b.n	8008ea6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 fbd4 	bl	800a668 <USBD_LL_Start>

  return USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr

08008ede <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008eea:	2302      	movs	r3, #2
 8008eec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00c      	beq.n	8008f12 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	4611      	mov	r1, r2
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	4611      	mov	r1, r2
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3

  return USBD_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fed8 	bl	8009d0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f68:	461a      	mov	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f76:	f003 031f 	and.w	r3, r3, #31
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d016      	beq.n	8008fac <USBD_LL_SetupStage+0x6a>
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d81c      	bhi.n	8008fbc <USBD_LL_SetupStage+0x7a>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <USBD_LL_SetupStage+0x4a>
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d008      	beq.n	8008f9c <USBD_LL_SetupStage+0x5a>
 8008f8a:	e017      	b.n	8008fbc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9cb 	bl	8009330 <USBD_StdDevReq>
      break;
 8008f9a:	e01a      	b.n	8008fd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa2d 	bl	8009404 <USBD_StdItfReq>
      break;
 8008faa:	e012      	b.n	8008fd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa6d 	bl	8009494 <USBD_StdEPReq>
      break;
 8008fba:	e00a      	b.n	8008fd2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008fc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fbac 	bl	800a728 <USBD_LL_StallEP>
      break;
 8008fd0:	bf00      	nop
  }

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fea:	7afb      	ldrb	r3, [r7, #11]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d14b      	bne.n	8009088 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ff6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d134      	bne.n	800906c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	429a      	cmp	r2, r3
 800900c:	d919      	bls.n	8009042 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009024:	429a      	cmp	r2, r3
 8009026:	d203      	bcs.n	8009030 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800902c:	b29b      	uxth	r3, r3
 800902e:	e002      	b.n	8009036 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009034:	b29b      	uxth	r3, r3
 8009036:	461a      	mov	r2, r3
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 ff57 	bl	8009eee <USBD_CtlContinueRx>
 8009040:	e038      	b.n	80090b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009054:	2b03      	cmp	r3, #3
 8009056:	d105      	bne.n	8009064 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 ff54 	bl	8009f12 <USBD_CtlSendStatus>
 800906a:	e023      	b.n	80090b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009072:	2b05      	cmp	r3, #5
 8009074:	d11e      	bne.n	80090b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800907e:	2100      	movs	r1, #0
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f001 fb51 	bl	800a728 <USBD_LL_StallEP>
 8009086:	e015      	b.n	80090b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00d      	beq.n	80090b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800909a:	2b03      	cmp	r3, #3
 800909c:	d108      	bne.n	80090b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	7afa      	ldrb	r2, [r7, #11]
 80090a8:	4611      	mov	r1, r2
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	4798      	blx	r3
 80090ae:	e001      	b.n	80090b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090b0:	2302      	movs	r3, #2
 80090b2:	e000      	b.n	80090b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b086      	sub	sp, #24
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	460b      	mov	r3, r1
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d17f      	bne.n	80091d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3314      	adds	r3, #20
 80090d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d15c      	bne.n	800919c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d915      	bls.n	800911a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	b29b      	uxth	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fec1 	bl	8009e8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800910c:	2300      	movs	r3, #0
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f001 fbb4 	bl	800a880 <USBD_LL_PrepareReceive>
 8009118:	e04e      	b.n	80091b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	6912      	ldr	r2, [r2, #16]
 8009122:	fbb3 f1f2 	udiv	r1, r3, r2
 8009126:	fb01 f202 	mul.w	r2, r1, r2
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d11c      	bne.n	800916a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009138:	429a      	cmp	r2, r3
 800913a:	d316      	bcc.n	800916a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009146:	429a      	cmp	r2, r3
 8009148:	d20f      	bcs.n	800916a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 fe9d 	bl	8009e8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800915c:	2300      	movs	r3, #0
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f001 fb8c 	bl	800a880 <USBD_LL_PrepareReceive>
 8009168:	e026      	b.n	80091b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800917c:	2b03      	cmp	r3, #3
 800917e:	d105      	bne.n	800918c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f001 faca 	bl	800a728 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 fecf 	bl	8009f38 <USBD_CtlReceiveStatus>
 800919a:	e00d      	b.n	80091b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d004      	beq.n	80091b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d103      	bne.n	80091b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80091b0:	2180      	movs	r1, #128	; 0x80
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f001 fab8 	bl	800a728 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d11d      	bne.n	80091fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff fe81 	bl	8008eca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091d0:	e015      	b.n	80091fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00d      	beq.n	80091fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d108      	bne.n	80091fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	7afa      	ldrb	r2, [r7, #11]
 80091f2:	4611      	mov	r1, r2
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	4798      	blx	r3
 80091f8:	e001      	b.n	80091fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091fa:	2302      	movs	r3, #2
 80091fc:	e000      	b.n	8009200 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 fa41 	bl	800a69e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2240      	movs	r2, #64	; 0x40
 8009228:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800922c:	2340      	movs	r3, #64	; 0x40
 800922e:	2200      	movs	r2, #0
 8009230:	2180      	movs	r1, #128	; 0x80
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fa33 	bl	800a69e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2240      	movs	r2, #64	; 0x40
 8009242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d009      	beq.n	8009280 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6852      	ldr	r2, [r2, #4]
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	4611      	mov	r1, r2
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
  }

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2204      	movs	r2, #4
 80092c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bc80      	pop	{r7}
 80092ce:	4770      	bx	lr

080092d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d105      	bne.n	80092ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bc80      	pop	{r7}
 80092f8:	4770      	bx	lr

080092fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009308:	2b03      	cmp	r3, #3
 800930a:	d10b      	bne.n	8009324 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009346:	2b40      	cmp	r3, #64	; 0x40
 8009348:	d005      	beq.n	8009356 <USBD_StdDevReq+0x26>
 800934a:	2b40      	cmp	r3, #64	; 0x40
 800934c:	d84f      	bhi.n	80093ee <USBD_StdDevReq+0xbe>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d009      	beq.n	8009366 <USBD_StdDevReq+0x36>
 8009352:	2b20      	cmp	r3, #32
 8009354:	d14b      	bne.n	80093ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
      break;
 8009364:	e048      	b.n	80093f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b09      	cmp	r3, #9
 800936c:	d839      	bhi.n	80093e2 <USBD_StdDevReq+0xb2>
 800936e:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <USBD_StdDevReq+0x44>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093c5 	.word	0x080093c5
 8009378:	080093d9 	.word	0x080093d9
 800937c:	080093e3 	.word	0x080093e3
 8009380:	080093cf 	.word	0x080093cf
 8009384:	080093e3 	.word	0x080093e3
 8009388:	080093a7 	.word	0x080093a7
 800938c:	0800939d 	.word	0x0800939d
 8009390:	080093e3 	.word	0x080093e3
 8009394:	080093bb 	.word	0x080093bb
 8009398:	080093b1 	.word	0x080093b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f9dc 	bl	800975c <USBD_GetDescriptor>
          break;
 80093a4:	e022      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fb3f 	bl	8009a2c <USBD_SetAddress>
          break;
 80093ae:	e01d      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fb7e 	bl	8009ab4 <USBD_SetConfig>
          break;
 80093b8:	e018      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc07 	bl	8009bd0 <USBD_GetConfig>
          break;
 80093c2:	e013      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc37 	bl	8009c3a <USBD_GetStatus>
          break;
 80093cc:	e00e      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc65 	bl	8009ca0 <USBD_SetFeature>
          break;
 80093d6:	e009      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fc74 	bl	8009cc8 <USBD_ClrFeature>
          break;
 80093e0:	e004      	b.n	80093ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fccc 	bl	8009d82 <USBD_CtlError>
          break;
 80093ea:	bf00      	nop
      }
      break;
 80093ec:	e004      	b.n	80093f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fcc6 	bl	8009d82 <USBD_CtlError>
      break;
 80093f6:	bf00      	nop
  }

  return ret;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop

08009404 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d005      	beq.n	800942a <USBD_StdItfReq+0x26>
 800941e:	2b40      	cmp	r3, #64	; 0x40
 8009420:	d82e      	bhi.n	8009480 <USBD_StdItfReq+0x7c>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <USBD_StdItfReq+0x26>
 8009426:	2b20      	cmp	r3, #32
 8009428:	d12a      	bne.n	8009480 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009430:	3b01      	subs	r3, #1
 8009432:	2b02      	cmp	r3, #2
 8009434:	d81d      	bhi.n	8009472 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	889b      	ldrh	r3, [r3, #4]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b01      	cmp	r3, #1
 800943e:	d813      	bhi.n	8009468 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	88db      	ldrh	r3, [r3, #6]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d110      	bne.n	800947c <USBD_StdItfReq+0x78>
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10d      	bne.n	800947c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fd56 	bl	8009f12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009466:	e009      	b.n	800947c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc89 	bl	8009d82 <USBD_CtlError>
          break;
 8009470:	e004      	b.n	800947c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fc84 	bl	8009d82 <USBD_CtlError>
          break;
 800947a:	e000      	b.n	800947e <USBD_StdItfReq+0x7a>
          break;
 800947c:	bf00      	nop
      }
      break;
 800947e:	e004      	b.n	800948a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fc7d 	bl	8009d82 <USBD_CtlError>
      break;
 8009488:	bf00      	nop
  }

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	889b      	ldrh	r3, [r3, #4]
 80094a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d007      	beq.n	80094c4 <USBD_StdEPReq+0x30>
 80094b4:	2b40      	cmp	r3, #64	; 0x40
 80094b6:	f200 8146 	bhi.w	8009746 <USBD_StdEPReq+0x2b2>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <USBD_StdEPReq+0x40>
 80094be:	2b20      	cmp	r3, #32
 80094c0:	f040 8141 	bne.w	8009746 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
      break;
 80094d2:	e13d      	b.n	8009750 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d10a      	bne.n	80094f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	e12d      	b.n	8009752 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d007      	beq.n	800950e <USBD_StdEPReq+0x7a>
 80094fe:	2b03      	cmp	r3, #3
 8009500:	f300 811b 	bgt.w	800973a <USBD_StdEPReq+0x2a6>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d072      	beq.n	80095ee <USBD_StdEPReq+0x15a>
 8009508:	2b01      	cmp	r3, #1
 800950a:	d03a      	beq.n	8009582 <USBD_StdEPReq+0xee>
 800950c:	e115      	b.n	800973a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009514:	2b02      	cmp	r3, #2
 8009516:	d002      	beq.n	800951e <USBD_StdEPReq+0x8a>
 8009518:	2b03      	cmp	r3, #3
 800951a:	d015      	beq.n	8009548 <USBD_StdEPReq+0xb4>
 800951c:	e02b      	b.n	8009576 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00c      	beq.n	800953e <USBD_StdEPReq+0xaa>
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b80      	cmp	r3, #128	; 0x80
 8009528:	d009      	beq.n	800953e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 f8fa 	bl	800a728 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009534:	2180      	movs	r1, #128	; 0x80
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 f8f6 	bl	800a728 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800953c:	e020      	b.n	8009580 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fc1e 	bl	8009d82 <USBD_CtlError>
              break;
 8009546:	e01b      	b.n	8009580 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	885b      	ldrh	r3, [r3, #2]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10e      	bne.n	800956e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <USBD_StdEPReq+0xda>
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b80      	cmp	r3, #128	; 0x80
 800955a:	d008      	beq.n	800956e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	88db      	ldrh	r3, [r3, #6]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 f8dd 	bl	800a728 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fccf 	bl	8009f12 <USBD_CtlSendStatus>

              break;
 8009574:	e004      	b.n	8009580 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fc02 	bl	8009d82 <USBD_CtlError>
              break;
 800957e:	bf00      	nop
          }
          break;
 8009580:	e0e0      	b.n	8009744 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009588:	2b02      	cmp	r3, #2
 800958a:	d002      	beq.n	8009592 <USBD_StdEPReq+0xfe>
 800958c:	2b03      	cmp	r3, #3
 800958e:	d015      	beq.n	80095bc <USBD_StdEPReq+0x128>
 8009590:	e026      	b.n	80095e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00c      	beq.n	80095b2 <USBD_StdEPReq+0x11e>
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b80      	cmp	r3, #128	; 0x80
 800959c:	d009      	beq.n	80095b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 f8c0 	bl	800a728 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095a8:	2180      	movs	r1, #128	; 0x80
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f8bc 	bl	800a728 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095b0:	e01c      	b.n	80095ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fbe4 	bl	8009d82 <USBD_CtlError>
              break;
 80095ba:	e017      	b.n	80095ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	885b      	ldrh	r3, [r3, #2]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d112      	bne.n	80095ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d004      	beq.n	80095d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 f8c7 	bl	800a766 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc9a 	bl	8009f12 <USBD_CtlSendStatus>
              }
              break;
 80095de:	e004      	b.n	80095ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fbcd 	bl	8009d82 <USBD_CtlError>
              break;
 80095e8:	e000      	b.n	80095ec <USBD_StdEPReq+0x158>
              break;
 80095ea:	bf00      	nop
          }
          break;
 80095ec:	e0aa      	b.n	8009744 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d002      	beq.n	80095fe <USBD_StdEPReq+0x16a>
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d032      	beq.n	8009662 <USBD_StdEPReq+0x1ce>
 80095fc:	e097      	b.n	800972e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d007      	beq.n	8009614 <USBD_StdEPReq+0x180>
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b80      	cmp	r3, #128	; 0x80
 8009608:	d004      	beq.n	8009614 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fbb8 	bl	8009d82 <USBD_CtlError>
                break;
 8009612:	e091      	b.n	8009738 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	da0b      	bge.n	8009634 <USBD_StdEPReq+0x1a0>
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	3310      	adds	r3, #16
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	4413      	add	r3, r2
 8009630:	3304      	adds	r3, #4
 8009632:	e00b      	b.n	800964c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	3304      	adds	r3, #4
 800964c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2202      	movs	r2, #2
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fbfb 	bl	8009e56 <USBD_CtlSendData>
              break;
 8009660:	e06a      	b.n	8009738 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009666:	2b00      	cmp	r3, #0
 8009668:	da11      	bge.n	800968e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	3318      	adds	r3, #24
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d117      	bne.n	80096b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fb7b 	bl	8009d82 <USBD_CtlError>
                  break;
 800968c:	e054      	b.n	8009738 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	f003 020f 	and.w	r2, r3, #15
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d104      	bne.n	80096b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fb68 	bl	8009d82 <USBD_CtlError>
                  break;
 80096b2:	e041      	b.n	8009738 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	da0b      	bge.n	80096d4 <USBD_StdEPReq+0x240>
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	3310      	adds	r3, #16
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4413      	add	r3, r2
 80096d0:	3304      	adds	r3, #4
 80096d2:	e00b      	b.n	80096ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	4413      	add	r3, r2
 80096ea:	3304      	adds	r3, #4
 80096ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <USBD_StdEPReq+0x266>
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	2b80      	cmp	r3, #128	; 0x80
 80096f8:	d103      	bne.n	8009702 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	e00e      	b.n	8009720 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f84c 	bl	800a7a4 <USBD_LL_IsStallEP>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2201      	movs	r2, #1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e002      	b.n	8009720 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2202      	movs	r2, #2
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fb95 	bl	8009e56 <USBD_CtlSendData>
              break;
 800972c:	e004      	b.n	8009738 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fb26 	bl	8009d82 <USBD_CtlError>
              break;
 8009736:	bf00      	nop
          }
          break;
 8009738:	e004      	b.n	8009744 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fb20 	bl	8009d82 <USBD_CtlError>
          break;
 8009742:	bf00      	nop
      }
      break;
 8009744:	e004      	b.n	8009750 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fb1a 	bl	8009d82 <USBD_CtlError>
      break;
 800974e:	bf00      	nop
  }

  return ret;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	885b      	ldrh	r3, [r3, #2]
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	2b06      	cmp	r3, #6
 800977e:	f200 8128 	bhi.w	80099d2 <USBD_GetDescriptor+0x276>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <USBD_GetDescriptor+0x2c>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097bd 	.word	0x080097bd
 8009790:	080097fd 	.word	0x080097fd
 8009794:	080099d3 	.word	0x080099d3
 8009798:	080099d3 	.word	0x080099d3
 800979c:	08009973 	.word	0x08009973
 80097a0:	0800999f 	.word	0x0800999f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	7c12      	ldrb	r2, [r2, #16]
 80097b0:	f107 0108 	add.w	r1, r7, #8
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
      break;
 80097ba:	e112      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7c1b      	ldrb	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10d      	bne.n	80097e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097cc:	f107 0208 	add.w	r2, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	2202      	movs	r2, #2
 80097dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097de:	e100      	b.n	80099e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	f107 0208 	add.w	r2, r7, #8
 80097ec:	4610      	mov	r0, r2
 80097ee:	4798      	blx	r3
 80097f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3301      	adds	r3, #1
 80097f6:	2202      	movs	r2, #2
 80097f8:	701a      	strb	r2, [r3, #0]
      break;
 80097fa:	e0f2      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	885b      	ldrh	r3, [r3, #2]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b05      	cmp	r3, #5
 8009804:	f200 80ac 	bhi.w	8009960 <USBD_GetDescriptor+0x204>
 8009808:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <USBD_GetDescriptor+0xb4>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	08009829 	.word	0x08009829
 8009814:	0800985d 	.word	0x0800985d
 8009818:	08009891 	.word	0x08009891
 800981c:	080098c5 	.word	0x080098c5
 8009820:	080098f9 	.word	0x080098f9
 8009824:	0800992d 	.word	0x0800992d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00b      	beq.n	800984c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	7c12      	ldrb	r2, [r2, #16]
 8009840:	f107 0108 	add.w	r1, r7, #8
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
 8009848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800984a:	e091      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fa97 	bl	8009d82 <USBD_CtlError>
            err++;
 8009854:	7afb      	ldrb	r3, [r7, #11]
 8009856:	3301      	adds	r3, #1
 8009858:	72fb      	strb	r3, [r7, #11]
          break;
 800985a:	e089      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00b      	beq.n	8009880 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	7c12      	ldrb	r2, [r2, #16]
 8009874:	f107 0108 	add.w	r1, r7, #8
 8009878:	4610      	mov	r0, r2
 800987a:	4798      	blx	r3
 800987c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800987e:	e077      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa7d 	bl	8009d82 <USBD_CtlError>
            err++;
 8009888:	7afb      	ldrb	r3, [r7, #11]
 800988a:	3301      	adds	r3, #1
 800988c:	72fb      	strb	r3, [r7, #11]
          break;
 800988e:	e06f      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	7c12      	ldrb	r2, [r2, #16]
 80098a8:	f107 0108 	add.w	r1, r7, #8
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098b2:	e05d      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fa63 	bl	8009d82 <USBD_CtlError>
            err++;
 80098bc:	7afb      	ldrb	r3, [r7, #11]
 80098be:	3301      	adds	r3, #1
 80098c0:	72fb      	strb	r3, [r7, #11]
          break;
 80098c2:	e055      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00b      	beq.n	80098e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	7c12      	ldrb	r2, [r2, #16]
 80098dc:	f107 0108 	add.w	r1, r7, #8
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
 80098e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098e6:	e043      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa49 	bl	8009d82 <USBD_CtlError>
            err++;
 80098f0:	7afb      	ldrb	r3, [r7, #11]
 80098f2:	3301      	adds	r3, #1
 80098f4:	72fb      	strb	r3, [r7, #11]
          break;
 80098f6:	e03b      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	7c12      	ldrb	r2, [r2, #16]
 8009910:	f107 0108 	add.w	r1, r7, #8
 8009914:	4610      	mov	r0, r2
 8009916:	4798      	blx	r3
 8009918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991a:	e029      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa2f 	bl	8009d82 <USBD_CtlError>
            err++;
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	3301      	adds	r3, #1
 8009928:	72fb      	strb	r3, [r7, #11]
          break;
 800992a:	e021      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	7c12      	ldrb	r2, [r2, #16]
 8009944:	f107 0108 	add.w	r1, r7, #8
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
 800994c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994e:	e00f      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa15 	bl	8009d82 <USBD_CtlError>
            err++;
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	3301      	adds	r3, #1
 800995c:	72fb      	strb	r3, [r7, #11]
          break;
 800995e:	e007      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa0d 	bl	8009d82 <USBD_CtlError>
          err++;
 8009968:	7afb      	ldrb	r3, [r7, #11]
 800996a:	3301      	adds	r3, #1
 800996c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800996e:	e038      	b.n	80099e2 <USBD_GetDescriptor+0x286>
 8009970:	e037      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	7c1b      	ldrb	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009982:	f107 0208 	add.w	r2, r7, #8
 8009986:	4610      	mov	r0, r2
 8009988:	4798      	blx	r3
 800998a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800998c:	e029      	b.n	80099e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9f6 	bl	8009d82 <USBD_CtlError>
        err++;
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	3301      	adds	r3, #1
 800999a:	72fb      	strb	r3, [r7, #11]
      break;
 800999c:	e021      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7c1b      	ldrb	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10d      	bne.n	80099c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ae:	f107 0208 	add.w	r2, r7, #8
 80099b2:	4610      	mov	r0, r2
 80099b4:	4798      	blx	r3
 80099b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	2207      	movs	r2, #7
 80099be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099c0:	e00f      	b.n	80099e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f9dc 	bl	8009d82 <USBD_CtlError>
        err++;
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	3301      	adds	r3, #1
 80099ce:	72fb      	strb	r3, [r7, #11]
      break;
 80099d0:	e007      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f9d4 	bl	8009d82 <USBD_CtlError>
      err++;
 80099da:	7afb      	ldrb	r3, [r7, #11]
 80099dc:	3301      	adds	r3, #1
 80099de:	72fb      	strb	r3, [r7, #11]
      break;
 80099e0:	bf00      	nop
  }

  if (err != 0U)
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d11c      	bne.n	8009a22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099e8:	893b      	ldrh	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d011      	beq.n	8009a12 <USBD_GetDescriptor+0x2b6>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00d      	beq.n	8009a12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88da      	ldrh	r2, [r3, #6]
 80099fa:	893b      	ldrh	r3, [r7, #8]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bf28      	it	cs
 8009a00:	4613      	movcs	r3, r2
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a06:	893b      	ldrh	r3, [r7, #8]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fa22 	bl	8009e56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	88db      	ldrh	r3, [r3, #6]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d104      	bne.n	8009a24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa79 	bl	8009f12 <USBD_CtlSendStatus>
 8009a20:	e000      	b.n	8009a24 <USBD_GetDescriptor+0x2c8>
    return;
 8009a22:	bf00      	nop
    }
  }
}
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop

08009a2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	889b      	ldrh	r3, [r3, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d130      	bne.n	8009aa0 <USBD_SetAddress+0x74>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	88db      	ldrh	r3, [r3, #6]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d12c      	bne.n	8009aa0 <USBD_SetAddress+0x74>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	885b      	ldrh	r3, [r3, #2]
 8009a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8009a4c:	d828      	bhi.n	8009aa0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d104      	bne.n	8009a6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f98b 	bl	8009d82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6c:	e01d      	b.n	8009aaa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	7bfa      	ldrb	r2, [r7, #15]
 8009a72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 febe 	bl	800a7fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fa46 	bl	8009f12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a94:	e009      	b.n	8009aaa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9e:	e004      	b.n	8009aaa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f96d 	bl	8009d82 <USBD_CtlError>
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	4b41      	ldr	r3, [pc, #260]	; (8009bcc <USBD_SetConfig+0x118>)
 8009ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ac8:	4b40      	ldr	r3, [pc, #256]	; (8009bcc <USBD_SetConfig+0x118>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d904      	bls.n	8009ada <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f955 	bl	8009d82 <USBD_CtlError>
 8009ad8:	e075      	b.n	8009bc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d002      	beq.n	8009aea <USBD_SetConfig+0x36>
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d023      	beq.n	8009b30 <USBD_SetConfig+0x7c>
 8009ae8:	e062      	b.n	8009bb0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009aea:	4b38      	ldr	r3, [pc, #224]	; (8009bcc <USBD_SetConfig+0x118>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01a      	beq.n	8009b28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009af2:	4b36      	ldr	r3, [pc, #216]	; (8009bcc <USBD_SetConfig+0x118>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2203      	movs	r2, #3
 8009b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b04:	4b31      	ldr	r3, [pc, #196]	; (8009bcc <USBD_SetConfig+0x118>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff f9e7 	bl	8008ede <USBD_SetClassConfig>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d104      	bne.n	8009b20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f932 	bl	8009d82 <USBD_CtlError>
            return;
 8009b1e:	e052      	b.n	8009bc6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f9f6 	bl	8009f12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b26:	e04e      	b.n	8009bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f9f2 	bl	8009f12 <USBD_CtlSendStatus>
        break;
 8009b2e:	e04a      	b.n	8009bc6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b30:	4b26      	ldr	r3, [pc, #152]	; (8009bcc <USBD_SetConfig+0x118>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d112      	bne.n	8009b5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009b40:	4b22      	ldr	r3, [pc, #136]	; (8009bcc <USBD_SetConfig+0x118>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b4a:	4b20      	ldr	r3, [pc, #128]	; (8009bcc <USBD_SetConfig+0x118>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff f9e3 	bl	8008f1c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f9db 	bl	8009f12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b5c:	e033      	b.n	8009bc6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <USBD_SetConfig+0x118>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d01d      	beq.n	8009ba8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff f9d1 	bl	8008f1c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b7a:	4b14      	ldr	r3, [pc, #80]	; (8009bcc <USBD_SetConfig+0x118>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b84:	4b11      	ldr	r3, [pc, #68]	; (8009bcc <USBD_SetConfig+0x118>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff f9a7 	bl	8008ede <USBD_SetClassConfig>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d104      	bne.n	8009ba0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8f2 	bl	8009d82 <USBD_CtlError>
            return;
 8009b9e:	e012      	b.n	8009bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f9b6 	bl	8009f12 <USBD_CtlSendStatus>
        break;
 8009ba6:	e00e      	b.n	8009bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9b2 	bl	8009f12 <USBD_CtlSendStatus>
        break;
 8009bae:	e00a      	b.n	8009bc6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f8e5 	bl	8009d82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <USBD_SetConfig+0x118>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff f9ac 	bl	8008f1c <USBD_ClrClassConfig>
        break;
 8009bc4:	bf00      	nop
    }
  }
}
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	2000074c 	.word	0x2000074c

08009bd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	88db      	ldrh	r3, [r3, #6]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d004      	beq.n	8009bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f8cc 	bl	8009d82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bea:	e022      	b.n	8009c32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	dc02      	bgt.n	8009bfc <USBD_GetConfig+0x2c>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dc03      	bgt.n	8009c02 <USBD_GetConfig+0x32>
 8009bfa:	e015      	b.n	8009c28 <USBD_GetConfig+0x58>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d00b      	beq.n	8009c18 <USBD_GetConfig+0x48>
 8009c00:	e012      	b.n	8009c28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f920 	bl	8009e56 <USBD_CtlSendData>
        break;
 8009c16:	e00c      	b.n	8009c32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f918 	bl	8009e56 <USBD_CtlSendData>
        break;
 8009c26:	e004      	b.n	8009c32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f8a9 	bl	8009d82 <USBD_CtlError>
        break;
 8009c30:	bf00      	nop
}
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d81e      	bhi.n	8009c8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	88db      	ldrh	r3, [r3, #6]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d004      	beq.n	8009c62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f891 	bl	8009d82 <USBD_CtlError>
        break;
 8009c60:	e01a      	b.n	8009c98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f043 0202 	orr.w	r2, r3, #2
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	330c      	adds	r3, #12
 8009c82:	2202      	movs	r2, #2
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f8e5 	bl	8009e56 <USBD_CtlSendData>
      break;
 8009c8c:	e004      	b.n	8009c98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f876 	bl	8009d82 <USBD_CtlError>
      break;
 8009c96:	bf00      	nop
  }
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	885b      	ldrh	r3, [r3, #2]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d106      	bne.n	8009cc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f929 	bl	8009f12 <USBD_CtlSendStatus>
  }
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d80b      	bhi.n	8009cf6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	885b      	ldrh	r3, [r3, #2]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10c      	bne.n	8009d00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f90f 	bl	8009f12 <USBD_CtlSendStatus>
      }
      break;
 8009cf4:	e004      	b.n	8009d00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f842 	bl	8009d82 <USBD_CtlError>
      break;
 8009cfe:	e000      	b.n	8009d02 <USBD_ClrFeature+0x3a>
      break;
 8009d00:	bf00      	nop
  }
}
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	785a      	ldrb	r2, [r3, #1]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	3302      	adds	r3, #2
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	3303      	adds	r3, #3
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	3304      	adds	r3, #4
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	3305      	adds	r3, #5
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	021b      	lsls	r3, r3, #8
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	4413      	add	r3, r2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	3306      	adds	r3, #6
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3307      	adds	r3, #7
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4413      	add	r3, r2
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	80da      	strh	r2, [r3, #6]

}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bc80      	pop	{r7}
 8009d80:	4770      	bx	lr

08009d82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d8c:	2180      	movs	r1, #128	; 0x80
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fcca 	bl	800a728 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d94:	2100      	movs	r1, #0
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fcc6 	bl	800a728 <USBD_LL_StallEP>
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009db0:	2300      	movs	r3, #0
 8009db2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d032      	beq.n	8009e20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f834 	bl	8009e28 <USBD_GetLen>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	005b      	lsls	r3, r3, #1
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	75fa      	strb	r2, [r7, #23]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	4413      	add	r3, r2
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	7812      	ldrb	r2, [r2, #0]
 8009dde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	75fa      	strb	r2, [r7, #23]
 8009de6:	461a      	mov	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4413      	add	r3, r2
 8009dec:	2203      	movs	r2, #3
 8009dee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009df0:	e012      	b.n	8009e18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	60fa      	str	r2, [r7, #12]
 8009df8:	7dfa      	ldrb	r2, [r7, #23]
 8009dfa:	1c51      	adds	r1, r2, #1
 8009dfc:	75f9      	strb	r1, [r7, #23]
 8009dfe:	4611      	mov	r1, r2
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	440a      	add	r2, r1
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	75fa      	strb	r2, [r7, #23]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	4413      	add	r3, r2
 8009e14:	2200      	movs	r2, #0
 8009e16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e8      	bne.n	8009df2 <USBD_GetString+0x4e>
    }
  }
}
 8009e20:	bf00      	nop
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e34:	e005      	b.n	8009e42 <USBD_GetLen+0x1a>
  {
    len++;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1f5      	bne.n	8009e36 <USBD_GetLen+0xe>
  }

  return len;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr

08009e56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	4613      	mov	r3, r2
 8009e62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e6c:	88fa      	ldrh	r2, [r7, #6]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e72:	88fa      	ldrh	r2, [r7, #6]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fcdb 	bl	800a83a <USBD_LL_Transmit>

  return USBD_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 fcc9 	bl	800a83a <USBD_LL_Transmit>

  return USBD_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	60f8      	str	r0, [r7, #12]
 8009eba:	60b9      	str	r1, [r7, #8]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2203      	movs	r2, #3
 8009ec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ec8:	88fa      	ldrh	r2, [r7, #6]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ed8:	88fb      	ldrh	r3, [r7, #6]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	2100      	movs	r1, #0
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 fcce 	bl	800a880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009efc:	88fb      	ldrh	r3, [r7, #6]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	2100      	movs	r1, #0
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 fcbc 	bl	800a880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2204      	movs	r2, #4
 8009f1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f22:	2300      	movs	r3, #0
 8009f24:	2200      	movs	r2, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fc86 	bl	800a83a <USBD_LL_Transmit>

  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2205      	movs	r2, #5
 8009f44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f48:	2300      	movs	r3, #0
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fc96 	bl	800a880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4912      	ldr	r1, [pc, #72]	; (8009fb0 <MX_USB_DEVICE_Init+0x50>)
 8009f68:	4812      	ldr	r0, [pc, #72]	; (8009fb4 <MX_USB_DEVICE_Init+0x54>)
 8009f6a:	f7fe ff5e 	bl	8008e2a <USBD_Init>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f74:	f7f6 ff12 	bl	8000d9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f78:	490f      	ldr	r1, [pc, #60]	; (8009fb8 <MX_USB_DEVICE_Init+0x58>)
 8009f7a:	480e      	ldr	r0, [pc, #56]	; (8009fb4 <MX_USB_DEVICE_Init+0x54>)
 8009f7c:	f7fe ff80 	bl	8008e80 <USBD_RegisterClass>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f86:	f7f6 ff09 	bl	8000d9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f8a:	490c      	ldr	r1, [pc, #48]	; (8009fbc <MX_USB_DEVICE_Init+0x5c>)
 8009f8c:	4809      	ldr	r0, [pc, #36]	; (8009fb4 <MX_USB_DEVICE_Init+0x54>)
 8009f8e:	f7fe feb1 	bl	8008cf4 <USBD_CDC_RegisterInterface>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f98:	f7f6 ff00 	bl	8000d9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f9c:	4805      	ldr	r0, [pc, #20]	; (8009fb4 <MX_USB_DEVICE_Init+0x54>)
 8009f9e:	f7fe ff88 	bl	8008eb2 <USBD_Start>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fa8:	f7f6 fef8 	bl	8000d9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fac:	bf00      	nop
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20000138 	.word	0x20000138
 8009fb4:	20000750 	.word	0x20000750
 8009fb8:	20000024 	.word	0x20000024
 8009fbc:	20000128 	.word	0x20000128

08009fc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4905      	ldr	r1, [pc, #20]	; (8009fdc <CDC_Init_FS+0x1c>)
 8009fc8:	4805      	ldr	r0, [pc, #20]	; (8009fe0 <CDC_Init_FS+0x20>)
 8009fca:	f7fe fea9 	bl	8008d20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fce:	4905      	ldr	r1, [pc, #20]	; (8009fe4 <CDC_Init_FS+0x24>)
 8009fd0:	4803      	ldr	r0, [pc, #12]	; (8009fe0 <CDC_Init_FS+0x20>)
 8009fd2:	f7fe febe 	bl	8008d52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20000b14 	.word	0x20000b14
 8009fe0:	20000750 	.word	0x20000750
 8009fe4:	20000a14 	.word	0x20000a14

08009fe8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bc80      	pop	{r7}
 8009ff4:	4770      	bx	lr
	...

08009ff8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
 800a004:	4613      	mov	r3, r2
 800a006:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	2b23      	cmp	r3, #35	; 0x23
 800a00c:	f200 808c 	bhi.w	800a128 <CDC_Control_FS+0x130>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <CDC_Control_FS+0x20>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a129 	.word	0x0800a129
 800a01c:	0800a129 	.word	0x0800a129
 800a020:	0800a129 	.word	0x0800a129
 800a024:	0800a129 	.word	0x0800a129
 800a028:	0800a129 	.word	0x0800a129
 800a02c:	0800a129 	.word	0x0800a129
 800a030:	0800a129 	.word	0x0800a129
 800a034:	0800a129 	.word	0x0800a129
 800a038:	0800a129 	.word	0x0800a129
 800a03c:	0800a129 	.word	0x0800a129
 800a040:	0800a129 	.word	0x0800a129
 800a044:	0800a129 	.word	0x0800a129
 800a048:	0800a129 	.word	0x0800a129
 800a04c:	0800a129 	.word	0x0800a129
 800a050:	0800a129 	.word	0x0800a129
 800a054:	0800a129 	.word	0x0800a129
 800a058:	0800a129 	.word	0x0800a129
 800a05c:	0800a129 	.word	0x0800a129
 800a060:	0800a129 	.word	0x0800a129
 800a064:	0800a129 	.word	0x0800a129
 800a068:	0800a129 	.word	0x0800a129
 800a06c:	0800a129 	.word	0x0800a129
 800a070:	0800a129 	.word	0x0800a129
 800a074:	0800a129 	.word	0x0800a129
 800a078:	0800a129 	.word	0x0800a129
 800a07c:	0800a129 	.word	0x0800a129
 800a080:	0800a129 	.word	0x0800a129
 800a084:	0800a129 	.word	0x0800a129
 800a088:	0800a129 	.word	0x0800a129
 800a08c:	0800a129 	.word	0x0800a129
 800a090:	0800a129 	.word	0x0800a129
 800a094:	0800a129 	.word	0x0800a129
 800a098:	0800a0a9 	.word	0x0800a0a9
 800a09c:	0800a0e3 	.word	0x0800a0e3
 800a0a0:	0800a129 	.word	0x0800a129
 800a0a4:	0800a129 	.word	0x0800a129
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	myLineCodeBuf[0] = pbuf[0];
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781a      	ldrb	r2, [r3, #0]
 800a0ac:	4b22      	ldr	r3, [pc, #136]	; (800a138 <CDC_Control_FS+0x140>)
 800a0ae:	701a      	strb	r2, [r3, #0]
    	myLineCodeBuf[1] = pbuf[1];
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	785a      	ldrb	r2, [r3, #1]
 800a0b4:	4b20      	ldr	r3, [pc, #128]	; (800a138 <CDC_Control_FS+0x140>)
 800a0b6:	705a      	strb	r2, [r3, #1]
    	myLineCodeBuf[2] = pbuf[2];
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	789a      	ldrb	r2, [r3, #2]
 800a0bc:	4b1e      	ldr	r3, [pc, #120]	; (800a138 <CDC_Control_FS+0x140>)
 800a0be:	709a      	strb	r2, [r3, #2]
    	myLineCodeBuf[3] = pbuf[3];
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	78da      	ldrb	r2, [r3, #3]
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <CDC_Control_FS+0x140>)
 800a0c6:	70da      	strb	r2, [r3, #3]
    	myLineCodeBuf[4] = pbuf[4];
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	791a      	ldrb	r2, [r3, #4]
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	; (800a138 <CDC_Control_FS+0x140>)
 800a0ce:	711a      	strb	r2, [r3, #4]
    	myLineCodeBuf[5] = pbuf[5];
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	795a      	ldrb	r2, [r3, #5]
 800a0d4:	4b18      	ldr	r3, [pc, #96]	; (800a138 <CDC_Control_FS+0x140>)
 800a0d6:	715a      	strb	r2, [r3, #5]
    	myLineCodeBuf[6] = pbuf[6];
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	799a      	ldrb	r2, [r3, #6]
 800a0dc:	4b16      	ldr	r3, [pc, #88]	; (800a138 <CDC_Control_FS+0x140>)
 800a0de:	719a      	strb	r2, [r3, #6]
    break;
 800a0e0:	e023      	b.n	800a12a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = myLineCodeBuf[0];
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <CDC_Control_FS+0x140>)
 800a0e4:	781a      	ldrb	r2, [r3, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = myLineCodeBuf[1];
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	4a12      	ldr	r2, [pc, #72]	; (800a138 <CDC_Control_FS+0x140>)
 800a0f0:	7852      	ldrb	r2, [r2, #1]
 800a0f2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = myLineCodeBuf[2];
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	3302      	adds	r3, #2
 800a0f8:	4a0f      	ldr	r2, [pc, #60]	; (800a138 <CDC_Control_FS+0x140>)
 800a0fa:	7892      	ldrb	r2, [r2, #2]
 800a0fc:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = myLineCodeBuf[3];
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	3303      	adds	r3, #3
 800a102:	4a0d      	ldr	r2, [pc, #52]	; (800a138 <CDC_Control_FS+0x140>)
 800a104:	78d2      	ldrb	r2, [r2, #3]
 800a106:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = myLineCodeBuf[4];
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <CDC_Control_FS+0x140>)
 800a10e:	7912      	ldrb	r2, [r2, #4]
 800a110:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = myLineCodeBuf[5];
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3305      	adds	r3, #5
 800a116:	4a08      	ldr	r2, [pc, #32]	; (800a138 <CDC_Control_FS+0x140>)
 800a118:	7952      	ldrb	r2, [r2, #5]
 800a11a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = myLineCodeBuf[6];
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	3306      	adds	r3, #6
 800a120:	4a05      	ldr	r2, [pc, #20]	; (800a138 <CDC_Control_FS+0x140>)
 800a122:	7992      	ldrb	r2, [r2, #6]
 800a124:	701a      	strb	r2, [r3, #0]
    break;
 800a126:	e000      	b.n	800a12a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a128:	bf00      	nop
  }

  return (USBD_OK);
 800a12a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	bc80      	pop	{r7}
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	20000c14 	.word	0x20000c14

0800a13c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a146:	4b16      	ldr	r3, [pc, #88]	; (800a1a0 <CDC_Receive_FS+0x64>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d007      	beq.n	800a15e <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a14e:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <CDC_Receive_FS+0x64>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	6812      	ldr	r2, [r2, #0]
 800a156:	b292      	uxth	r2, r2
 800a158:	4611      	mov	r1, r2
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	4798      	blx	r3

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	4810      	ldr	r0, [pc, #64]	; (800a1a4 <CDC_Receive_FS+0x68>)
 800a162:	f7fe fdf6 	bl	8008d52 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a166:	480f      	ldr	r0, [pc, #60]	; (800a1a4 <CDC_Receive_FS+0x68>)
 800a168:	f7fe fe35 	bl	8008dd6 <USBD_CDC_ReceivePacket>

	memset (datosComUSB.bufferRx, '\0', 256);  // clear the buffer
 800a16c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a170:	2100      	movs	r1, #0
 800a172:	480d      	ldr	r0, [pc, #52]	; (800a1a8 <CDC_Receive_FS+0x6c>)
 800a174:	f000 fc06 	bl	800a984 <memset>
	uint8_t len = (uint8_t)*Len;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	73fb      	strb	r3, [r7, #15]
	memcpy(datosComUSB.bufferRx, Buf, len);  // copy the data to the buffer
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	461a      	mov	r2, r3
 800a182:	6879      	ldr	r1, [r7, #4]
 800a184:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <CDC_Receive_FS+0x6c>)
 800a186:	f000 fc29 	bl	800a9dc <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	461a      	mov	r2, r3
 800a18e:	2100      	movs	r1, #0
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fbf7 	bl	800a984 <memset>

	return (USBD_OK);
 800a196:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20000c1c 	.word	0x20000c1c
 800a1a4:	20000750 	.word	0x20000750
 800a1a8:	20000533 	.word	0x20000533

0800a1ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <CDC_Transmit_FS+0x48>)
 800a1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e00b      	b.n	800a1ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1d2:	887b      	ldrh	r3, [r7, #2]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4806      	ldr	r0, [pc, #24]	; (800a1f4 <CDC_Transmit_FS+0x48>)
 800a1da:	f7fe fda1 	bl	8008d20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a1de:	4805      	ldr	r0, [pc, #20]	; (800a1f4 <CDC_Transmit_FS+0x48>)
 800a1e0:	f7fe fdca 	bl	8008d78 <USBD_CDC_TransmitPacket>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000750 	.word	0x20000750

0800a1f8 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a200:	4a03      	ldr	r2, [pc, #12]	; (800a210 <CDC_AttachRxData+0x18>)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6013      	str	r3, [r2, #0]
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr
 800a210:	20000c1c 	.word	0x20000c1c

0800a214 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2212      	movs	r2, #18
 800a224:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a226:	4b03      	ldr	r3, [pc, #12]	; (800a234 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20000154 	.word	0x20000154

0800a238 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2204      	movs	r2, #4
 800a248:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	bc80      	pop	{r7}
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	20000168 	.word	0x20000168

0800a25c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	6039      	str	r1, [r7, #0]
 800a266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	4907      	ldr	r1, [pc, #28]	; (800a290 <USBD_FS_ProductStrDescriptor+0x34>)
 800a272:	4808      	ldr	r0, [pc, #32]	; (800a294 <USBD_FS_ProductStrDescriptor+0x38>)
 800a274:	f7ff fd96 	bl	8009da4 <USBD_GetString>
 800a278:	e004      	b.n	800a284 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4904      	ldr	r1, [pc, #16]	; (800a290 <USBD_FS_ProductStrDescriptor+0x34>)
 800a27e:	4805      	ldr	r0, [pc, #20]	; (800a294 <USBD_FS_ProductStrDescriptor+0x38>)
 800a280:	f7ff fd90 	bl	8009da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a284:	4b02      	ldr	r3, [pc, #8]	; (800a290 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000c20 	.word	0x20000c20
 800a294:	0800aa10 	.word	0x0800aa10

0800a298 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	6039      	str	r1, [r7, #0]
 800a2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	4904      	ldr	r1, [pc, #16]	; (800a2b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2a8:	4804      	ldr	r0, [pc, #16]	; (800a2bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2aa:	f7ff fd7b 	bl	8009da4 <USBD_GetString>
  return USBD_StrDesc;
 800a2ae:	4b02      	ldr	r3, [pc, #8]	; (800a2b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20000c20 	.word	0x20000c20
 800a2bc:	0800aa28 	.word	0x0800aa28

0800a2c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	221a      	movs	r2, #26
 800a2d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2d2:	f000 f843 	bl	800a35c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2d6:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	2000016c 	.word	0x2000016c

0800a2e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	4907      	ldr	r1, [pc, #28]	; (800a318 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2fa:	4808      	ldr	r0, [pc, #32]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2fc:	f7ff fd52 	bl	8009da4 <USBD_GetString>
 800a300:	e004      	b.n	800a30c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	4904      	ldr	r1, [pc, #16]	; (800a318 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a306:	4805      	ldr	r0, [pc, #20]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a308:	f7ff fd4c 	bl	8009da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a30c:	4b02      	ldr	r3, [pc, #8]	; (800a318 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20000c20 	.word	0x20000c20
 800a31c:	0800aa3c 	.word	0x0800aa3c

0800a320 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	6039      	str	r1, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d105      	bne.n	800a33e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	4907      	ldr	r1, [pc, #28]	; (800a354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a336:	4808      	ldr	r0, [pc, #32]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a338:	f7ff fd34 	bl	8009da4 <USBD_GetString>
 800a33c:	e004      	b.n	800a348 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	4904      	ldr	r1, [pc, #16]	; (800a354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a342:	4805      	ldr	r0, [pc, #20]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a344:	f7ff fd2e 	bl	8009da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000c20 	.word	0x20000c20
 800a358:	0800aa48 	.word	0x0800aa48

0800a35c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a362:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <Get_SerialNum+0x44>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a368:	4b0e      	ldr	r3, [pc, #56]	; (800a3a4 <Get_SerialNum+0x48>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a36e:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <Get_SerialNum+0x4c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4413      	add	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d009      	beq.n	800a396 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a382:	2208      	movs	r2, #8
 800a384:	4909      	ldr	r1, [pc, #36]	; (800a3ac <Get_SerialNum+0x50>)
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 f814 	bl	800a3b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a38c:	2204      	movs	r2, #4
 800a38e:	4908      	ldr	r1, [pc, #32]	; (800a3b0 <Get_SerialNum+0x54>)
 800a390:	68b8      	ldr	r0, [r7, #8]
 800a392:	f000 f80f 	bl	800a3b4 <IntToUnicode>
  }
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	1ffff7e8 	.word	0x1ffff7e8
 800a3a4:	1ffff7ec 	.word	0x1ffff7ec
 800a3a8:	1ffff7f0 	.word	0x1ffff7f0
 800a3ac:	2000016e 	.word	0x2000016e
 800a3b0:	2000017e 	.word	0x2000017e

0800a3b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75fb      	strb	r3, [r7, #23]
 800a3ca:	e027      	b.n	800a41c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	0f1b      	lsrs	r3, r3, #28
 800a3d0:	2b09      	cmp	r3, #9
 800a3d2:	d80b      	bhi.n	800a3ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	0f1b      	lsrs	r3, r3, #28
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4619      	mov	r1, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3230      	adds	r2, #48	; 0x30
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	e00a      	b.n	800a402 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	0f1b      	lsrs	r3, r3, #28
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	7dfb      	ldrb	r3, [r7, #23]
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	440b      	add	r3, r1
 800a3fc:	3237      	adds	r2, #55	; 0x37
 800a3fe:	b2d2      	uxtb	r2, r2
 800a400:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	3301      	adds	r3, #1
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	4413      	add	r3, r2
 800a412:	2200      	movs	r2, #0
 800a414:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	3301      	adds	r3, #1
 800a41a:	75fb      	strb	r3, [r7, #23]
 800a41c:	7dfa      	ldrb	r2, [r7, #23]
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	429a      	cmp	r2, r3
 800a422:	d3d3      	bcc.n	800a3cc <IntToUnicode+0x18>
  }
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop
 800a428:	371c      	adds	r7, #28
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bc80      	pop	{r7}
 800a42e:	4770      	bx	lr

0800a430 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a0d      	ldr	r2, [pc, #52]	; (800a474 <HAL_PCD_MspInit+0x44>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d113      	bne.n	800a46a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a442:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <HAL_PCD_MspInit+0x48>)
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	4a0c      	ldr	r2, [pc, #48]	; (800a478 <HAL_PCD_MspInit+0x48>)
 800a448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a44c:	61d3      	str	r3, [r2, #28]
 800a44e:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <HAL_PCD_MspInit+0x48>)
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a45a:	2200      	movs	r2, #0
 800a45c:	2100      	movs	r1, #0
 800a45e:	2014      	movs	r0, #20
 800a460:	f7f7 fba9 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a464:	2014      	movs	r0, #20
 800a466:	f7f7 fbc2 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	40005c00 	.word	0x40005c00
 800a478:	40021000 	.word	0x40021000

0800a47c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f7fe fd55 	bl	8008f42 <USBD_LL_SetupStage>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a4b2:	78fa      	ldrb	r2, [r7, #3]
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	440b      	add	r3, r1
 800a4c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	78fb      	ldrb	r3, [r7, #3]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	f7fe fd87 	bl	8008fdc <USBD_LL_DataOutStage>
}
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a4e8:	78fa      	ldrb	r2, [r7, #3]
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	440b      	add	r3, r1
 800a4f6:	333c      	adds	r3, #60	; 0x3c
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f7fe fdde 	bl	80090be <USBD_LL_DataInStage>
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe feee 	bl	80092fa <USBD_LL_SOF>
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a52e:	2301      	movs	r3, #1
 800a530:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	2b02      	cmp	r3, #2
 800a538:	d001      	beq.n	800a53e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a53a:	f7f6 fc2f 	bl	8000d9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a544:	7bfa      	ldrb	r2, [r7, #15]
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fe fe9e 	bl	800928a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe fe57 	bl	8009208 <USBD_LL_Reset>
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fe98 	bl	80092a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a580:	4b04      	ldr	r3, [pc, #16]	; (800a594 <HAL_PCD_SuspendCallback+0x30>)
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	4a03      	ldr	r2, [pc, #12]	; (800a594 <HAL_PCD_SuspendCallback+0x30>)
 800a586:	f043 0306 	orr.w	r3, r3, #6
 800a58a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	e000ed00 	.word	0xe000ed00

0800a598 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fe92 	bl	80092d0 <USBD_LL_Resume>
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a5bc:	4a28      	ldr	r2, [pc, #160]	; (800a660 <USBD_LL_Init+0xac>)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a26      	ldr	r2, [pc, #152]	; (800a660 <USBD_LL_Init+0xac>)
 800a5c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a5cc:	4b24      	ldr	r3, [pc, #144]	; (800a660 <USBD_LL_Init+0xac>)
 800a5ce:	4a25      	ldr	r2, [pc, #148]	; (800a664 <USBD_LL_Init+0xb0>)
 800a5d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a5d2:	4b23      	ldr	r3, [pc, #140]	; (800a660 <USBD_LL_Init+0xac>)
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a5d8:	4b21      	ldr	r3, [pc, #132]	; (800a660 <USBD_LL_Init+0xac>)
 800a5da:	2202      	movs	r2, #2
 800a5dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a5de:	4b20      	ldr	r3, [pc, #128]	; (800a660 <USBD_LL_Init+0xac>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a5e4:	4b1e      	ldr	r3, [pc, #120]	; (800a660 <USBD_LL_Init+0xac>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a5ea:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <USBD_LL_Init+0xac>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a5f0:	481b      	ldr	r0, [pc, #108]	; (800a660 <USBD_LL_Init+0xac>)
 800a5f2:	f7f7 ff55 	bl	80024a0 <HAL_PCD_Init>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a5fc:	f7f6 fbce 	bl	8000d9c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a606:	2318      	movs	r3, #24
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	f7f9 fc74 	bl	8003ef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a616:	2358      	movs	r3, #88	; 0x58
 800a618:	2200      	movs	r2, #0
 800a61a:	2180      	movs	r1, #128	; 0x80
 800a61c:	f7f9 fc6c 	bl	8003ef8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a626:	23c0      	movs	r3, #192	; 0xc0
 800a628:	2200      	movs	r2, #0
 800a62a:	2181      	movs	r1, #129	; 0x81
 800a62c:	f7f9 fc64 	bl	8003ef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a636:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a63a:	2200      	movs	r2, #0
 800a63c:	2101      	movs	r1, #1
 800a63e:	f7f9 fc5b 	bl	8003ef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a64c:	2200      	movs	r2, #0
 800a64e:	2182      	movs	r1, #130	; 0x82
 800a650:	f7f9 fc52 	bl	8003ef8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000e20 	.word	0x20000e20
 800a664:	40005c00 	.word	0x40005c00

0800a668 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7f8 f80d 	bl	800269e <HAL_PCD_Start>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f94e 	bl	800a92c <USBD_Get_USB_Status>
 800a690:	4603      	mov	r3, r0
 800a692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a694:	7bbb      	ldrb	r3, [r7, #14]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	70fb      	strb	r3, [r7, #3]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70bb      	strb	r3, [r7, #2]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6c6:	78bb      	ldrb	r3, [r7, #2]
 800a6c8:	883a      	ldrh	r2, [r7, #0]
 800a6ca:	78f9      	ldrb	r1, [r7, #3]
 800a6cc:	f7f8 f962 	bl	8002994 <HAL_PCD_EP_Open>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 f928 	bl	800a92c <USBD_Get_USB_Status>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b084      	sub	sp, #16
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a704:	78fa      	ldrb	r2, [r7, #3]
 800a706:	4611      	mov	r1, r2
 800a708:	4618      	mov	r0, r3
 800a70a:	f7f8 f9a0 	bl	8002a4e <HAL_PCD_EP_Close>
 800a70e:	4603      	mov	r3, r0
 800a710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 f909 	bl	800a92c <USBD_Get_USB_Status>
 800a71a:	4603      	mov	r3, r0
 800a71c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a742:	78fa      	ldrb	r2, [r7, #3]
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7f8 fa48 	bl	8002bdc <HAL_PCD_EP_SetStall>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	4618      	mov	r0, r3
 800a754:	f000 f8ea 	bl	800a92c <USBD_Get_USB_Status>
 800a758:	4603      	mov	r3, r0
 800a75a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	4611      	mov	r1, r2
 800a784:	4618      	mov	r0, r3
 800a786:	f7f8 fa89 	bl	8002c9c <HAL_PCD_EP_ClrStall>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
 800a790:	4618      	mov	r0, r3
 800a792:	f000 f8cb 	bl	800a92c <USBD_Get_USB_Status>
 800a796:	4603      	mov	r3, r0
 800a798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	da0c      	bge.n	800a7da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c6:	68f9      	ldr	r1, [r7, #12]
 800a7c8:	1c5a      	adds	r2, r3, #1
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	440b      	add	r3, r1
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	e00b      	b.n	800a7f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7e0:	68f9      	ldr	r1, [r7, #12]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	00db      	lsls	r3, r3, #3
 800a7ea:	440b      	add	r3, r1
 800a7ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a7f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bc80      	pop	{r7}
 800a7fa:	4770      	bx	lr

0800a7fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a816:	78fa      	ldrb	r2, [r7, #3]
 800a818:	4611      	mov	r1, r2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7f8 f895 	bl	800294a <HAL_PCD_SetAddress>
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f880 	bl	800a92c <USBD_Get_USB_Status>
 800a82c:	4603      	mov	r3, r0
 800a82e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a830:	7bbb      	ldrb	r3, [r7, #14]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	461a      	mov	r2, r3
 800a846:	460b      	mov	r3, r1
 800a848:	72fb      	strb	r3, [r7, #11]
 800a84a:	4613      	mov	r3, r2
 800a84c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a85c:	893b      	ldrh	r3, [r7, #8]
 800a85e:	7af9      	ldrb	r1, [r7, #11]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	f7f8 f984 	bl	8002b6e <HAL_PCD_EP_Transmit>
 800a866:	4603      	mov	r3, r0
 800a868:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 f85d 	bl	800a92c <USBD_Get_USB_Status>
 800a872:	4603      	mov	r3, r0
 800a874:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a876:	7dbb      	ldrb	r3, [r7, #22]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	461a      	mov	r2, r3
 800a88c:	460b      	mov	r3, r1
 800a88e:	72fb      	strb	r3, [r7, #11]
 800a890:	4613      	mov	r3, r2
 800a892:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8a2:	893b      	ldrh	r3, [r7, #8]
 800a8a4:	7af9      	ldrb	r1, [r7, #11]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	f7f8 f919 	bl	8002ade <HAL_PCD_EP_Receive>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 f83a 	bl	800a92c <USBD_Get_USB_Status>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8d8:	78fa      	ldrb	r2, [r7, #3]
 800a8da:	4611      	mov	r1, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7f8 f92f 	bl	8002b40 <HAL_PCD_EP_GetRxCount>
 800a8e2:	4603      	mov	r3, r0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8f4:	4b02      	ldr	r3, [pc, #8]	; (800a900 <USBD_static_malloc+0x14>)
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr
 800a900:	20001110 	.word	0x20001110

0800a904 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]

}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	bc80      	pop	{r7}
 800a914:	4770      	bx	lr

0800a916 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	460b      	mov	r3, r1
 800a920:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr

0800a92c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d817      	bhi.n	800a970 <USBD_Get_USB_Status+0x44>
 800a940:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <USBD_Get_USB_Status+0x1c>)
 800a942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a946:	bf00      	nop
 800a948:	0800a959 	.word	0x0800a959
 800a94c:	0800a95f 	.word	0x0800a95f
 800a950:	0800a965 	.word	0x0800a965
 800a954:	0800a96b 	.word	0x0800a96b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]
    break;
 800a95c:	e00b      	b.n	800a976 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a95e:	2302      	movs	r3, #2
 800a960:	73fb      	strb	r3, [r7, #15]
    break;
 800a962:	e008      	b.n	800a976 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a964:	2301      	movs	r3, #1
 800a966:	73fb      	strb	r3, [r7, #15]
    break;
 800a968:	e005      	b.n	800a976 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a96a:	2302      	movs	r3, #2
 800a96c:	73fb      	strb	r3, [r7, #15]
    break;
 800a96e:	e002      	b.n	800a976 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a970:	2302      	movs	r3, #2
 800a972:	73fb      	strb	r3, [r7, #15]
    break;
 800a974:	bf00      	nop
  }
  return usb_status;
 800a976:	7bfb      	ldrb	r3, [r7, #15]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bc80      	pop	{r7}
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop

0800a984 <memset>:
 800a984:	4603      	mov	r3, r0
 800a986:	4402      	add	r2, r0
 800a988:	4293      	cmp	r3, r2
 800a98a:	d100      	bne.n	800a98e <memset+0xa>
 800a98c:	4770      	bx	lr
 800a98e:	f803 1b01 	strb.w	r1, [r3], #1
 800a992:	e7f9      	b.n	800a988 <memset+0x4>

0800a994 <__libc_init_array>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	2600      	movs	r6, #0
 800a998:	4d0c      	ldr	r5, [pc, #48]	; (800a9cc <__libc_init_array+0x38>)
 800a99a:	4c0d      	ldr	r4, [pc, #52]	; (800a9d0 <__libc_init_array+0x3c>)
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	42a6      	cmp	r6, r4
 800a9a2:	d109      	bne.n	800a9b8 <__libc_init_array+0x24>
 800a9a4:	f000 f828 	bl	800a9f8 <_init>
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	4d0a      	ldr	r5, [pc, #40]	; (800a9d4 <__libc_init_array+0x40>)
 800a9ac:	4c0a      	ldr	r4, [pc, #40]	; (800a9d8 <__libc_init_array+0x44>)
 800a9ae:	1b64      	subs	r4, r4, r5
 800a9b0:	10a4      	asrs	r4, r4, #2
 800a9b2:	42a6      	cmp	r6, r4
 800a9b4:	d105      	bne.n	800a9c2 <__libc_init_array+0x2e>
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9bc:	4798      	blx	r3
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7ee      	b.n	800a9a0 <__libc_init_array+0xc>
 800a9c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c6:	4798      	blx	r3
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	e7f2      	b.n	800a9b2 <__libc_init_array+0x1e>
 800a9cc:	0800aa84 	.word	0x0800aa84
 800a9d0:	0800aa84 	.word	0x0800aa84
 800a9d4:	0800aa84 	.word	0x0800aa84
 800a9d8:	0800aa88 	.word	0x0800aa88

0800a9dc <memcpy>:
 800a9dc:	440a      	add	r2, r1
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9e4:	d100      	bne.n	800a9e8 <memcpy+0xc>
 800a9e6:	4770      	bx	lr
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9f4:	d1f9      	bne.n	800a9ea <memcpy+0xe>
 800a9f6:	bd10      	pop	{r4, pc}

0800a9f8 <_init>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	bf00      	nop
 800a9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fe:	bc08      	pop	{r3}
 800aa00:	469e      	mov	lr, r3
 800aa02:	4770      	bx	lr

0800aa04 <_fini>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	bf00      	nop
 800aa08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0a:	bc08      	pop	{r3}
 800aa0c:	469e      	mov	lr, r3
 800aa0e:	4770      	bx	lr
