
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800dcb8  0800dcb8  0001dcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e09c  0800e09c  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800e09c  0800e09c  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e09c  0800e09c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e09c  0800e09c  0001e09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0a0  0800e0a0  0001e0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800e0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001888  20000194  0800e238  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  0800e238  00021a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba3b  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000440c  00000000  00000000  0003bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c8  00000000  00000000  00040048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001336  00000000  00000000  00041910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be73  00000000  00000000  00042c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f5e8  00000000  00000000  0005eab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000975dd  00000000  00000000  0007e0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068bc  00000000  00000000  00115680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011bf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	0800dca0 	.word	0x0800dca0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	0800dca0 	.word	0x0800dca0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 8000166:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <ESP01_SetWIFI+0x54>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <ESP01_SetWIFI+0x58>)
 800016e:	2200      	movs	r2, #0
 8000170:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 8000172:	2240      	movs	r2, #64	; 0x40
 8000174:	6879      	ldr	r1, [r7, #4]
 8000176:	4810      	ldr	r0, [pc, #64]	; (80001b8 <ESP01_SetWIFI+0x5c>)
 8000178:	f00d fd4c 	bl	800dc14 <strncpy>
	esp01SSID[63] = '\0';
 800017c:	4b0e      	ldr	r3, [pc, #56]	; (80001b8 <ESP01_SetWIFI+0x5c>)
 800017e:	2200      	movs	r2, #0
 8000180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	strncpy(esp01PASSWORD, password, 32);
 8000184:	2220      	movs	r2, #32
 8000186:	6839      	ldr	r1, [r7, #0]
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <ESP01_SetWIFI+0x60>)
 800018a:	f00d fd43 	bl	800dc14 <strncpy>
	esp01PASSWORD[31] = '\0';
 800018e:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <ESP01_SetWIFI+0x60>)
 8000190:	2200      	movs	r2, #0
 8000192:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 8000194:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <ESP01_SetWIFI+0x64>)
 8000196:	2232      	movs	r2, #50	; 0x32
 8000198:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <ESP01_SetWIFI+0x54>)
 800019c:	220d      	movs	r2, #13
 800019e:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <ESP01_SetWIFI+0x68>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]

}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200001b0 	.word	0x200001b0
 80001b4:	200001b4 	.word	0x200001b4
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	2000020c 	.word	0x2000020c
 80001c0:	200001b8 	.word	0x200001b8
 80001c4:	200003e8 	.word	0x200003e8

080001c8 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
 80001d4:	4613      	mov	r3, r2
 80001d6:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 80001d8:	4b1d      	ldr	r3, [pc, #116]	; (8000250 <ESP01_StartUDP+0x88>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d102      	bne.n	80001e6 <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 80001e0:	f04f 33ff 	mov.w	r3, #4294967295
 80001e4:	e02f      	b.n	8000246 <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 80001e6:	883b      	ldrh	r3, [r7, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d102      	bne.n	80001f2 <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 80001ec:	f247 5330 	movw	r3, #30000	; 0x7530
 80001f0:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <ESP01_StartUDP+0x8c>)
 80001f4:	4a18      	ldr	r2, [pc, #96]	; (8000258 <ESP01_StartUDP+0x90>)
 80001f6:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 80001f8:	220f      	movs	r2, #15
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	4817      	ldr	r0, [pc, #92]	; (800025c <ESP01_StartUDP+0x94>)
 80001fe:	f00d fd09 	bl	800dc14 <strncpy>
	esp01RemoteIP[15] = '\0';
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <ESP01_StartUDP+0x94>)
 8000204:	2200      	movs	r2, #0
 8000206:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8000208:	887b      	ldrh	r3, [r7, #2]
 800020a:	220a      	movs	r2, #10
 800020c:	4914      	ldr	r1, [pc, #80]	; (8000260 <ESP01_StartUDP+0x98>)
 800020e:	4618      	mov	r0, r3
 8000210:	f00d fcb4 	bl	800db7c <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8000214:	883b      	ldrh	r3, [r7, #0]
 8000216:	220a      	movs	r2, #10
 8000218:	4912      	ldr	r1, [pc, #72]	; (8000264 <ESP01_StartUDP+0x9c>)
 800021a:	4618      	mov	r0, r3
 800021c:	f00d fcae 	bl	800db7c <itoa>

	if(esp01SSID[0] == '\0')
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <ESP01_StartUDP+0xa0>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d101      	bne.n	800022c <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8000228:	2301      	movs	r3, #1
 800022a:	e00c      	b.n	8000246 <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <ESP01_StartUDP+0xa4>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	f003 0302 	and.w	r3, r3, #2
 8000234:	b2db      	uxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d101      	bne.n	800023e <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 800023a:	2300      	movs	r3, #0
 800023c:	e003      	b.n	8000246 <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <ESP01_StartUDP+0xa8>)
 8000240:	2209      	movs	r2, #9
 8000242:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8000244:	2306      	movs	r3, #6
}
 8000246:	4618      	mov	r0, r3
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200003ec 	.word	0x200003ec
 8000254:	20000000 	.word	0x20000000
 8000258:	00504455 	.word	0x00504455
 800025c:	2000022c 	.word	0x2000022c
 8000260:	2000023c 	.word	0x2000023c
 8000264:	20000254 	.word	0x20000254
 8000268:	200001cc 	.word	0x200001cc
 800026c:	200001b4 	.word	0x200001b4
 8000270:	200001b0 	.word	0x200001b0

08000274 <ESP01_GetLocalIP>:
		return ESP01_WIFI_CONNECTED;
	else
		return ESP01_WIFI_DISCONNECTED;
}

char *ESP01_GetLocalIP(){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	if(esp01Flags.bit.WIFICONNECTED &&  esp01LocalIP[0]!='\0')
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <ESP01_GetLocalIP+0x28>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	f003 0302 	and.w	r3, r3, #2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d005      	beq.n	8000292 <ESP01_GetLocalIP+0x1e>
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <ESP01_GetLocalIP+0x2c>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <ESP01_GetLocalIP+0x1e>
		return esp01LocalIP;
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <ESP01_GetLocalIP+0x2c>)
 8000290:	e000      	b.n	8000294 <ESP01_GetLocalIP+0x20>

	return NULL;
 8000292:	2300      	movs	r3, #0
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	200001b4 	.word	0x200001b4
 80002a0:	20000244 	.word	0x20000244

080002a4 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <ESP01_WriteRX+0x38>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	b291      	uxth	r1, r2
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <ESP01_WriteRX+0x38>)
 80002b8:	8011      	strh	r1, [r2, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <ESP01_WriteRX+0x3c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <ESP01_WriteRX+0x38>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	2b80      	cmp	r3, #128	; 0x80
 80002c8:	d102      	bne.n	80002d0 <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <ESP01_WriteRX+0x38>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	801a      	strh	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	200003e0 	.word	0x200003e0
 80002e0:	20000260 	.word	0x20000260

080002e4 <ESP01_Send>:

_eESP01STATUS ESP01_Send(uint8_t *buf, uint16_t irRingBuf, uint16_t length, uint16_t sizeRingBuf){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	4608      	mov	r0, r1
 80002ee:	4611      	mov	r1, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	4603      	mov	r3, r0
 80002f4:	817b      	strh	r3, [r7, #10]
 80002f6:	460b      	mov	r3, r1
 80002f8:	813b      	strh	r3, [r7, #8]
 80002fa:	4613      	mov	r3, r2
 80002fc:	80fb      	strh	r3, [r7, #6]
	if(esp01Handle.WriteUSARTByte == NULL)
 80002fe:	4b46      	ldr	r3, [pc, #280]	; (8000418 <ESP01_Send+0x134>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d102      	bne.n	800030c <ESP01_Send+0x28>
		return ESP01_NOT_INIT;
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	e081      	b.n	8000410 <ESP01_Send+0x12c>

	if(esp01Flags.bit.UDPTCPCONNECTED == 0)
 800030c:	4b43      	ldr	r3, [pc, #268]	; (800041c <ESP01_Send+0x138>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d101      	bne.n	800031e <ESP01_Send+0x3a>
		return ESP01_UDPTCP_DISCONNECTED;
 800031a:	2305      	movs	r3, #5
 800031c:	e078      	b.n	8000410 <ESP01_Send+0x12c>

	if(esp01Flags.bit.SENDINGDATA == 0){
 800031e:	4b3f      	ldr	r3, [pc, #252]	; (800041c <ESP01_Send+0x138>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	f003 0308 	and.w	r3, r3, #8
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d168      	bne.n	80003fe <ESP01_Send+0x11a>
		char strInt[10];
		uint8_t l = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	777b      	strb	r3, [r7, #29]

		itoa(length, strInt, 10);
 8000330:	893b      	ldrh	r3, [r7, #8]
 8000332:	f107 0110 	add.w	r1, r7, #16
 8000336:	220a      	movs	r2, #10
 8000338:	4618      	mov	r0, r3
 800033a:	f00d fc1f 	bl	800db7c <itoa>
		l = strlen(strInt);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff02 	bl	800014c <strlen>
 8000348:	4603      	mov	r3, r0
 800034a:	777b      	strb	r3, [r7, #29]
		if(l>4 || l==0)
 800034c:	7f7b      	ldrb	r3, [r7, #29]
 800034e:	2b04      	cmp	r3, #4
 8000350:	d802      	bhi.n	8000358 <ESP01_Send+0x74>
 8000352:	7f7b      	ldrb	r3, [r7, #29]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d101      	bne.n	800035c <ESP01_Send+0x78>
			return ESP01_SEND_ERROR;
 8000358:	230b      	movs	r3, #11
 800035a:	e059      	b.n	8000410 <ESP01_Send+0x12c>

		ESP01StrToBufTX(ATCIPSEND);
 800035c:	4830      	ldr	r0, [pc, #192]	; (8000420 <ESP01_Send+0x13c>)
 800035e:	f000 ff41 	bl	80011e4 <ESP01StrToBufTX>
		ESP01StrToBufTX(strInt);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4618      	mov	r0, r3
 8000368:	f000 ff3c 	bl	80011e4 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 800036c:	482d      	ldr	r0, [pc, #180]	; (8000424 <ESP01_Send+0x140>)
 800036e:	f000 ff39 	bl	80011e4 <ESP01StrToBufTX>

		for(uint16_t i=0; i<length; i++){
 8000372:	2300      	movs	r3, #0
 8000374:	83fb      	strh	r3, [r7, #30]
 8000376:	e020      	b.n	80003ba <ESP01_Send+0xd6>
			esp01TXATBuf[esp01iwTX++] = buf[irRingBuf++];
 8000378:	897b      	ldrh	r3, [r7, #10]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	817a      	strh	r2, [r7, #10]
 800037e:	461a      	mov	r2, r3
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	441a      	add	r2, r3
 8000384:	4b28      	ldr	r3, [pc, #160]	; (8000428 <ESP01_Send+0x144>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	1c59      	adds	r1, r3, #1
 800038a:	b288      	uxth	r0, r1
 800038c:	4926      	ldr	r1, [pc, #152]	; (8000428 <ESP01_Send+0x144>)
 800038e:	8008      	strh	r0, [r1, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	4b25      	ldr	r3, [pc, #148]	; (800042c <ESP01_Send+0x148>)
 8000396:	545a      	strb	r2, [r3, r1]
			if(esp01iwTX == ESP01TXBUFAT)
 8000398:	4b23      	ldr	r3, [pc, #140]	; (8000428 <ESP01_Send+0x144>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003a0:	d102      	bne.n	80003a8 <ESP01_Send+0xc4>
				esp01iwTX = 0;
 80003a2:	4b21      	ldr	r3, [pc, #132]	; (8000428 <ESP01_Send+0x144>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	801a      	strh	r2, [r3, #0]
			if(irRingBuf == sizeRingBuf)
 80003a8:	897a      	ldrh	r2, [r7, #10]
 80003aa:	88fb      	ldrh	r3, [r7, #6]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d101      	bne.n	80003b4 <ESP01_Send+0xd0>
				irRingBuf = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	817b      	strh	r3, [r7, #10]
		for(uint16_t i=0; i<length; i++){
 80003b4:	8bfb      	ldrh	r3, [r7, #30]
 80003b6:	3301      	adds	r3, #1
 80003b8:	83fb      	strh	r3, [r7, #30]
 80003ba:	8bfa      	ldrh	r2, [r7, #30]
 80003bc:	893b      	ldrh	r3, [r7, #8]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3da      	bcc.n	8000378 <ESP01_Send+0x94>
		}

		esp01Flags.bit.TXCIPSEND = 1;
 80003c2:	4a16      	ldr	r2, [pc, #88]	; (800041c <ESP01_Send+0x138>)
 80003c4:	7813      	ldrb	r3, [r2, #0]
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <ESP01_Send+0x138>)
 80003ce:	7813      	ldrb	r3, [r2, #0]
 80003d0:	f043 0308 	orr.w	r3, r3, #8
 80003d4:	7013      	strb	r3, [r2, #0]

		if(ESP01DbgStr != NULL){
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <ESP01_Send+0x14c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d00d      	beq.n	80003fa <ESP01_Send+0x116>
			ESP01DbgStr("+&DBGSENDING DATA ");
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <ESP01_Send+0x14c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <ESP01_Send+0x150>)
 80003e4:	4798      	blx	r3
			ESP01DbgStr(strInt);
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <ESP01_Send+0x14c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f107 0210 	add.w	r2, r7, #16
 80003ee:	4610      	mov	r0, r2
 80003f0:	4798      	blx	r3
			ESP01DbgStr("\n");
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <ESP01_Send+0x14c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <ESP01_Send+0x154>)
 80003f8:	4798      	blx	r3
		}


		return ESP01_SEND_READY;
 80003fa:	2309      	movs	r3, #9
 80003fc:	e008      	b.n	8000410 <ESP01_Send+0x12c>
	}

	if(ESP01DbgStr != NULL)
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <ESP01_Send+0x14c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d003      	beq.n	800040e <ESP01_Send+0x12a>
		ESP01DbgStr("+&DBGSENDING DATA BUSY\n");
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <ESP01_Send+0x14c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <ESP01_Send+0x158>)
 800040c:	4798      	blx	r3

	return ESP01_SEND_BUSY;
 800040e:	2308      	movs	r3, #8
}
 8000410:	4618      	mov	r0, r3
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200003ec 	.word	0x200003ec
 800041c:	200001b4 	.word	0x200001b4
 8000420:	0800dedc 	.word	0x0800dedc
 8000424:	0800dcb8 	.word	0x0800dcb8
 8000428:	200003e6 	.word	0x200003e6
 800042c:	200002e0 	.word	0x200002e0
 8000430:	200001c8 	.word	0x200001c8
 8000434:	0800dcbc 	.word	0x0800dcbc
 8000438:	0800dcd0 	.word	0x0800dcd0
 800043c:	0800dcd4 	.word	0x0800dcd4

08000440 <ESP01_Init>:


void ESP01_Init(_sESP01Handle *hESP01){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8000448:	220c      	movs	r2, #12
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	4810      	ldr	r0, [pc, #64]	; (8000490 <ESP01_Init+0x50>)
 800044e:	f00d fc19 	bl	800dc84 <memcpy>

	esp01ATSate = ESP01ATIDLE;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <ESP01_Init+0x54>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <ESP01_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <ESP01_Init+0x5c>)
 8000460:	2200      	movs	r2, #0
 8000462:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <ESP01_Init+0x60>)
 8000466:	2200      	movs	r2, #0
 8000468:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <ESP01_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <ESP01_Init+0x68>)
 8000472:	2200      	movs	r2, #0
 8000474:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <ESP01_Init+0x6c>)
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <ESP01_Init+0x70>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <ESP01_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200003ec 	.word	0x200003ec
 8000494:	200001b0 	.word	0x200001b0
 8000498:	2000025a 	.word	0x2000025a
 800049c:	200003e4 	.word	0x200003e4
 80004a0:	200003e6 	.word	0x200003e6
 80004a4:	200003e2 	.word	0x200003e2
 80004a8:	200003e0 	.word	0x200003e0
 80004ac:	200001b4 	.word	0x200001b4
 80004b0:	200001c4 	.word	0x200001c4
 80004b4:	200001c8 	.word	0x200001c8

080004b8 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <ESP01_Timeout10ms+0x50>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d004      	beq.n	80004ce <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <ESP01_Timeout10ms+0x50>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <ESP01_Timeout10ms+0x50>)
 80004cc:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d00b      	beq.n	80004ee <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3b01      	subs	r3, #1
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004de:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d102      	bne.n	80004ee <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <ESP01_Timeout10ms+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <ESP01_Timeout10ms+0x5c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d004      	beq.n	8000500 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <ESP01_Timeout10ms+0x5c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <ESP01_Timeout10ms+0x5c>)
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	200001b8 	.word	0x200001b8
 800050c:	200001bc 	.word	0x200001bc
 8000510:	2000025a 	.word	0x2000025a
 8000514:	200001c0 	.word	0x200001c0

08000518 <ESP01_Task>:

void ESP01_Task(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

	if(esp01irRXAT != esp01iwRXAT)
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <ESP01_Task+0x28>)
 800051e:	881a      	ldrh	r2, [r3, #0]
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <ESP01_Task+0x2c>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	429a      	cmp	r2, r3
 8000526:	d001      	beq.n	800052c <ESP01_Task+0x14>
		ESP01ATDecode();
 8000528:	f000 f81e 	bl	8000568 <ESP01ATDecode>

	if(!esp01TimeoutTask)
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <ESP01_Task+0x30>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d101      	bne.n	8000538 <ESP01_Task+0x20>
		ESP01DOConnection();
 8000534:	f000 fbd0 	bl	8000cd8 <ESP01DOConnection>

	ESP01SENDData();
 8000538:	f000 fdd8 	bl	80010ec <ESP01SENDData>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200003e2 	.word	0x200003e2
 8000544:	200003e0 	.word	0x200003e0
 8000548:	200001b8 	.word	0x200001b8

0800054c <ESP01_AttachChangeState>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	ESP01ChangeState = aESP01ChangeState;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <ESP01_AttachChangeState+0x18>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	200001c4 	.word	0x200001c4

08000568 <ESP01ATDecode>:




/* Private Functions */
static void ESP01ATDecode(){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;

	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 800056e:	4b7f      	ldr	r3, [pc, #508]	; (800076c <ESP01ATDecode+0x204>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b0d      	cmp	r3, #13
 8000574:	d007      	beq.n	8000586 <ESP01ATDecode+0x1e>
 8000576:	4b7d      	ldr	r3, [pc, #500]	; (800076c <ESP01ATDecode+0x204>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b0e      	cmp	r3, #14
 800057c:	d003      	beq.n	8000586 <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 800057e:	4b7b      	ldr	r3, [pc, #492]	; (800076c <ESP01ATDecode+0x204>)
 8000580:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8000582:	2b0f      	cmp	r3, #15
 8000584:	d104      	bne.n	8000590 <ESP01ATDecode+0x28>
		esp01irRXAT = esp01iwRXAT;
 8000586:	4b7a      	ldr	r3, [pc, #488]	; (8000770 <ESP01ATDecode+0x208>)
 8000588:	881a      	ldrh	r2, [r3, #0]
 800058a:	4b7a      	ldr	r3, [pc, #488]	; (8000774 <ESP01ATDecode+0x20c>)
 800058c:	801a      	strh	r2, [r3, #0]
		return;
 800058e:	e383      	b.n	8000c98 <ESP01ATDecode+0x730>
	}


	i = esp01iwRXAT;
 8000590:	4b77      	ldr	r3, [pc, #476]	; (8000770 <ESP01ATDecode+0x208>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 8000596:	4b78      	ldr	r3, [pc, #480]	; (8000778 <ESP01ATDecode+0x210>)
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 800059c:	e376      	b.n	8000c8c <ESP01ATDecode+0x724>
		value = esp01RXATBuf[esp01irRXAT];
 800059e:	4b75      	ldr	r3, [pc, #468]	; (8000774 <ESP01ATDecode+0x20c>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b75      	ldr	r3, [pc, #468]	; (800077c <ESP01ATDecode+0x214>)
 80005a6:	5c9b      	ldrb	r3, [r3, r2]
 80005a8:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 80005aa:	4b75      	ldr	r3, [pc, #468]	; (8000780 <ESP01ATDecode+0x218>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b0c      	cmp	r3, #12
 80005b0:	f200 834d 	bhi.w	8000c4e <ESP01ATDecode+0x6e6>
 80005b4:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <ESP01ATDecode+0x54>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	080006e3 	.word	0x080006e3
 80005c4:	080008c7 	.word	0x080008c7
 80005c8:	08000c4f 	.word	0x08000c4f
 80005cc:	08000c4f 	.word	0x08000c4f
 80005d0:	08000abf 	.word	0x08000abf
 80005d4:	08000b05 	.word	0x08000b05
 80005d8:	08000b1b 	.word	0x08000b1b
 80005dc:	08000b47 	.word	0x08000b47
 80005e0:	08000c4f 	.word	0x08000c4f
 80005e4:	08000b93 	.word	0x08000b93
 80005e8:	08000bbb 	.word	0x08000bbb
 80005ec:	08000c11 	.word	0x08000c11
		case 0:
            indexResponse = 0;
 80005f0:	4b64      	ldr	r3, [pc, #400]	; (8000784 <ESP01ATDecode+0x21c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 80005f6:	4b64      	ldr	r3, [pc, #400]	; (8000788 <ESP01ATDecode+0x220>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 80005fc:	e03f      	b.n	800067e <ESP01ATDecode+0x116>
                if(value == responses[indexResponse][indexResponseChar]){
 80005fe:	4b61      	ldr	r3, [pc, #388]	; (8000784 <ESP01ATDecode+0x21c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	4b61      	ldr	r3, [pc, #388]	; (800078c <ESP01ATDecode+0x224>)
 8000606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800060a:	4a5f      	ldr	r2, [pc, #380]	; (8000788 <ESP01ATDecode+0x220>)
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	797a      	ldrb	r2, [r7, #5]
 8000614:	429a      	cmp	r2, r3
 8000616:	d12c      	bne.n	8000672 <ESP01ATDecode+0x10a>
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8000618:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <ESP01ATDecode+0x21c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b5b      	ldr	r3, [pc, #364]	; (800078c <ESP01ATDecode+0x224>)
 8000620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b30      	subs	r3, #48	; 0x30
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b58      	ldr	r3, [pc, #352]	; (8000790 <ESP01ATDecode+0x228>)
 800062e:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8000630:	4b57      	ldr	r3, [pc, #348]	; (8000790 <ESP01ATDecode+0x228>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	0092      	lsls	r2, r2, #2
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b54      	ldr	r3, [pc, #336]	; (8000790 <ESP01ATDecode+0x228>)
 8000640:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8000642:	4b50      	ldr	r3, [pc, #320]	; (8000784 <ESP01ATDecode+0x21c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b50      	ldr	r3, [pc, #320]	; (800078c <ESP01ATDecode+0x224>)
 800064a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <ESP01ATDecode+0x228>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	3b30      	subs	r3, #48	; 0x30
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <ESP01ATDecode+0x228>)
 8000662:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 8000664:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <ESP01ATDecode+0x228>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	3b01      	subs	r3, #1
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b48      	ldr	r3, [pc, #288]	; (8000790 <ESP01ATDecode+0x228>)
 800066e:	801a      	strh	r2, [r3, #0]
                    break;
 8000670:	e00d      	b.n	800068e <ESP01ATDecode+0x126>
                }
                indexResponse++;
 8000672:	4b44      	ldr	r3, [pc, #272]	; (8000784 <ESP01ATDecode+0x21c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b42      	ldr	r3, [pc, #264]	; (8000784 <ESP01ATDecode+0x21c>)
 800067c:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 800067e:	4b41      	ldr	r3, [pc, #260]	; (8000784 <ESP01ATDecode+0x21c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4b41      	ldr	r3, [pc, #260]	; (800078c <ESP01ATDecode+0x224>)
 8000686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1b7      	bne.n	80005fe <ESP01ATDecode+0x96>
            }
            if(responses[indexResponse] != NULL){
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <ESP01ATDecode+0x21c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b3d      	ldr	r3, [pc, #244]	; (800078c <ESP01ATDecode+0x224>)
 8000696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d009      	beq.n	80006b2 <ESP01ATDecode+0x14a>
                esp01HState = 1;
 800069e:	4b38      	ldr	r3, [pc, #224]	; (8000780 <ESP01ATDecode+0x218>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 80006a4:	4b38      	ldr	r3, [pc, #224]	; (8000788 <ESP01ATDecode+0x220>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <ESP01ATDecode+0x220>)
 80006ae:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 80006b0:	e2d4      	b.n	8000c5c <ESP01ATDecode+0x6f4>
				esp01TimeoutDataRx = 0;
 80006b2:	4b31      	ldr	r3, [pc, #196]	; (8000778 <ESP01ATDecode+0x210>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <ESP01ATDecode+0x22c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 82ca 	beq.w	8000c5c <ESP01ATDecode+0x6f4>
					if(value == '>'){
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	2b3e      	cmp	r3, #62	; 0x3e
 80006cc:	f040 82c6 	bne.w	8000c5c <ESP01ATDecode+0x6f4>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 80006d0:	4a30      	ldr	r2, [pc, #192]	; (8000794 <ESP01ATDecode+0x22c>)
 80006d2:	7813      	ldrb	r3, [r2, #0]
 80006d4:	f36f 0300 	bfc	r3, #0, #1
 80006d8:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <ESP01ATDecode+0x230>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			break;
 80006e0:	e2bc      	b.n	8000c5c <ESP01ATDecode+0x6f4>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <ESP01ATDecode+0x21c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <ESP01ATDecode+0x224>)
 80006ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <ESP01ATDecode+0x220>)
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	797a      	ldrb	r2, [r7, #5]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d133      	bne.n	8000764 <ESP01ATDecode+0x1fc>
                esp01nBytes--;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <ESP01ATDecode+0x228>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3b01      	subs	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <ESP01ATDecode+0x228>)
 8000706:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <ESP01ATDecode+0x228>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <ESP01ATDecode+0x1b0>
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	2b0d      	cmp	r3, #13
 8000714:	f040 80d0 	bne.w	80008b8 <ESP01ATDecode+0x350>
                    esp01HState = (responses[indexResponse][2] - '0');
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <ESP01ATDecode+0x21c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <ESP01ATDecode+0x224>)
 8000720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000724:	3302      	adds	r3, #2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3b30      	subs	r3, #48	; 0x30
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <ESP01ATDecode+0x218>)
 800072e:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <ESP01ATDecode+0x218>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	4413      	add	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <ESP01ATDecode+0x218>)
 8000740:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <ESP01ATDecode+0x21c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <ESP01ATDecode+0x224>)
 800074a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800074e:	3303      	adds	r3, #3
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <ESP01ATDecode+0x218>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	3b30      	subs	r3, #48	; 0x30
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <ESP01ATDecode+0x218>)
 8000760:	701a      	strb	r2, [r3, #0]
                    break;
 8000762:	e286      	b.n	8000c72 <ESP01ATDecode+0x70a>
                }
            }
            else{
                indexResponse = 0;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <ESP01ATDecode+0x21c>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 800076a:	e089      	b.n	8000880 <ESP01ATDecode+0x318>
 800076c:	200001b0 	.word	0x200001b0
 8000770:	200003e0 	.word	0x200003e0
 8000774:	200003e2 	.word	0x200003e2
 8000778:	200001bc 	.word	0x200001bc
 800077c:	20000260 	.word	0x20000260
 8000780:	2000025a 	.word	0x2000025a
 8000784:	200003f8 	.word	0x200003f8
 8000788:	200003f9 	.word	0x200003f9
 800078c:	0800e000 	.word	0x0800e000
 8000790:	2000025c 	.word	0x2000025c
 8000794:	200001b4 	.word	0x200001b4
 8000798:	200001c0 	.word	0x200001c0
                    esp01nBytes = (responses[indexResponse][0] - '0');
 800079c:	4ba5      	ldr	r3, [pc, #660]	; (8000a34 <ESP01ATDecode+0x4cc>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4ba5      	ldr	r3, [pc, #660]	; (8000a38 <ESP01ATDecode+0x4d0>)
 80007a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	3b30      	subs	r3, #48	; 0x30
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4ba2      	ldr	r3, [pc, #648]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007b2:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 80007b4:	4ba1      	ldr	r3, [pc, #644]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	4413      	add	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b9e      	ldr	r3, [pc, #632]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007c4:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 80007c6:	4b9b      	ldr	r3, [pc, #620]	; (8000a34 <ESP01ATDecode+0x4cc>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b9a      	ldr	r3, [pc, #616]	; (8000a38 <ESP01ATDecode+0x4d0>)
 80007ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d2:	3301      	adds	r3, #1
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b98      	ldr	r3, [pc, #608]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	3b30      	subs	r3, #48	; 0x30
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b95      	ldr	r3, [pc, #596]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007e6:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 80007e8:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007ea:	881a      	ldrh	r2, [r3, #0]
 80007ec:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <ESP01ATDecode+0x4d8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	3303      	adds	r3, #3
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b90      	ldr	r3, [pc, #576]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007fc:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 80007fe:	4b8f      	ldr	r3, [pc, #572]	; (8000a3c <ESP01ATDecode+0x4d4>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	2b7f      	cmp	r3, #127	; 0x7f
 8000804:	d836      	bhi.n	8000874 <ESP01ATDecode+0x30c>
 8000806:	4b8b      	ldr	r3, [pc, #556]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	4b8a      	ldr	r3, [pc, #552]	; (8000a38 <ESP01ATDecode+0x4d0>)
 800080e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000812:	4a8b      	ldr	r2, [pc, #556]	; (8000a40 <ESP01ATDecode+0x4d8>)
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	797a      	ldrb	r2, [r7, #5]
 800081c:	429a      	cmp	r2, r3
 800081e:	d129      	bne.n	8000874 <ESP01ATDecode+0x30c>
                        if(esp01nBytes == 0){
 8000820:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <ESP01ATDecode+0x4d4>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d134      	bne.n	8000892 <ESP01ATDecode+0x32a>
                            esp01HState = (responses[indexResponse][2] - '0');
 8000828:	4b82      	ldr	r3, [pc, #520]	; (8000a34 <ESP01ATDecode+0x4cc>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b82      	ldr	r3, [pc, #520]	; (8000a38 <ESP01ATDecode+0x4d0>)
 8000830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000834:	3302      	adds	r3, #2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3b30      	subs	r3, #48	; 0x30
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b81      	ldr	r3, [pc, #516]	; (8000a44 <ESP01ATDecode+0x4dc>)
 800083e:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8000840:	4b80      	ldr	r3, [pc, #512]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	4413      	add	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b7d      	ldr	r3, [pc, #500]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000850:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8000852:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b77      	ldr	r3, [pc, #476]	; (8000a38 <ESP01ATDecode+0x4d0>)
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	3303      	adds	r3, #3
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b78      	ldr	r3, [pc, #480]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3b30      	subs	r3, #48	; 0x30
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b75      	ldr	r3, [pc, #468]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000870:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8000872:	e00e      	b.n	8000892 <ESP01ATDecode+0x32a>
                    }
                    indexResponse++;
 8000874:	4b6f      	ldr	r3, [pc, #444]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <ESP01ATDecode+0x4cc>)
 800087e:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8000880:	4b6c      	ldr	r3, [pc, #432]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b6c      	ldr	r3, [pc, #432]	; (8000a38 <ESP01ATDecode+0x4d0>)
 8000888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d185      	bne.n	800079c <ESP01ATDecode+0x234>
 8000890:	e000      	b.n	8000894 <ESP01ATDecode+0x32c>
                        break;
 8000892:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 8000894:	4b67      	ldr	r3, [pc, #412]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b67      	ldr	r3, [pc, #412]	; (8000a38 <ESP01ATDecode+0x4d0>)
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <ESP01ATDecode+0x350>
                    esp01HState = 0;
 80008a4:	4b67      	ldr	r3, [pc, #412]	; (8000a44 <ESP01ATDecode+0x4dc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 80008aa:	4b67      	ldr	r3, [pc, #412]	; (8000a48 <ESP01ATDecode+0x4e0>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <ESP01ATDecode+0x4e0>)
 80008b4:	801a      	strh	r2, [r3, #0]
                    break;
 80008b6:	e1dc      	b.n	8000c72 <ESP01ATDecode+0x70a>
                }
            }
			indexResponseChar++;
 80008b8:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <ESP01ATDecode+0x4d8>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b5f      	ldr	r3, [pc, #380]	; (8000a40 <ESP01ATDecode+0x4d8>)
 80008c2:	701a      	strb	r2, [r3, #0]
			break;
 80008c4:	e1d5      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 2:
			if(value == '\n'){
 80008c6:	797b      	ldrb	r3, [r7, #5]
 80008c8:	2b0a      	cmp	r3, #10
 80008ca:	f040 81c9 	bne.w	8000c60 <ESP01ATDecode+0x6f8>
				esp01HState = 0;
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <ESP01ATDecode+0x4dc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 80008d4:	4b57      	ldr	r3, [pc, #348]	; (8000a34 <ESP01ATDecode+0x4cc>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b11      	cmp	r3, #17
 80008da:	f200 81c1 	bhi.w	8000c60 <ESP01ATDecode+0x6f8>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <ESP01ATDecode+0x37c>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	08000aa3 	.word	0x08000aa3
 80008e8:	08000aa3 	.word	0x08000aa3
 80008ec:	0800092d 	.word	0x0800092d
 80008f0:	08000949 	.word	0x08000949
 80008f4:	08000977 	.word	0x08000977
 80008f8:	08000aa3 	.word	0x08000aa3
 80008fc:	080009ad 	.word	0x080009ad
 8000900:	080009ad 	.word	0x080009ad
 8000904:	080009e1 	.word	0x080009e1
 8000908:	080009ed 	.word	0x080009ed
 800090c:	08000a09 	.word	0x08000a09
 8000910:	08000a65 	.word	0x08000a65
 8000914:	08000c61 	.word	0x08000c61
 8000918:	08000a71 	.word	0x08000a71
 800091c:	08000c61 	.word	0x08000c61
 8000920:	08000a87 	.word	0x08000a87
 8000924:	08000aa3 	.word	0x08000aa3
 8000928:	08000aa3 	.word	0x08000aa3
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 800092c:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <ESP01ATDecode+0x4e4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b02      	cmp	r3, #2
 8000932:	f040 80b8 	bne.w	8000aa6 <ESP01ATDecode+0x53e>
						esp01TimeoutTask = 0;
 8000936:	4b46      	ldr	r3, [pc, #280]	; (8000a50 <ESP01ATDecode+0x4e8>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 800093c:	4a45      	ldr	r2, [pc, #276]	; (8000a54 <ESP01ATDecode+0x4ec>)
 800093e:	7813      	ldrb	r3, [r2, #0]
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	7013      	strb	r3, [r2, #0]
					}
					break;
 8000946:	e0ae      	b.n	8000aa6 <ESP01ATDecode+0x53e>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8000948:	4b42      	ldr	r3, [pc, #264]	; (8000a54 <ESP01ATDecode+0x4ec>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 80a9 	beq.w	8000aaa <ESP01ATDecode+0x542>
						esp01Flags.bit.SENDINGDATA = 0;
 8000958:	4a3e      	ldr	r2, [pc, #248]	; (8000a54 <ESP01ATDecode+0x4ec>)
 800095a:	7813      	ldrb	r3, [r2, #0]
 800095c:	f36f 03c3 	bfc	r3, #3, #1
 8000960:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000962:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000964:	7813      	ldrb	r3, [r2, #0]
 8000966:	f36f 1386 	bfc	r3, #6, #1
 800096a:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 800096c:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <ESP01ATDecode+0x4f0>)
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <ESP01ATDecode+0x4f4>)
 8000972:	801a      	strh	r2, [r3, #0]
					}
					break;
 8000974:	e099      	b.n	8000aaa <ESP01ATDecode+0x542>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <ESP01ATDecode+0x4e8>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <ESP01ATDecode+0x4e4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b06      	cmp	r3, #6
 8000982:	d104      	bne.n	800098e <ESP01ATDecode+0x426>
						esp01Flags.bit.ATRESPONSEOK = 1;
 8000984:	4a33      	ldr	r2, [pc, #204]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000986:	7813      	ldrb	r3, [r2, #0]
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 800098e:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000990:	7813      	ldrb	r3, [r2, #0]
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <ESP01ATDecode+0x4f8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 8086 	beq.w	8000aae <ESP01ATDecode+0x546>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2003      	movs	r0, #3
 80009a8:	4798      	blx	r3
					break;
 80009aa:	e080      	b.n	8000aae <ESP01ATDecode+0x546>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80009ac:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009ae:	7813      	ldrb	r3, [r2, #0]
 80009b0:	f36f 1386 	bfc	r3, #6, #1
 80009b4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80009b6:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009b8:	7813      	ldrb	r3, [r2, #0]
 80009ba:	f36f 0341 	bfc	r3, #1, #1
 80009be:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <ESP01ATDecode+0x468>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2000      	movs	r0, #0
 80009ce:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <ESP01ATDecode+0x4e4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d06c      	beq.n	8000ab2 <ESP01ATDecode+0x54a>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <ESP01ATDecode+0x4e4>)
 80009da:	220f      	movs	r2, #15
 80009dc:	701a      	strb	r2, [r3, #0]
					break;
 80009de:	e06d      	b.n	8000abc <ESP01ATDecode+0x554>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009e2:	7813      	ldrb	r3, [r2, #0]
 80009e4:	f36f 1386 	bfc	r3, #6, #1
 80009e8:	7013      	strb	r3, [r2, #0]
					break;
 80009ea:	e067      	b.n	8000abc <ESP01ATDecode+0x554>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009ee:	7813      	ldrb	r3, [r2, #0]
 80009f0:	f36f 03c3 	bfc	r3, #3, #1
 80009f4:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d05b      	beq.n	8000ab6 <ESP01ATDecode+0x54e>
						ESP01ChangeState(ESP01_SEND_OK);
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <ESP01ATDecode+0x4f8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	200a      	movs	r0, #10
 8000a04:	4798      	blx	r3
					break;
 8000a06:	e056      	b.n	8000ab6 <ESP01ATDecode+0x54e>
				case 10://CONNECT
					esp01TimeoutTask = 0;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <ESP01ATDecode+0x4e8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000a10:	7813      	ldrb	r3, [r2, #0]
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000a1a:	7813      	ldrb	r3, [r2, #0]
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <ESP01ATDecode+0x4f8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d047      	beq.n	8000aba <ESP01ATDecode+0x552>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <ESP01ATDecode+0x4f8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2007      	movs	r0, #7
 8000a30:	4798      	blx	r3
					break;
 8000a32:	e042      	b.n	8000aba <ESP01ATDecode+0x552>
 8000a34:	200003f8 	.word	0x200003f8
 8000a38:	0800e000 	.word	0x0800e000
 8000a3c:	2000025c 	.word	0x2000025c
 8000a40:	200003f9 	.word	0x200003f9
 8000a44:	2000025a 	.word	0x2000025a
 8000a48:	200003e2 	.word	0x200003e2
 8000a4c:	200001b0 	.word	0x200001b0
 8000a50:	200001b8 	.word	0x200001b8
 8000a54:	200001b4 	.word	0x200001b4
 8000a58:	200003e6 	.word	0x200003e6
 8000a5c:	200003e4 	.word	0x200003e4
 8000a60:	200001c4 	.word	0x200001c4
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000a64:	4a8e      	ldr	r2, [pc, #568]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a66:	7813      	ldrb	r3, [r2, #0]
 8000a68:	f36f 1386 	bfc	r3, #6, #1
 8000a6c:	7013      	strb	r3, [r2, #0]
					break;
 8000a6e:	e025      	b.n	8000abc <ESP01ATDecode+0x554>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000a70:	4a8b      	ldr	r2, [pc, #556]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a72:	7813      	ldrb	r3, [r2, #0]
 8000a74:	f36f 1386 	bfc	r3, #6, #1
 8000a78:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8000a7a:	4a89      	ldr	r2, [pc, #548]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a7c:	7813      	ldrb	r3, [r2, #0]
 8000a7e:	f36f 0341 	bfc	r3, #1, #1
 8000a82:	7013      	strb	r3, [r2, #0]
					break;
 8000a84:	e01a      	b.n	8000abc <ESP01ATDecode+0x554>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000a86:	4a86      	ldr	r2, [pc, #536]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a88:	7813      	ldrb	r3, [r2, #0]
 8000a8a:	f36f 1386 	bfc	r3, #6, #1
 8000a8e:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8000a90:	4a83      	ldr	r2, [pc, #524]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a92:	7813      	ldrb	r3, [r2, #0]
 8000a94:	f36f 0341 	bfc	r3, #1, #1
 8000a98:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8000a9a:	4b82      	ldr	r3, [pc, #520]	; (8000ca4 <ESP01ATDecode+0x73c>)
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	701a      	strb	r2, [r3, #0]
					break;
 8000aa0:	e00c      	b.n	8000abc <ESP01ATDecode+0x554>
					break;
 8000aa2:	bf00      	nop
 8000aa4:	e0dc      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aa6:	bf00      	nop
 8000aa8:	e0da      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aaa:	bf00      	nop
 8000aac:	e0d8      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aae:	bf00      	nop
 8000ab0:	e0d6      	b.n	8000c60 <ESP01ATDecode+0x6f8>
						break;
 8000ab2:	bf00      	nop
 8000ab4:	e0d4      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000ab6:	bf00      	nop
 8000ab8:	e0d2      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aba:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 8000abc:	e0d0      	b.n	8000c60 <ESP01ATDecode+0x6f8>
		case 5://CIFR,STAIP
			if(value == ','){
 8000abe:	797b      	ldrb	r3, [r7, #5]
 8000ac0:	2b2c      	cmp	r3, #44	; 0x2c
 8000ac2:	d10c      	bne.n	8000ade <ESP01ATDecode+0x576>
				esp01HState = 6;
 8000ac4:	4b78      	ldr	r3, [pc, #480]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000ac6:	2206      	movs	r2, #6
 8000ac8:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8000aca:	4b78      	ldr	r3, [pc, #480]	; (8000cac <ESP01ATDecode+0x744>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 80c8 	beq.w	8000c64 <ESP01ATDecode+0x6fc>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 8000ad4:	4b75      	ldr	r3, [pc, #468]	; (8000cac <ESP01ATDecode+0x744>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4875      	ldr	r0, [pc, #468]	; (8000cb0 <ESP01ATDecode+0x748>)
 8000ada:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 8000adc:	e0c2      	b.n	8000c64 <ESP01ATDecode+0x6fc>
				esp01HState = 0;
 8000ade:	4b72      	ldr	r3, [pc, #456]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8000ae4:	4b73      	ldr	r3, [pc, #460]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b71      	ldr	r3, [pc, #452]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000aee:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8000af0:	4b6e      	ldr	r3, [pc, #440]	; (8000cac <ESP01ATDecode+0x744>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 80b5 	beq.w	8000c64 <ESP01ATDecode+0x6fc>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 8000afa:	4b6c      	ldr	r3, [pc, #432]	; (8000cac <ESP01ATDecode+0x744>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	486e      	ldr	r0, [pc, #440]	; (8000cb8 <ESP01ATDecode+0x750>)
 8000b00:	4798      	blx	r3
			break;
 8000b02:	e0af      	b.n	8000c64 <ESP01ATDecode+0x6fc>
		case 6:
			if(value == '\"'){
 8000b04:	797b      	ldrb	r3, [r7, #5]
 8000b06:	2b22      	cmp	r3, #34	; 0x22
 8000b08:	f040 80ae 	bne.w	8000c68 <ESP01ATDecode+0x700>
				esp01HState = 7;
 8000b0c:	4b66      	ldr	r3, [pc, #408]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b0e:	2207      	movs	r2, #7
 8000b10:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8000b12:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
			}
			break;
 8000b18:	e0a6      	b.n	8000c68 <ESP01ATDecode+0x700>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 8000b1a:	797b      	ldrb	r3, [r7, #5]
 8000b1c:	2b22      	cmp	r3, #34	; 0x22
 8000b1e:	d003      	beq.n	8000b28 <ESP01ATDecode+0x5c0>
 8000b20:	4b66      	ldr	r3, [pc, #408]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2b10      	cmp	r3, #16
 8000b26:	d103      	bne.n	8000b30 <ESP01ATDecode+0x5c8>
				esp01HState = 8;
 8000b28:	4b5f      	ldr	r3, [pc, #380]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 8000b2e:	e0a0      	b.n	8000c72 <ESP01ATDecode+0x70a>
				esp01LocalIP[esp01nBytes++] = value;
 8000b30:	4b62      	ldr	r3, [pc, #392]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	b291      	uxth	r1, r2
 8000b38:	4a60      	ldr	r2, [pc, #384]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b3a:	8011      	strh	r1, [r2, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4a60      	ldr	r2, [pc, #384]	; (8000cc0 <ESP01ATDecode+0x758>)
 8000b40:	797b      	ldrb	r3, [r7, #5]
 8000b42:	5453      	strb	r3, [r2, r1]
			break;
 8000b44:	e095      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 8:
			if(value == '\n'){
 8000b46:	797b      	ldrb	r3, [r7, #5]
 8000b48:	2b0a      	cmp	r3, #10
 8000b4a:	f040 808f 	bne.w	8000c6c <ESP01ATDecode+0x704>
				esp01HState = 0;
 8000b4e:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 8000b54:	4b59      	ldr	r3, [pc, #356]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80e      	bhi.n	8000b7a <ESP01ATDecode+0x612>
					esp01LocalIP[esp01nBytes] = '\0';
 8000b5c:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <ESP01ATDecode+0x758>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8000b68:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000b6a:	7813      	ldrb	r3, [r2, #0]
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 8000b72:	4b54      	ldr	r3, [pc, #336]	; (8000cc4 <ESP01ATDecode+0x75c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	e002      	b.n	8000b80 <ESP01ATDecode+0x618>
				}
				else
					esp01LocalIP[0] = '\0';
 8000b7a:	4b51      	ldr	r3, [pc, #324]	; (8000cc0 <ESP01ATDecode+0x758>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 8000b80:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <ESP01ATDecode+0x760>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d071      	beq.n	8000c6c <ESP01ATDecode+0x704>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 8000b88:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <ESP01ATDecode+0x760>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	4798      	blx	r3
			}
			break;
 8000b90:	e06c      	b.n	8000c6c <ESP01ATDecode+0x704>
		case 10://IPD
			if(value == ','){
 8000b92:	797b      	ldrb	r3, [r7, #5]
 8000b94:	2b2c      	cmp	r3, #44	; 0x2c
 8000b96:	d106      	bne.n	8000ba6 <ESP01ATDecode+0x63e>
				esp01HState = 11;
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b9a:	220b      	movs	r2, #11
 8000b9c:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8000b9e:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <ESP01ATDecode+0x754>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 8000ba4:	e065      	b.n	8000c72 <ESP01ATDecode+0x70a>
				esp01HState = 0;
 8000ba6:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8000bac:	4b41      	ldr	r3, [pc, #260]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000bb6:	801a      	strh	r2, [r3, #0]
			break;
 8000bb8:	e05b      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 11:
			if(value == ':')
 8000bba:	797b      	ldrb	r3, [r7, #5]
 8000bbc:	2b3a      	cmp	r3, #58	; 0x3a
 8000bbe:	d103      	bne.n	8000bc8 <ESP01ATDecode+0x660>
				esp01HState = 12;
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 8000bc6:	e054      	b.n	8000c72 <ESP01ATDecode+0x70a>
				if(value<'0' || value>'9'){
 8000bc8:	797b      	ldrb	r3, [r7, #5]
 8000bca:	2b2f      	cmp	r3, #47	; 0x2f
 8000bcc:	d902      	bls.n	8000bd4 <ESP01ATDecode+0x66c>
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	2b39      	cmp	r3, #57	; 0x39
 8000bd2:	d909      	bls.n	8000be8 <ESP01ATDecode+0x680>
					esp01HState = 0;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000be4:	801a      	strh	r2, [r3, #0]
			break;
 8000be6:	e044      	b.n	8000c72 <ESP01ATDecode+0x70a>
					esp01nBytes *= 10;
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <ESP01ATDecode+0x754>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <ESP01ATDecode+0x754>)
 8000bf8:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3b30      	subs	r3, #48	; 0x30
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c0c:	801a      	strh	r2, [r3, #0]
			break;
 8000c0e:	e030      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <ESP01ATDecode+0x764>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d004      	beq.n	8000c22 <ESP01ATDecode+0x6ba>
				esp01Handle.WriteByteToBufRX(value);
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <ESP01ATDecode+0x764>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	797a      	ldrb	r2, [r7, #5]
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4798      	blx	r3
			esp01nBytes--;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c2c:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11c      	bne.n	8000c70 <ESP01ATDecode+0x708>
				esp01HState = 0;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <ESP01ATDecode+0x744>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d015      	beq.n	8000c70 <ESP01ATDecode+0x708>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <ESP01ATDecode+0x744>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4821      	ldr	r0, [pc, #132]	; (8000cd0 <ESP01ATDecode+0x768>)
 8000c4a:	4798      	blx	r3
			}
			break;
 8000c4c:	e010      	b.n	8000c70 <ESP01ATDecode+0x708>
		default:
			esp01HState = 0;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <ESP01ATDecode+0x76c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e00a      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c5c:	bf00      	nop
 8000c5e:	e008      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c60:	bf00      	nop
 8000c62:	e006      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c64:	bf00      	nop
 8000c66:	e004      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c68:	bf00      	nop
 8000c6a:	e002      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c6c:	bf00      	nop
 8000c6e:	e000      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c70:	bf00      	nop
		}

		esp01irRXAT++;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c7c:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2b80      	cmp	r3, #128	; 0x80
 8000c84:	d102      	bne.n	8000c8c <ESP01ATDecode+0x724>
			esp01irRXAT = 0;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	f47f ac83 	bne.w	800059e <ESP01ATDecode+0x36>
	}

}
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001b4 	.word	0x200001b4
 8000ca4:	200001b0 	.word	0x200001b0
 8000ca8:	2000025a 	.word	0x2000025a
 8000cac:	200001c8 	.word	0x200001c8
 8000cb0:	0800dcec 	.word	0x0800dcec
 8000cb4:	200003e2 	.word	0x200003e2
 8000cb8:	0800dd04 	.word	0x0800dd04
 8000cbc:	2000025c 	.word	0x2000025c
 8000cc0:	20000244 	.word	0x20000244
 8000cc4:	200001b8 	.word	0x200001b8
 8000cc8:	200001c4 	.word	0x200001c4
 8000ccc:	200003ec 	.word	0x200003ec
 8000cd0:	0800dd18 	.word	0x0800dd18
 8000cd4:	200001bc 	.word	0x200001bc

08000cd8 <ESP01DOConnection>:

static void ESP01DOConnection(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

	esp01TimeoutTask = 100;
 8000cdc:	4b9c      	ldr	r3, [pc, #624]	; (8000f50 <ESP01DOConnection+0x278>)
 8000cde:	2264      	movs	r2, #100	; 0x64
 8000ce0:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 8000ce2:	4b9c      	ldr	r3, [pc, #624]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	f200 81e5 	bhi.w	80010b6 <ESP01DOConnection+0x3de>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <ESP01DOConnection+0x1c>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d35 	.word	0x08000d35
 8000cf8:	08000d93 	.word	0x08000d93
 8000cfc:	08000de5 	.word	0x08000de5
 8000d00:	08000e03 	.word	0x08000e03
 8000d04:	08000e21 	.word	0x08000e21
 8000d08:	08000e3f 	.word	0x08000e3f
 8000d0c:	08000ec5 	.word	0x08000ec5
 8000d10:	08000ee9 	.word	0x08000ee9
 8000d14:	08000f17 	.word	0x08000f17
 8000d18:	08000fa5 	.word	0x08000fa5
 8000d1c:	08000fcd 	.word	0x08000fcd
 8000d20:	0800105f 	.word	0x0800105f
 8000d24:	0800107d 	.word	0x0800107d
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d5d 	.word	0x08000d5d
 8000d30:	08000d85 	.word	0x08000d85
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 8000d34:	4b86      	ldr	r3, [pc, #536]	; (8000f50 <ESP01DOConnection+0x278>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
		break;
 8000d3a:	e1bc      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8000d3c:	4b86      	ldr	r3, [pc, #536]	; (8000f58 <ESP01DOConnection+0x280>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2000      	movs	r0, #0
 8000d42:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8000d44:	4b85      	ldr	r3, [pc, #532]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <ESP01DOConnection+0x7c>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8000d4c:	4b83      	ldr	r3, [pc, #524]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4883      	ldr	r0, [pc, #524]	; (8000f60 <ESP01DOConnection+0x288>)
 8000d52:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 8000d54:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000d56:	220e      	movs	r2, #14
 8000d58:	701a      	strb	r2, [r3, #0]
		break;
 8000d5a:	e1ac      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 8000d5c:	4b7e      	ldr	r3, [pc, #504]	; (8000f58 <ESP01DOConnection+0x280>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2001      	movs	r0, #1
 8000d62:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8000d64:	4b7d      	ldr	r3, [pc, #500]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <ESP01DOConnection+0x9c>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 8000d6c:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	487c      	ldr	r0, [pc, #496]	; (8000f64 <ESP01DOConnection+0x28c>)
 8000d72:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 8000d74:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000d76:	220f      	movs	r2, #15
 8000d78:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8000d7a:	4b75      	ldr	r3, [pc, #468]	; (8000f50 <ESP01DOConnection+0x278>)
 8000d7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d80:	601a      	str	r2, [r3, #0]
		break;
 8000d82:	e198      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 8000d84:	4b73      	ldr	r3, [pc, #460]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 8000d8a:	4b77      	ldr	r3, [pc, #476]	; (8000f68 <ESP01DOConnection+0x290>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
		break;
 8000d90:	e191      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATAT:
		if(esp01TriesAT){
 8000d92:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <ESP01DOConnection+0x290>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00d      	beq.n	8000db6 <ESP01DOConnection+0xde>
			esp01TriesAT--;
 8000d9a:	4b73      	ldr	r3, [pc, #460]	; (8000f68 <ESP01DOConnection+0x290>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b71      	ldr	r3, [pc, #452]	; (8000f68 <ESP01DOConnection+0x290>)
 8000da4:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 8000da6:	4b70      	ldr	r3, [pc, #448]	; (8000f68 <ESP01DOConnection+0x290>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <ESP01DOConnection+0xe4>
				esp01ATSate = ESP01ATHARDRST0;
 8000dae:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000db0:	220d      	movs	r2, #13
 8000db2:	701a      	strb	r2, [r3, #0]
				break;
 8000db4:	e17f      	b.n	80010b6 <ESP01DOConnection+0x3de>
			}
		}
		else
			esp01TriesAT = 4;
 8000db6:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <ESP01DOConnection+0x290>)
 8000db8:	2204      	movs	r2, #4
 8000dba:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 8000dbc:	4a6b      	ldr	r2, [pc, #428]	; (8000f6c <ESP01DOConnection+0x294>)
 8000dbe:	7813      	ldrb	r3, [r2, #0]
 8000dc0:	f36f 1345 	bfc	r3, #5, #1
 8000dc4:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 8000dc6:	486a      	ldr	r0, [pc, #424]	; (8000f70 <ESP01DOConnection+0x298>)
 8000dc8:	f000 fa0c 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <ESP01DOConnection+0x284>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <ESP01DOConnection+0x104>
			ESP01DbgStr("+&DBGESP01AT\n");
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <ESP01DOConnection+0x284>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4866      	ldr	r0, [pc, #408]	; (8000f74 <ESP01DOConnection+0x29c>)
 8000dda:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	701a      	strb	r2, [r3, #0]
		break;
 8000de2:	e168      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8000de4:	4b61      	ldr	r3, [pc, #388]	; (8000f6c <ESP01DOConnection+0x294>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <ESP01DOConnection+0x122>
			esp01ATSate = ESP01ATCWMODE;
 8000df2:	4b58      	ldr	r3, [pc, #352]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8000df8:	e15d      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
		break;
 8000e00:	e159      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 8000e02:	485d      	ldr	r0, [pc, #372]	; (8000f78 <ESP01DOConnection+0x2a0>)
 8000e04:	f000 f9ee 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000e08:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <ESP01DOConnection+0x140>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4859      	ldr	r0, [pc, #356]	; (8000f7c <ESP01DOConnection+0x2a4>)
 8000e16:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8000e18:	4b4e      	ldr	r3, [pc, #312]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	701a      	strb	r2, [r3, #0]
		break;
 8000e1e:	e14a      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 8000e20:	4857      	ldr	r0, [pc, #348]	; (8000f80 <ESP01DOConnection+0x2a8>)
 8000e22:	f000 f9df 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000e26:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <ESP01DOConnection+0x15e>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4854      	ldr	r0, [pc, #336]	; (8000f84 <ESP01DOConnection+0x2ac>)
 8000e34:	4798      	blx	r3
		esp01ATSate = ESP01ATCWJAP;
 8000e36:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000e38:	2205      	movs	r2, #5
 8000e3a:	701a      	strb	r2, [r3, #0]
		break;
 8000e3c:	e13b      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <ESP01DOConnection+0x294>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIFSR;
 8000e4c:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	701a      	strb	r2, [r3, #0]
			break;
 8000e52:	e130      	b.n	80010b6 <ESP01DOConnection+0x3de>
		}
		if(esp01SSID[0] == '\0')
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <ESP01DOConnection+0x2b0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8129 	beq.w	80010b0 <ESP01DOConnection+0x3d8>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8000e5e:	484b      	ldr	r0, [pc, #300]	; (8000f8c <ESP01DOConnection+0x2b4>)
 8000e60:	f000 f9c0 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000e64:	2022      	movs	r0, #34	; 0x22
 8000e66:	f000 f9ed 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8000e6a:	4847      	ldr	r0, [pc, #284]	; (8000f88 <ESP01DOConnection+0x2b0>)
 8000e6c:	f000 f9ba 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000e70:	2022      	movs	r0, #34	; 0x22
 8000e72:	f000 f9e7 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f000 f9e4 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8000e7c:	2022      	movs	r0, #34	; 0x22
 8000e7e:	f000 f9e1 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 8000e82:	4843      	ldr	r0, [pc, #268]	; (8000f90 <ESP01DOConnection+0x2b8>)
 8000e84:	f000 f9ae 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000e88:	2022      	movs	r0, #34	; 0x22
 8000e8a:	f000 f9db 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8000e8e:	200d      	movs	r0, #13
 8000e90:	f000 f9d8 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8000e94:	200a      	movs	r0, #10
 8000e96:	f000 f9d5 	bl	8001244 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <ESP01DOConnection+0x1d2>
			ESP01DbgStr("+&DBGESP01ATCWJAP\n");
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <ESP01DOConnection+0x284>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	483b      	ldr	r0, [pc, #236]	; (8000f94 <ESP01DOConnection+0x2bc>)
 8000ea8:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8000eaa:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <ESP01DOConnection+0x294>)
 8000eac:	7813      	ldrb	r3, [r2, #0]
 8000eae:	f36f 1345 	bfc	r3, #5, #1
 8000eb2:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000eb6:	2206      	movs	r2, #6
 8000eb8:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 1500;
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <ESP01DOConnection+0x278>)
 8000ebc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ec0:	601a      	str	r2, [r3, #0]
		break;
 8000ec2:	e0f8      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <ESP01DOConnection+0x294>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <ESP01DOConnection+0x208>
			esp01ATSate = ESP01ATCIFSR;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <ESP01DOConnection+0x290>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8000ede:	e0ea      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
		break;
 8000ee6:	e0e6      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <ESP01DOConnection+0x2c0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 8000eee:	482b      	ldr	r0, [pc, #172]	; (8000f9c <ESP01DOConnection+0x2c4>)
 8000ef0:	f000 f978 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <ESP01DOConnection+0x284>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <ESP01DOConnection+0x22c>
			ESP01DbgStr("+&DBGESP01CIFSR\n");
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <ESP01DOConnection+0x284>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <ESP01DOConnection+0x2c8>)
 8000f02:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <ESP01DOConnection+0x294>)
 8000f06:	7813      	ldrb	r3, [r2, #0]
 8000f08:	f36f 1345 	bfc	r3, #5, #1
 8000f0c:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f10:	2208      	movs	r2, #8
 8000f12:	701a      	strb	r2, [r3, #0]
		break;
 8000f14:	e0cf      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <ESP01DOConnection+0x294>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <ESP01DOConnection+0x254>
			esp01ATSate = ESP01ATCIPCLOSE;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f26:	2209      	movs	r2, #9
 8000f28:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 8000f2a:	e0c4      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01TriesAT--;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <ESP01DOConnection+0x290>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <ESP01DOConnection+0x290>)
 8000f36:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <ESP01DOConnection+0x290>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d103      	bne.n	8000f48 <ESP01DOConnection+0x270>
				esp01ATSate = ESP01ATAT;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
				break;
 8000f46:	e0b6      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATCIFSR;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	701a      	strb	r2, [r3, #0]
		break;
 8000f4e:	e0b2      	b.n	80010b6 <ESP01DOConnection+0x3de>
 8000f50:	200001b8 	.word	0x200001b8
 8000f54:	200001b0 	.word	0x200001b0
 8000f58:	200003ec 	.word	0x200003ec
 8000f5c:	200001c8 	.word	0x200001c8
 8000f60:	0800dd2c 	.word	0x0800dd2c
 8000f64:	0800dd44 	.word	0x0800dd44
 8000f68:	200003e8 	.word	0x200003e8
 8000f6c:	200001b4 	.word	0x200001b4
 8000f70:	0800de7c 	.word	0x0800de7c
 8000f74:	0800dd5c 	.word	0x0800dd5c
 8000f78:	0800de94 	.word	0x0800de94
 8000f7c:	0800dd6c 	.word	0x0800dd6c
 8000f80:	0800de84 	.word	0x0800de84
 8000f84:	0800dd80 	.word	0x0800dd80
 8000f88:	200001cc 	.word	0x200001cc
 8000f8c:	0800dea4 	.word	0x0800dea4
 8000f90:	2000020c 	.word	0x2000020c
 8000f94:	0800dd94 	.word	0x0800dd94
 8000f98:	20000244 	.word	0x20000244
 8000f9c:	0800deb0 	.word	0x0800deb0
 8000fa0:	0800dda8 	.word	0x0800dda8
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8000fa4:	4b45      	ldr	r3, [pc, #276]	; (80010bc <ESP01DOConnection+0x3e4>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8083 	beq.w	80010b4 <ESP01DOConnection+0x3dc>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 8000fae:	4844      	ldr	r0, [pc, #272]	; (80010c0 <ESP01DOConnection+0x3e8>)
 8000fb0:	f000 f918 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <ESP01DOConnection+0x3ec>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <ESP01DOConnection+0x2ec>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE\n");
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <ESP01DOConnection+0x3ec>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4841      	ldr	r0, [pc, #260]	; (80010c8 <ESP01DOConnection+0x3f0>)
 8000fc2:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <ESP01DOConnection+0x3f4>)
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	701a      	strb	r2, [r3, #0]
		break;
 8000fca:	e074      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 8000fcc:	4840      	ldr	r0, [pc, #256]	; (80010d0 <ESP01DOConnection+0x3f8>)
 8000fce:	f000 f909 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000fd2:	2022      	movs	r0, #34	; 0x22
 8000fd4:	f000 f936 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8000fd8:	483e      	ldr	r0, [pc, #248]	; (80010d4 <ESP01DOConnection+0x3fc>)
 8000fda:	f000 f903 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000fde:	2022      	movs	r0, #34	; 0x22
 8000fe0:	f000 f930 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000fe4:	202c      	movs	r0, #44	; 0x2c
 8000fe6:	f000 f92d 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8000fea:	2022      	movs	r0, #34	; 0x22
 8000fec:	f000 f92a 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8000ff0:	4832      	ldr	r0, [pc, #200]	; (80010bc <ESP01DOConnection+0x3e4>)
 8000ff2:	f000 f8f7 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f000 f924 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000ffc:	202c      	movs	r0, #44	; 0x2c
 8000ffe:	f000 f921 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 8001002:	4835      	ldr	r0, [pc, #212]	; (80010d8 <ESP01DOConnection+0x400>)
 8001004:	f000 f8ee 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8001008:	202c      	movs	r0, #44	; 0x2c
 800100a:	f000 f91b 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 800100e:	4833      	ldr	r0, [pc, #204]	; (80010dc <ESP01DOConnection+0x404>)
 8001010:	f000 f8e8 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8001014:	202c      	movs	r0, #44	; 0x2c
 8001016:	f000 f915 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 800101a:	2030      	movs	r0, #48	; 0x30
 800101c:	f000 f912 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8001020:	200d      	movs	r0, #13
 8001022:	f000 f90f 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8001026:	200a      	movs	r0, #10
 8001028:	f000 f90c 	bl	8001244 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <ESP01DOConnection+0x3ec>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <ESP01DOConnection+0x364>
			ESP01DbgStr("+&DBGESP01ATCIPSTART\n");
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <ESP01DOConnection+0x3ec>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4829      	ldr	r0, [pc, #164]	; (80010e0 <ESP01DOConnection+0x408>)
 800103a:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 800103c:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <ESP01DOConnection+0x40c>)
 800103e:	7813      	ldrb	r3, [r2, #0]
 8001040:	f36f 1345 	bfc	r3, #5, #1
 8001044:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <ESP01DOConnection+0x40c>)
 8001048:	7813      	ldrb	r3, [r2, #0]
 800104a:	f36f 1386 	bfc	r3, #6, #1
 800104e:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <ESP01DOConnection+0x3f4>)
 8001052:	220b      	movs	r2, #11
 8001054:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 200;
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <ESP01DOConnection+0x410>)
 8001058:	22c8      	movs	r2, #200	; 0xc8
 800105a:	601a      	str	r2, [r3, #0]
		break;
 800105c:	e02b      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <ESP01DOConnection+0x40c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <ESP01DOConnection+0x39c>
			esp01ATSate = ESP01ATCONNECTED;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <ESP01DOConnection+0x3f4>)
 800106e:	220c      	movs	r2, #12
 8001070:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8001072:	e020      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <ESP01DOConnection+0x3f4>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
		break;
 800107a:	e01c      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <ESP01DOConnection+0x40c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <ESP01DOConnection+0x3ba>
			esp01ATSate = ESP01ATAT;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <ESP01DOConnection+0x3f4>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
			break;
 8001090:	e011      	b.n	80010b6 <ESP01DOConnection+0x3de>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <ESP01DOConnection+0x40c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <ESP01DOConnection+0x3d0>
			esp01ATSate = ESP01ATCIPCLOSE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <ESP01DOConnection+0x3f4>)
 80010a2:	2209      	movs	r2, #9
 80010a4:	701a      	strb	r2, [r3, #0]
			break;
 80010a6:	e006      	b.n	80010b6 <ESP01DOConnection+0x3de>
		}
		esp01TimeoutTask = 0;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <ESP01DOConnection+0x410>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
		break;
 80010ae:	e002      	b.n	80010b6 <ESP01DOConnection+0x3de>
			break;
 80010b0:	bf00      	nop
 80010b2:	e000      	b.n	80010b6 <ESP01DOConnection+0x3de>
			break;
 80010b4:	bf00      	nop
	}
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000022c 	.word	0x2000022c
 80010c0:	0800decc 	.word	0x0800decc
 80010c4:	200001c8 	.word	0x200001c8
 80010c8:	0800ddbc 	.word	0x0800ddbc
 80010cc:	200001b0 	.word	0x200001b0
 80010d0:	0800debc 	.word	0x0800debc
 80010d4:	20000000 	.word	0x20000000
 80010d8:	2000023c 	.word	0x2000023c
 80010dc:	20000254 	.word	0x20000254
 80010e0:	0800ddd4 	.word	0x0800ddd4
 80010e4:	200001b4 	.word	0x200001b4
 80010e8:	200001b8 	.word	0x200001b8

080010ec <ESP01SENDData>:

static void ESP01SENDData(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	uint8_t value;

	if(esp01Flags.bit.WAITINGSYMBOL){
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <ESP01SENDData+0xd8>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <ESP01SENDData+0xdc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d159      	bne.n	80011bc <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <ESP01SENDData+0xe0>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <ESP01SENDData+0xe4>)
 800110e:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8001110:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <ESP01SENDData+0xd8>)
 8001112:	7813      	ldrb	r3, [r2, #0]
 8001114:	f36f 0300 	bfc	r3, #0, #1
 8001118:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <ESP01SENDData+0xe8>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <ESP01SENDData+0xec>)
 8001122:	220a      	movs	r2, #10
 8001124:	601a      	str	r2, [r3, #0]
		}
		return;
 8001126:	e049      	b.n	80011bc <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <ESP01SENDData+0xe4>)
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <ESP01SENDData+0xe0>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d044      	beq.n	80011be <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <ESP01SENDData+0xe4>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <ESP01SENDData+0xf0>)
 800113c:	5c9b      	ldrb	r3, [r3, r2]
 800113e:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <ESP01SENDData+0xd8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d004      	beq.n	8001158 <ESP01SENDData+0x6c>
			if(value == '>')
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b3e      	cmp	r3, #62	; 0x3e
 8001152:	d101      	bne.n	8001158 <ESP01SENDData+0x6c>
				value = '\n';
 8001154:	230a      	movs	r3, #10
 8001156:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <ESP01SENDData+0xf4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	4610      	mov	r0, r2
 8001160:	4798      	blx	r3
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d02a      	beq.n	80011be <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <ESP01SENDData+0xd8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d013      	beq.n	800119e <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <ESP01SENDData+0xe4>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <ESP01SENDData+0xf0>)
 800117e:	5c9b      	ldrb	r3, [r3, r2]
 8001180:	2b3e      	cmp	r3, #62	; 0x3e
 8001182:	d10c      	bne.n	800119e <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <ESP01SENDData+0xd8>)
 8001186:	7813      	ldrb	r3, [r2, #0]
 8001188:	f36f 0382 	bfc	r3, #2, #1
 800118c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <ESP01SENDData+0xd8>)
 8001190:	7813      	ldrb	r3, [r2, #0]
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <ESP01SENDData+0xdc>)
 800119a:	2205      	movs	r2, #5
 800119c:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <ESP01SENDData+0xe4>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <ESP01SENDData+0xe4>)
 80011a8:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <ESP01SENDData+0xe4>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b2:	d104      	bne.n	80011be <ESP01SENDData+0xd2>
				esp01irTX = 0;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <ESP01SENDData+0xe4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	e000      	b.n	80011be <ESP01SENDData+0xd2>
		return;
 80011bc:	bf00      	nop
		}
	}
}
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001b4 	.word	0x200001b4
 80011c8:	200001c0 	.word	0x200001c0
 80011cc:	200003e6 	.word	0x200003e6
 80011d0:	200003e4 	.word	0x200003e4
 80011d4:	200001b0 	.word	0x200001b0
 80011d8:	200001b8 	.word	0x200001b8
 80011dc:	200002e0 	.word	0x200002e0
 80011e0:	200003ec 	.word	0x200003ec

080011e4 <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e017      	b.n	8001222 <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	441a      	add	r2, r3
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <ESP01StrToBufTX+0x58>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	b288      	uxth	r0, r1
 8001200:	490e      	ldr	r1, [pc, #56]	; (800123c <ESP01StrToBufTX+0x58>)
 8001202:	8008      	strh	r0, [r1, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <ESP01StrToBufTX+0x5c>)
 800120a:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <ESP01StrToBufTX+0x58>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001214:	d102      	bne.n	800121c <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <ESP01StrToBufTX+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1e1      	bne.n	80011f2 <ESP01StrToBufTX+0xe>
	}
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200003e6 	.word	0x200003e6
 8001240:	200002e0 	.word	0x200002e0

08001244 <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <ESP01ByteToBufTX+0x38>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	b291      	uxth	r1, r2
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <ESP01ByteToBufTX+0x38>)
 8001258:	8011      	strh	r1, [r2, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <ESP01ByteToBufTX+0x3c>)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <ESP01ByteToBufTX+0x38>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126a:	d102      	bne.n	8001272 <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <ESP01ByteToBufTX+0x38>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200003e6 	.word	0x200003e6
 8001280:	200002e0 	.word	0x200002e0

08001284 <MPU6050_Init>:

#include "mpu6050.h"

uint8_t bufData[14];

void MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af04      	add	r7, sp, #16
 800128a:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]

    // Verifies connection with MPU6050
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I, 1, &data, 1, MPU_TIMEOUT);
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	2275      	movs	r2, #117	; 0x75
 80012a4:	21d0      	movs	r1, #208	; 0xd0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f003 f90c 	bl	80044c4 <HAL_I2C_Mem_Read>

    if (data == WHO_AM_I_DEFAULT_VALUE){
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b68      	cmp	r3, #104	; 0x68
 80012b0:	d12f      	bne.n	8001312 <MPU6050_Init+0x8e>
        // Wake up MPU6050
        data = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2301      	movs	r3, #1
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f107 030f 	add.w	r3, r7, #15
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	226b      	movs	r2, #107	; 0x6b
 80012ca:	21d0      	movs	r1, #208	; 0xd0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f002 ffff 	bl	80042d0 <HAL_I2C_Mem_Write>

        // Set accelerometer range (+/- 2g, 4g, 8g, 16g)
        data = 0; // 2g (default)
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	f107 030f 	add.w	r3, r7, #15
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	221c      	movs	r2, #28
 80012ea:	21d0      	movs	r1, #208	; 0xd0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f002 ffef 	bl	80042d0 <HAL_I2C_Mem_Write>

        // Set gyroscope range (+/- 250, 500, 1000, 2000 degree/s)
        data = 0; // 250 degree/s (default)
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 030f 	add.w	r3, r7, #15
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	221b      	movs	r2, #27
 800130a:	21d0      	movs	r1, #208	; 0xd0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f002 ffdf 	bl	80042d0 <HAL_I2C_Mem_Write>
    }
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MPU6050_Read_Data_DMA>:


void MPU6050_Read_Data_DMA(I2C_HandleTypeDef *hi2c){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
 8001322:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(hi2c, MPU6050_ADDR, ACCEL_XOUT_REG, 1, bufData, 14);
 8001324:	230e      	movs	r3, #14
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <MPU6050_Read_Data_DMA+0x24>)
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	223b      	movs	r2, #59	; 0x3b
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f003 fb2e 	bl	8004994 <HAL_I2C_Mem_Read_DMA>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003fc 	.word	0x200003fc

08001344 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	mpuValues.gyroY[1] = bufData[10];

	mpuValues.gyroZ[0] = bufData[13];
	mpuValues.gyroZ[1] = bufData[12];
	*/
	mpuValues.buffer[0] = bufData[1];
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 800134e:	785a      	ldrb	r2, [r3, #1]
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 8001352:	731a      	strb	r2, [r3, #12]
	mpuValues.buffer[1] = bufData[0];
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 800135a:	735a      	strb	r2, [r3, #13]
	mpuValues.buffer[2] = bufData[3];
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 800135e:	78da      	ldrb	r2, [r3, #3]
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 8001362:	739a      	strb	r2, [r3, #14]
	mpuValues.buffer[3] = bufData[2];
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001366:	789a      	ldrb	r2, [r3, #2]
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 800136a:	73da      	strb	r2, [r3, #15]
	mpuValues.buffer[4] = bufData[5];
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 800136e:	795a      	ldrb	r2, [r3, #5]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 8001372:	741a      	strb	r2, [r3, #16]
	mpuValues.buffer[5] = bufData[4];
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001376:	791a      	ldrb	r2, [r3, #4]
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 800137a:	745a      	strb	r2, [r3, #17]
	mpuValues.buffer[6] = bufData[9];
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 800137e:	7a5a      	ldrb	r2, [r3, #9]
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 8001382:	749a      	strb	r2, [r3, #18]
	mpuValues.buffer[7] = bufData[8];
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001386:	7a1a      	ldrb	r2, [r3, #8]
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 800138a:	74da      	strb	r2, [r3, #19]
	mpuValues.buffer[8] = bufData[11];
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 800138e:	7ada      	ldrb	r2, [r3, #11]
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 8001392:	751a      	strb	r2, [r3, #20]
	mpuValues.buffer[9] = bufData[10];
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001396:	7a9a      	ldrb	r2, [r3, #10]
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 800139a:	755a      	strb	r2, [r3, #21]
	mpuValues.buffer[10] = bufData[13];
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 800139e:	7b5a      	ldrb	r2, [r3, #13]
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 80013a2:	759a      	strb	r2, [r3, #22]
	mpuValues.buffer[11] = bufData[12];
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_I2C_MemRxCpltCallback+0x74>)
 80013a6:	7b1a      	ldrb	r2, [r3, #12]
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_I2C_MemRxCpltCallback+0x78>)
 80013aa:	75da      	strb	r2, [r3, #23]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200003fc 	.word	0x200003fc
 80013bc:	20000b98 	.word	0x20000b98

080013c0 <UNERBUS_DecodeHeader>:

static uint8_t HEADER[7] = {'U', 'N', 'E', 'R', 0x00, ':', 0x00};

static _uUNERBUSWork w;

static void UNERBUS_DecodeHeader(_sUNERBUSHandle *aBus){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint8_t value;
	uint8_t index = aBus->rx.iWrite;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	799b      	ldrb	r3, [r3, #6]
 80013cc:	73fb      	strb	r3, [r7, #15]

	while (aBus->rx.iRead != index)
 80013ce:	e0b5      	b.n	800153c <UNERBUS_DecodeHeader+0x17c>
	{
		value = aBus->rx.buf[aBus->rx.iRead];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7952      	ldrb	r2, [r2, #5]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	73bb      	strb	r3, [r7, #14]
		switch(aBus->rx.header){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7a9b      	ldrb	r3, [r3, #10]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	f200 808d 	bhi.w	8001502 <UNERBUS_DecodeHeader+0x142>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <UNERBUS_DecodeHeader+0x30>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	0800140d 	.word	0x0800140d
 80013f4:	08001431 	.word	0x08001431
 80013f8:	08001431 	.word	0x08001431
 80013fc:	08001431 	.word	0x08001431
 8001400:	08001471 	.word	0x08001471
 8001404:	08001431 	.word	0x08001431
 8001408:	080014af 	.word	0x080014af
		case 0:
			if(value == HEADER[aBus->rx.header]){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a9b      	ldrb	r3, [r3, #10]
 8001410:	461a      	mov	r2, r3
 8001412:	4b50      	ldr	r3, [pc, #320]	; (8001554 <UNERBUS_DecodeHeader+0x194>)
 8001414:	5c9b      	ldrb	r3, [r3, r2]
 8001416:	7bba      	ldrb	r2, [r7, #14]
 8001418:	429a      	cmp	r2, r3
 800141a:	d176      	bne.n	800150a <UNERBUS_DecodeHeader+0x14a>
				aBus->rx.header = 1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	729a      	strb	r2, [r3, #10]
				aBus->rx.timeout = 5;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	72da      	strb	r2, [r3, #11]
				aBus->rx.cks = value;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	731a      	strb	r2, [r3, #12]
			}
			break;
 800142e:	e06c      	b.n	800150a <UNERBUS_DecodeHeader+0x14a>
		case 1:
		case 2:
		case 3:
		case 5:
			if(value == HEADER[aBus->rx.header]){
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7a9b      	ldrb	r3, [r3, #10]
 8001434:	461a      	mov	r2, r3
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <UNERBUS_DecodeHeader+0x194>)
 8001438:	5c9b      	ldrb	r3, [r3, r2]
 800143a:	7bba      	ldrb	r2, [r7, #14]
 800143c:	429a      	cmp	r2, r3
 800143e:	d10d      	bne.n	800145c <UNERBUS_DecodeHeader+0x9c>
				aBus->rx.cks ^= value;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7b1a      	ldrb	r2, [r3, #12]
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	4053      	eors	r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	731a      	strb	r2, [r3, #12]
				aBus->rx.header++;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7a9b      	ldrb	r3, [r3, #10]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	729a      	strb	r2, [r3, #10]
			}
			else{
				aBus->rx.header = 0;
				aBus->rx.iRead--;
			}
			break;
 800145a:	e059      	b.n	8001510 <UNERBUS_DecodeHeader+0x150>
				aBus->rx.header = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	729a      	strb	r2, [r3, #10]
				aBus->rx.iRead--;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	795b      	ldrb	r3, [r3, #5]
 8001466:	3b01      	subs	r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	715a      	strb	r2, [r3, #5]
			break;
 800146e:	e04f      	b.n	8001510 <UNERBUS_DecodeHeader+0x150>
		case 4:
			aBus->rx.cks ^= value;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7b1a      	ldrb	r2, [r3, #12]
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	4053      	eors	r3, r2
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	731a      	strb	r2, [r3, #12]
			aBus->rx.nBytes = value;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7bba      	ldrb	r2, [r7, #14]
 8001482:	725a      	strb	r2, [r3, #9]
			aBus->rx.iData = aBus->rx.iRead+2;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	795b      	ldrb	r3, [r3, #5]
 8001488:	3302      	adds	r3, #2
 800148a:	b2da      	uxtb	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	71da      	strb	r2, [r3, #7]
			aBus->rx.iData &= aBus->rx.maxIndexRingBuf;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	79da      	ldrb	r2, [r3, #7]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	4013      	ands	r3, r2
 800149a:	b2da      	uxtb	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	71da      	strb	r2, [r3, #7]
			aBus->rx.newData = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	721a      	strb	r2, [r3, #8]
			aBus->rx.header = 5;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2205      	movs	r2, #5
 80014aa:	729a      	strb	r2, [r3, #10]
			break;
 80014ac:	e030      	b.n	8001510 <UNERBUS_DecodeHeader+0x150>
		case 6:
			aBus->rx.nBytes--;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7a5b      	ldrb	r3, [r3, #9]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	725a      	strb	r2, [r3, #9]
			if(aBus->rx.nBytes)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7a5b      	ldrb	r3, [r3, #9]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <UNERBUS_DecodeHeader+0x112>
				aBus->rx.cks ^= value;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7b1a      	ldrb	r2, [r3, #12]
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	4053      	eors	r3, r2
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	731a      	strb	r2, [r3, #12]
						aBus->MyDataReady(aBus, aBus->rx.iData);
					else
						aBus->rx.newData = 1;
				}
			}
			break;
 80014d0:	e01d      	b.n	800150e <UNERBUS_DecodeHeader+0x14e>
				aBus->rx.header = 0;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	729a      	strb	r2, [r3, #10]
				if(value == aBus->rx.cks){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7b1b      	ldrb	r3, [r3, #12]
 80014dc:	7bba      	ldrb	r2, [r7, #14]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d115      	bne.n	800150e <UNERBUS_DecodeHeader+0x14e>
					if(aBus->MyDataReady != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <UNERBUS_DecodeHeader+0x13a>
						aBus->MyDataReady(aBus, aBus->rx.iData);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	79d2      	ldrb	r2, [r2, #7]
 80014f2:	4611      	mov	r1, r2
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
			break;
 80014f8:	e009      	b.n	800150e <UNERBUS_DecodeHeader+0x14e>
						aBus->rx.newData = 1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	721a      	strb	r2, [r3, #8]
			break;
 8001500:	e005      	b.n	800150e <UNERBUS_DecodeHeader+0x14e>
		default:
			aBus->rx.header = 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	729a      	strb	r2, [r3, #10]
 8001508:	e002      	b.n	8001510 <UNERBUS_DecodeHeader+0x150>
			break;
 800150a:	bf00      	nop
 800150c:	e000      	b.n	8001510 <UNERBUS_DecodeHeader+0x150>
			break;
 800150e:	bf00      	nop
		}

		aBus->rx.iRead &= aBus->rx.maxIndexRingBuf;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	795a      	ldrb	r2, [r3, #5]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	4013      	ands	r3, r2
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	715a      	strb	r2, [r3, #5]
		aBus->rx.iRead++;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	795b      	ldrb	r3, [r3, #5]
 8001524:	3301      	adds	r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	715a      	strb	r2, [r3, #5]
		aBus->rx.iRead &= aBus->rx.maxIndexRingBuf;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	795a      	ldrb	r2, [r3, #5]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	791b      	ldrb	r3, [r3, #4]
 8001534:	4013      	ands	r3, r2
 8001536:	b2da      	uxtb	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	715a      	strb	r2, [r3, #5]
	while (aBus->rx.iRead != index)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	795b      	ldrb	r3, [r3, #5]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	429a      	cmp	r2, r3
 8001544:	f47f af44 	bne.w	80013d0 <UNERBUS_DecodeHeader+0x10>
	}
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000004 	.word	0x20000004

08001558 <UNERBUS_Init>:

void UNERBUS_Init(_sUNERBUSHandle *aBus){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	aBus->rx.header = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	729a      	strb	r2, [r3, #10]
	aBus->rx.iRead = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	715a      	strb	r2, [r3, #5]
	aBus->rx.iWrite = 0;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	719a      	strb	r2, [r3, #6]
	aBus->rx.newData = 0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	721a      	strb	r2, [r3, #8]
	aBus->tx.iRead = 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	755a      	strb	r2, [r3, #21]
	aBus->tx.iWrite = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	759a      	strb	r2, [r3, #22]
	aBus->iiTXw = 6;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2206      	movs	r2, #6
 8001588:	f883 2020 	strb.w	r2, [r3, #32]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <UNERBUS_Write>:


void UNERBUS_Write(_sUNERBUSHandle *aBus, uint8_t *buf, uint8_t lenBuf){
 8001596:	b490      	push	{r4, r7}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i<lenBuf; i++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	75fb      	strb	r3, [r7, #23]
 80015a8:	e01c      	b.n	80015e4 <UNERBUS_Write+0x4e>
	{
		aBus->tx.buf[aBus->iiTXw++] = buf[i];
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	441a      	add	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6919      	ldr	r1, [r3, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ba:	1c58      	adds	r0, r3, #1
 80015bc:	b2c4      	uxtb	r4, r0
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f880 4020 	strb.w	r4, [r0, #32]
 80015c4:	440b      	add	r3, r1
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	701a      	strb	r2, [r3, #0]
		aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	7d1b      	ldrb	r3, [r3, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
	for (uint8_t i=0; i<lenBuf; i++)
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	3301      	adds	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
 80015e4:	7dfa      	ldrb	r2, [r7, #23]
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3de      	bcc.n	80015aa <UNERBUS_Write+0x14>
	}
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc90      	pop	{r4, r7}
 80015f6:	4770      	bx	lr

080015f8 <UNERBUS_WriteByte>:

void UNERBUS_WriteByte(_sUNERBUSHandle *aBus, uint8_t value){
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
	aBus->tx.buf[aBus->iiTXw++] = value;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160e:	1c59      	adds	r1, r3, #1
 8001610:	b2c8      	uxtb	r0, r1
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f881 0020 	strb.w	r0, [r1, #32]
 8001618:	4413      	add	r3, r2
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	701a      	strb	r2, [r3, #0]
	aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7d1b      	ldrb	r3, [r3, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	b2da      	uxtb	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <UNERBUS_Send>:

void UNERBUS_Send(_sUNERBUSHandle *aBus, uint8_t cmdID, uint8_t lenCMD){
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
 8001648:	4613      	mov	r3, r2
 800164a:	70bb      	strb	r3, [r7, #2]
	uint8_t i;

	i = aBus->tx.iWrite + 7;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7d9b      	ldrb	r3, [r3, #22]
 8001650:	3307      	adds	r3, #7
 8001652:	73fb      	strb	r3, [r7, #15]
	i &= aBus->tx.maxIndexRingBuf;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7d1a      	ldrb	r2, [r3, #20]
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	4013      	ands	r3, r2
 800165c:	73fb      	strb	r3, [r7, #15]
	
	if(aBus->iiTXw == i)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	429a      	cmp	r2, r3
 8001668:	d063      	beq.n	8001732 <UNERBUS_Send+0xf6>
		return;
	
	HEADER[4] = lenCMD + 1;
 800166a:	78bb      	ldrb	r3, [r7, #2]
 800166c:	3301      	adds	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <UNERBUS_Send+0x100>)
 8001672:	711a      	strb	r2, [r3, #4]
	HEADER[6] = cmdID;
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <UNERBUS_Send+0x100>)
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	7193      	strb	r3, [r2, #6]


	aBus->tx.cks = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	75da      	strb	r2, [r3, #23]

	lenCMD += 6;
 8001680:	78bb      	ldrb	r3, [r7, #2]
 8001682:	3306      	adds	r3, #6
 8001684:	70bb      	strb	r3, [r7, #2]
	
	for (i=0; i<lenCMD; i++)
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	e028      	b.n	80016de <UNERBUS_Send+0xa2>
	{
		if(i < 7)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d808      	bhi.n	80016a4 <UNERBUS_Send+0x68>
			aBus->tx.buf[aBus->tx.iWrite] = HEADER[i];
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	7d89      	ldrb	r1, [r1, #22]
 800169c:	440b      	add	r3, r1
 800169e:	4927      	ldr	r1, [pc, #156]	; (800173c <UNERBUS_Send+0x100>)
 80016a0:	5c8a      	ldrb	r2, [r1, r2]
 80016a2:	701a      	strb	r2, [r3, #0]
		aBus->tx.cks ^= aBus->tx.buf[aBus->tx.iWrite];
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7dda      	ldrb	r2, [r3, #23]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	7d89      	ldrb	r1, [r1, #22]
 80016b0:	440b      	add	r3, r1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4053      	eors	r3, r2
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	75da      	strb	r2, [r3, #23]
		aBus->tx.iWrite++;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7d9b      	ldrb	r3, [r3, #22]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	759a      	strb	r2, [r3, #22]
		aBus->tx.iWrite &= aBus->tx.maxIndexRingBuf;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7d9a      	ldrb	r2, [r3, #22]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7d1b      	ldrb	r3, [r3, #20]
 80016d0:	4013      	ands	r3, r2
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	759a      	strb	r2, [r3, #22]
	for (i=0; i<lenCMD; i++)
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	3301      	adds	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	78bb      	ldrb	r3, [r7, #2]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3d2      	bcc.n	800168c <UNERBUS_Send+0x50>

	}

	aBus->tx.buf[aBus->tx.iWrite++] = aBus->tx.cks;	
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7d9b      	ldrb	r3, [r3, #22]
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	b2c8      	uxtb	r0, r1
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	7588      	strb	r0, [r1, #22]
 80016f6:	4413      	add	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	7dd2      	ldrb	r2, [r2, #23]
 80016fc:	701a      	strb	r2, [r3, #0]
	aBus->tx.iWrite &= aBus->tx.maxIndexRingBuf;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7d9a      	ldrb	r2, [r3, #22]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7d1b      	ldrb	r3, [r3, #20]
 8001706:	4013      	ands	r3, r2
 8001708:	b2da      	uxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	759a      	strb	r2, [r3, #22]
	aBus->iiTXw = (aBus->tx.iWrite + 7);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7d9b      	ldrb	r3, [r3, #22]
 8001712:	3307      	adds	r3, #7
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f883 2020 	strb.w	r2, [r3, #32]
	aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7d1b      	ldrb	r3, [r3, #20]
 8001726:	4013      	ands	r3, r2
 8001728:	b2da      	uxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f883 2020 	strb.w	r2, [r3, #32]
 8001730:	e000      	b.n	8001734 <UNERBUS_Send+0xf8>
		return;
 8001732:	bf00      	nop
}
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000004 	.word	0x20000004

08001740 <UNERBUS_ReceiveByte>:
	aBus->iiTXw = (aBus->tx.iWrite + 7);
	aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
	
}

void UNERBUS_ReceiveByte(_sUNERBUSHandle *aBus, uint8_t value){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
	aBus->rx.buf[aBus->rx.iWrite++] = value;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	799b      	ldrb	r3, [r3, #6]
 8001754:	1c59      	adds	r1, r3, #1
 8001756:	b2c8      	uxtb	r0, r1
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	7188      	strb	r0, [r1, #6]
 800175c:	4413      	add	r3, r2
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	701a      	strb	r2, [r3, #0]
	aBus->rx.iWrite &= aBus->rx.maxIndexRingBuf;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	799a      	ldrb	r2, [r3, #6]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	791b      	ldrb	r3, [r3, #4]
 800176a:	4013      	ands	r3, r2
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	719a      	strb	r2, [r3, #6]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <UNERBUS_ReceiveBuf>:

void UNERBUS_ReceiveBuf(_sUNERBUSHandle *aBus, uint8_t *buf, uint8_t lenBuf){
 800177c:	b490      	push	{r4, r7}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	4613      	mov	r3, r2
 8001788:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i<lenBuf; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]
 800178e:	e018      	b.n	80017c2 <UNERBUS_ReceiveBuf+0x46>
	{
		aBus->rx.buf[aBus->rx.iWrite++] = buf[i];
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	441a      	add	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	799b      	ldrb	r3, [r3, #6]
 800179e:	1c58      	adds	r0, r3, #1
 80017a0:	b2c4      	uxtb	r4, r0
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	7184      	strb	r4, [r0, #6]
 80017a6:	440b      	add	r3, r1
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	701a      	strb	r2, [r3, #0]
		aBus->rx.iWrite &= aBus->rx.maxIndexRingBuf;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	799a      	ldrb	r2, [r3, #6]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	791b      	ldrb	r3, [r3, #4]
 80017b4:	4013      	ands	r3, r2
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	719a      	strb	r2, [r3, #6]
	for (uint8_t i=0; i<lenBuf; i++)
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	3301      	adds	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	7dfa      	ldrb	r2, [r7, #23]
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3e2      	bcc.n	8001790 <UNERBUS_ReceiveBuf+0x14>
	}
}
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc90      	pop	{r4, r7}
 80017d4:	4770      	bx	lr
	...

080017d8 <UNERBUS_GetUInt8>:
		aBus->rx.iData &= aBus->rx.maxIndexRingBuf;
	}
}


uint8_t UNERBUS_GetUInt8(_sUNERBUSHandle *aBus){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	w.u8[0] = aBus->rx.buf[aBus->rx.iData++];
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	79db      	ldrb	r3, [r3, #7]
 80017e8:	1c59      	adds	r1, r3, #1
 80017ea:	b2c8      	uxtb	r0, r1
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	71c8      	strb	r0, [r1, #7]
 80017f0:	4413      	add	r3, r2
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <UNERBUS_GetUInt8+0x40>)
 80017f6:	701a      	strb	r2, [r3, #0]
	aBus->rx.iData &= aBus->rx.maxIndexRingBuf;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	79da      	ldrb	r2, [r3, #7]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	4013      	ands	r3, r2
 8001802:	b2da      	uxtb	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	71da      	strb	r2, [r3, #7]
	
	return w.u8[0];
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <UNERBUS_GetUInt8+0x40>)
 800180a:	781b      	ldrb	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000040c 	.word	0x2000040c

0800181c <UNERBUS_Task>:

void UNERBUS_ResetNewData(_sUNERBUSHandle *aBus){
	aBus->rx.newData = 0;
}

void UNERBUS_Task(_sUNERBUSHandle *aBus){
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	if(aBus->rx.iRead != aBus->rx.iWrite)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	795a      	ldrb	r2, [r3, #5]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	799b      	ldrb	r3, [r3, #6]
 800182c:	429a      	cmp	r2, r3
 800182e:	d002      	beq.n	8001836 <UNERBUS_Task+0x1a>
		UNERBUS_DecodeHeader(aBus);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fdc5 	bl	80013c0 <UNERBUS_DecodeHeader>
		
	if(aBus->WriteUSARTByte != NULL){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d020      	beq.n	8001880 <UNERBUS_Task+0x64>
		if(aBus->tx.iRead != aBus->tx.iWrite){
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7d5a      	ldrb	r2, [r3, #21]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7d9b      	ldrb	r3, [r3, #22]
 8001846:	429a      	cmp	r2, r3
 8001848:	d01a      	beq.n	8001880 <UNERBUS_Task+0x64>
			if(aBus->WriteUSARTByte(aBus->tx.buf[aBus->tx.iRead])){
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6912      	ldr	r2, [r2, #16]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	7d49      	ldrb	r1, [r1, #21]
 8001856:	440a      	add	r2, r1
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	4610      	mov	r0, r2
 800185c:	4798      	blx	r3
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00d      	beq.n	8001880 <UNERBUS_Task+0x64>
				aBus->tx.iRead++;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7d5b      	ldrb	r3, [r3, #21]
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	755a      	strb	r2, [r3, #21]
				aBus->tx.iRead &= aBus->tx.maxIndexRingBuf;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7d5a      	ldrb	r2, [r3, #21]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7d1b      	ldrb	r3, [r3, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	755a      	strb	r2, [r3, #21]
			}
		}
	}	
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <UNERBUS_Timeout>:


void UNERBUS_Timeout(_sUNERBUSHandle *aBus){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	if(aBus->rx.timeout){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7adb      	ldrb	r3, [r3, #11]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <UNERBUS_Timeout+0x2a>
		aBus->rx.timeout--;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7adb      	ldrb	r3, [r3, #11]
 800189c:	3b01      	subs	r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	72da      	strb	r2, [r3, #11]
		if(!aBus->rx.timeout)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7adb      	ldrb	r3, [r3, #11]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <UNERBUS_Timeout+0x2a>
			aBus->rx.header = 0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	729a      	strb	r2, [r3, #10]
	}
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <inicializarBoton>:
#include <stdlib.h>

uint8_t PRESSED = 0;

void inicializarBoton(_sButton *button)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	button->value = 0;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
	button->estado = UP;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	705a      	strb	r2, [r3, #1]
	button->event = EV_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	709a      	strb	r2, [r3, #2]
	button->timePush = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
	button->timeDiff = 0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <checkMEF>:

void checkMEF(_sButton *button)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	switch (button->estado)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d847      	bhi.n	800198c <checkMEF+0xa0>
 80018fc:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <checkMEF+0x18>)
 80018fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001902:	bf00      	nop
 8001904:	08001915 	.word	0x08001915
 8001908:	08001945 	.word	0x08001945
 800190c:	08001929 	.word	0x08001929
 8001910:	08001965 	.word	0x08001965
	{
		case UP:
			if (button->value == PRESSED)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <checkMEF+0xb8>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d139      	bne.n	8001994 <checkMEF+0xa8>
			{
				button->estado = FALLING;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	705a      	strb	r2, [r3, #1]
			}
			break;
 8001926:	e035      	b.n	8001994 <checkMEF+0xa8>
		case FALLING:
			if (button->value == PRESSED)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <checkMEF+0xb8>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d103      	bne.n	800193c <checkMEF+0x50>
			{
				button->estado = DOWN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = UP;
			}
			break;
 800193a:	e02e      	b.n	800199a <checkMEF+0xae>
				button->estado = UP;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	705a      	strb	r2, [r3, #1]
			break;
 8001942:	e02a      	b.n	800199a <checkMEF+0xae>
		case DOWN:
			if (button->value == !PRESSED)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <checkMEF+0xb8>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf0c      	ite	eq
 8001952:	2301      	moveq	r3, #1
 8001954:	2300      	movne	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	429a      	cmp	r2, r3
 800195a:	d11d      	bne.n	8001998 <checkMEF+0xac>
			{
				button->estado = RISING;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2203      	movs	r2, #3
 8001960:	705a      	strb	r2, [r3, #1]
			}
			break;
 8001962:	e019      	b.n	8001998 <checkMEF+0xac>
		case RISING:
			if (button->value == !PRESSED)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <checkMEF+0xb8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	429a      	cmp	r2, r3
 800197a:	d103      	bne.n	8001984 <checkMEF+0x98>
			{
				button->estado = UP;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = DOWN;
			}
			break;
 8001982:	e00a      	b.n	800199a <checkMEF+0xae>
				button->estado = DOWN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
			break;
 800198a:	e006      	b.n	800199a <checkMEF+0xae>
		default:
			button->estado = UP;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	705a      	strb	r2, [r3, #1]
			break;
 8001992:	e002      	b.n	800199a <checkMEF+0xae>
			break;
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <checkMEF+0xae>
			break;
 8001998:	bf00      	nop
	}
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000410 	.word	0x20000410

080019a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//CALLBACKS
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d116      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms--;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3b01      	subs	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019c4:	701a      	strb	r2, [r3, #0]
		if(!time10ms){
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x36>
			ON10MS = 1;
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019d0:	7813      	ldrb	r3, [r2, #0]
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	7013      	strb	r3, [r2, #0]
			time10ms = 40;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019da:	2228      	movs	r2, #40	; 0x28
 80019dc:	701a      	strb	r2, [r3, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&myADC.data, NUMCHANNELSADC);
 80019de:	2208      	movs	r2, #8
 80019e0:	4906      	ldr	r1, [pc, #24]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019e4:	f001 fae2 	bl	8002fac <HAL_ADC_Start_DMA>
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	2000000b 	.word	0x2000000b
 80019f8:	20000628 	.word	0x20000628
 80019fc:	2000068c 	.word	0x2000068c
 8001a00:	20000414 	.word	0x20000414

08001a04 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e05b      	b.n	8001aca <HAL_ADC_ConvCpltCallback+0xc6>
	{
		myADC.sum[c] -= myADC.buf[c][myADC.index[c]];
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	4a31      	ldr	r2, [pc, #196]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a16:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001a1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	7bf9      	ldrb	r1, [r7, #15]
 8001a22:	482e      	ldr	r0, [pc, #184]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a24:	5c41      	ldrb	r1, [r0, r1]
 8001a26:	4608      	mov	r0, r1
 8001a28:	492c      	ldr	r1, [pc, #176]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a2a:	019b      	lsls	r3, r3, #6
 8001a2c:	4403      	add	r3, r0
 8001a2e:	3314      	adds	r3, #20
 8001a30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a34:	4619      	mov	r1, r3
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	1a52      	subs	r2, r2, r1
 8001a3a:	4928      	ldr	r1, [pc, #160]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a3c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		myADC.sum[c] += myADC.data[c];
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	4a25      	ldr	r2, [pc, #148]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a48:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001a4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	4922      	ldr	r1, [pc, #136]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a54:	3304      	adds	r3, #4
 8001a56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	440a      	add	r2, r1
 8001a60:	491e      	ldr	r1, [pc, #120]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a62:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		myADC.buf[c][myADC.index[c]] = myADC.data[c];
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	7bf9      	ldrb	r1, [r7, #15]
 8001a70:	481a      	ldr	r0, [pc, #104]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a72:	5c41      	ldrb	r1, [r0, r1]
 8001a74:	4608      	mov	r0, r1
 8001a76:	4919      	ldr	r1, [pc, #100]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a78:	3204      	adds	r2, #4
 8001a7a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	4403      	add	r3, r0
 8001a84:	3314      	adds	r3, #20
 8001a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		myADC.value[c] = myADC.sum[c]/SIZEBUFADC;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a8e:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	099a      	lsrs	r2, r3, #6
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	b291      	uxth	r1, r2
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a9e:	330c      	adds	r3, #12
 8001aa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		myADC.index[c]++;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001aa8:	5cd2      	ldrb	r2, [r2, r3]
 8001aaa:	3201      	adds	r2, #1
 8001aac:	b2d1      	uxtb	r1, r2
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001ab0:	54d1      	strb	r1, [r2, r3]
		myADC.index[c] &= (SIZEBUFADC-1);
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001ab6:	5cd2      	ldrb	r2, [r2, r3]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001ac2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	d9a0      	bls.n	8001a12 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000684 	.word	0x20000684

08001ae0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_UART_RxCpltCallback+0x30>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d109      	bne.n	8001b06 <HAL_UART_RxCpltCallback+0x26>
		ESP01_WriteRX(dataRXESP01);
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_UART_RxCpltCallback+0x34>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fbd4 	bl	80002a4 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &dataRXESP01, 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	4905      	ldr	r1, [pc, #20]	; (8001b14 <HAL_UART_RxCpltCallback+0x34>)
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_UART_RxCpltCallback+0x38>)
 8001b02:	f006 fecd 	bl	80088a0 <HAL_UART_Receive_IT>
	}
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40013800 	.word	0x40013800
 8001b14:	20000e30 	.word	0x20000e30
 8001b18:	200005e0 	.word	0x200005e0

08001b1c <ESP01DoCHPD>:

//.

void ESP01DoCHPD(uint8_t value){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CH_EN_GPIO_Port, CH_EN_Pin, value);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <ESP01DoCHPD+0x20>)
 8001b30:	f002 fa71 	bl	8004016 <HAL_GPIO_WritePin>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010800 	.word	0x40010800

08001b40 <ESP01WriteUSARTByte>:

int ESP01WriteUSARTByte(uint8_t value){
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, USART_SR_TXE)){
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <ESP01WriteUSARTByte+0x30>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b54:	2b80      	cmp	r3, #128	; 0x80
 8001b56:	d104      	bne.n	8001b62 <ESP01WriteUSARTByte+0x22>
		USART1->DR = value;
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <ESP01WriteUSARTByte+0x34>)
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	6053      	str	r3, [r2, #4]
		return 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <ESP01WriteUSARTByte+0x24>
	}
	return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	200005e0 	.word	0x200005e0
 8001b74:	40013800 	.word	0x40013800

08001b78 <ESP01WriteByteToBufRX>:

void ESP01WriteByteToBufRX(uint8_t value){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
	UNERBUS_ReceiveByte(&unerbusESP01, value);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4803      	ldr	r0, [pc, #12]	; (8001b94 <ESP01WriteByteToBufRX+0x1c>)
 8001b88:	f7ff fdda 	bl	8001740 <UNERBUS_ReceiveByte>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000660 	.word	0x20000660

08001b98 <ESP01ChangeState>:

void ESP01ChangeState(_eESP01STATUS esp01State){
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	switch((uint32_t)esp01State){
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	d822      	bhi.n	8001bf0 <ESP01ChangeState+0x58>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <ESP01ChangeState+0x18>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001be9 	.word	0x08001be9
 8001bb4:	08001bf1 	.word	0x08001bf1
 8001bb8:	08001bf1 	.word	0x08001bf1
 8001bbc:	08001bd1 	.word	0x08001bd1
 8001bc0:	08001bf1 	.word	0x08001bf1
 8001bc4:	08001be1 	.word	0x08001be1
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	08001bd9 	.word	0x08001bd9
	case ESP01_WIFI_CONNECTED:
		myHB = HEARTBEAT_WIFI_READY;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <ESP01ChangeState+0x64>)
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <ESP01ChangeState+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
		break;
 8001bd6:	e00b      	b.n	8001bf0 <ESP01ChangeState+0x58>
	case ESP01_UDPTCP_CONNECTED:
		myHB = HEARTBEAT_UDP_READY;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <ESP01ChangeState+0x64>)
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <ESP01ChangeState+0x6c>)
 8001bdc:	601a      	str	r2, [r3, #0]
		break;
 8001bde:	e007      	b.n	8001bf0 <ESP01ChangeState+0x58>
	case ESP01_UDPTCP_DISCONNECTED:
		myHB = HEARTBEAT_WIFI_READY;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <ESP01ChangeState+0x64>)
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <ESP01ChangeState+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
		break;
 8001be6:	e003      	b.n	8001bf0 <ESP01ChangeState+0x58>
	case ESP01_WIFI_DISCONNECTED:
		myHB = HEARTBEAT_IDLE;
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <ESP01ChangeState+0x64>)
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <ESP01ChangeState+0x70>)
 8001bec:	601a      	str	r2, [r3, #0]
		break;
 8001bee:	bf00      	nop
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000010 	.word	0x20000010
 8001c00:	f0a0a0a0 	.word	0xf0a0a0a0
 8001c04:	f0aaf0aa 	.word	0xf0aaf0aa
 8001c08:	f0a0f000 	.word	0xf0a0f000

08001c0c <DecodeCMD>:


void DecodeCMD(struct UNERBUSHandle *aBus, uint8_t iStartData){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
	uint8_t id;
	uint8_t length = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]

	id = UNERBUS_GetUInt8(aBus);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fddb 	bl	80017d8 <UNERBUS_GetUInt8>
 8001c22:	4603      	mov	r3, r0
 8001c24:	737b      	strb	r3, [r7, #13]
	switch(id){
 8001c26:	7b7b      	ldrb	r3, [r7, #13]
 8001c28:	3be0      	subs	r3, #224	; 0xe0
 8001c2a:	2b13      	cmp	r3, #19
 8001c2c:	d864      	bhi.n	8001cf8 <DecodeCMD+0xec>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <DecodeCMD+0x28>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001c85 	.word	0x08001c85
 8001c38:	08001cf9 	.word	0x08001cf9
 8001c3c:	08001cf9 	.word	0x08001cf9
 8001c40:	08001cf9 	.word	0x08001cf9
 8001c44:	08001cf9 	.word	0x08001cf9
 8001c48:	08001cf9 	.word	0x08001cf9
 8001c4c:	08001cf9 	.word	0x08001cf9
 8001c50:	08001cf9 	.word	0x08001cf9
 8001c54:	08001cf9 	.word	0x08001cf9
 8001c58:	08001cf9 	.word	0x08001cf9
 8001c5c:	08001cf9 	.word	0x08001cf9
 8001c60:	08001cf9 	.word	0x08001cf9
 8001c64:	08001cf9 	.word	0x08001cf9
 8001c68:	08001cf9 	.word	0x08001cf9
 8001c6c:	08001cf9 	.word	0x08001cf9
 8001c70:	08001cf9 	.word	0x08001cf9
 8001c74:	08001c9b 	.word	0x08001c9b
 8001c78:	08001cf9 	.word	0x08001cf9
 8001c7c:	08001ca9 	.word	0x08001ca9
 8001c80:	08001ce9 	.word	0x08001ce9
		case GETLOCALIP:
			UNERBUS_Write(aBus, (uint8_t *)ESP01_GetLocalIP(), 16);
 8001c84:	f7fe faf6 	bl	8000274 <ESP01_GetLocalIP>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fc81 	bl	8001596 <UNERBUS_Write>
			length = 17;
 8001c94:	2311      	movs	r3, #17
 8001c96:	73fb      	strb	r3, [r7, #15]
			break;
 8001c98:	e02f      	b.n	8001cfa <DecodeCMD+0xee>
		case ALIVE:
			UNERBUS_WriteByte(aBus, 0x0D);
 8001c9a:	210d      	movs	r1, #13
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fcab 	bl	80015f8 <UNERBUS_WriteByte>
			length = 2;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	73fb      	strb	r3, [r7, #15]
			break;
 8001ca6:	e028      	b.n	8001cfa <DecodeCMD+0xee>
		case ANALOG_IR:
			for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73bb      	strb	r3, [r7, #14]
 8001cac:	e016      	b.n	8001cdc <DecodeCMD+0xd0>
			{
				w.u32 = myADC.value[c];
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <DecodeCMD+0x108>)
 8001cb2:	330c      	adds	r3, #12
 8001cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <DecodeCMD+0x10c>)
 8001cbc:	601a      	str	r2, [r3, #0]
				UNERBUS_WriteByte(aBus, w.u8[0]);
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <DecodeCMD+0x10c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fc97 	bl	80015f8 <UNERBUS_WriteByte>
				UNERBUS_WriteByte(aBus, w.u8[1]);
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <DecodeCMD+0x10c>)
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fc91 	bl	80015f8 <UNERBUS_WriteByte>
			for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 8001cd6:	7bbb      	ldrb	r3, [r7, #14]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	73bb      	strb	r3, [r7, #14]
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	2b07      	cmp	r3, #7
 8001ce0:	d9e5      	bls.n	8001cae <DecodeCMD+0xa2>
			}
			length = 17;
 8001ce2:	2311      	movs	r3, #17
 8001ce4:	73fb      	strb	r3, [r7, #15]
			break;
 8001ce6:	e008      	b.n	8001cfa <DecodeCMD+0xee>
		case MPU_6050:
			UNERBUS_Write(aBus, mpuValues.buffer, 12);
 8001ce8:	220c      	movs	r2, #12
 8001cea:	490c      	ldr	r1, [pc, #48]	; (8001d1c <DecodeCMD+0x110>)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fc52 	bl	8001596 <UNERBUS_Write>
			length = 13;
 8001cf2:	230d      	movs	r3, #13
 8001cf4:	73fb      	strb	r3, [r7, #15]
			break;
 8001cf6:	e000      	b.n	8001cfa <DecodeCMD+0xee>
		default:
			break;
 8001cf8:	bf00      	nop
	}

	if(length){
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <DecodeCMD+0x100>
		UNERBUS_Send(aBus, id, length);
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	7b7b      	ldrb	r3, [r7, #13]
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fc98 	bl	800163c <UNERBUS_Send>
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000684 	.word	0x20000684
 8001d18:	2000062c 	.word	0x2000062c
 8001d1c:	20000ba4 	.word	0x20000ba4

08001d20 <Do10ms>:

void Do10ms(){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	ON10MS = 0;
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <Do10ms+0x38>)
 8001d26:	7813      	ldrb	r3, [r2, #0]
 8001d28:	f36f 0300 	bfc	r3, #0, #1
 8001d2c:	7013      	strb	r3, [r2, #0]

	if(time100ms)
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <Do10ms+0x3c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <Do10ms+0x22>
		time100ms--;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <Do10ms+0x3c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <Do10ms+0x3c>)
 8001d40:	701a      	strb	r2, [r3, #0]

	ESP01_Timeout10ms();
 8001d42:	f7fe fbb9 	bl	80004b8 <ESP01_Timeout10ms>
	UNERBUS_Timeout(&unerbusESP01);
 8001d46:	4806      	ldr	r0, [pc, #24]	; (8001d60 <Do10ms+0x40>)
 8001d48:	f7ff fd9e 	bl	8001888 <UNERBUS_Timeout>
	UNERBUS_Timeout(&unerbusPC);
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <Do10ms+0x44>)
 8001d4e:	f7ff fd9b 	bl	8001888 <UNERBUS_Timeout>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000628 	.word	0x20000628
 8001d5c:	2000000c 	.word	0x2000000c
 8001d60:	20000660 	.word	0x20000660
 8001d64:	2000063c 	.word	0x2000063c

08001d68 <Do100ms>:

void Do100ms(){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	time100ms = 10;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <Do100ms+0x80>)
 8001d6e:	220a      	movs	r2, #10
 8001d70:	701a      	strb	r2, [r3, #0]

	if(maskHB & myHB)
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <Do100ms+0x84>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <Do100ms+0x88>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <Do100ms+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // ON
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	481b      	ldr	r0, [pc, #108]	; (8001df4 <Do100ms+0x8c>)
 8001d88:	f002 f945 	bl	8004016 <HAL_GPIO_WritePin>
 8001d8c:	e005      	b.n	8001d9a <Do100ms+0x32>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1); // OFF
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d94:	4817      	ldr	r0, [pc, #92]	; (8001df4 <Do100ms+0x8c>)
 8001d96:	f002 f93e 	bl	8004016 <HAL_GPIO_WritePin>

	maskHB >>= 1;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <Do100ms+0x84>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <Do100ms+0x84>)
 8001da2:	6013      	str	r3, [r2, #0]
	if(!maskHB)
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <Do100ms+0x84>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <Do100ms+0x4c>
		maskHB = HEARTBEAT_MASK;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <Do100ms+0x84>)
 8001dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001db2:	601a      	str	r2, [r3, #0]

	if(timeOutAlive)
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <Do100ms+0x90>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <Do100ms+0x60>
		timeOutAlive--;
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <Do100ms+0x90>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <Do100ms+0x90>)
 8001dc6:	701a      	strb	r2, [r3, #0]

	if (timeOutButton)
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <Do100ms+0x94>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <Do100ms+0x74>
		timeOutButton--;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <Do100ms+0x94>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <Do100ms+0x94>)
 8001dda:	701a      	strb	r2, [r3, #0]

	 MPU6050_Read_Data_DMA(&hi2c2);
 8001ddc:	4808      	ldr	r0, [pc, #32]	; (8001e00 <Do100ms+0x98>)
 8001dde:	f7ff fa9d 	bl	800131c <MPU6050_Read_Data_DMA>
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000000c 	.word	0x2000000c
 8001dec:	20000014 	.word	0x20000014
 8001df0:	20000010 	.word	0x20000010
 8001df4:	40011000 	.word	0x40011000
 8001df8:	2000000e 	.word	0x2000000e
 8001dfc:	2000000d 	.word	0x2000000d
 8001e00:	200004b8 	.word	0x200004b8

08001e04 <USBReceive>:


void USBReceive(uint8_t *buf, uint16_t len){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
	UNERBUS_ReceiveBuf(&unerbusPC, buf, len);
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <USBReceive+0x24>)
 8001e1a:	f7ff fcaf 	bl	800177c <UNERBUS_ReceiveBuf>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000063c 	.word	0x2000063c

08001e2c <buttonTask>:

void buttonTask(_sButton *button){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	timeOutButton = TIMEOUT_BUTTON;
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <buttonTask+0x68>)
 8001e36:	2204      	movs	r2, #4
 8001e38:	701a      	strb	r2, [r3, #0]

	myButton.value = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 8001e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3e:	4816      	ldr	r0, [pc, #88]	; (8001e98 <buttonTask+0x6c>)
 8001e40:	f002 f8d2 	bl	8003fe8 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <buttonTask+0x70>)
 8001e4a:	701a      	strb	r2, [r3, #0]
	checkMEF(&myButton);
 8001e4c:	4813      	ldr	r0, [pc, #76]	; (8001e9c <buttonTask+0x70>)
 8001e4e:	f7ff fd4d 	bl	80018ec <checkMEF>

	switch (button->estado){
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	785b      	ldrb	r3, [r3, #1]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d002      	beq.n	8001e60 <buttonTask+0x34>
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d007      	beq.n	8001e6e <buttonTask+0x42>
			mode++;
			if (mode == maxMODES)
				mode = 0;						// Increase mode (circular: 0-MAX)
			break;
		default:
			break;
 8001e5e:	e014      	b.n	8001e8a <buttonTask+0x5e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	// ON
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e66:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <buttonTask+0x74>)
 8001e68:	f002 f8d5 	bl	8004016 <HAL_GPIO_WritePin>
			break;
 8001e6c:	e00d      	b.n	8001e8a <buttonTask+0x5e>
			mode++;
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <buttonTask+0x78>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <buttonTask+0x78>)
 8001e78:	701a      	strb	r2, [r3, #0]
			if (mode == maxMODES)
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <buttonTask+0x78>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d102      	bne.n	8001e88 <buttonTask+0x5c>
				mode = 0;						// Increase mode (circular: 0-MAX)
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <buttonTask+0x78>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
			break;
 8001e88:	bf00      	nop
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000000d 	.word	0x2000000d
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	20000b8c 	.word	0x20000b8c
 8001ea0:	40011000 	.word	0x40011000
 8001ea4:	20000e32 	.word	0x20000e32

08001ea8 <communicationTask>:

void communicationTask(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	if(unerbusESP01.tx.iRead != unerbusESP01.tx.iWrite){
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <communicationTask+0xdc>)
 8001eae:	7d5a      	ldrb	r2, [r3, #21]
 8001eb0:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <communicationTask+0xdc>)
 8001eb2:	7d9b      	ldrb	r3, [r3, #22]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d025      	beq.n	8001f04 <communicationTask+0x5c>
		w.u8[0] = unerbusESP01.tx.iWrite - unerbusESP01.tx.iRead;
 8001eb8:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <communicationTask+0xdc>)
 8001eba:	7d9a      	ldrb	r2, [r3, #22]
 8001ebc:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <communicationTask+0xdc>)
 8001ebe:	7d5b      	ldrb	r3, [r3, #21]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <communicationTask+0xe0>)
 8001ec6:	701a      	strb	r2, [r3, #0]
		w.u8[0] &= unerbusESP01.tx.maxIndexRingBuf;
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <communicationTask+0xe0>)
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <communicationTask+0xdc>)
 8001ece:	7d1b      	ldrb	r3, [r3, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <communicationTask+0xe0>)
 8001ed6:	701a      	strb	r2, [r3, #0]
		if(ESP01_Send(unerbusESP01.tx.buf, unerbusESP01.tx.iRead, w.u8[0], unerbusESP01.tx.maxIndexRingBuf+1) == ESP01_SEND_READY)
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <communicationTask+0xdc>)
 8001eda:	6918      	ldr	r0, [r3, #16]
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <communicationTask+0xdc>)
 8001ede:	7d5b      	ldrb	r3, [r3, #21]
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <communicationTask+0xe0>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <communicationTask+0xdc>)
 8001eea:	7d1b      	ldrb	r3, [r3, #20]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f7fe f9f7 	bl	80002e4 <ESP01_Send>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d103      	bne.n	8001f04 <communicationTask+0x5c>
			unerbusESP01.tx.iRead = unerbusESP01.tx.iWrite;
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <communicationTask+0xdc>)
 8001efe:	7d9a      	ldrb	r2, [r3, #22]
 8001f00:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <communicationTask+0xdc>)
 8001f02:	755a      	strb	r2, [r3, #21]
	}

	if(unerbusPC.tx.iRead != unerbusPC.tx.iWrite){
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <communicationTask+0xe4>)
 8001f06:	7d5a      	ldrb	r2, [r3, #21]
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <communicationTask+0xe4>)
 8001f0a:	7d9b      	ldrb	r3, [r3, #22]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d037      	beq.n	8001f80 <communicationTask+0xd8>
		if(unerbusPC.tx.iRead < unerbusPC.tx.iWrite)
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <communicationTask+0xe4>)
 8001f12:	7d5a      	ldrb	r2, [r3, #21]
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <communicationTask+0xe4>)
 8001f16:	7d9b      	ldrb	r3, [r3, #22]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d208      	bcs.n	8001f2e <communicationTask+0x86>
			w.u8[0] = unerbusPC.tx.iWrite - unerbusPC.tx.iRead;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <communicationTask+0xe4>)
 8001f1e:	7d9a      	ldrb	r2, [r3, #22]
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <communicationTask+0xe4>)
 8001f22:	7d5b      	ldrb	r3, [r3, #21]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <communicationTask+0xe0>)
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	e009      	b.n	8001f42 <communicationTask+0x9a>
		else
			w.u8[0] = unerbusPC.tx.maxIndexRingBuf+1 - unerbusPC.tx.iRead;
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <communicationTask+0xe4>)
 8001f30:	7d1a      	ldrb	r2, [r3, #20]
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <communicationTask+0xe4>)
 8001f34:	7d5b      	ldrb	r3, [r3, #21]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <communicationTask+0xe0>)
 8001f40:	701a      	strb	r2, [r3, #0]

		if(CDC_Transmit_FS(&unerbusPC.tx.buf[unerbusPC.tx.iRead], w.u8[0]) == USBD_OK){
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <communicationTask+0xe4>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <communicationTask+0xe4>)
 8001f48:	7d52      	ldrb	r2, [r2, #21]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <communicationTask+0xe0>)
 8001f4e:	7812      	ldrb	r2, [r2, #0]
 8001f50:	b292      	uxth	r2, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00b fa0d 	bl	800d374 <CDC_Transmit_FS>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10f      	bne.n	8001f80 <communicationTask+0xd8>
			unerbusPC.tx.iRead += w.u8[0];
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <communicationTask+0xe4>)
 8001f62:	7d5a      	ldrb	r2, [r3, #21]
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <communicationTask+0xe0>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <communicationTask+0xe4>)
 8001f6e:	755a      	strb	r2, [r3, #21]
			unerbusPC.tx.iRead &= unerbusPC.tx.maxIndexRingBuf;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <communicationTask+0xe4>)
 8001f72:	7d5a      	ldrb	r2, [r3, #21]
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <communicationTask+0xe4>)
 8001f76:	7d1b      	ldrb	r3, [r3, #20]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <communicationTask+0xe4>)
 8001f7e:	755a      	strb	r2, [r3, #21]
		}
	}
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000660 	.word	0x20000660
 8001f88:	2000062c 	.word	0x2000062c
 8001f8c:	2000063c 	.word	0x2000063c

08001f90 <inicializarIRs>:

void inicializarIRs(){
 8001f90:	b4b0      	push	{r4, r5, r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
	uint8_t initialValues[20] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <inicializarIRs+0x44>)
 8001f98:	463c      	mov	r4, r7
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	6023      	str	r3, [r4, #0]
	for (uint8_t i=0;i<20;i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
 8001fa8:	e00a      	b.n	8001fc0 <inicializarIRs+0x30>
	{
		myTCRT5000[0].distanceValues[i] = initialValues[i];
 8001faa:	7dfa      	ldrb	r2, [r7, #23]
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	3218      	adds	r2, #24
 8001fb0:	443a      	add	r2, r7
 8001fb2:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <inicializarIRs+0x48>)
 8001fb8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0;i<20;i++)
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	75fb      	strb	r3, [r7, #23]
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b13      	cmp	r3, #19
 8001fc4:	d9f1      	bls.n	8001faa <inicializarIRs+0x1a>
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bcb0      	pop	{r4, r5, r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	0800ddec 	.word	0x0800ddec
 8001fd8:	20000acc 	.word	0x20000acc

08001fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe0:	f000 fe86 	bl	8002cf0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(MPU_TIMEOUT);
 8001fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe8:	f000 fee4 	bl	8002db4 <HAL_Delay>

  /**
   * INITIALIZE ESP01 HANDLE DATA
   */
  esp01.DoCHPD = ESP01DoCHPD;
 8001fec:	4b52      	ldr	r3, [pc, #328]	; (8002138 <main+0x15c>)
 8001fee:	4a53      	ldr	r2, [pc, #332]	; (800213c <main+0x160>)
 8001ff0:	601a      	str	r2, [r3, #0]
  esp01.WriteByteToBufRX = ESP01WriteByteToBufRX;
 8001ff2:	4b51      	ldr	r3, [pc, #324]	; (8002138 <main+0x15c>)
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <main+0x164>)
 8001ff6:	609a      	str	r2, [r3, #8]
  esp01.WriteUSARTByte = ESP01WriteUSARTByte;
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <main+0x15c>)
 8001ffa:	4a52      	ldr	r2, [pc, #328]	; (8002144 <main+0x168>)
 8001ffc:	605a      	str	r2, [r3, #4]
  ESP01_Init(&esp01);
 8001ffe:	484e      	ldr	r0, [pc, #312]	; (8002138 <main+0x15c>)
 8002000:	f7fe fa1e 	bl	8000440 <ESP01_Init>
  ESP01_AttachChangeState(ESP01ChangeState);
 8002004:	4850      	ldr	r0, [pc, #320]	; (8002148 <main+0x16c>)
 8002006:	f7fe faa1 	bl	800054c <ESP01_AttachChangeState>
  ESP01_SetWIFI(WIFI_SSID, WIFI_PASSWORD);
 800200a:	4950      	ldr	r1, [pc, #320]	; (800214c <main+0x170>)
 800200c:	4850      	ldr	r0, [pc, #320]	; (8002150 <main+0x174>)
 800200e:	f7fe f8a5 	bl	800015c <ESP01_SetWIFI>
  ESP01_StartUDP(WIFI_UDP_REMOTE_IP, WIFI_UDP_REMOTE_PORT, WIFI_UDP_LOCAL_PORT);
 8002012:	f247 5230 	movw	r2, #30000	; 0x7530
 8002016:	f247 5130 	movw	r1, #30000	; 0x7530
 800201a:	484e      	ldr	r0, [pc, #312]	; (8002154 <main+0x178>)
 800201c:	f7fe f8d4 	bl	80001c8 <ESP01_StartUDP>

  /**
   * INITIALIZE UNERBUS ESP01
   */
  unerbusESP01.MyDataReady = DecodeCMD;
 8002020:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <main+0x17c>)
 8002022:	4a4e      	ldr	r2, [pc, #312]	; (800215c <main+0x180>)
 8002024:	619a      	str	r2, [r3, #24]
  unerbusESP01.WriteUSARTByte = NULL;
 8002026:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <main+0x17c>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
  unerbusESP01.rx.buf = bufRXESP01;
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <main+0x17c>)
 800202e:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <main+0x184>)
 8002030:	601a      	str	r2, [r3, #0]
  unerbusESP01.rx.maxIndexRingBuf = (SIZEBUFRXESP01 - 1);
 8002032:	4b49      	ldr	r3, [pc, #292]	; (8002158 <main+0x17c>)
 8002034:	227f      	movs	r2, #127	; 0x7f
 8002036:	711a      	strb	r2, [r3, #4]
  unerbusESP01.tx.buf = bufTXESP01;
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <main+0x17c>)
 800203a:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <main+0x188>)
 800203c:	611a      	str	r2, [r3, #16]
  unerbusESP01.tx.maxIndexRingBuf = (SIZEBUFTXESP01 - 1);
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <main+0x17c>)
 8002040:	227f      	movs	r2, #127	; 0x7f
 8002042:	751a      	strb	r2, [r3, #20]
  UNERBUS_Init(&unerbusESP01);
 8002044:	4844      	ldr	r0, [pc, #272]	; (8002158 <main+0x17c>)
 8002046:	f7ff fa87 	bl	8001558 <UNERBUS_Init>

  /**
   * INITIALIZE UNERBUS PC
   */
  unerbusPC.MyDataReady = DecodeCMD;
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <main+0x18c>)
 800204c:	4a43      	ldr	r2, [pc, #268]	; (800215c <main+0x180>)
 800204e:	619a      	str	r2, [r3, #24]
  unerbusPC.WriteUSARTByte = NULL;
 8002050:	4b45      	ldr	r3, [pc, #276]	; (8002168 <main+0x18c>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  unerbusPC.rx.buf = bufRXPC;
 8002056:	4b44      	ldr	r3, [pc, #272]	; (8002168 <main+0x18c>)
 8002058:	4a44      	ldr	r2, [pc, #272]	; (800216c <main+0x190>)
 800205a:	601a      	str	r2, [r3, #0]
  unerbusPC.rx.maxIndexRingBuf = (SIZEBUFRXPC - 1);
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <main+0x18c>)
 800205e:	227f      	movs	r2, #127	; 0x7f
 8002060:	711a      	strb	r2, [r3, #4]
  unerbusPC.tx.buf = bufTXPC;
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <main+0x18c>)
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <main+0x194>)
 8002066:	611a      	str	r2, [r3, #16]
  unerbusPC.tx.maxIndexRingBuf = (SIZEBUFTXPC - 1);
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <main+0x18c>)
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	751a      	strb	r2, [r3, #20]
  UNERBUS_Init(&unerbusPC);
 800206e:	483e      	ldr	r0, [pc, #248]	; (8002168 <main+0x18c>)
 8002070:	f7ff fa72 	bl	8001558 <UNERBUS_Init>

  /**
   * INITIALIZATION OF OTHER FUNCTIONS
   */
  inicializarBoton(&myButton);
 8002074:	483f      	ldr	r0, [pc, #252]	; (8002174 <main+0x198>)
 8002076:	f7ff fc21 	bl	80018bc <inicializarBoton>
  inicializarIRs();
 800207a:	f7ff ff89 	bl	8001f90 <inicializarIRs>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800207e:	f000 f88d 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002082:	f000 fb11 	bl	80026a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002086:	f000 fae9 	bl	800265c <MX_DMA_Init>
  MX_TIM1_Init();
 800208a:	f000 f9f3 	bl	8002474 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800208e:	f000 fabb 	bl	8002608 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002092:	f00b f849 	bl	800d128 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002096:	f000 f8df 	bl	8002258 <MX_ADC1_Init>
  MX_ADC2_Init();
 800209a:	f000 f97f 	bl	800239c <MX_ADC2_Init>
  MX_TIM4_Init();
 800209e:	f000 fa39 	bl	8002514 <MX_TIM4_Init>
  MX_I2C2_Init();
 80020a2:	f000 f9b9 	bl	8002418 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachRxData(USBReceive);
 80020a6:	4834      	ldr	r0, [pc, #208]	; (8002178 <main+0x19c>)
 80020a8:	f00b f98a 	bl	800d3c0 <CDC_AttachRxData>

  HAL_UART_Receive_IT(&huart1, &dataRXESP01, 1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	4933      	ldr	r1, [pc, #204]	; (800217c <main+0x1a0>)
 80020b0:	4833      	ldr	r0, [pc, #204]	; (8002180 <main+0x1a4>)
 80020b2:	f006 fbf5 	bl	80088a0 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim1);
 80020b6:	4833      	ldr	r0, [pc, #204]	; (8002184 <main+0x1a8>)
 80020b8:	f005 fd5a 	bl	8007b70 <HAL_TIM_Base_Start_IT>

  MPU6050_Init(&hi2c2);
 80020bc:	4832      	ldr	r0, [pc, #200]	; (8002188 <main+0x1ac>)
 80020be:	f7ff f8e1 	bl	8001284 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!timeOutAlive){
 80020c2:	4b32      	ldr	r3, [pc, #200]	; (800218c <main+0x1b0>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d114      	bne.n	80020f4 <main+0x118>
		  UNERBUS_WriteByte(&unerbusESP01, ACKNOWLEDGE);
 80020ca:	210d      	movs	r1, #13
 80020cc:	4822      	ldr	r0, [pc, #136]	; (8002158 <main+0x17c>)
 80020ce:	f7ff fa93 	bl	80015f8 <UNERBUS_WriteByte>
		  UNERBUS_Send(&unerbusESP01, ALIVE, 2);
 80020d2:	2202      	movs	r2, #2
 80020d4:	21f0      	movs	r1, #240	; 0xf0
 80020d6:	4820      	ldr	r0, [pc, #128]	; (8002158 <main+0x17c>)
 80020d8:	f7ff fab0 	bl	800163c <UNERBUS_Send>
		  UNERBUS_WriteByte(&unerbusPC, ACKNOWLEDGE);
 80020dc:	210d      	movs	r1, #13
 80020de:	4822      	ldr	r0, [pc, #136]	; (8002168 <main+0x18c>)
 80020e0:	f7ff fa8a 	bl	80015f8 <UNERBUS_WriteByte>
		  UNERBUS_Send(&unerbusPC, ALIVE, 2);
 80020e4:	2202      	movs	r2, #2
 80020e6:	21f0      	movs	r1, #240	; 0xf0
 80020e8:	481f      	ldr	r0, [pc, #124]	; (8002168 <main+0x18c>)
 80020ea:	f7ff faa7 	bl	800163c <UNERBUS_Send>
		  timeOutAlive = TIMEOUT_ALIVE;
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <main+0x1b0>)
 80020f0:	2232      	movs	r2, #50	; 0x32
 80020f2:	701a      	strb	r2, [r3, #0]
	  }

	  if (!timeOutButton)
 80020f4:	4b26      	ldr	r3, [pc, #152]	; (8002190 <main+0x1b4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <main+0x126>
		  buttonTask(&myButton);
 80020fc:	481d      	ldr	r0, [pc, #116]	; (8002174 <main+0x198>)
 80020fe:	f7ff fe95 	bl	8001e2c <buttonTask>

	  if (!time100ms)
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <main+0x1b8>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <main+0x132>
		  Do100ms();
 800210a:	f7ff fe2d 	bl	8001d68 <Do100ms>

	  if (ON10MS)
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <main+0x1bc>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <main+0x144>
		  Do10ms();
 800211c:	f7ff fe00 	bl	8001d20 <Do10ms>

	  communicationTask();
 8002120:	f7ff fec2 	bl	8001ea8 <communicationTask>

	  ESP01_Task();
 8002124:	f7fe f9f8 	bl	8000518 <ESP01_Task>

	  UNERBUS_Task(&unerbusESP01);
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <main+0x17c>)
 800212a:	f7ff fb77 	bl	800181c <UNERBUS_Task>

	  UNERBUS_Task(&unerbusPC);
 800212e:	480e      	ldr	r0, [pc, #56]	; (8002168 <main+0x18c>)
 8002130:	f7ff fb74 	bl	800181c <UNERBUS_Task>
	  if (!timeOutAlive){
 8002134:	e7c5      	b.n	80020c2 <main+0xe6>
 8002136:	bf00      	nop
 8002138:	20000630 	.word	0x20000630
 800213c:	08001b1d 	.word	0x08001b1d
 8002140:	08001b79 	.word	0x08001b79
 8002144:	08001b41 	.word	0x08001b41
 8002148:	08001b99 	.word	0x08001b99
 800214c:	0800de00 	.word	0x0800de00
 8002150:	0800de10 	.word	0x0800de10
 8002154:	0800de28 	.word	0x0800de28
 8002158:	20000660 	.word	0x20000660
 800215c:	08001c0d 	.word	0x08001c0d
 8002160:	20000d30 	.word	0x20000d30
 8002164:	20000db0 	.word	0x20000db0
 8002168:	2000063c 	.word	0x2000063c
 800216c:	20000bb0 	.word	0x20000bb0
 8002170:	20000c30 	.word	0x20000c30
 8002174:	20000b8c 	.word	0x20000b8c
 8002178:	08001e05 	.word	0x08001e05
 800217c:	20000e30 	.word	0x20000e30
 8002180:	200005e0 	.word	0x200005e0
 8002184:	20000550 	.word	0x20000550
 8002188:	200004b8 	.word	0x200004b8
 800218c:	2000000e 	.word	0x2000000e
 8002190:	2000000d 	.word	0x2000000d
 8002194:	2000000c 	.word	0x2000000c
 8002198:	20000628 	.word	0x20000628

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	; 0x50
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00b fd2a 	bl	800dc04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021da:	2301      	movs	r3, #1
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021de:	2302      	movs	r3, #2
 80021e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 ffa6 	bl	8007144 <HAL_RCC_OscConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80021fe:	f000 faf1 	bl	80027e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002202:	230f      	movs	r3, #15
 8002204:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800220e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002212:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2102      	movs	r1, #2
 800221e:	4618      	mov	r0, r3
 8002220:	f005 fa12 	bl	8007648 <HAL_RCC_ClockConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800222a:	f000 fadb 	bl	80027e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800222e:	2312      	movs	r3, #18
 8002230:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002236:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4618      	mov	r0, r3
 8002240:	f005 fb90 	bl	8007964 <HAL_RCCEx_PeriphCLKConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800224a:	f000 facb 	bl	80027e4 <Error_Handler>
  }
}
 800224e:	bf00      	nop
 8002250:	3750      	adds	r7, #80	; 0x50
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002268:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <MX_ADC1_Init+0x13c>)
 800226a:	4a4b      	ldr	r2, [pc, #300]	; (8002398 <MX_ADC1_Init+0x140>)
 800226c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002278:	2200      	movs	r2, #0
 800227a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800227c:	4b45      	ldr	r3, [pc, #276]	; (8002394 <MX_ADC1_Init+0x13c>)
 800227e:	2200      	movs	r2, #0
 8002280:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002282:	4b44      	ldr	r3, [pc, #272]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002284:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002288:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800228a:	4b42      	ldr	r3, [pc, #264]	; (8002394 <MX_ADC1_Init+0x13c>)
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8002290:	4b40      	ldr	r3, [pc, #256]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002292:	2208      	movs	r2, #8
 8002294:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002296:	483f      	ldr	r0, [pc, #252]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002298:	f000 fdb0 	bl	8002dfc <HAL_ADC_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80022a2:	f000 fa9f 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80022ae:	2302      	movs	r3, #2
 80022b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4837      	ldr	r0, [pc, #220]	; (8002394 <MX_ADC1_Init+0x13c>)
 80022b8:	f000 ff68 	bl	800318c <HAL_ADC_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022c2:	f000 fa8f 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4830      	ldr	r0, [pc, #192]	; (8002394 <MX_ADC1_Init+0x13c>)
 80022d4:	f000 ff5a 	bl	800318c <HAL_ADC_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80022de:	f000 fa81 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022e2:	2302      	movs	r3, #2
 80022e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022e6:	2303      	movs	r3, #3
 80022e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4829      	ldr	r0, [pc, #164]	; (8002394 <MX_ADC1_Init+0x13c>)
 80022f0:	f000 ff4c 	bl	800318c <HAL_ADC_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80022fa:	f000 fa73 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022fe:	2303      	movs	r3, #3
 8002300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002302:	2304      	movs	r3, #4
 8002304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4619      	mov	r1, r3
 800230a:	4822      	ldr	r0, [pc, #136]	; (8002394 <MX_ADC1_Init+0x13c>)
 800230c:	f000 ff3e 	bl	800318c <HAL_ADC_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002316:	f000 fa65 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800231a:	2304      	movs	r3, #4
 800231c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800231e:	2305      	movs	r3, #5
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	481b      	ldr	r0, [pc, #108]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002328:	f000 ff30 	bl	800318c <HAL_ADC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002332:	f000 fa57 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002336:	2305      	movs	r3, #5
 8002338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800233a:	2306      	movs	r3, #6
 800233c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4814      	ldr	r0, [pc, #80]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002344:	f000 ff22 	bl	800318c <HAL_ADC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800234e:	f000 fa49 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002352:	2306      	movs	r3, #6
 8002354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002356:	2307      	movs	r3, #7
 8002358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <MX_ADC1_Init+0x13c>)
 8002360:	f000 ff14 	bl	800318c <HAL_ADC_ConfigChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800236a:	f000 fa3b 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800236e:	2307      	movs	r3, #7
 8002370:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002372:	2308      	movs	r3, #8
 8002374:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <MX_ADC1_Init+0x13c>)
 800237c:	f000 ff06 	bl	800318c <HAL_ADC_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002386:	f000 fa2d 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000414 	.word	0x20000414
 8002398:	40012400 	.word	0x40012400

0800239c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_ADC2_Init+0x74>)
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <MX_ADC2_Init+0x78>)
 80023b0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_ADC2_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_ADC2_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_ADC2_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_ADC2_Init+0x74>)
 80023c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80023ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <MX_ADC2_Init+0x74>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_ADC2_Init+0x74>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <MX_ADC2_Init+0x74>)
 80023da:	f000 fd0f 	bl	8002dfc <HAL_ADC_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80023e4:	f000 f9fe 	bl	80027e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_ADC2_Init+0x74>)
 80023fa:	f000 fec7 	bl	800318c <HAL_ADC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002404:	f000 f9ee 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000444 	.word	0x20000444
 8002414:	40012800 	.word	0x40012800

08002418 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <MX_I2C2_Init+0x50>)
 800241e:	4a13      	ldr	r2, [pc, #76]	; (800246c <MX_I2C2_Init+0x54>)
 8002420:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_I2C2_Init+0x50>)
 8002424:	4a12      	ldr	r2, [pc, #72]	; (8002470 <MX_I2C2_Init+0x58>)
 8002426:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_I2C2_Init+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_I2C2_Init+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_I2C2_Init+0x50>)
 8002436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800243a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <MX_I2C2_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_I2C2_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <MX_I2C2_Init+0x50>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_I2C2_Init+0x50>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002454:	4804      	ldr	r0, [pc, #16]	; (8002468 <MX_I2C2_Init+0x50>)
 8002456:	f001 fdf7 	bl	8004048 <HAL_I2C_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002460:	f000 f9c0 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200004b8 	.word	0x200004b8
 800246c:	40005800 	.word	0x40005800
 8002470:	000186a0 	.word	0x000186a0

08002474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <MX_TIM1_Init+0x98>)
 8002492:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <MX_TIM1_Init+0x9c>)
 8002494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <MX_TIM1_Init+0x98>)
 8002498:	2247      	movs	r2, #71	; 0x47
 800249a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <MX_TIM1_Init+0x98>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_TIM1_Init+0x98>)
 80024a4:	22fa      	movs	r2, #250	; 0xfa
 80024a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_TIM1_Init+0x98>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_TIM1_Init+0x98>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <MX_TIM1_Init+0x98>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <MX_TIM1_Init+0x98>)
 80024bc:	f005 fb08 	bl	8007ad0 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80024c6:	f000 f98d 	bl	80027e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	4619      	mov	r1, r3
 80024d6:	480d      	ldr	r0, [pc, #52]	; (800250c <MX_TIM1_Init+0x98>)
 80024d8:	f005 fdb6 	bl	8008048 <HAL_TIM_ConfigClockSource>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80024e2:	f000 f97f 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024ee:	463b      	mov	r3, r7
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	; (800250c <MX_TIM1_Init+0x98>)
 80024f4:	f006 f914 	bl	8008720 <HAL_TIMEx_MasterConfigSynchronization>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80024fe:	f000 f971 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000550 	.word	0x20000550
 8002510:	40012c00 	.word	0x40012c00

08002514 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251a:	f107 0320 	add.w	r3, r7, #32
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	615a      	str	r2, [r3, #20]
 8002534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002536:	4b32      	ldr	r3, [pc, #200]	; (8002600 <MX_TIM4_Init+0xec>)
 8002538:	4a32      	ldr	r2, [pc, #200]	; (8002604 <MX_TIM4_Init+0xf0>)
 800253a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <MX_TIM4_Init+0xec>)
 800253e:	2200      	movs	r2, #0
 8002540:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <MX_TIM4_Init+0xec>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <MX_TIM4_Init+0xec>)
 800254a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <MX_TIM4_Init+0xec>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <MX_TIM4_Init+0xec>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800255c:	4828      	ldr	r0, [pc, #160]	; (8002600 <MX_TIM4_Init+0xec>)
 800255e:	f005 fb59 	bl	8007c14 <HAL_TIM_PWM_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002568:	f000 f93c 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002574:	f107 0320 	add.w	r3, r7, #32
 8002578:	4619      	mov	r1, r3
 800257a:	4821      	ldr	r0, [pc, #132]	; (8002600 <MX_TIM4_Init+0xec>)
 800257c:	f006 f8d0 	bl	8008720 <HAL_TIMEx_MasterConfigSynchronization>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002586:	f000 f92d 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800258a:	2360      	movs	r3, #96	; 0x60
 800258c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	4817      	ldr	r0, [pc, #92]	; (8002600 <MX_TIM4_Init+0xec>)
 80025a2:	f005 fc8f 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80025ac:	f000 f91a 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2204      	movs	r2, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4812      	ldr	r0, [pc, #72]	; (8002600 <MX_TIM4_Init+0xec>)
 80025b8:	f005 fc84 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80025c2:	f000 f90f 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2208      	movs	r2, #8
 80025ca:	4619      	mov	r1, r3
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <MX_TIM4_Init+0xec>)
 80025ce:	f005 fc79 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80025d8:	f000 f904 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	220c      	movs	r2, #12
 80025e0:	4619      	mov	r1, r3
 80025e2:	4807      	ldr	r0, [pc, #28]	; (8002600 <MX_TIM4_Init+0xec>)
 80025e4:	f005 fc6e 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80025ee:	f000 f8f9 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025f2:	4803      	ldr	r0, [pc, #12]	; (8002600 <MX_TIM4_Init+0xec>)
 80025f4:	f000 fa6e 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000598 	.word	0x20000598
 8002604:	40000800 	.word	0x40000800

08002608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <MX_USART1_UART_Init+0x50>)
 8002610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800262e:	220c      	movs	r2, #12
 8002630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002640:	f006 f8de 	bl	8008800 <HAL_UART_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800264a:	f000 f8cb 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200005e0 	.word	0x200005e0
 8002658:	40013800 	.word	0x40013800

0800265c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <MX_DMA_Init+0x48>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <MX_DMA_Init+0x48>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6153      	str	r3, [r2, #20]
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <MX_DMA_Init+0x48>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	200b      	movs	r0, #11
 8002680:	f001 f855 	bl	800372e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002684:	200b      	movs	r0, #11
 8002686:	f001 f86e 	bl	8003766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	200f      	movs	r0, #15
 8002690:	f001 f84d 	bl	800372e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002694:	200f      	movs	r0, #15
 8002696:	f001 f866 	bl	8003766 <HAL_NVIC_EnableIRQ>

}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026bc:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a43      	ldr	r2, [pc, #268]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026c2:	f043 0310 	orr.w	r3, r3, #16
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d4:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026da:	f043 0320 	orr.w	r3, r3, #32
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a37      	ldr	r2, [pc, #220]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <MX_GPIO_Init+0x128>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <MX_GPIO_Init+0x128>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <MX_GPIO_Init+0x128>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <MX_GPIO_Init+0x128>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002722:	482c      	ldr	r0, [pc, #176]	; (80027d4 <MX_GPIO_Init+0x12c>)
 8002724:	f001 fc77 	bl	8004016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_EN_GPIO_Port, CH_EN_Pin, GPIO_PIN_RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800272e:	482a      	ldr	r0, [pc, #168]	; (80027d8 <MX_GPIO_Init+0x130>)
 8002730:	f001 fc71 	bl	8004016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2302      	movs	r3, #2
 8002744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4821      	ldr	r0, [pc, #132]	; (80027d4 <MX_GPIO_Init+0x12c>)
 800274e:	f001 fac7 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8002752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275c:	2301      	movs	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	481d      	ldr	r0, [pc, #116]	; (80027dc <MX_GPIO_Init+0x134>)
 8002768:	f001 faba 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_EN_Pin */
  GPIO_InitStruct.Pin = CH_EN_Pin;
 800276c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2302      	movs	r3, #2
 800277c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH_EN_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4814      	ldr	r0, [pc, #80]	; (80027d8 <MX_GPIO_Init+0x130>)
 8002786:	f001 faab 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800278a:	2330      	movs	r3, #48	; 0x30
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2302      	movs	r3, #2
 8002794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <MX_GPIO_Init+0x134>)
 800279e:	f001 fa9f 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <MX_GPIO_Init+0x138>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <MX_GPIO_Init+0x138>)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027c6:	bf00      	nop
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40011000 	.word	0x40011000
 80027d8:	40010800 	.word	0x40010800
 80027dc:	40010c00 	.word	0x40010c00
 80027e0:	40010000 	.word	0x40010000

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
}
 80027ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ec:	e7fe      	b.n	80027ec <Error_Handler+0x8>
	...

080027f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_MspInit+0x5c>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_MspInit+0x5c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6193      	str	r3, [r2, #24]
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_MspInit+0x5c>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_MspInit+0x5c>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_MspInit+0x5c>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	61d3      	str	r3, [r2, #28]
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_MspInit+0x5c>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_MspInit+0x60>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_MspInit+0x60>)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40021000 	.word	0x40021000
 8002850:	40010000 	.word	0x40010000

08002854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0318 	add.w	r3, r7, #24
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <HAL_ADC_MspInit+0x10c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d14a      	bne.n	800290a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002874:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_ADC_MspInit+0x110>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a3a      	ldr	r2, [pc, #232]	; (8002964 <HAL_ADC_MspInit+0x110>)
 800287a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800287e:	6193      	str	r3, [r2, #24]
 8002880:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_ADC_MspInit+0x110>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <HAL_ADC_MspInit+0x110>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a34      	ldr	r2, [pc, #208]	; (8002964 <HAL_ADC_MspInit+0x110>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b32      	ldr	r3, [pc, #200]	; (8002964 <HAL_ADC_MspInit+0x110>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028a4:	23ff      	movs	r3, #255	; 0xff
 80028a6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028a8:	2303      	movs	r3, #3
 80028aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4619      	mov	r1, r3
 80028b2:	482d      	ldr	r0, [pc, #180]	; (8002968 <HAL_ADC_MspInit+0x114>)
 80028b4:	f001 fa14 	bl	8003ce0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80028b8:	4b2c      	ldr	r3, [pc, #176]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028ba:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <HAL_ADC_MspInit+0x11c>)
 80028bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028ec:	481f      	ldr	r0, [pc, #124]	; (800296c <HAL_ADC_MspInit+0x118>)
 80028ee:	f000 ff55 	bl	800379c <HAL_DMA_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80028f8:	f7ff ff74 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_ADC_MspInit+0x118>)
 8002900:	621a      	str	r2, [r3, #32]
 8002902:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_ADC_MspInit+0x118>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002908:	e026      	b.n	8002958 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_ADC_MspInit+0x120>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d121      	bne.n	8002958 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_ADC_MspInit+0x110>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_ADC_MspInit+0x110>)
 800291a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_ADC_MspInit+0x110>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292c:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_ADC_MspInit+0x110>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <HAL_ADC_MspInit+0x110>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_ADC_MspInit+0x110>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002944:	2304      	movs	r3, #4
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002948:	2303      	movs	r3, #3
 800294a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	4619      	mov	r1, r3
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <HAL_ADC_MspInit+0x114>)
 8002954:	f001 f9c4 	bl	8003ce0 <HAL_GPIO_Init>
}
 8002958:	bf00      	nop
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40012400 	.word	0x40012400
 8002964:	40021000 	.word	0x40021000
 8002968:	40010800 	.word	0x40010800
 800296c:	20000474 	.word	0x20000474
 8002970:	40020008 	.word	0x40020008
 8002974:	40012800 	.word	0x40012800

08002978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <HAL_I2C_MspInit+0xc0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d14b      	bne.n	8002a30 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_I2C_MspInit+0xc4>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <HAL_I2C_MspInit+0xc4>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6193      	str	r3, [r2, #24]
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_I2C_MspInit+0xc4>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b6:	2312      	movs	r3, #18
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4619      	mov	r1, r3
 80029c4:	481e      	ldr	r0, [pc, #120]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 80029c6:	f001 f98b 	bl	8003ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_I2C_MspInit+0xc4>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_I2C_MspInit+0xc4>)
 80029d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d4:	61d3      	str	r3, [r2, #28]
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_I2C_MspInit+0xc4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 80029e4:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_I2C_MspInit+0xd0>)
 80029e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 80029fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a00:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 8002a16:	f000 fec1 	bl	800379c <HAL_DMA_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8002a20:	f7ff fee0 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2a:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40005800 	.word	0x40005800
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010c00 	.word	0x40010c00
 8002a44:	2000050c 	.word	0x2000050c
 8002a48:	40020058 	.word	0x40020058

08002a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_TIM_Base_MspInit+0x44>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d113      	bne.n	8002a86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_TIM_Base_MspInit+0x48>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <HAL_TIM_Base_MspInit+0x48>)
 8002a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a68:	6193      	str	r3, [r2, #24]
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_TIM_Base_MspInit+0x48>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2019      	movs	r0, #25
 8002a7c:	f000 fe57 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a80:	2019      	movs	r0, #25
 8002a82:	f000 fe70 	bl	8003766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_TIM_PWM_MspInit+0x34>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_TIM_PWM_MspInit+0x38>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_TIM_PWM_MspInit+0x38>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	61d3      	str	r3, [r2, #28]
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_TIM_PWM_MspInit+0x38>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_TIM_MspPostInit+0x5c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d118      	bne.n	8002b26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_TIM_MspPostInit+0x60>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <HAL_TIM_MspPostInit+0x60>)
 8002afa:	f043 0308 	orr.w	r3, r3, #8
 8002afe:	6193      	str	r3, [r2, #24]
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_TIM_MspPostInit+0x60>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2302      	movs	r3, #2
 8002b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <HAL_TIM_MspPostInit+0x64>)
 8002b22:	f001 f8dd 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b26:	bf00      	nop
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010c00 	.word	0x40010c00

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <HAL_UART_MspInit+0x9c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d139      	bne.n	8002bd0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_UART_MspInit+0xa0>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_UART_MspInit+0xa0>)
 8002b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b66:	6193      	str	r3, [r2, #24]
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_UART_MspInit+0xa0>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_UART_MspInit+0xa0>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_UART_MspInit+0xa0>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6193      	str	r3, [r2, #24]
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_UART_MspInit+0xa0>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 0310 	add.w	r3, r7, #16
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	480f      	ldr	r0, [pc, #60]	; (8002be0 <HAL_UART_MspInit+0xa4>)
 8002ba2:	f001 f89d 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4809      	ldr	r0, [pc, #36]	; (8002be0 <HAL_UART_MspInit+0xa4>)
 8002bbc:	f001 f890 	bl	8003ce0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2025      	movs	r0, #37	; 0x25
 8002bc6:	f000 fdb2 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bca:	2025      	movs	r0, #37	; 0x25
 8002bcc:	f000 fdcb 	bl	8003766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40010800 	.word	0x40010800

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002be8:	e7fe      	b.n	8002be8 <NMI_Handler+0x4>

08002bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <HardFault_Handler+0x4>

08002bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <MemManage_Handler+0x4>

08002bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <BusFault_Handler+0x4>

08002bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <UsageFault_Handler+0x4>

08002c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2a:	f000 f8a7 	bl	8002d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <DMA1_Channel1_IRQHandler+0x10>)
 8002c3a:	f000 ff1d 	bl	8003a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000474 	.word	0x20000474

08002c48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <DMA1_Channel5_IRQHandler+0x10>)
 8002c4e:	f000 ff13 	bl	8003a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000050c 	.word	0x2000050c

08002c5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c62:	f002 fe25 	bl	80058b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2000150c 	.word	0x2000150c

08002c70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <TIM1_UP_IRQHandler+0x10>)
 8002c76:	f005 f81c 	bl	8007cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000550 	.word	0x20000550

08002c84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <USART1_IRQHandler+0x10>)
 8002c8a:	f005 fe2f 	bl	80088ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200005e0 	.word	0x200005e0

08002c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca4:	f7ff fff8 	bl	8002c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002caa:	490c      	ldr	r1, [pc, #48]	; (8002cdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cac:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cc0:	4c09      	ldr	r4, [pc, #36]	; (8002ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cce:	f00a ffb5 	bl	800dc3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cd2:	f7ff f983 	bl	8001fdc <main>
  bx lr
 8002cd6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002ce0:	0800e0a4 	.word	0x0800e0a4
  ldr r2, =_sbss
 8002ce4:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002ce8:	20001a1c 	.word	0x20001a1c

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>
	...

08002cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_Init+0x28>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_Init+0x28>)
 8002cfa:	f043 0310 	orr.w	r3, r3, #16
 8002cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f000 fd09 	bl	8003718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d06:	200f      	movs	r0, #15
 8002d08:	f000 f808 	bl	8002d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0c:	f7ff fd70 	bl	80027f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40022000 	.word	0x40022000

08002d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_InitTick+0x54>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_InitTick+0x58>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fd21 	bl	8003782 <HAL_SYSTICK_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00e      	b.n	8002d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d80a      	bhi.n	8002d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d50:	2200      	movs	r2, #0
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f000 fce9 	bl	800372e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <HAL_InitTick+0x5c>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e000      	b.n	8002d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000018 	.word	0x20000018
 8002d74:	20000020 	.word	0x20000020
 8002d78:	2000001c 	.word	0x2000001c

08002d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_IncTick+0x1c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_IncTick+0x20>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_IncTick+0x20>)
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	20000020 	.word	0x20000020
 8002d9c:	20000e34 	.word	0x20000e34

08002da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return uwTick;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_GetTick+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000e34 	.word	0x20000e34

08002db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_GetTick>
 8002dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d005      	beq.n	8002dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_Delay+0x44>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dda:	bf00      	nop
 8002ddc:	f7ff ffe0 	bl	8002da0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d8f7      	bhi.n	8002ddc <HAL_Delay+0x28>
  {
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000020 	.word	0x20000020

08002dfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0be      	b.n	8002f9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fd0a 	bl	8002854 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 faf5 	bl	8003430 <ADC_ConversionStop_Disable>
 8002e46:	4603      	mov	r3, r0
 8002e48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 8099 	bne.w	8002f8a <HAL_ADC_Init+0x18e>
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 8095 	bne.w	8002f8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e68:	f023 0302 	bic.w	r3, r3, #2
 8002e6c:	f043 0202 	orr.w	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7b1b      	ldrb	r3, [r3, #12]
 8002e82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d003      	beq.n	8002e9e <HAL_ADC_Init+0xa2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d102      	bne.n	8002ea4 <HAL_ADC_Init+0xa8>
 8002e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea2:	e000      	b.n	8002ea6 <HAL_ADC_Init+0xaa>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7d1b      	ldrb	r3, [r3, #20]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d119      	bne.n	8002ee8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7b1b      	ldrb	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	035a      	lsls	r2, r3, #13
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e00b      	b.n	8002ee8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_ADC_Init+0x1a8>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f18:	d003      	beq.n	8002f22 <HAL_ADC_Init+0x126>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d104      	bne.n	8002f2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	051b      	lsls	r3, r3, #20
 8002f2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_ADC_Init+0x1ac>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d10b      	bne.n	8002f68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f66:	e018      	b.n	8002f9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f023 0312 	bic.w	r3, r3, #18
 8002f70:	f043 0210 	orr.w	r2, r3, #16
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f88:	e007      	b.n	8002f9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f043 0210 	orr.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	ffe1f7fd 	.word	0xffe1f7fd
 8002fa8:	ff1f0efe 	.word	0xff1f0efe

08002fac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a64      	ldr	r2, [pc, #400]	; (8003154 <HAL_ADC_Start_DMA+0x1a8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_Start_DMA+0x24>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a63      	ldr	r2, [pc, #396]	; (8003158 <HAL_ADC_Start_DMA+0x1ac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d106      	bne.n	8002fde <HAL_ADC_Start_DMA+0x32>
 8002fd0:	4b60      	ldr	r3, [pc, #384]	; (8003154 <HAL_ADC_Start_DMA+0x1a8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 80b3 	bne.w	8003144 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_Start_DMA+0x40>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0ae      	b.n	800314a <HAL_ADC_Start_DMA+0x19e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f9c1 	bl	800337c <ADC_Enable>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 809a 	bne.w	800313a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4e      	ldr	r2, [pc, #312]	; (8003158 <HAL_ADC_Start_DMA+0x1ac>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d105      	bne.n	8003030 <HAL_ADC_Start_DMA+0x84>
 8003024:	4b4b      	ldr	r3, [pc, #300]	; (8003154 <HAL_ADC_Start_DMA+0x1a8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003046:	2b00      	cmp	r3, #0
 8003048:	d026      	beq.n	8003098 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003052:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800305a:	e01d      	b.n	8003098 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a39      	ldr	r2, [pc, #228]	; (8003154 <HAL_ADC_Start_DMA+0x1a8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_ADC_Start_DMA+0xd0>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a38      	ldr	r2, [pc, #224]	; (8003158 <HAL_ADC_Start_DMA+0x1ac>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d10d      	bne.n	8003098 <HAL_ADC_Start_DMA+0xec>
 800307c:	4b35      	ldr	r3, [pc, #212]	; (8003154 <HAL_ADC_Start_DMA+0x1a8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003090:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f023 0206 	bic.w	r2, r3, #6
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80030b0:	e002      	b.n	80030b8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4a25      	ldr	r2, [pc, #148]	; (800315c <HAL_ADC_Start_DMA+0x1b0>)
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_ADC_Start_DMA+0x1b4>)
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_ADC_Start_DMA+0x1b8>)
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0202 	mvn.w	r2, #2
 80030e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a18      	ldr	r0, [r3, #32]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	334c      	adds	r3, #76	; 0x4c
 80030fc:	4619      	mov	r1, r3
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f000 fba5 	bl	8003850 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003110:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003114:	d108      	bne.n	8003128 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003124:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003126:	e00f      	b.n	8003148 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003136:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003138:	e006      	b.n	8003148 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003142:	e001      	b.n	8003148 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40012400 	.word	0x40012400
 8003158:	40012800 	.word	0x40012800
 800315c:	080034b3 	.word	0x080034b3
 8003160:	0800352f 	.word	0x0800352f
 8003164:	0800354b 	.word	0x0800354b

08003168 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x20>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0dc      	b.n	8003366 <HAL_ADC_ConfigChannel+0x1da>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d81c      	bhi.n	80031f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b05      	subs	r3, #5
 80031ce:	221f      	movs	r2, #31
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	4019      	ands	r1, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	3b05      	subs	r3, #5
 80031e8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	635a      	str	r2, [r3, #52]	; 0x34
 80031f4:	e03c      	b.n	8003270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d81c      	bhi.n	8003238 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b23      	subs	r3, #35	; 0x23
 8003210:	221f      	movs	r2, #31
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	4019      	ands	r1, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b23      	subs	r3, #35	; 0x23
 800322a:	fa00 f203 	lsl.w	r2, r0, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
 8003236:	e01b      	b.n	8003270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	3b41      	subs	r3, #65	; 0x41
 800324a:	221f      	movs	r2, #31
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	4019      	ands	r1, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3b41      	subs	r3, #65	; 0x41
 8003264:	fa00 f203 	lsl.w	r2, r0, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b09      	cmp	r3, #9
 8003276:	d91c      	bls.n	80032b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	3b1e      	subs	r3, #30
 800328a:	2207      	movs	r2, #7
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	4019      	ands	r1, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6898      	ldr	r0, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	3b1e      	subs	r3, #30
 80032a4:	fa00 f203 	lsl.w	r2, r0, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e019      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6919      	ldr	r1, [r3, #16]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	2207      	movs	r2, #7
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4019      	ands	r1, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6898      	ldr	r0, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d003      	beq.n	80032f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032f2:	2b11      	cmp	r3, #17
 80032f4:	d132      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <HAL_ADC_ConfigChannel+0x1e4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d125      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d126      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800331c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b10      	cmp	r3, #16
 8003324:	d11a      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_ADC_ConfigChannel+0x1e8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_ADC_ConfigChannel+0x1ec>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0c9a      	lsrs	r2, r3, #18
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800333c:	e002      	b.n	8003344 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f9      	bne.n	800333e <HAL_ADC_ConfigChannel+0x1b2>
 800334a:	e007      	b.n	800335c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	40012400 	.word	0x40012400
 8003374:	20000018 	.word	0x20000018
 8003378:	431bde83 	.word	0x431bde83

0800337c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d040      	beq.n	800341c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <ADC_Enable+0xac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1f      	ldr	r2, [pc, #124]	; (800342c <ADC_Enable+0xb0>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	0c9b      	lsrs	r3, r3, #18
 80033b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033b8:	e002      	b.n	80033c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f9      	bne.n	80033ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033c6:	f7ff fceb 	bl	8002da0 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033cc:	e01f      	b.n	800340e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ce:	f7ff fce7 	bl	8002da0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d918      	bls.n	800340e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d011      	beq.n	800340e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	f043 0210 	orr.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e007      	b.n	800341e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d1d8      	bne.n	80033ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000018 	.word	0x20000018
 800342c:	431bde83 	.word	0x431bde83

08003430 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	d12e      	bne.n	80034a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800345a:	f7ff fca1 	bl	8002da0 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003460:	e01b      	b.n	800349a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003462:	f7ff fc9d 	bl	8002da0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d914      	bls.n	800349a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d10d      	bne.n	800349a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	f043 0210 	orr.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e007      	b.n	80034aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d0dc      	beq.n	8003462 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d127      	bne.n	800351c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034e6:	d115      	bne.n	8003514 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d111      	bne.n	8003514 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7fe fa75 	bl	8001a04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800351a:	e004      	b.n	8003526 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff fe13 	bl	8003168 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff fe02 	bl	800317a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0307 	and.w	r3, r3, #7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4906      	ldr	r1, [pc, #24]	; (8003618 <__NVIC_EnableIRQ+0x34>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0a      	blt.n	8003646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	490c      	ldr	r1, [pc, #48]	; (8003668 <__NVIC_SetPriority+0x4c>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	440b      	add	r3, r1
 8003640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003644:	e00a      	b.n	800365c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4908      	ldr	r1, [pc, #32]	; (800366c <__NVIC_SetPriority+0x50>)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3b04      	subs	r3, #4
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	440b      	add	r3, r1
 800365a:	761a      	strb	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1c3 0307 	rsb	r3, r3, #7
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf28      	it	cs
 800368e:	2304      	movcs	r3, #4
 8003690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3304      	adds	r3, #4
 8003696:	2b06      	cmp	r3, #6
 8003698:	d902      	bls.n	80036a0 <NVIC_EncodePriority+0x30>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3b03      	subs	r3, #3
 800369e:	e000      	b.n	80036a2 <NVIC_EncodePriority+0x32>
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	401a      	ands	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	4313      	orrs	r3, r2
         );
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	; 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d301      	bcc.n	80036ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00f      	b.n	800370a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <SysTick_Config+0x40>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f2:	210f      	movs	r1, #15
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f7ff ff90 	bl	800361c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <SysTick_Config+0x40>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <SysTick_Config+0x40>)
 8003704:	2207      	movs	r2, #7
 8003706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000e010 	.word	0xe000e010

08003718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff2d 	bl	8003580 <__NVIC_SetPriorityGrouping>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003740:	f7ff ff42 	bl	80035c8 <__NVIC_GetPriorityGrouping>
 8003744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	6978      	ldr	r0, [r7, #20]
 800374c:	f7ff ff90 	bl	8003670 <NVIC_EncodePriority>
 8003750:	4602      	mov	r2, r0
 8003752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff5f 	bl	800361c <__NVIC_SetPriority>
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff35 	bl	80035e4 <__NVIC_EnableIRQ>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffa2 	bl	80036d4 <SysTick_Config>
 8003790:	4603      	mov	r3, r0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e043      	b.n	800383a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_DMA_Init+0xa8>)
 80037ba:	4413      	add	r3, r2
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_DMA_Init+0xac>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_DMA_Init+0xb0>)
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	bffdfff8 	.word	0xbffdfff8
 8003848:	cccccccd 	.word	0xcccccccd
 800384c:	40020000 	.word	0x40020000

08003850 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_DMA_Start_IT+0x20>
 800386c:	2302      	movs	r3, #2
 800386e:	e04b      	b.n	8003908 <HAL_DMA_Start_IT+0xb8>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d13a      	bne.n	80038fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f9eb 	bl	8003c84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 020e 	orr.w	r2, r2, #14
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e00f      	b.n	80038e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 020a 	orr.w	r2, r2, #10
 80038e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e005      	b.n	8003906 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003902:	2302      	movs	r3, #2
 8003904:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d008      	beq.n	800393a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2204      	movs	r2, #4
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e020      	b.n	800397c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 020e 	bic.w	r2, r2, #14
 8003948:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	2101      	movs	r1, #1
 8003964:	fa01 f202 	lsl.w	r2, r1, r2
 8003968:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
	...

08003988 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d005      	beq.n	80039ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e051      	b.n	8003a50 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 020e 	bic.w	r2, r2, #14
 80039ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_DMA_Abort_IT+0xd4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d029      	beq.n	8003a2a <HAL_DMA_Abort_IT+0xa2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_DMA_Abort_IT+0xd8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_Abort_IT+0x9e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_DMA_Abort_IT+0xdc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01a      	beq.n	8003a20 <HAL_DMA_Abort_IT+0x98>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_DMA_Abort_IT+0xe0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d012      	beq.n	8003a1a <HAL_DMA_Abort_IT+0x92>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_DMA_Abort_IT+0xe4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00a      	beq.n	8003a14 <HAL_DMA_Abort_IT+0x8c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_DMA_Abort_IT+0xe8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d102      	bne.n	8003a0e <HAL_DMA_Abort_IT+0x86>
 8003a08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a0c:	e00e      	b.n	8003a2c <HAL_DMA_Abort_IT+0xa4>
 8003a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a12:	e00b      	b.n	8003a2c <HAL_DMA_Abort_IT+0xa4>
 8003a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a18:	e008      	b.n	8003a2c <HAL_DMA_Abort_IT+0xa4>
 8003a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a1e:	e005      	b.n	8003a2c <HAL_DMA_Abort_IT+0xa4>
 8003a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a24:	e002      	b.n	8003a2c <HAL_DMA_Abort_IT+0xa4>
 8003a26:	2310      	movs	r3, #16
 8003a28:	e000      	b.n	8003a2c <HAL_DMA_Abort_IT+0xa4>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HAL_DMA_Abort_IT+0xec>)
 8003a2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
    } 
  }
  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40020008 	.word	0x40020008
 8003a60:	4002001c 	.word	0x4002001c
 8003a64:	40020030 	.word	0x40020030
 8003a68:	40020044 	.word	0x40020044
 8003a6c:	40020058 	.word	0x40020058
 8003a70:	4002006c 	.word	0x4002006c
 8003a74:	40020000 	.word	0x40020000

08003a78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2204      	movs	r2, #4
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d04f      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xc8>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <HAL_DMA_IRQHandler+0x1f0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d029      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xae>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_DMA_IRQHandler+0x1f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xaa>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a63      	ldr	r2, [pc, #396]	; (8003c70 <HAL_DMA_IRQHandler+0x1f8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01a      	beq.n	8003b1c <HAL_DMA_IRQHandler+0xa4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a62      	ldr	r2, [pc, #392]	; (8003c74 <HAL_DMA_IRQHandler+0x1fc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d012      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x9e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <HAL_DMA_IRQHandler+0x200>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00a      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x98>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5f      	ldr	r2, [pc, #380]	; (8003c7c <HAL_DMA_IRQHandler+0x204>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <HAL_DMA_IRQHandler+0x92>
 8003b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b08:	e00e      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b0e:	e00b      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b14:	e008      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b1a:	e005      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b20:	e002      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b22:	2340      	movs	r3, #64	; 0x40
 8003b24:	e000      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b26:	2304      	movs	r3, #4
 8003b28:	4a55      	ldr	r2, [pc, #340]	; (8003c80 <HAL_DMA_IRQHandler+0x208>)
 8003b2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8094 	beq.w	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b3e:	e08e      	b.n	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	2202      	movs	r2, #2
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d056      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x186>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d051      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 020a 	bic.w	r2, r2, #10
 8003b76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_DMA_IRQHandler+0x1f0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d029      	beq.n	8003bde <HAL_DMA_IRQHandler+0x166>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a37      	ldr	r2, [pc, #220]	; (8003c6c <HAL_DMA_IRQHandler+0x1f4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_DMA_IRQHandler+0x162>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <HAL_DMA_IRQHandler+0x1f8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01a      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x15c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a34      	ldr	r2, [pc, #208]	; (8003c74 <HAL_DMA_IRQHandler+0x1fc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d012      	beq.n	8003bce <HAL_DMA_IRQHandler+0x156>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a32      	ldr	r2, [pc, #200]	; (8003c78 <HAL_DMA_IRQHandler+0x200>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x150>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a31      	ldr	r2, [pc, #196]	; (8003c7c <HAL_DMA_IRQHandler+0x204>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d102      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x14a>
 8003bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bc0:	e00e      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc6:	e00b      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bcc:	e008      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd2:	e005      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd8:	e002      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bda:	2320      	movs	r3, #32
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bde:	2302      	movs	r3, #2
 8003be0:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <HAL_DMA_IRQHandler+0x208>)
 8003be2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d034      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bfc:	e02f      	b.n	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2208      	movs	r2, #8
 8003c04:	409a      	lsls	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x1e8>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d023      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020e 	bic.w	r2, r2, #14
 8003c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	2101      	movs	r1, #1
 8003c32:	fa01 f202 	lsl.w	r2, r1, r2
 8003c36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
    }
  }
  return;
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
}
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40020008 	.word	0x40020008
 8003c6c:	4002001c 	.word	0x4002001c
 8003c70:	40020030 	.word	0x40020030
 8003c74:	40020044 	.word	0x40020044
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	4002006c 	.word	0x4002006c
 8003c80:	40020000 	.word	0x40020000

08003c84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d108      	bne.n	8003cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cc2:	e007      	b.n	8003cd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b08b      	sub	sp, #44	; 0x2c
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf2:	e169      	b.n	8003fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f040 8158 	bne.w	8003fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a9a      	ldr	r2, [pc, #616]	; (8003f80 <HAL_GPIO_Init+0x2a0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d05e      	beq.n	8003dda <HAL_GPIO_Init+0xfa>
 8003d1c:	4a98      	ldr	r2, [pc, #608]	; (8003f80 <HAL_GPIO_Init+0x2a0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d875      	bhi.n	8003e0e <HAL_GPIO_Init+0x12e>
 8003d22:	4a98      	ldr	r2, [pc, #608]	; (8003f84 <HAL_GPIO_Init+0x2a4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d058      	beq.n	8003dda <HAL_GPIO_Init+0xfa>
 8003d28:	4a96      	ldr	r2, [pc, #600]	; (8003f84 <HAL_GPIO_Init+0x2a4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d86f      	bhi.n	8003e0e <HAL_GPIO_Init+0x12e>
 8003d2e:	4a96      	ldr	r2, [pc, #600]	; (8003f88 <HAL_GPIO_Init+0x2a8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d052      	beq.n	8003dda <HAL_GPIO_Init+0xfa>
 8003d34:	4a94      	ldr	r2, [pc, #592]	; (8003f88 <HAL_GPIO_Init+0x2a8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d869      	bhi.n	8003e0e <HAL_GPIO_Init+0x12e>
 8003d3a:	4a94      	ldr	r2, [pc, #592]	; (8003f8c <HAL_GPIO_Init+0x2ac>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d04c      	beq.n	8003dda <HAL_GPIO_Init+0xfa>
 8003d40:	4a92      	ldr	r2, [pc, #584]	; (8003f8c <HAL_GPIO_Init+0x2ac>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d863      	bhi.n	8003e0e <HAL_GPIO_Init+0x12e>
 8003d46:	4a92      	ldr	r2, [pc, #584]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d046      	beq.n	8003dda <HAL_GPIO_Init+0xfa>
 8003d4c:	4a90      	ldr	r2, [pc, #576]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d85d      	bhi.n	8003e0e <HAL_GPIO_Init+0x12e>
 8003d52:	2b12      	cmp	r3, #18
 8003d54:	d82a      	bhi.n	8003dac <HAL_GPIO_Init+0xcc>
 8003d56:	2b12      	cmp	r3, #18
 8003d58:	d859      	bhi.n	8003e0e <HAL_GPIO_Init+0x12e>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_GPIO_Init+0x80>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003ddb 	.word	0x08003ddb
 8003d64:	08003db5 	.word	0x08003db5
 8003d68:	08003dc7 	.word	0x08003dc7
 8003d6c:	08003e09 	.word	0x08003e09
 8003d70:	08003e0f 	.word	0x08003e0f
 8003d74:	08003e0f 	.word	0x08003e0f
 8003d78:	08003e0f 	.word	0x08003e0f
 8003d7c:	08003e0f 	.word	0x08003e0f
 8003d80:	08003e0f 	.word	0x08003e0f
 8003d84:	08003e0f 	.word	0x08003e0f
 8003d88:	08003e0f 	.word	0x08003e0f
 8003d8c:	08003e0f 	.word	0x08003e0f
 8003d90:	08003e0f 	.word	0x08003e0f
 8003d94:	08003e0f 	.word	0x08003e0f
 8003d98:	08003e0f 	.word	0x08003e0f
 8003d9c:	08003e0f 	.word	0x08003e0f
 8003da0:	08003e0f 	.word	0x08003e0f
 8003da4:	08003dbd 	.word	0x08003dbd
 8003da8:	08003dd1 	.word	0x08003dd1
 8003dac:	4a79      	ldr	r2, [pc, #484]	; (8003f94 <HAL_GPIO_Init+0x2b4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003db2:	e02c      	b.n	8003e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	623b      	str	r3, [r7, #32]
          break;
 8003dba:	e029      	b.n	8003e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	623b      	str	r3, [r7, #32]
          break;
 8003dc4:	e024      	b.n	8003e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	623b      	str	r3, [r7, #32]
          break;
 8003dce:	e01f      	b.n	8003e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	623b      	str	r3, [r7, #32]
          break;
 8003dd8:	e01a      	b.n	8003e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003de2:	2304      	movs	r3, #4
 8003de4:	623b      	str	r3, [r7, #32]
          break;
 8003de6:	e013      	b.n	8003e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df0:	2308      	movs	r3, #8
 8003df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	611a      	str	r2, [r3, #16]
          break;
 8003dfa:	e009      	b.n	8003e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	615a      	str	r2, [r3, #20]
          break;
 8003e06:	e003      	b.n	8003e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	623b      	str	r3, [r7, #32]
          break;
 8003e0c:	e000      	b.n	8003e10 <HAL_GPIO_Init+0x130>
          break;
 8003e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2bff      	cmp	r3, #255	; 0xff
 8003e14:	d801      	bhi.n	8003e1a <HAL_GPIO_Init+0x13a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	e001      	b.n	8003e1e <HAL_GPIO_Init+0x13e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2bff      	cmp	r3, #255	; 0xff
 8003e24:	d802      	bhi.n	8003e2c <HAL_GPIO_Init+0x14c>
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	e002      	b.n	8003e32 <HAL_GPIO_Init+0x152>
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	3b08      	subs	r3, #8
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	210f      	movs	r1, #15
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	401a      	ands	r2, r3
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80b1 	beq.w	8003fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <HAL_GPIO_Init+0x2b8>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4a4c      	ldr	r2, [pc, #304]	; (8003f98 <HAL_GPIO_Init+0x2b8>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6193      	str	r3, [r2, #24]
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <HAL_GPIO_Init+0x2b8>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e78:	4a48      	ldr	r2, [pc, #288]	; (8003f9c <HAL_GPIO_Init+0x2bc>)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	3302      	adds	r3, #2
 8003e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	220f      	movs	r2, #15
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <HAL_GPIO_Init+0x2c0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <HAL_GPIO_Init+0x1ec>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3f      	ldr	r2, [pc, #252]	; (8003fa4 <HAL_GPIO_Init+0x2c4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_GPIO_Init+0x1e8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <HAL_GPIO_Init+0x2c8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <HAL_GPIO_Init+0x1e4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3d      	ldr	r2, [pc, #244]	; (8003fac <HAL_GPIO_Init+0x2cc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_GPIO_Init+0x1e0>
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e006      	b.n	8003ece <HAL_GPIO_Init+0x1ee>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	e004      	b.n	8003ece <HAL_GPIO_Init+0x1ee>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e002      	b.n	8003ece <HAL_GPIO_Init+0x1ee>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_GPIO_Init+0x1ee>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed0:	f002 0203 	and.w	r2, r2, #3
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	4093      	lsls	r3, r2
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ede:	492f      	ldr	r1, [pc, #188]	; (8003f9c <HAL_GPIO_Init+0x2bc>)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	492c      	ldr	r1, [pc, #176]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	4928      	ldr	r1, [pc, #160]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f20:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	4922      	ldr	r1, [pc, #136]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]
 8003f2c:	e006      	b.n	8003f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	491e      	ldr	r1, [pc, #120]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d006      	beq.n	8003f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4918      	ldr	r1, [pc, #96]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	604b      	str	r3, [r1, #4]
 8003f54:	e006      	b.n	8003f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	4914      	ldr	r1, [pc, #80]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d021      	beq.n	8003fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	490e      	ldr	r1, [pc, #56]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]
 8003f7c:	e021      	b.n	8003fc2 <HAL_GPIO_Init+0x2e2>
 8003f7e:	bf00      	nop
 8003f80:	10320000 	.word	0x10320000
 8003f84:	10310000 	.word	0x10310000
 8003f88:	10220000 	.word	0x10220000
 8003f8c:	10210000 	.word	0x10210000
 8003f90:	10120000 	.word	0x10120000
 8003f94:	10110000 	.word	0x10110000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40010800 	.word	0x40010800
 8003fa4:	40010c00 	.word	0x40010c00
 8003fa8:	40011000 	.word	0x40011000
 8003fac:	40011400 	.word	0x40011400
 8003fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_GPIO_Init+0x304>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <HAL_GPIO_Init+0x304>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f47f ae8e 	bne.w	8003cf4 <HAL_GPIO_Init+0x14>
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	372c      	adds	r7, #44	; 0x2c
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	40010400 	.word	0x40010400

08003fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e001      	b.n	800400a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	807b      	strh	r3, [r7, #2]
 8004022:	4613      	mov	r3, r2
 8004024:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004026:	787b      	ldrb	r3, [r7, #1]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800402c:	887a      	ldrh	r2, [r7, #2]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004032:	e003      	b.n	800403c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	041a      	lsls	r2, r3, #16
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	611a      	str	r2, [r3, #16]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e12b      	b.n	80042b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fe fc82 	bl	8002978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2224      	movs	r2, #36	; 0x24
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800409a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040ac:	f003 fc14 	bl	80078d8 <HAL_RCC_GetPCLK1Freq>
 80040b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a81      	ldr	r2, [pc, #516]	; (80042bc <HAL_I2C_Init+0x274>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d807      	bhi.n	80040cc <HAL_I2C_Init+0x84>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a80      	ldr	r2, [pc, #512]	; (80042c0 <HAL_I2C_Init+0x278>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	bf94      	ite	ls
 80040c4:	2301      	movls	r3, #1
 80040c6:	2300      	movhi	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e006      	b.n	80040da <HAL_I2C_Init+0x92>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a7d      	ldr	r2, [pc, #500]	; (80042c4 <HAL_I2C_Init+0x27c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	bf94      	ite	ls
 80040d4:	2301      	movls	r3, #1
 80040d6:	2300      	movhi	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e0e7      	b.n	80042b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a78      	ldr	r2, [pc, #480]	; (80042c8 <HAL_I2C_Init+0x280>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0c9b      	lsrs	r3, r3, #18
 80040ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a6a      	ldr	r2, [pc, #424]	; (80042bc <HAL_I2C_Init+0x274>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d802      	bhi.n	800411c <HAL_I2C_Init+0xd4>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	3301      	adds	r3, #1
 800411a:	e009      	b.n	8004130 <HAL_I2C_Init+0xe8>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	4a69      	ldr	r2, [pc, #420]	; (80042cc <HAL_I2C_Init+0x284>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	099b      	lsrs	r3, r3, #6
 800412e:	3301      	adds	r3, #1
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	430b      	orrs	r3, r1
 8004136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	495c      	ldr	r1, [pc, #368]	; (80042bc <HAL_I2C_Init+0x274>)
 800414c:	428b      	cmp	r3, r1
 800414e:	d819      	bhi.n	8004184 <HAL_I2C_Init+0x13c>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e59      	subs	r1, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	fbb1 f3f3 	udiv	r3, r1, r3
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004164:	400b      	ands	r3, r1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_I2C_Init+0x138>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1e59      	subs	r1, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	fbb1 f3f3 	udiv	r3, r1, r3
 8004178:	3301      	adds	r3, #1
 800417a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417e:	e051      	b.n	8004224 <HAL_I2C_Init+0x1dc>
 8004180:	2304      	movs	r3, #4
 8004182:	e04f      	b.n	8004224 <HAL_I2C_Init+0x1dc>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d111      	bne.n	80041b0 <HAL_I2C_Init+0x168>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e58      	subs	r0, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	440b      	add	r3, r1
 800419a:	fbb0 f3f3 	udiv	r3, r0, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e012      	b.n	80041d6 <HAL_I2C_Init+0x18e>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e58      	subs	r0, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	0099      	lsls	r1, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c6:	3301      	adds	r3, #1
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Init+0x196>
 80041da:	2301      	movs	r3, #1
 80041dc:	e022      	b.n	8004224 <HAL_I2C_Init+0x1dc>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10e      	bne.n	8004204 <HAL_I2C_Init+0x1bc>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1e58      	subs	r0, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	440b      	add	r3, r1
 80041f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f8:	3301      	adds	r3, #1
 80041fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004202:	e00f      	b.n	8004224 <HAL_I2C_Init+0x1dc>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	0099      	lsls	r1, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	6809      	ldr	r1, [r1, #0]
 8004228:	4313      	orrs	r3, r2
 800422a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6911      	ldr	r1, [r2, #16]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68d2      	ldr	r2, [r2, #12]
 800425e:	4311      	orrs	r1, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	430b      	orrs	r3, r1
 8004266:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	000186a0 	.word	0x000186a0
 80042c0:	001e847f 	.word	0x001e847f
 80042c4:	003d08ff 	.word	0x003d08ff
 80042c8:	431bde83 	.word	0x431bde83
 80042cc:	10624dd3 	.word	0x10624dd3

080042d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	817b      	strh	r3, [r7, #10]
 80042e2:	460b      	mov	r3, r1
 80042e4:	813b      	strh	r3, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ea:	f7fe fd59 	bl	8002da0 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	f040 80d9 	bne.w	80044b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	2319      	movs	r3, #25
 8004304:	2201      	movs	r2, #1
 8004306:	496d      	ldr	r1, [pc, #436]	; (80044bc <HAL_I2C_Mem_Write+0x1ec>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 ff77 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	e0cc      	b.n	80044b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_I2C_Mem_Write+0x56>
 8004322:	2302      	movs	r3, #2
 8004324:	e0c5      	b.n	80044b2 <HAL_I2C_Mem_Write+0x1e2>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d007      	beq.n	800434c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2221      	movs	r2, #33	; 0x21
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a3a      	ldr	r2, [r7, #32]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a4d      	ldr	r2, [pc, #308]	; (80044c0 <HAL_I2C_Mem_Write+0x1f0>)
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800438e:	88f8      	ldrh	r0, [r7, #6]
 8004390:	893a      	ldrh	r2, [r7, #8]
 8004392:	8979      	ldrh	r1, [r7, #10]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	4603      	mov	r3, r0
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fca2 	bl	8004ce8 <I2C_RequestMemoryWrite>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d052      	beq.n	8004450 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e081      	b.n	80044b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f001 f83c 	bl	8005430 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d107      	bne.n	80043d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e06b      	b.n	80044b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b04      	cmp	r3, #4
 8004416:	d11b      	bne.n	8004450 <HAL_I2C_Mem_Write+0x180>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d017      	beq.n	8004450 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1aa      	bne.n	80043ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f001 f82f 	bl	80054c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00d      	beq.n	8004484 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2b04      	cmp	r3, #4
 800446e:	d107      	bne.n	8004480 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e016      	b.n	80044b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e000      	b.n	80044b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	00100002 	.word	0x00100002
 80044c0:	ffff0000 	.word	0xffff0000

080044c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044e2:	f7fe fc5d 	bl	8002da0 <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	f040 8244 	bne.w	800497e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2319      	movs	r3, #25
 80044fc:	2201      	movs	r2, #1
 80044fe:	4982      	ldr	r1, [pc, #520]	; (8004708 <HAL_I2C_Mem_Read+0x244>)
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fe7b 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
 800450e:	e237      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_I2C_Mem_Read+0x5a>
 800451a:	2302      	movs	r3, #2
 800451c:	e230      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d007      	beq.n	8004544 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2222      	movs	r2, #34	; 0x22
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2240      	movs	r2, #64	; 0x40
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800456e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a62      	ldr	r2, [pc, #392]	; (800470c <HAL_I2C_Mem_Read+0x248>)
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004586:	88f8      	ldrh	r0, [r7, #6]
 8004588:	893a      	ldrh	r2, [r7, #8]
 800458a:	8979      	ldrh	r1, [r7, #10]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4603      	mov	r3, r0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fc3c 	bl	8004e14 <I2C_RequestMemoryRead>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e1ec      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d113      	bne.n	80045d6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e1c0      	b.n	8004958 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d11e      	bne.n	800461c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045ee:	b672      	cpsid	i
}
 80045f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004616:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004618:	b662      	cpsie	i
}
 800461a:	e035      	b.n	8004688 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11e      	bne.n	8004662 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004632:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004634:	b672      	cpsid	i
}
 8004636:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800465e:	b662      	cpsie	i
}
 8004660:	e012      	b.n	8004688 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004670:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004688:	e166      	b.n	8004958 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	2b03      	cmp	r3, #3
 8004690:	f200 811f 	bhi.w	80048d2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b01      	cmp	r3, #1
 800469a:	d123      	bne.n	80046e4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 ff55 	bl	8005550 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e167      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e2:	e139      	b.n	8004958 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d152      	bne.n	8004792 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	2200      	movs	r2, #0
 80046f4:	4906      	ldr	r1, [pc, #24]	; (8004710 <HAL_I2C_Mem_Read+0x24c>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fd80 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e13c      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
 8004706:	bf00      	nop
 8004708:	00100002 	.word	0x00100002
 800470c:	ffff0000 	.word	0xffff0000
 8004710:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004714:	b672      	cpsid	i
}
 8004716:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800475a:	b662      	cpsie	i
}
 800475c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004790:	e0e2      	b.n	8004958 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	2200      	movs	r2, #0
 800479a:	497b      	ldr	r1, [pc, #492]	; (8004988 <HAL_I2C_Mem_Read+0x4c4>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fd2d 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0e9      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047bc:	b672      	cpsid	i
}
 80047be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047f2:	4b66      	ldr	r3, [pc, #408]	; (800498c <HAL_I2C_Mem_Read+0x4c8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	4a65      	ldr	r2, [pc, #404]	; (8004990 <HAL_I2C_Mem_Read+0x4cc>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0a1a      	lsrs	r2, r3, #8
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00da      	lsls	r2, r3, #3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	3b01      	subs	r3, #1
 8004810:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d118      	bne.n	800484a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800483a:	b662      	cpsie	i
}
 800483c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e09a      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d1d9      	bne.n	800480c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800489a:	b662      	cpsie	i
}
 800489c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048d0:	e042      	b.n	8004958 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fe3a 	bl	8005550 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e04c      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b04      	cmp	r3, #4
 8004924:	d118      	bne.n	8004958 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f ae94 	bne.w	800468a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e000      	b.n	8004980 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
  }
}
 8004980:	4618      	mov	r0, r3
 8004982:	3728      	adds	r7, #40	; 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	00010004 	.word	0x00010004
 800498c:	20000018 	.word	0x20000018
 8004990:	14f8b589 	.word	0x14f8b589

08004994 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08c      	sub	sp, #48	; 0x30
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	461a      	mov	r2, r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	817b      	strh	r3, [r7, #10]
 80049a6:	460b      	mov	r3, r1
 80049a8:	813b      	strh	r3, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ae:	f7fe f9f7 	bl	8002da0 <HAL_GetTick>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	f040 8168 	bne.w	8004c96 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049c6:	4b98      	ldr	r3, [pc, #608]	; (8004c28 <HAL_I2C_Mem_Read_DMA+0x294>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	08db      	lsrs	r3, r3, #3
 80049cc:	4a97      	ldr	r2, [pc, #604]	; (8004c2c <HAL_I2C_Mem_Read_DMA+0x298>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	0a1a      	lsrs	r2, r3, #8
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009a      	lsls	r2, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d112      	bne.n	8004a12 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e142      	b.n	8004c98 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d0df      	beq.n	80049e0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_I2C_Mem_Read_DMA+0x9a>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e134      	b.n	8004c98 <HAL_I2C_Mem_Read_DMA+0x304>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d007      	beq.n	8004a54 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2222      	movs	r2, #34	; 0x22
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2240      	movs	r2, #64	; 0x40
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a67      	ldr	r2, [pc, #412]	; (8004c30 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8004a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004a96:	897a      	ldrh	r2, [r7, #10]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004a9c:	893a      	ldrh	r2, [r7, #8]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80c2 	beq.w	8004c3c <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d024      	beq.n	8004b0a <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	4a5b      	ldr	r2, [pc, #364]	; (8004c34 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8004ac6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	4a5a      	ldr	r2, [pc, #360]	; (8004c38 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	2200      	movs	r2, #0
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3310      	adds	r3, #16
 8004aea:	4619      	mov	r1, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	461a      	mov	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	f7fe feab 	bl	8003850 <HAL_DMA_Start_IT>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d17b      	bne.n	8004c00 <HAL_I2C_Mem_Read_DMA+0x26c>
 8004b08:	e013      	b.n	8004b32 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0b2      	b.n	8004c98 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004b32:	88f8      	ldrh	r0, [r7, #6]
 8004b34:	893a      	ldrh	r2, [r7, #8]
 8004b36:	8979      	ldrh	r1, [r7, #10]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	2323      	movs	r3, #35	; 0x23
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	4603      	mov	r3, r0
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f966 	bl	8004e14 <I2C_RequestMemoryRead>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d023      	beq.n	8004b96 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe ff18 	bl	8003988 <HAL_DMA_Abort_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	2200      	movs	r2, #0
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e080      	b.n	8004c98 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d108      	bne.n	8004bb0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e007      	b.n	8004bc0 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bbe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bec:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e048      	b.n	8004c92 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	f043 0210 	orr.w	r2, r3, #16
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e037      	b.n	8004c98 <HAL_I2C_Mem_Read_DMA+0x304>
 8004c28:	20000018 	.word	0x20000018
 8004c2c:	14f8b589 	.word	0x14f8b589
 8004c30:	ffff0000 	.word	0xffff0000
 8004c34:	08004fe5 	.word	0x08004fe5
 8004c38:	0800518f 	.word	0x0800518f
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004c3c:	88f8      	ldrh	r0, [r7, #6]
 8004c3e:	893a      	ldrh	r2, [r7, #8]
 8004c40:	8979      	ldrh	r1, [r7, #10]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	2323      	movs	r3, #35	; 0x23
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f8e1 	bl	8004e14 <I2C_RequestMemoryRead>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e01d      	b.n	8004c98 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c80:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3728      	adds	r7, #40	; 0x28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fa6c 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	d103      	bne.n	8004d42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e05f      	b.n	8004e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d46:	897b      	ldrh	r3, [r7, #10]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	492d      	ldr	r1, [pc, #180]	; (8004e10 <I2C_RequestMemoryWrite+0x128>)
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fac7 	bl	80052f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e04c      	b.n	8004e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fb52 	bl	8005430 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e02b      	b.n	8004e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]
 8004dbe:	e021      	b.n	8004e04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc0:	893b      	ldrh	r3, [r7, #8]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fb2c 	bl	8005430 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d107      	bne.n	8004df6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e005      	b.n	8004e06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfa:	893b      	ldrh	r3, [r7, #8]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	00010002 	.word	0x00010002

08004e14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4603      	mov	r3, r0
 8004e24:	817b      	strh	r3, [r7, #10]
 8004e26:	460b      	mov	r3, r1
 8004e28:	813b      	strh	r3, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f9ce 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e74:	d103      	bne.n	8004e7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0aa      	b.n	8004fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	4952      	ldr	r1, [pc, #328]	; (8004fe0 <I2C_RequestMemoryRead+0x1cc>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa29 	bl	80052f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e097      	b.n	8004fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec0:	6a39      	ldr	r1, [r7, #32]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fab4 	bl	8005430 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d107      	bne.n	8004ee6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e076      	b.n	8004fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef0:	893b      	ldrh	r3, [r7, #8]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]
 8004efa:	e021      	b.n	8004f40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	6a39      	ldr	r1, [r7, #32]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fa8e 	bl	8005430 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d107      	bne.n	8004f32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e050      	b.n	8004fd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f36:	893b      	ldrh	r3, [r7, #8]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	6a39      	ldr	r1, [r7, #32]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fa73 	bl	8005430 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00d      	beq.n	8004f6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d107      	bne.n	8004f68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e035      	b.n	8004fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f937 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa2:	d103      	bne.n	8004fac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e013      	b.n	8004fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fb0:	897b      	ldrh	r3, [r7, #10]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	4906      	ldr	r1, [pc, #24]	; (8004fe0 <I2C_RequestMemoryRead+0x1cc>)
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f992 	bl	80052f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	00010002 	.word	0x00010002

08004fe4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005000:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005016:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005024:	2200      	movs	r2, #0
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	2200      	movs	r2, #0
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800503e:	2b21      	cmp	r3, #33	; 0x21
 8005040:	d007      	beq.n	8005052 <I2C_DMAXferCplt+0x6e>
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005048:	2b22      	cmp	r3, #34	; 0x22
 800504a:	d131      	bne.n	80050b0 <I2C_DMAXferCplt+0xcc>
 800504c:	7cbb      	ldrb	r3, [r7, #18]
 800504e:	2b20      	cmp	r3, #32
 8005050:	d12e      	bne.n	80050b0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005060:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	2b29      	cmp	r3, #41	; 0x29
 800506c:	d10a      	bne.n	8005084 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2221      	movs	r2, #33	; 0x21
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2228      	movs	r2, #40	; 0x28
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800507c:	6978      	ldr	r0, [r7, #20]
 800507e:	f7ff fe18 	bl	8004cb2 <HAL_I2C_SlaveTxCpltCallback>
 8005082:	e00c      	b.n	800509e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b2a      	cmp	r3, #42	; 0x2a
 8005088:	d109      	bne.n	800509e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2222      	movs	r2, #34	; 0x22
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2228      	movs	r2, #40	; 0x28
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005098:	6978      	ldr	r0, [r7, #20]
 800509a:	f7ff fe13 	bl	8004cc4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80050ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050ae:	e06a      	b.n	8005186 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d064      	beq.n	8005186 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ec:	d009      	beq.n	8005102 <I2C_DMAXferCplt+0x11e>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d006      	beq.n	8005102 <I2C_DMAXferCplt+0x11e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050fa:	d002      	beq.n	8005102 <I2C_DMAXferCplt+0x11e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d107      	bne.n	8005112 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005110:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005120:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005130:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005140:	6978      	ldr	r0, [r7, #20]
 8005142:	f7ff fdc8 	bl	8004cd6 <HAL_I2C_ErrorCallback>
}
 8005146:	e01e      	b.n	8005186 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d10a      	bne.n	8005172 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800516a:	6978      	ldr	r0, [r7, #20]
 800516c:	f7fc f8ea 	bl	8001344 <HAL_I2C_MemRxCpltCallback>
}
 8005170:	e009      	b.n	8005186 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2212      	movs	r2, #18
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005180:	6978      	ldr	r0, [r7, #20]
 8005182:	f7ff fd8d 	bl	8004ca0 <HAL_I2C_MasterRxCpltCallback>
}
 8005186:	bf00      	nop
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	2200      	movs	r2, #0
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	2200      	movs	r2, #0
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f043 0210 	orr.w	r2, r3, #16
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fd71 	bl	8004cd6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800520c:	e048      	b.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d044      	beq.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fd fdc3 	bl	8002da0 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d139      	bne.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10d      	bne.n	8005252 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	43da      	mvns	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	e00c      	b.n	800526c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	43da      	mvns	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	429a      	cmp	r2, r3
 8005270:	d116      	bne.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e023      	b.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	0c1b      	lsrs	r3, r3, #16
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d10d      	bne.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	43da      	mvns	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	e00c      	b.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	43da      	mvns	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d093      	beq.n	800520e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052fe:	e071      	b.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530e:	d123      	bne.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005328:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f043 0204 	orr.w	r2, r3, #4
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e067      	b.n	8005428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d041      	beq.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005360:	f7fd fd1e 	bl	8002da0 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d136      	bne.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d10c      	bne.n	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	43da      	mvns	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e00b      	b.n	80053b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	43da      	mvns	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4013      	ands	r3, r2
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d016      	beq.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e021      	b.n	8005428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	0c1b      	lsrs	r3, r3, #16
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d10c      	bne.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	43da      	mvns	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4013      	ands	r3, r2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e00b      	b.n	8005420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	43da      	mvns	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4013      	ands	r3, r2
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	f47f af6d 	bne.w	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800543c:	e034      	b.n	80054a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f8e3 	bl	800560a <I2C_IsAcknowledgeFailed>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e034      	b.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d028      	beq.n	80054a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005456:	f7fd fca3 	bl	8002da0 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	d302      	bcc.n	800546c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11d      	bne.n	80054a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d016      	beq.n	80054a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e007      	b.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d1c3      	bne.n	800543e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054cc:	e034      	b.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f89b 	bl	800560a <I2C_IsAcknowledgeFailed>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e034      	b.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d028      	beq.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fd fc5b 	bl	8002da0 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11d      	bne.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d016      	beq.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e007      	b.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b04      	cmp	r3, #4
 8005544:	d1c3      	bne.n	80054ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800555c:	e049      	b.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b10      	cmp	r3, #16
 800556a:	d119      	bne.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0210 	mvn.w	r2, #16
 8005574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e030      	b.n	8005602 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a0:	f7fd fbfe 	bl	8002da0 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d302      	bcc.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d11d      	bne.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d016      	beq.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e007      	b.n	8005602 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d1ae      	bne.n	800555e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005620:	d11b      	bne.n	800565a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800562a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f043 0204 	orr.w	r2, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005668:	b08b      	sub	sp, #44	; 0x2c
 800566a:	af06      	add	r7, sp, #24
 800566c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0f1      	b.n	800585c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f007 ffb3 	bl	800d5f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2203      	movs	r2, #3
 8005696:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f003 fe5c 	bl	800935c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	687e      	ldr	r6, [r7, #4]
 80056ac:	466d      	mov	r5, sp
 80056ae:	f106 0410 	add.w	r4, r6, #16
 80056b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	1d33      	adds	r3, r6, #4
 80056bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056be:	6838      	ldr	r0, [r7, #0]
 80056c0:	f003 fe26 	bl	8009310 <USB_CoreInit>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0c2      	b.n	800585c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f003 fe57 	bl	8009390 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
 80056e6:	e040      	b.n	800576a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	440b      	add	r3, r1
 80056f8:	3301      	adds	r3, #1
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	440b      	add	r3, r1
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	3303      	adds	r3, #3
 8005724:	2200      	movs	r2, #0
 8005726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	440b      	add	r3, r1
 8005736:	3338      	adds	r3, #56	; 0x38
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	333c      	adds	r3, #60	; 0x3c
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005750:	7bfa      	ldrb	r2, [r7, #15]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	440b      	add	r3, r1
 800575e:	3340      	adds	r3, #64	; 0x40
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	3301      	adds	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d3b9      	bcc.n	80056e8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
 8005778:	e044      	b.n	8005804 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	440b      	add	r3, r1
 8005788:	f203 1369 	addw	r3, r3, #361	; 0x169
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057a6:	7bfa      	ldrb	r2, [r7, #15]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	440b      	add	r3, r1
 80057e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	3301      	adds	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d3b5      	bcc.n	800577a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	687e      	ldr	r6, [r7, #4]
 8005816:	466d      	mov	r5, sp
 8005818:	f106 0410 	add.w	r4, r6, #16
 800581c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800581e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	1d33      	adds	r3, r6, #4
 8005826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005828:	6838      	ldr	r0, [r7, #0]
 800582a:	f003 fdbd 	bl	80093a8 <USB_DevInit>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e00d      	b.n	800585c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f006 f83e 	bl	800b8d6 <USB_DevDisconnect>

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005864 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_PCD_Start+0x16>
 8005876:	2302      	movs	r3, #2
 8005878:	e016      	b.n	80058a8 <HAL_PCD_Start+0x44>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f003 fd52 	bl	8009330 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800588c:	2101      	movs	r1, #1
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f008 f925 	bl	800dade <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f006 f812 	bl	800b8c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f006 f814 	bl	800b8ea <USB_ReadInterrupts>
 80058c2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb1b 	bl	8005f0a <PCD_EP_ISR_Handler>

    return;
 80058d4:	e119      	b.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d013      	beq.n	8005908 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f2:	b292      	uxth	r2, r2
 80058f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f007 fef8 	bl	800d6ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80058fe:	2100      	movs	r1, #0
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f905 	bl	8005b10 <HAL_PCD_SetAddress>

    return;
 8005906:	e100      	b.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00c      	beq.n	800592c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005924:	b292      	uxth	r2, r2
 8005926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800592a:	e0ee      	b.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800593e:	b29a      	uxth	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005948:	b292      	uxth	r2, r2
 800594a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800594e:	e0dc      	b.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d027      	beq.n	80059aa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0204 	bic.w	r2, r2, #4
 800596c:	b292      	uxth	r2, r2
 800596e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0208 	bic.w	r2, r2, #8
 8005984:	b292      	uxth	r2, r2
 8005986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f007 fee8 	bl	800d760 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005998:	b29a      	uxth	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059a2:	b292      	uxth	r2, r2
 80059a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80059a8:	e0af      	b.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8083 	beq.w	8005abc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e010      	b.n	80059de <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	7ffb      	ldrb	r3, [r7, #31]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
 80059ca:	8812      	ldrh	r2, [r2, #0]
 80059cc:	b292      	uxth	r2, r2
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	3320      	adds	r3, #32
 80059d2:	443b      	add	r3, r7
 80059d4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80059d8:	7ffb      	ldrb	r3, [r7, #31]
 80059da:	3301      	adds	r3, #1
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	7ffb      	ldrb	r3, [r7, #31]
 80059e0:	2b07      	cmp	r3, #7
 80059e2:	d9eb      	bls.n	80059bc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	b292      	uxth	r2, r2
 80059f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	b292      	uxth	r2, r2
 8005a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005a14:	bf00      	nop
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f6      	beq.n	8005a16 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e00f      	b.n	8005a66 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	7ffa      	ldrb	r2, [r7, #31]
 8005a50:	0092      	lsls	r2, r2, #2
 8005a52:	440a      	add	r2, r1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	3320      	adds	r3, #32
 8005a58:	443b      	add	r3, r7
 8005a5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005a5e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	3301      	adds	r3, #1
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	7ffb      	ldrb	r3, [r7, #31]
 8005a68:	2b07      	cmp	r3, #7
 8005a6a:	d9ec      	bls.n	8005a46 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0208 	orr.w	r2, r2, #8
 8005a7e:	b292      	uxth	r2, r2
 8005a80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a96:	b292      	uxth	r2, r2
 8005a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0204 	orr.w	r2, r2, #4
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f007 fe39 	bl	800d72c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005aba:	e026      	b.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00f      	beq.n	8005ae6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ad8:	b292      	uxth	r2, r2
 8005ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f007 fdf7 	bl	800d6d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ae4:	e011      	b.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00c      	beq.n	8005b0a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b02:	b292      	uxth	r2, r2
 8005b04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005b08:	bf00      	nop
  }
}
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_PCD_SetAddress+0x1a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e013      	b.n	8005b52 <HAL_PCD_SetAddress+0x42>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f005 feaa 	bl	800b89c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	4608      	mov	r0, r1
 8005b64:	4611      	mov	r1, r2
 8005b66:	461a      	mov	r2, r3
 8005b68:	4603      	mov	r3, r0
 8005b6a:	70fb      	strb	r3, [r7, #3]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	803b      	strh	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	da0e      	bge.n	8005b9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	705a      	strb	r2, [r3, #1]
 8005b9c:	e00e      	b.n	8005bbc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 0207 	and.w	r2, r3, #7
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bc8:	883a      	ldrh	r2, [r7, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	78ba      	ldrb	r2, [r7, #2]
 8005bd2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bd4:	78bb      	ldrb	r3, [r7, #2]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d102      	bne.n	8005be0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_PCD_EP_Open+0x94>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e00e      	b.n	8005c0c <HAL_PCD_EP_Open+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f003 fbf3 	bl	80093e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	da0e      	bge.n	8005c46 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	705a      	strb	r2, [r3, #1]
 8005c44:	e00e      	b.n	8005c64 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	f003 0207 	and.w	r2, r3, #7
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_PCD_EP_Close+0x6a>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e00e      	b.n	8005c9c <HAL_PCD_EP_Close+0x88>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f003 ff6b 	bl	8009b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	f003 0207 	and.w	r2, r3, #7
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f004 f922 	bl	8009f40 <USB_EPStartXfer>

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	f003 0207 	and.w	r2, r3, #7
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	440b      	add	r3, r1
 8005d24:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005d28:	681b      	ldr	r3, [r3, #0]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2200      	movs	r2, #0
 8005d78:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d80:	7afb      	ldrb	r3, [r7, #11]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f004 f8d4 	bl	8009f40 <USB_EPStartXfer>

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	f003 0207 	and.w	r2, r3, #7
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d901      	bls.n	8005dc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e04c      	b.n	8005e5a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da0e      	bge.n	8005de6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4413      	add	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	705a      	strb	r2, [r3, #1]
 8005de4:	e00c      	b.n	8005e00 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_PCD_EP_SetStall+0x7e>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e01c      	b.n	8005e5a <HAL_PCD_EP_SetStall+0xb8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f005 fc37 	bl	800b6a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d108      	bne.n	8005e50 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f005 fd5c 	bl	800b908 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	f003 020f 	and.w	r2, r3, #15
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d901      	bls.n	8005e80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e040      	b.n	8005f02 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da0e      	bge.n	8005ea6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	705a      	strb	r2, [r3, #1]
 8005ea4:	e00e      	b.n	8005ec4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 0207 	and.w	r2, r3, #7
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4413      	add	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_PCD_EP_ClrStall+0x82>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e00e      	b.n	8005f02 <HAL_PCD_EP_ClrStall+0xa0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f005 fc25 	bl	800b742 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b096      	sub	sp, #88	; 0x58
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f12:	e3bf      	b.n	8006694 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005f2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 8179 	bne.w	800622a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005f38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d152      	bne.n	8005fea <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	81fb      	strh	r3, [r7, #14]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3328      	adds	r3, #40	; 0x28
 8005f6c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	3302      	adds	r3, #2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f007 fb77 	bl	800d69e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 836b 	beq.w	8006694 <PCD_EP_ISR_Handler+0x78a>
 8005fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 8366 	bne.w	8006694 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005fe8:	e354      	b.n	8006694 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ff0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ffc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006004:	2b00      	cmp	r3, #0
 8006006:	d034      	beq.n	8006072 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006010:	b29b      	uxth	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	4413      	add	r3, r2
 800601c:	3306      	adds	r3, #6
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006032:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800603e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006040:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006044:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006046:	b29b      	uxth	r3, r3
 8006048:	f005 fcae 	bl	800b9a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006058:	4013      	ands	r3, r2
 800605a:	823b      	strh	r3, [r7, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	8a3a      	ldrh	r2, [r7, #16]
 8006062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006066:	b292      	uxth	r2, r2
 8006068:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f007 faea 	bl	800d644 <HAL_PCD_SetupStageCallback>
 8006070:	e310      	b.n	8006694 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006072:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006076:	2b00      	cmp	r3, #0
 8006078:	f280 830c 	bge.w	8006694 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29a      	uxth	r2, r3
 8006084:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006088:	4013      	ands	r3, r2
 800608a:	83fb      	strh	r3, [r7, #30]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	8bfa      	ldrh	r2, [r7, #30]
 8006092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006096:	b292      	uxth	r2, r2
 8006098:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	3306      	adds	r3, #6
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6812      	ldr	r2, [r2, #0]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80060c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d019      	beq.n	8006102 <PCD_EP_ISR_Handler+0x1f8>
 80060ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d015      	beq.n	8006102 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060dc:	6959      	ldr	r1, [r3, #20]
 80060de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80060e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f005 fc5e 	bl	800b9a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80060ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	441a      	add	r2, r3
 80060f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80060fa:	2100      	movs	r1, #0
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f007 fab3 	bl	800d668 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800610c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006114:	2b00      	cmp	r3, #0
 8006116:	f040 82bd 	bne.w	8006694 <PCD_EP_ISR_Handler+0x78a>
 800611a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800611e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006122:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006126:	f000 82b5 	beq.w	8006694 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006138:	b29b      	uxth	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	4413      	add	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006154:	b29a      	uxth	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b3e      	cmp	r3, #62	; 0x3e
 8006160:	d91d      	bls.n	800619e <PCD_EP_ISR_Handler+0x294>
 8006162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
 800616a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <PCD_EP_ISR_Handler+0x272>
 8006176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006178:	3b01      	subs	r3, #1
 800617a:	647b      	str	r3, [r7, #68]	; 0x44
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29a      	uxth	r2, r3
 8006182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	b29b      	uxth	r3, r3
 800618e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006196:	b29a      	uxth	r2, r3
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e026      	b.n	80061ec <PCD_EP_ISR_Handler+0x2e2>
 800619e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <PCD_EP_ISR_Handler+0x2b2>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	e017      	b.n	80061ec <PCD_EP_ISR_Handler+0x2e2>
 80061bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	085b      	lsrs	r3, r3, #1
 80061c2:	647b      	str	r3, [r7, #68]	; 0x44
 80061c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <PCD_EP_ISR_Handler+0x2cc>
 80061d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d2:	3301      	adds	r3, #1
 80061d4:	647b      	str	r3, [r7, #68]	; 0x44
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061de:	b29b      	uxth	r3, r3
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4313      	orrs	r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	827b      	strh	r3, [r7, #18]
 80061fe:	8a7b      	ldrh	r3, [r7, #18]
 8006200:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006204:	827b      	strh	r3, [r7, #18]
 8006206:	8a7b      	ldrh	r3, [r7, #18]
 8006208:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800620c:	827b      	strh	r3, [r7, #18]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	8a7b      	ldrh	r3, [r7, #18]
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
 8006228:	e234      	b.n	8006694 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800623e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006242:	2b00      	cmp	r3, #0
 8006244:	f280 80fc 	bge.w	8006440 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29a      	uxth	r2, r3
 800625a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800625e:	4013      	ands	r3, r2
 8006260:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800627a:	b292      	uxth	r2, r2
 800627c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800627e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006296:	7b1b      	ldrb	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d125      	bne.n	80062e8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4413      	add	r3, r2
 80062b0:	3306      	adds	r3, #6
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80062c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8092 	beq.w	80063f6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d8:	6959      	ldr	r1, [r3, #20]
 80062da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062dc:	88da      	ldrh	r2, [r3, #6]
 80062de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80062e2:	f005 fb61 	bl	800b9a8 <USB_ReadPMA>
 80062e6:	e086      	b.n	80063f6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80062e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ea:	78db      	ldrb	r3, [r3, #3]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d10a      	bne.n	8006306 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80062f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062f4:	461a      	mov	r2, r3
 80062f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f9d9 	bl	80066b0 <HAL_PCD_EP_DB_Receive>
 80062fe:	4603      	mov	r3, r0
 8006300:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006304:	e077      	b.n	80063f6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006342:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006346:	b29b      	uxth	r3, r3
 8006348:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d024      	beq.n	80063ae <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636c:	b29b      	uxth	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	3302      	adds	r3, #2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800638c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006390:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006394:	2b00      	cmp	r3, #0
 8006396:	d02e      	beq.n	80063f6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639e:	6959      	ldr	r1, [r3, #20]
 80063a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a2:	891a      	ldrh	r2, [r3, #8]
 80063a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063a8:	f005 fafe 	bl	800b9a8 <USB_ReadPMA>
 80063ac:	e023      	b.n	80063f6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4413      	add	r3, r2
 80063c2:	3306      	adds	r3, #6
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80063da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e8:	6959      	ldr	r1, [r3, #20]
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	895a      	ldrh	r2, [r3, #10]
 80063ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063f2:	f005 fad9 	bl	800b9a8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80063f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f8:	69da      	ldr	r2, [r3, #28]
 80063fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063fe:	441a      	add	r2, r3
 8006400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006402:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800640c:	441a      	add	r2, r3
 800640e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006410:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <PCD_EP_ISR_Handler+0x51c>
 800641a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800641e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	429a      	cmp	r2, r3
 8006424:	d206      	bcs.n	8006434 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f007 f91b 	bl	800d668 <HAL_PCD_DataOutStageCallback>
 8006432:	e005      	b.n	8006440 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800643a:	4618      	mov	r0, r3
 800643c:	f003 fd80 	bl	8009f40 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006440:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8123 	beq.w	8006694 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800644e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800649e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a0:	78db      	ldrb	r3, [r3, #3]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	f040 80a2 	bne.w	80065ec <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80064a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064aa:	2200      	movs	r2, #0
 80064ac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80064ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8093 	beq.w	80065de <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80064b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d046      	beq.n	8006552 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d126      	bne.n	800651a <PCD_EP_ISR_Handler+0x610>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	4413      	add	r3, r2
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
 80064e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	011a      	lsls	r2, r3, #4
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	4413      	add	r3, r2
 80064ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006512:	b29a      	uxth	r2, r3
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e061      	b.n	80065de <PCD_EP_ISR_Handler+0x6d4>
 800651a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800651c:	785b      	ldrb	r3, [r3, #1]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d15d      	bne.n	80065de <PCD_EP_ISR_Handler+0x6d4>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006530:	b29b      	uxth	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	4413      	add	r3, r2
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800653a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	011a      	lsls	r2, r3, #4
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	4413      	add	r3, r2
 8006544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	2200      	movs	r2, #0
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e045      	b.n	80065de <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d126      	bne.n	80065ae <PCD_EP_ISR_Handler+0x6a4>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	4413      	add	r3, r2
 8006576:	637b      	str	r3, [r7, #52]	; 0x34
 8006578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	4413      	add	r3, r2
 8006582:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006586:	633b      	str	r3, [r7, #48]	; 0x30
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006592:	b29a      	uxth	r2, r3
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29b      	uxth	r3, r3
 800659e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e017      	b.n	80065de <PCD_EP_ISR_Handler+0x6d4>
 80065ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d113      	bne.n	80065de <PCD_EP_ISR_Handler+0x6d4>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065be:	b29b      	uxth	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c4:	4413      	add	r3, r2
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	011a      	lsls	r2, r3, #4
 80065ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	2200      	movs	r2, #0
 80065dc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f007 f85a 	bl	800d69e <HAL_PCD_DataInStageCallback>
 80065ea:	e053      	b.n	8006694 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80065ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d146      	bne.n	8006686 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4413      	add	r3, r2
 800660c:	3302      	adds	r3, #2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006620:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800662c:	429a      	cmp	r2, r3
 800662e:	d907      	bls.n	8006640 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8006630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006638:	1ad2      	subs	r2, r2, r3
 800663a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663c:	619a      	str	r2, [r3, #24]
 800663e:	e002      	b.n	8006646 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8006640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006642:	2200      	movs	r2, #0
 8006644:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800664e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f007 f822 	bl	800d69e <HAL_PCD_DataInStageCallback>
 800665a:	e01b      	b.n	8006694 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800665c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006664:	441a      	add	r2, r3
 8006666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006668:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800666a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006672:	441a      	add	r2, r3
 8006674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006676:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800667e:	4618      	mov	r0, r3
 8006680:	f003 fc5e 	bl	8009f40 <USB_EPStartXfer>
 8006684:	e006      	b.n	8006694 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006686:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800668a:	461a      	mov	r2, r3
 800668c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f91b 	bl	80068ca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800669c:	b29b      	uxth	r3, r3
 800669e:	b21b      	sxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f6ff ac37 	blt.w	8005f14 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3758      	adds	r7, #88	; 0x58
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d07e      	beq.n	80067c6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	4413      	add	r3, r2
 80066dc:	3302      	adds	r3, #2
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	8b7b      	ldrh	r3, [r7, #26]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d306      	bcc.n	800670a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	699a      	ldr	r2, [r3, #24]
 8006700:	8b7b      	ldrh	r3, [r7, #26]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	619a      	str	r2, [r3, #24]
 8006708:	e002      	b.n	8006710 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d123      	bne.n	8006760 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	833b      	strh	r3, [r7, #24]
 8006734:	8b3b      	ldrh	r3, [r7, #24]
 8006736:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800673a:	833b      	strh	r3, [r7, #24]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	8b3b      	ldrh	r3, [r7, #24]
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01f      	beq.n	80067aa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006784:	82fb      	strh	r3, [r7, #22]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	8afb      	ldrh	r3, [r7, #22]
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80067aa:	8b7b      	ldrh	r3, [r7, #26]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8087 	beq.w	80068c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6959      	ldr	r1, [r3, #20]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	891a      	ldrh	r2, [r3, #8]
 80067be:	8b7b      	ldrh	r3, [r7, #26]
 80067c0:	f005 f8f2 	bl	800b9a8 <USB_ReadPMA>
 80067c4:	e07c      	b.n	80068c0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4413      	add	r3, r2
 80067da:	3306      	adds	r3, #6
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	8b7b      	ldrh	r3, [r7, #26]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d306      	bcc.n	8006808 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	8b7b      	ldrh	r3, [r7, #26]
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	619a      	str	r2, [r3, #24]
 8006806:	e002      	b.n	800680e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d123      	bne.n	800685e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	83fb      	strh	r3, [r7, #30]
 8006832:	8bfb      	ldrh	r3, [r7, #30]
 8006834:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006838:	83fb      	strh	r3, [r7, #30]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	8bfb      	ldrh	r3, [r7, #30]
 800684a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685a:	b29b      	uxth	r3, r3
 800685c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11f      	bne.n	80068a8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	83bb      	strh	r3, [r7, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	8bbb      	ldrh	r3, [r7, #28]
 8006894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80068a8:	8b7b      	ldrh	r3, [r7, #26]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d008      	beq.n	80068c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6959      	ldr	r1, [r3, #20]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	895a      	ldrh	r2, [r3, #10]
 80068ba:	8b7b      	ldrh	r3, [r7, #26]
 80068bc:	f005 f874 	bl	800b9a8 <USB_ReadPMA>
    }
  }

  return count;
 80068c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b0a4      	sub	sp, #144	; 0x90
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 81dd 	beq.w	8006c9e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4413      	add	r3, r2
 80068f8:	3302      	adds	r3, #2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800690c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006918:	429a      	cmp	r2, r3
 800691a:	d907      	bls.n	800692c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	699a      	ldr	r2, [r3, #24]
 8006920:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006924:	1ad2      	subs	r2, r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	619a      	str	r2, [r3, #24]
 800692a:	e002      	b.n	8006932 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2200      	movs	r2, #0
 8006930:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 80b9 	bne.w	8006aae <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d126      	bne.n	8006992 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006952:	b29b      	uxth	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	4413      	add	r3, r2
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	011a      	lsls	r2, r3, #4
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	4413      	add	r3, r2
 8006966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006976:	b29a      	uxth	r2, r3
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698a:	b29a      	uxth	r2, r3
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	e01a      	b.n	80069c8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d116      	bne.n	80069c8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	4413      	add	r3, r2
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	011a      	lsls	r2, r3, #4
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ba:	4413      	add	r3, r2
 80069bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069c0:	633b      	str	r3, [r7, #48]	; 0x30
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	2200      	movs	r2, #0
 80069c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d126      	bne.n	8006a24 <HAL_PCD_EP_DB_Transmit+0x15a>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	011a      	lsls	r2, r3, #4
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	e017      	b.n	8006a54 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d113      	bne.n	8006a54 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	4413      	add	r3, r2
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	011a      	lsls	r2, r3, #4
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	4413      	add	r3, r2
 8006a48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2200      	movs	r2, #0
 8006a52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f006 fe1f 	bl	800d69e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 82fc 	beq.w	8007064 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a86:	82fb      	strh	r3, [r7, #22]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	441a      	add	r2, r3
 8006a96:	8afb      	ldrh	r3, [r7, #22]
 8006a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8013      	strh	r3, [r2, #0]
 8006aac:	e2da      	b.n	8007064 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d021      	beq.n	8006afc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	f040 82ae 	bne.w	8007064 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	695a      	ldr	r2, [r3, #20]
 8006b0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b10:	441a      	add	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	69da      	ldr	r2, [r3, #28]
 8006b1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b1e:	441a      	add	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d30b      	bcc.n	8006b48 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	621a      	str	r2, [r3, #32]
 8006b46:	e017      	b.n	8006b78 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d108      	bne.n	8006b62 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006b50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b60:	e00a      	b.n	8006b78 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2200      	movs	r2, #0
 8006b76:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d165      	bne.n	8006c4c <HAL_PCD_EP_DB_Transmit+0x382>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b94:	4413      	add	r3, r2
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	011a      	lsls	r2, r3, #4
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bbe:	d91d      	bls.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x332>
 8006bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <HAL_PCD_EP_DB_Transmit+0x310>
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	029b      	lsls	r3, r3, #10
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	e044      	b.n	8006c86 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <HAL_PCD_EP_DB_Transmit+0x350>
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e035      	b.n	8006c86 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c30:	3301      	adds	r3, #1
 8006c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	029b      	lsls	r3, r3, #10
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4313      	orrs	r3, r2
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	e01c      	b.n	8006c86 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d118      	bne.n	8006c86 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c68:	4413      	add	r3, r2
 8006c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	011a      	lsls	r2, r3, #4
 8006c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6959      	ldr	r1, [r3, #20]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	891a      	ldrh	r2, [r3, #8]
 8006c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f004 fe41 	bl	800b91e <USB_WritePMA>
 8006c9c:	e1e2      	b.n	8007064 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3306      	adds	r3, #6
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d307      	bcc.n	8006ce6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	619a      	str	r2, [r3, #24]
 8006ce4:	e002      	b.n	8006cec <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 80c0 	bne.w	8006e76 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d126      	bne.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x482>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d12:	4413      	add	r3, r2
 8006d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	011a      	lsls	r2, r3, #4
 8006d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d1e:	4413      	add	r3, r2
 8006d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e01a      	b.n	8006d82 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d116      	bne.n	8006d82 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	667b      	str	r3, [r7, #100]	; 0x64
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d68:	4413      	add	r3, r2
 8006d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	011a      	lsls	r2, r3, #4
 8006d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d74:	4413      	add	r3, r2
 8006d76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7e:	2200      	movs	r2, #0
 8006d80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	677b      	str	r3, [r7, #116]	; 0x74
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d12b      	bne.n	8006de8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da4:	4413      	add	r3, r2
 8006da6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	011a      	lsls	r2, r3, #4
 8006dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e017      	b.n	8006e18 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d113      	bne.n	8006e18 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dfe:	4413      	add	r3, r2
 8006e00:	677b      	str	r3, [r7, #116]	; 0x74
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	011a      	lsls	r2, r3, #4
 8006e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e10:	673b      	str	r3, [r7, #112]	; 0x70
 8006e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e14:	2200      	movs	r2, #0
 8006e16:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f006 fc3d 	bl	800d69e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f040 811a 	bne.w	8007064 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	8013      	strh	r3, [r2, #0]
 8006e74:	e0f6      	b.n	8007064 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d121      	bne.n	8006ec4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	f040 80ca 	bne.w	8007064 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ed8:	441a      	add	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	69da      	ldr	r2, [r3, #28]
 8006ee2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ee6:	441a      	add	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6a1a      	ldr	r2, [r3, #32]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d30b      	bcc.n	8006f10 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f08:	1ad2      	subs	r2, r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	621a      	str	r2, [r3, #32]
 8006f0e:	e017      	b.n	8006f40 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d108      	bne.n	8006f2a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006f18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006f1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006f28:	e00a      	b.n	8006f40 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	657b      	str	r3, [r7, #84]	; 0x54
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d165      	bne.n	800701a <HAL_PCD_EP_DB_Transmit+0x750>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f62:	4413      	add	r3, r2
 8006f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	011a      	lsls	r2, r3, #4
 8006f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8c:	d91d      	bls.n	8006fca <HAL_PCD_EP_DB_Transmit+0x700>
 8006f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f9a:	f003 031f 	and.w	r3, r3, #31
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8006fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	e041      	b.n	800704e <HAL_PCD_EP_DB_Transmit+0x784>
 8006fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8006fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe4:	801a      	strh	r2, [r3, #0]
 8006fe6:	e032      	b.n	800704e <HAL_PCD_EP_DB_Transmit+0x784>
 8006fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fec:	085b      	lsrs	r3, r3, #1
 8006fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <HAL_PCD_EP_DB_Transmit+0x738>
 8006ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ffe:	3301      	adds	r3, #1
 8007000:	66bb      	str	r3, [r7, #104]	; 0x68
 8007002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29a      	uxth	r2, r3
 8007008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800700a:	b29b      	uxth	r3, r3
 800700c:	029b      	lsls	r3, r3, #10
 800700e:	b29b      	uxth	r3, r3
 8007010:	4313      	orrs	r3, r2
 8007012:	b29a      	uxth	r2, r3
 8007014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	e019      	b.n	800704e <HAL_PCD_EP_DB_Transmit+0x784>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d115      	bne.n	800704e <HAL_PCD_EP_DB_Transmit+0x784>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007030:	4413      	add	r3, r2
 8007032:	657b      	str	r3, [r7, #84]	; 0x54
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	011a      	lsls	r2, r3, #4
 800703a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800703c:	4413      	add	r3, r2
 800703e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007042:	653b      	str	r3, [r7, #80]	; 0x50
 8007044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007048:	b29a      	uxth	r2, r3
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	895a      	ldrh	r2, [r3, #10]
 800705a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800705e:	b29b      	uxth	r3, r3
 8007060:	f004 fc5d 	bl	800b91e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707e:	82bb      	strh	r3, [r7, #20]
 8007080:	8abb      	ldrh	r3, [r7, #20]
 8007082:	f083 0310 	eor.w	r3, r3, #16
 8007086:	82bb      	strh	r3, [r7, #20]
 8007088:	8abb      	ldrh	r3, [r7, #20]
 800708a:	f083 0320 	eor.w	r3, r3, #32
 800708e:	82bb      	strh	r3, [r7, #20]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	8abb      	ldrh	r3, [r7, #20]
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3790      	adds	r7, #144	; 0x90
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80070be:	b480      	push	{r7}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	817b      	strh	r3, [r7, #10]
 80070cc:	4613      	mov	r3, r2
 80070ce:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80070d0:	897b      	ldrh	r3, [r7, #10]
 80070d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070dc:	897b      	ldrh	r3, [r7, #10]
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	e009      	b.n	8007108 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070f4:	897a      	ldrh	r2, [r7, #10]
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007108:	893b      	ldrh	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2200      	movs	r2, #0
 8007112:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	b29a      	uxth	r2, r3
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	80da      	strh	r2, [r3, #6]
 800711c:	e00b      	b.n	8007136 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2201      	movs	r2, #1
 8007122:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	b29a      	uxth	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	b29a      	uxth	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	371c      	adds	r7, #28
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr
	...

08007144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e272      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 8087 	beq.w	8007272 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007164:	4b92      	ldr	r3, [pc, #584]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 030c 	and.w	r3, r3, #12
 800716c:	2b04      	cmp	r3, #4
 800716e:	d00c      	beq.n	800718a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007170:	4b8f      	ldr	r3, [pc, #572]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	2b08      	cmp	r3, #8
 800717a:	d112      	bne.n	80071a2 <HAL_RCC_OscConfig+0x5e>
 800717c:	4b8c      	ldr	r3, [pc, #560]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007188:	d10b      	bne.n	80071a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800718a:	4b89      	ldr	r3, [pc, #548]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d06c      	beq.n	8007270 <HAL_RCC_OscConfig+0x12c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d168      	bne.n	8007270 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e24c      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071aa:	d106      	bne.n	80071ba <HAL_RCC_OscConfig+0x76>
 80071ac:	4b80      	ldr	r3, [pc, #512]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a7f      	ldr	r2, [pc, #508]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	e02e      	b.n	8007218 <HAL_RCC_OscConfig+0xd4>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10c      	bne.n	80071dc <HAL_RCC_OscConfig+0x98>
 80071c2:	4b7b      	ldr	r3, [pc, #492]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a7a      	ldr	r2, [pc, #488]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	4b78      	ldr	r3, [pc, #480]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a77      	ldr	r2, [pc, #476]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	e01d      	b.n	8007218 <HAL_RCC_OscConfig+0xd4>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e4:	d10c      	bne.n	8007200 <HAL_RCC_OscConfig+0xbc>
 80071e6:	4b72      	ldr	r3, [pc, #456]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a71      	ldr	r2, [pc, #452]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	4b6f      	ldr	r3, [pc, #444]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a6e      	ldr	r2, [pc, #440]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80071f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	e00b      	b.n	8007218 <HAL_RCC_OscConfig+0xd4>
 8007200:	4b6b      	ldr	r3, [pc, #428]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a6a      	ldr	r2, [pc, #424]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	4b68      	ldr	r3, [pc, #416]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a67      	ldr	r2, [pc, #412]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007216:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d013      	beq.n	8007248 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007220:	f7fb fdbe 	bl	8002da0 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007228:	f7fb fdba 	bl	8002da0 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b64      	cmp	r3, #100	; 0x64
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e200      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723a:	4b5d      	ldr	r3, [pc, #372]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0xe4>
 8007246:	e014      	b.n	8007272 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007248:	f7fb fdaa 	bl	8002da0 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007250:	f7fb fda6 	bl	8002da0 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	; 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e1ec      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007262:	4b53      	ldr	r3, [pc, #332]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x10c>
 800726e:	e000      	b.n	8007272 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d063      	beq.n	8007346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800727e:	4b4c      	ldr	r3, [pc, #304]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f003 030c 	and.w	r3, r3, #12
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800728a:	4b49      	ldr	r3, [pc, #292]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f003 030c 	and.w	r3, r3, #12
 8007292:	2b08      	cmp	r3, #8
 8007294:	d11c      	bne.n	80072d0 <HAL_RCC_OscConfig+0x18c>
 8007296:	4b46      	ldr	r3, [pc, #280]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d116      	bne.n	80072d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072a2:	4b43      	ldr	r3, [pc, #268]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_RCC_OscConfig+0x176>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d001      	beq.n	80072ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e1c0      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ba:	4b3d      	ldr	r3, [pc, #244]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4939      	ldr	r1, [pc, #228]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ce:	e03a      	b.n	8007346 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d020      	beq.n	800731a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072d8:	4b36      	ldr	r3, [pc, #216]	; (80073b4 <HAL_RCC_OscConfig+0x270>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072de:	f7fb fd5f 	bl	8002da0 <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e6:	f7fb fd5b 	bl	8002da0 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e1a1      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f8:	4b2d      	ldr	r3, [pc, #180]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f0      	beq.n	80072e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007304:	4b2a      	ldr	r3, [pc, #168]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4927      	ldr	r1, [pc, #156]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 8007314:	4313      	orrs	r3, r2
 8007316:	600b      	str	r3, [r1, #0]
 8007318:	e015      	b.n	8007346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800731a:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <HAL_RCC_OscConfig+0x270>)
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fb fd3e 	bl	8002da0 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007328:	f7fb fd3a 	bl	8002da0 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e180      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733a:	4b1d      	ldr	r3, [pc, #116]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d03a      	beq.n	80073c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d019      	beq.n	800738e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800735a:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <HAL_RCC_OscConfig+0x274>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007360:	f7fb fd1e 	bl	8002da0 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007368:	f7fb fd1a 	bl	8002da0 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e160      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800737a:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <HAL_RCC_OscConfig+0x26c>)
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007386:	2001      	movs	r0, #1
 8007388:	f000 face 	bl	8007928 <RCC_Delay>
 800738c:	e01c      	b.n	80073c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800738e:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <HAL_RCC_OscConfig+0x274>)
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007394:	f7fb fd04 	bl	8002da0 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800739a:	e00f      	b.n	80073bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800739c:	f7fb fd00 	bl	8002da0 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d908      	bls.n	80073bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e146      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
 80073ae:	bf00      	nop
 80073b0:	40021000 	.word	0x40021000
 80073b4:	42420000 	.word	0x42420000
 80073b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073bc:	4b92      	ldr	r3, [pc, #584]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e9      	bne.n	800739c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80a6 	beq.w	8007522 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073d6:	2300      	movs	r3, #0
 80073d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073da:	4b8b      	ldr	r3, [pc, #556]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10d      	bne.n	8007402 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073e6:	4b88      	ldr	r3, [pc, #544]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4a87      	ldr	r2, [pc, #540]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80073ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f0:	61d3      	str	r3, [r2, #28]
 80073f2:	4b85      	ldr	r3, [pc, #532]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007402:	4b82      	ldr	r3, [pc, #520]	; (800760c <HAL_RCC_OscConfig+0x4c8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740a:	2b00      	cmp	r3, #0
 800740c:	d118      	bne.n	8007440 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800740e:	4b7f      	ldr	r3, [pc, #508]	; (800760c <HAL_RCC_OscConfig+0x4c8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a7e      	ldr	r2, [pc, #504]	; (800760c <HAL_RCC_OscConfig+0x4c8>)
 8007414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800741a:	f7fb fcc1 	bl	8002da0 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007422:	f7fb fcbd 	bl	8002da0 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b64      	cmp	r3, #100	; 0x64
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e103      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007434:	4b75      	ldr	r3, [pc, #468]	; (800760c <HAL_RCC_OscConfig+0x4c8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0f0      	beq.n	8007422 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d106      	bne.n	8007456 <HAL_RCC_OscConfig+0x312>
 8007448:	4b6f      	ldr	r3, [pc, #444]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	4a6e      	ldr	r2, [pc, #440]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	6213      	str	r3, [r2, #32]
 8007454:	e02d      	b.n	80074b2 <HAL_RCC_OscConfig+0x36e>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10c      	bne.n	8007478 <HAL_RCC_OscConfig+0x334>
 800745e:	4b6a      	ldr	r3, [pc, #424]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	4a69      	ldr	r2, [pc, #420]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	6213      	str	r3, [r2, #32]
 800746a:	4b67      	ldr	r3, [pc, #412]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	4a66      	ldr	r2, [pc, #408]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007470:	f023 0304 	bic.w	r3, r3, #4
 8007474:	6213      	str	r3, [r2, #32]
 8007476:	e01c      	b.n	80074b2 <HAL_RCC_OscConfig+0x36e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	2b05      	cmp	r3, #5
 800747e:	d10c      	bne.n	800749a <HAL_RCC_OscConfig+0x356>
 8007480:	4b61      	ldr	r3, [pc, #388]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	4a60      	ldr	r2, [pc, #384]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007486:	f043 0304 	orr.w	r3, r3, #4
 800748a:	6213      	str	r3, [r2, #32]
 800748c:	4b5e      	ldr	r3, [pc, #376]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	4a5d      	ldr	r2, [pc, #372]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	6213      	str	r3, [r2, #32]
 8007498:	e00b      	b.n	80074b2 <HAL_RCC_OscConfig+0x36e>
 800749a:	4b5b      	ldr	r3, [pc, #364]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	4a5a      	ldr	r2, [pc, #360]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	6213      	str	r3, [r2, #32]
 80074a6:	4b58      	ldr	r3, [pc, #352]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	4a57      	ldr	r2, [pc, #348]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80074ac:	f023 0304 	bic.w	r3, r3, #4
 80074b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d015      	beq.n	80074e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ba:	f7fb fc71 	bl	8002da0 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c0:	e00a      	b.n	80074d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074c2:	f7fb fc6d 	bl	8002da0 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e0b1      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ee      	beq.n	80074c2 <HAL_RCC_OscConfig+0x37e>
 80074e4:	e014      	b.n	8007510 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074e6:	f7fb fc5b 	bl	8002da0 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074ec:	e00a      	b.n	8007504 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ee:	f7fb fc57 	bl	8002da0 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e09b      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007504:	4b40      	ldr	r3, [pc, #256]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1ee      	bne.n	80074ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d105      	bne.n	8007522 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007516:	4b3c      	ldr	r3, [pc, #240]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	4a3b      	ldr	r2, [pc, #236]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800751c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007520:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8087 	beq.w	800763a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800752c:	4b36      	ldr	r3, [pc, #216]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f003 030c 	and.w	r3, r3, #12
 8007534:	2b08      	cmp	r3, #8
 8007536:	d061      	beq.n	80075fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d146      	bne.n	80075ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007540:	4b33      	ldr	r3, [pc, #204]	; (8007610 <HAL_RCC_OscConfig+0x4cc>)
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007546:	f7fb fc2b 	bl	8002da0 <HAL_GetTick>
 800754a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800754c:	e008      	b.n	8007560 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800754e:	f7fb fc27 	bl	8002da0 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	2b02      	cmp	r3, #2
 800755a:	d901      	bls.n	8007560 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e06d      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007560:	4b29      	ldr	r3, [pc, #164]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f0      	bne.n	800754e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007574:	d108      	bne.n	8007588 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	4921      	ldr	r1, [pc, #132]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 8007584:	4313      	orrs	r3, r2
 8007586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007588:	4b1f      	ldr	r3, [pc, #124]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a19      	ldr	r1, [r3, #32]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	430b      	orrs	r3, r1
 800759a:	491b      	ldr	r1, [pc, #108]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 800759c:	4313      	orrs	r3, r2
 800759e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075a0:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <HAL_RCC_OscConfig+0x4cc>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a6:	f7fb fbfb 	bl	8002da0 <HAL_GetTick>
 80075aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ae:	f7fb fbf7 	bl	8002da0 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e03d      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075c0:	4b11      	ldr	r3, [pc, #68]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f0      	beq.n	80075ae <HAL_RCC_OscConfig+0x46a>
 80075cc:	e035      	b.n	800763a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ce:	4b10      	ldr	r3, [pc, #64]	; (8007610 <HAL_RCC_OscConfig+0x4cc>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d4:	f7fb fbe4 	bl	8002da0 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075dc:	f7fb fbe0 	bl	8002da0 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e026      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075ee:	4b06      	ldr	r3, [pc, #24]	; (8007608 <HAL_RCC_OscConfig+0x4c4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f0      	bne.n	80075dc <HAL_RCC_OscConfig+0x498>
 80075fa:	e01e      	b.n	800763a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d107      	bne.n	8007614 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e019      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
 8007608:	40021000 	.word	0x40021000
 800760c:	40007000 	.word	0x40007000
 8007610:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_RCC_OscConfig+0x500>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	429a      	cmp	r2, r3
 8007626:	d106      	bne.n	8007636 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007632:	429a      	cmp	r2, r3
 8007634:	d001      	beq.n	800763a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	40021000 	.word	0x40021000

08007648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0d0      	b.n	80077fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800765c:	4b6a      	ldr	r3, [pc, #424]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d910      	bls.n	800768c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766a:	4b67      	ldr	r3, [pc, #412]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f023 0207 	bic.w	r2, r3, #7
 8007672:	4965      	ldr	r1, [pc, #404]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	4313      	orrs	r3, r2
 8007678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767a:	4b63      	ldr	r3, [pc, #396]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0307 	and.w	r3, r3, #7
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d001      	beq.n	800768c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0b8      	b.n	80077fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d020      	beq.n	80076da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4a58      	ldr	r2, [pc, #352]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80076aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076bc:	4b53      	ldr	r3, [pc, #332]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4a52      	ldr	r2, [pc, #328]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80076c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80076c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076c8:	4b50      	ldr	r3, [pc, #320]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	494d      	ldr	r1, [pc, #308]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d040      	beq.n	8007768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d107      	bne.n	80076fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ee:	4b47      	ldr	r3, [pc, #284]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d115      	bne.n	8007726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e07f      	b.n	80077fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d107      	bne.n	8007716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007706:	4b41      	ldr	r3, [pc, #260]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e073      	b.n	80077fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007716:	4b3d      	ldr	r3, [pc, #244]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e06b      	b.n	80077fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007726:	4b39      	ldr	r3, [pc, #228]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f023 0203 	bic.w	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4936      	ldr	r1, [pc, #216]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007734:	4313      	orrs	r3, r2
 8007736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007738:	f7fb fb32 	bl	8002da0 <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773e:	e00a      	b.n	8007756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007740:	f7fb fb2e 	bl	8002da0 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	f241 3288 	movw	r2, #5000	; 0x1388
 800774e:	4293      	cmp	r3, r2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e053      	b.n	80077fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007756:	4b2d      	ldr	r3, [pc, #180]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 020c 	and.w	r2, r3, #12
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	429a      	cmp	r2, r3
 8007766:	d1eb      	bne.n	8007740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007768:	4b27      	ldr	r3, [pc, #156]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d210      	bcs.n	8007798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007776:	4b24      	ldr	r3, [pc, #144]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f023 0207 	bic.w	r2, r3, #7
 800777e:	4922      	ldr	r1, [pc, #136]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	4313      	orrs	r3, r2
 8007784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007786:	4b20      	ldr	r3, [pc, #128]	; (8007808 <HAL_RCC_ClockConfig+0x1c0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d001      	beq.n	8007798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e032      	b.n	80077fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a4:	4b19      	ldr	r3, [pc, #100]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	4916      	ldr	r1, [pc, #88]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077c2:	4b12      	ldr	r3, [pc, #72]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	490e      	ldr	r1, [pc, #56]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077d6:	f000 f821 	bl	800781c <HAL_RCC_GetSysClockFreq>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	490a      	ldr	r1, [pc, #40]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077e8:	5ccb      	ldrb	r3, [r1, r3]
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	4a09      	ldr	r2, [pc, #36]	; (8007814 <HAL_RCC_ClockConfig+0x1cc>)
 80077f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <HAL_RCC_ClockConfig+0x1d0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fb fa90 	bl	8002d1c <HAL_InitTick>

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	40022000 	.word	0x40022000
 800780c:	40021000 	.word	0x40021000
 8007810:	0800e04c 	.word	0x0800e04c
 8007814:	20000018 	.word	0x20000018
 8007818:	2000001c 	.word	0x2000001c

0800781c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007836:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 030c 	and.w	r3, r3, #12
 8007842:	2b04      	cmp	r3, #4
 8007844:	d002      	beq.n	800784c <HAL_RCC_GetSysClockFreq+0x30>
 8007846:	2b08      	cmp	r3, #8
 8007848:	d003      	beq.n	8007852 <HAL_RCC_GetSysClockFreq+0x36>
 800784a:	e027      	b.n	800789c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800784c:	4b19      	ldr	r3, [pc, #100]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800784e:	613b      	str	r3, [r7, #16]
      break;
 8007850:	e027      	b.n	80078a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	0c9b      	lsrs	r3, r3, #18
 8007856:	f003 030f 	and.w	r3, r3, #15
 800785a:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800785c:	5cd3      	ldrb	r3, [r2, r3]
 800785e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d010      	beq.n	800788c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800786a:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	0c5b      	lsrs	r3, r3, #17
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8007876:	5cd3      	ldrb	r3, [r2, r3]
 8007878:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a0d      	ldr	r2, [pc, #52]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800787e:	fb03 f202 	mul.w	r2, r3, r2
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	e004      	b.n	8007896 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a0c      	ldr	r2, [pc, #48]	; (80078c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007890:	fb02 f303 	mul.w	r3, r2, r3
 8007894:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	613b      	str	r3, [r7, #16]
      break;
 800789a:	e002      	b.n	80078a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800789e:	613b      	str	r3, [r7, #16]
      break;
 80078a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078a2:	693b      	ldr	r3, [r7, #16]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40021000 	.word	0x40021000
 80078b4:	007a1200 	.word	0x007a1200
 80078b8:	0800e064 	.word	0x0800e064
 80078bc:	0800e074 	.word	0x0800e074
 80078c0:	003d0900 	.word	0x003d0900

080078c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80078ca:	681b      	ldr	r3, [r3, #0]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr
 80078d4:	20000018 	.word	0x20000018

080078d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078dc:	f7ff fff2 	bl	80078c4 <HAL_RCC_GetHCLKFreq>
 80078e0:	4602      	mov	r2, r0
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	4903      	ldr	r1, [pc, #12]	; (80078fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ee:	5ccb      	ldrb	r3, [r1, r3]
 80078f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40021000 	.word	0x40021000
 80078fc:	0800e05c 	.word	0x0800e05c

08007900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007904:	f7ff ffde 	bl	80078c4 <HAL_RCC_GetHCLKFreq>
 8007908:	4602      	mov	r2, r0
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	0adb      	lsrs	r3, r3, #11
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4903      	ldr	r1, [pc, #12]	; (8007924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007916:	5ccb      	ldrb	r3, [r1, r3]
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40021000 	.word	0x40021000
 8007924:	0800e05c 	.word	0x0800e05c

08007928 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007930:	4b0a      	ldr	r3, [pc, #40]	; (800795c <RCC_Delay+0x34>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <RCC_Delay+0x38>)
 8007936:	fba2 2303 	umull	r2, r3, r2, r3
 800793a:	0a5b      	lsrs	r3, r3, #9
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	fb02 f303 	mul.w	r3, r2, r3
 8007942:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007944:	bf00      	nop
  }
  while (Delay --);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1e5a      	subs	r2, r3, #1
 800794a:	60fa      	str	r2, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f9      	bne.n	8007944 <RCC_Delay+0x1c>
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr
 800795c:	20000018 	.word	0x20000018
 8007960:	10624dd3 	.word	0x10624dd3

08007964 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d07d      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007980:	2300      	movs	r3, #0
 8007982:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007984:	4b4f      	ldr	r3, [pc, #316]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10d      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007990:	4b4c      	ldr	r3, [pc, #304]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4a4b      	ldr	r2, [pc, #300]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799a:	61d3      	str	r3, [r2, #28]
 800799c:	4b49      	ldr	r3, [pc, #292]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ac:	4b46      	ldr	r3, [pc, #280]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d118      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079b8:	4b43      	ldr	r3, [pc, #268]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a42      	ldr	r2, [pc, #264]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079c4:	f7fb f9ec 	bl	8002da0 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ca:	e008      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079cc:	f7fb f9e8 	bl	8002da0 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b64      	cmp	r3, #100	; 0x64
 80079d8:	d901      	bls.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e06d      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079de:	4b3a      	ldr	r3, [pc, #232]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079ea:	4b36      	ldr	r3, [pc, #216]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d02e      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d027      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a08:	4b2e      	ldr	r3, [pc, #184]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a12:	4b2e      	ldr	r3, [pc, #184]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a18:	4b2c      	ldr	r3, [pc, #176]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007a1e:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d014      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2e:	f7fb f9b7 	bl	8002da0 <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a34:	e00a      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a36:	f7fb f9b3 	bl	8002da0 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e036      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0ee      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a58:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4917      	ldr	r1, [pc, #92]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d105      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a70:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	4a13      	ldr	r2, [pc, #76]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d008      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a88:	4b0e      	ldr	r3, [pc, #56]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	490b      	ldr	r1, [pc, #44]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	4904      	ldr	r1, [pc, #16]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	40007000 	.word	0x40007000
 8007acc:	42420440 	.word	0x42420440

08007ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e041      	b.n	8007b66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fa ffa8 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	f000 fb86 	bl	8008220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d001      	beq.n	8007b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e03a      	b.n	8007bfe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <HAL_TIM_Base_Start_IT+0x98>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x58>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb2:	d009      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x58>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a14      	ldr	r2, [pc, #80]	; (8007c0c <HAL_TIM_Base_Start_IT+0x9c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x58>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <HAL_TIM_Base_Start_IT+0xa0>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d111      	bne.n	8007bec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	d010      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0201 	orr.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bea:	e007      	b.n	8007bfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800

08007c14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e041      	b.n	8007caa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fa ff2c 	bl	8002a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f000 fae4 	bl	8008220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d122      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d11b      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f06f 0202 	mvn.w	r2, #2
 8007cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fa77 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007cfa:	e005      	b.n	8007d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa6a 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa79 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d122      	bne.n	8007d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d11b      	bne.n	8007d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f06f 0204 	mvn.w	r2, #4
 8007d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fa4d 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007d4e:	e005      	b.n	8007d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fa40 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa4f 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d122      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d11b      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f06f 0208 	mvn.w	r2, #8
 8007d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f003 0303 	and.w	r3, r3, #3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa23 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007da2:	e005      	b.n	8007db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fa16 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa25 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d122      	bne.n	8007e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0310 	and.w	r3, r3, #16
 8007dce:	2b10      	cmp	r3, #16
 8007dd0:	d11b      	bne.n	8007e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f06f 0210 	mvn.w	r2, #16
 8007dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2208      	movs	r2, #8
 8007de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f9f9 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007df6:	e005      	b.n	8007e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f9ec 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f9fb 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d10e      	bne.n	8007e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d107      	bne.n	8007e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f06f 0201 	mvn.w	r2, #1
 8007e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7f9 fdb9 	bl	80019a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e40:	2b80      	cmp	r3, #128	; 0x80
 8007e42:	d10e      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4e:	2b80      	cmp	r3, #128	; 0x80
 8007e50:	d107      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fcc6 	bl	80087ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d10e      	bne.n	8007e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b40      	cmp	r3, #64	; 0x40
 8007e7c:	d107      	bne.n	8007e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f9bf 	bl	800820c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d10e      	bne.n	8007eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d107      	bne.n	8007eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f06f 0220 	mvn.w	r2, #32
 8007eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fc91 	bl	80087dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e0ae      	b.n	8008040 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b0c      	cmp	r3, #12
 8007eee:	f200 809f 	bhi.w	8008030 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ef2:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f2d 	.word	0x08007f2d
 8007efc:	08008031 	.word	0x08008031
 8007f00:	08008031 	.word	0x08008031
 8007f04:	08008031 	.word	0x08008031
 8007f08:	08007f6d 	.word	0x08007f6d
 8007f0c:	08008031 	.word	0x08008031
 8007f10:	08008031 	.word	0x08008031
 8007f14:	08008031 	.word	0x08008031
 8007f18:	08007faf 	.word	0x08007faf
 8007f1c:	08008031 	.word	0x08008031
 8007f20:	08008031 	.word	0x08008031
 8007f24:	08008031 	.word	0x08008031
 8007f28:	08007fef 	.word	0x08007fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f9d6 	bl	80082e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0208 	orr.w	r2, r2, #8
 8007f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0204 	bic.w	r2, r2, #4
 8007f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6999      	ldr	r1, [r3, #24]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	619a      	str	r2, [r3, #24]
      break;
 8007f6a:	e064      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fa1c 	bl	80083b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699a      	ldr	r2, [r3, #24]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6999      	ldr	r1, [r3, #24]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	021a      	lsls	r2, r3, #8
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	619a      	str	r2, [r3, #24]
      break;
 8007fac:	e043      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fa65 	bl	8008484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0208 	orr.w	r2, r2, #8
 8007fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0204 	bic.w	r2, r2, #4
 8007fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69d9      	ldr	r1, [r3, #28]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	61da      	str	r2, [r3, #28]
      break;
 8007fec:	e023      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 faaf 	bl	8008558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69d9      	ldr	r1, [r3, #28]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	021a      	lsls	r2, r3, #8
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	61da      	str	r2, [r3, #28]
      break;
 800802e:	e002      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
      break;
 8008034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_TIM_ConfigClockSource+0x1c>
 8008060:	2302      	movs	r3, #2
 8008062:	e0b4      	b.n	80081ce <HAL_TIM_ConfigClockSource+0x186>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800808a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800809c:	d03e      	beq.n	800811c <HAL_TIM_ConfigClockSource+0xd4>
 800809e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a2:	f200 8087 	bhi.w	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080aa:	f000 8086 	beq.w	80081ba <HAL_TIM_ConfigClockSource+0x172>
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b2:	d87f      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080b4:	2b70      	cmp	r3, #112	; 0x70
 80080b6:	d01a      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0xa6>
 80080b8:	2b70      	cmp	r3, #112	; 0x70
 80080ba:	d87b      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080bc:	2b60      	cmp	r3, #96	; 0x60
 80080be:	d050      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x11a>
 80080c0:	2b60      	cmp	r3, #96	; 0x60
 80080c2:	d877      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080c4:	2b50      	cmp	r3, #80	; 0x50
 80080c6:	d03c      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0xfa>
 80080c8:	2b50      	cmp	r3, #80	; 0x50
 80080ca:	d873      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d058      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x13a>
 80080d0:	2b40      	cmp	r3, #64	; 0x40
 80080d2:	d86f      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080d4:	2b30      	cmp	r3, #48	; 0x30
 80080d6:	d064      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080d8:	2b30      	cmp	r3, #48	; 0x30
 80080da:	d86b      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d060      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d867      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d05c      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080e8:	2b10      	cmp	r3, #16
 80080ea:	d05a      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080ec:	e062      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080fe:	f000 faf0 	bl	80086e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	609a      	str	r2, [r3, #8]
      break;
 800811a:	e04f      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800812c:	f000 fad9 	bl	80086e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800813e:	609a      	str	r2, [r3, #8]
      break;
 8008140:	e03c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800814e:	461a      	mov	r2, r3
 8008150:	f000 fa50 	bl	80085f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2150      	movs	r1, #80	; 0x50
 800815a:	4618      	mov	r0, r3
 800815c:	f000 faa7 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 8008160:	e02c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800816e:	461a      	mov	r2, r3
 8008170:	f000 fa6e 	bl	8008650 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2160      	movs	r1, #96	; 0x60
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fa97 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 8008180:	e01c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	461a      	mov	r2, r3
 8008190:	f000 fa30 	bl	80085f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2140      	movs	r1, #64	; 0x40
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fa87 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 80081a0:	e00c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f000 fa7e 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 80081b2:	e003      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
      break;
 80081b8:	e000      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr

080081fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr

0800820c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
	...

08008220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a29      	ldr	r2, [pc, #164]	; (80082d8 <TIM_Base_SetConfig+0xb8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00b      	beq.n	8008250 <TIM_Base_SetConfig+0x30>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823e:	d007      	beq.n	8008250 <TIM_Base_SetConfig+0x30>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a26      	ldr	r2, [pc, #152]	; (80082dc <TIM_Base_SetConfig+0xbc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_Base_SetConfig+0x30>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a25      	ldr	r2, [pc, #148]	; (80082e0 <TIM_Base_SetConfig+0xc0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d108      	bne.n	8008262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a1c      	ldr	r2, [pc, #112]	; (80082d8 <TIM_Base_SetConfig+0xb8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_Base_SetConfig+0x62>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008270:	d007      	beq.n	8008282 <TIM_Base_SetConfig+0x62>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a19      	ldr	r2, [pc, #100]	; (80082dc <TIM_Base_SetConfig+0xbc>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_Base_SetConfig+0x62>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a18      	ldr	r2, [pc, #96]	; (80082e0 <TIM_Base_SetConfig+0xc0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a07      	ldr	r2, [pc, #28]	; (80082d8 <TIM_Base_SetConfig+0xb8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d103      	bne.n	80082c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr
 80082d8:	40012c00 	.word	0x40012c00
 80082dc:	40000400 	.word	0x40000400
 80082e0:	40000800 	.word	0x40000800

080082e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	f023 0201 	bic.w	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0303 	bic.w	r3, r3, #3
 800831a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f023 0302 	bic.w	r3, r3, #2
 800832c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4313      	orrs	r3, r2
 8008336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <TIM_OC1_SetConfig+0xc8>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d10c      	bne.n	800835a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f023 0308 	bic.w	r3, r3, #8
 8008346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f023 0304 	bic.w	r3, r3, #4
 8008358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <TIM_OC1_SetConfig+0xc8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d111      	bne.n	8008386 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	621a      	str	r2, [r3, #32]
}
 80083a0:	bf00      	nop
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	40012c00 	.word	0x40012c00

080083b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	f023 0210 	bic.w	r2, r3, #16
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f023 0320 	bic.w	r3, r3, #32
 80083fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <TIM_OC2_SetConfig+0xd0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10d      	bne.n	800842c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a14      	ldr	r2, [pc, #80]	; (8008480 <TIM_OC2_SetConfig+0xd0>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d113      	bne.n	800845c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800843a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	621a      	str	r2, [r3, #32]
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr
 8008480:	40012c00 	.word	0x40012c00

08008484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	021b      	lsls	r3, r3, #8
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <TIM_OC3_SetConfig+0xd0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d10d      	bne.n	80084fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	021b      	lsls	r3, r3, #8
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a14      	ldr	r2, [pc, #80]	; (8008554 <TIM_OC3_SetConfig+0xd0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d113      	bne.n	800852e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800850c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	621a      	str	r2, [r3, #32]
}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40012c00 	.word	0x40012c00

08008558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800858e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4313      	orrs	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	031b      	lsls	r3, r3, #12
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a0f      	ldr	r2, [pc, #60]	; (80085f0 <TIM_OC4_SetConfig+0x98>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d109      	bne.n	80085cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	019b      	lsls	r3, r3, #6
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bc80      	pop	{r7}
 80085ee:	4770      	bx	lr
 80085f0:	40012c00 	.word	0x40012c00

080085f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f023 0201 	bic.w	r2, r3, #1
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800861e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f023 030a 	bic.w	r3, r3, #10
 8008630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	621a      	str	r2, [r3, #32]
}
 8008646:	bf00      	nop
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr

08008650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	f023 0210 	bic.w	r2, r3, #16
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800867a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	031b      	lsls	r3, r3, #12
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4313      	orrs	r3, r2
 8008684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800868c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	621a      	str	r2, [r3, #32]
}
 80086a4:	bf00      	nop
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f043 0307 	orr.w	r3, r3, #7
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	609a      	str	r2, [r3, #8]
}
 80086d8:	bf00      	nop
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b087      	sub	sp, #28
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
 80086ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	021a      	lsls	r2, r3, #8
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	431a      	orrs	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4313      	orrs	r3, r2
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	609a      	str	r2, [r3, #8]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008730:	2b01      	cmp	r3, #1
 8008732:	d101      	bne.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008734:	2302      	movs	r3, #2
 8008736:	e046      	b.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00e      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008784:	d009      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a12      	ldr	r2, [pc, #72]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d004      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d10c      	bne.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	40000400 	.word	0x40000400
 80087d8:	40000800 	.word	0x40000800

080087dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr

080087ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e042      	b.n	8008898 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fa f988 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2224      	movs	r2, #36	; 0x24
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fcd5 	bl	80091f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	691a      	ldr	r2, [r3, #16]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	695a      	ldr	r2, [r3, #20]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d112      	bne.n	80088e0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <HAL_UART_Receive_IT+0x26>
 80088c0:	88fb      	ldrh	r3, [r7, #6]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e00b      	b.n	80088e2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088d0:	88fb      	ldrh	r3, [r7, #6]
 80088d2:	461a      	mov	r2, r3
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fab7 	bl	8008e4a <UART_Start_Receive_IT>
 80088dc:	4603      	mov	r3, r0
 80088de:	e000      	b.n	80088e2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80088e0:	2302      	movs	r3, #2
  }
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b0ba      	sub	sp, #232	; 0xe8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008912:	2300      	movs	r3, #0
 8008914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008918:	2300      	movs	r3, #0
 800891a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800891e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800892a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10f      	bne.n	8008952 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <HAL_UART_IRQHandler+0x66>
 800893e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fb93 	bl	8009076 <UART_Receive_IT>
      return;
 8008950:	e25b      	b.n	8008e0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 80de 	beq.w	8008b18 <HAL_UART_IRQHandler+0x22c>
 800895c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800896c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80d1 	beq.w	8008b18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00b      	beq.n	800899a <HAL_UART_IRQHandler+0xae>
 8008982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008992:	f043 0201 	orr.w	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <HAL_UART_IRQHandler+0xd2>
 80089a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b6:	f043 0202 	orr.w	r2, r3, #2
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <HAL_UART_IRQHandler+0xf6>
 80089ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089da:	f043 0204 	orr.w	r2, r3, #4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d011      	beq.n	8008a12 <HAL_UART_IRQHandler+0x126>
 80089ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	f043 0208 	orr.w	r2, r3, #8
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 81f2 	beq.w	8008e00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d008      	beq.n	8008a3a <HAL_UART_IRQHandler+0x14e>
 8008a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fb1e 	bl	8009076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <HAL_UART_IRQHandler+0x17a>
 8008a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d04f      	beq.n	8008b06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa28 	bl	8008ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d041      	beq.n	8008afe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3314      	adds	r3, #20
 8008a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3314      	adds	r3, #20
 8008aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1d9      	bne.n	8008a7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d013      	beq.n	8008af6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	4a7e      	ldr	r2, [pc, #504]	; (8008ccc <HAL_UART_IRQHandler+0x3e0>)
 8008ad4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fa ff54 	bl	8003988 <HAL_DMA_Abort_IT>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af4:	e00e      	b.n	8008b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f993 	bl	8008e22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008afc:	e00a      	b.n	8008b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f98f 	bl	8008e22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b04:	e006      	b.n	8008b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f98b 	bl	8008e22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008b12:	e175      	b.n	8008e00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b14:	bf00      	nop
    return;
 8008b16:	e173      	b.n	8008e00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	f040 814f 	bne.w	8008dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b26:	f003 0310 	and.w	r3, r3, #16
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 8148 	beq.w	8008dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8141 	beq.w	8008dc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60bb      	str	r3, [r7, #8]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	60bb      	str	r3, [r7, #8]
 8008b52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 80b6 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 8145 	beq.w	8008e04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b82:	429a      	cmp	r2, r3
 8008b84:	f080 813e 	bcs.w	8008e04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	f000 8088 	beq.w	8008cac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	330c      	adds	r3, #12
 8008bc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bc8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1d9      	bne.n	8008b9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3314      	adds	r3, #20
 8008bee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bfa:	f023 0301 	bic.w	r3, r3, #1
 8008bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e1      	bne.n	8008be8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3314      	adds	r3, #20
 8008c2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3314      	adds	r3, #20
 8008c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e3      	bne.n	8008c24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	330c      	adds	r3, #12
 8008c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c7c:	f023 0310 	bic.w	r3, r3, #16
 8008c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e3      	bne.n	8008c6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fa fe32 	bl	8003910 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f8b6 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cc8:	e09c      	b.n	8008e04 <HAL_UART_IRQHandler+0x518>
 8008cca:	bf00      	nop
 8008ccc:	08008f81 	.word	0x08008f81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 808e 	beq.w	8008e08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 8089 	beq.w	8008e08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	330c      	adds	r3, #12
 8008d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8008d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e3      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3314      	adds	r3, #20
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3314      	adds	r3, #20
 8008d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d52:	633a      	str	r2, [r7, #48]	; 0x30
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e3      	bne.n	8008d2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0310 	bic.w	r3, r3, #16
 8008d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	330c      	adds	r3, #12
 8008d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d98:	61fa      	str	r2, [r7, #28]
 8008d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	69b9      	ldr	r1, [r7, #24]
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	617b      	str	r3, [r7, #20]
   return(result);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e3      	bne.n	8008d74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008db2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f83b 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dbe:	e023      	b.n	8008e08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d009      	beq.n	8008de0 <HAL_UART_IRQHandler+0x4f4>
 8008dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f8e5 	bl	8008fa8 <UART_Transmit_IT>
    return;
 8008dde:	e014      	b.n	8008e0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00e      	beq.n	8008e0a <HAL_UART_IRQHandler+0x51e>
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d008      	beq.n	8008e0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f924 	bl	8009046 <UART_EndTransmit_IT>
    return;
 8008dfe:	e004      	b.n	8008e0a <HAL_UART_IRQHandler+0x51e>
    return;
 8008e00:	bf00      	nop
 8008e02:	e002      	b.n	8008e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8008e04:	bf00      	nop
 8008e06:	e000      	b.n	8008e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8008e08:	bf00      	nop
  }
}
 8008e0a:	37e8      	adds	r7, #232	; 0xe8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr

08008e22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr

08008e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bc80      	pop	{r7}
 8008e48:	4770      	bx	lr

08008e4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	4613      	mov	r3, r2
 8008e56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	88fa      	ldrh	r2, [r7, #6]
 8008e62:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2222      	movs	r2, #34	; 0x22
 8008e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e8e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695a      	ldr	r2, [r3, #20]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0220 	orr.w	r2, r2, #32
 8008eae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b095      	sub	sp, #84	; 0x54
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ee4:	643a      	str	r2, [r7, #64]	; 0x40
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3314      	adds	r3, #20
 8008efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f023 0301 	bic.w	r3, r3, #1
 8008f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3314      	adds	r3, #20
 8008f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e5      	bne.n	8008ef8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d119      	bne.n	8008f68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f023 0310 	bic.w	r3, r3, #16
 8008f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	330c      	adds	r3, #12
 8008f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f54:	61ba      	str	r2, [r7, #24]
 8008f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	6979      	ldr	r1, [r7, #20]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	613b      	str	r3, [r7, #16]
   return(result);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e5      	bne.n	8008f34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f76:	bf00      	nop
 8008f78:	3754      	adds	r7, #84	; 0x54
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff ff41 	bl	8008e22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b21      	cmp	r3, #33	; 0x21
 8008fba:	d13e      	bne.n	800903a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc4:	d114      	bne.n	8008ff0 <UART_Transmit_IT+0x48>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d110      	bne.n	8008ff0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fe2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	1c9a      	adds	r2, r3, #2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	621a      	str	r2, [r3, #32]
 8008fee:	e008      	b.n	8009002 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	1c59      	adds	r1, r3, #1
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6211      	str	r1, [r2, #32]
 8008ffa:	781a      	ldrb	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009006:	b29b      	uxth	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	b29b      	uxth	r3, r3
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4619      	mov	r1, r3
 8009010:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10f      	bne.n	8009036 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009024:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009034:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	e000      	b.n	800903c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800903a:	2302      	movs	r3, #2
  }
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	bc80      	pop	{r7}
 8009044:	4770      	bx	lr

08009046 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800905c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff fed2 	bl	8008e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b08c      	sub	sp, #48	; 0x30
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b22      	cmp	r3, #34	; 0x22
 8009088:	f040 80ae 	bne.w	80091e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009094:	d117      	bne.n	80090c6 <UART_Receive_IT+0x50>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d113      	bne.n	80090c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090be:	1c9a      	adds	r2, r3, #2
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	629a      	str	r2, [r3, #40]	; 0x28
 80090c4:	e026      	b.n	8009114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80090cc:	2300      	movs	r3, #0
 80090ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d8:	d007      	beq.n	80090ea <UART_Receive_IT+0x74>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <UART_Receive_IT+0x82>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d106      	bne.n	80090f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e008      	b.n	800910a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009104:	b2da      	uxtb	r2, r3
 8009106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009118:	b29b      	uxth	r3, r3
 800911a:	3b01      	subs	r3, #1
 800911c:	b29b      	uxth	r3, r3
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	4619      	mov	r1, r3
 8009122:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009124:	2b00      	cmp	r3, #0
 8009126:	d15d      	bne.n	80091e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0220 	bic.w	r2, r2, #32
 8009136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	695a      	ldr	r2, [r3, #20]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 0201 	bic.w	r2, r2, #1
 8009156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2220      	movs	r2, #32
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	2b01      	cmp	r3, #1
 800916c:	d135      	bne.n	80091da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	330c      	adds	r3, #12
 800917a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	613b      	str	r3, [r7, #16]
   return(result);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f023 0310 	bic.w	r3, r3, #16
 800918a:	627b      	str	r3, [r7, #36]	; 0x24
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009194:	623a      	str	r2, [r7, #32]
 8009196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	69f9      	ldr	r1, [r7, #28]
 800919a:	6a3a      	ldr	r2, [r7, #32]
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e5      	bne.n	8009174 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b10      	cmp	r3, #16
 80091b4:	d10a      	bne.n	80091cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff fe2e 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
 80091d8:	e002      	b.n	80091e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7f8 fc80 	bl	8001ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	e002      	b.n	80091ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	e000      	b.n	80091ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80091e8:	2302      	movs	r3, #2
  }
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3730      	adds	r7, #48	; 0x30
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	430a      	orrs	r2, r1
 8009210:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	431a      	orrs	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800922e:	f023 030c 	bic.w	r3, r3, #12
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	430b      	orrs	r3, r1
 800923a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a2c      	ldr	r2, [pc, #176]	; (8009308 <UART_SetConfig+0x114>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d103      	bne.n	8009264 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800925c:	f7fe fb50 	bl	8007900 <HAL_RCC_GetPCLK2Freq>
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	e002      	b.n	800926a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009264:	f7fe fb38 	bl	80078d8 <HAL_RCC_GetPCLK1Freq>
 8009268:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	4613      	mov	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	009a      	lsls	r2, r3, #2
 8009274:	441a      	add	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009280:	4a22      	ldr	r2, [pc, #136]	; (800930c <UART_SetConfig+0x118>)
 8009282:	fba2 2303 	umull	r2, r3, r2, r3
 8009286:	095b      	lsrs	r3, r3, #5
 8009288:	0119      	lsls	r1, r3, #4
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	009a      	lsls	r2, r3, #2
 8009294:	441a      	add	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	fbb2 f2f3 	udiv	r2, r2, r3
 80092a0:	4b1a      	ldr	r3, [pc, #104]	; (800930c <UART_SetConfig+0x118>)
 80092a2:	fba3 0302 	umull	r0, r3, r3, r2
 80092a6:	095b      	lsrs	r3, r3, #5
 80092a8:	2064      	movs	r0, #100	; 0x64
 80092aa:	fb00 f303 	mul.w	r3, r0, r3
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	3332      	adds	r3, #50	; 0x32
 80092b4:	4a15      	ldr	r2, [pc, #84]	; (800930c <UART_SetConfig+0x118>)
 80092b6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ba:	095b      	lsrs	r3, r3, #5
 80092bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092c0:	4419      	add	r1, r3
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009a      	lsls	r2, r3, #2
 80092cc:	441a      	add	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80092d8:	4b0c      	ldr	r3, [pc, #48]	; (800930c <UART_SetConfig+0x118>)
 80092da:	fba3 0302 	umull	r0, r3, r3, r2
 80092de:	095b      	lsrs	r3, r3, #5
 80092e0:	2064      	movs	r0, #100	; 0x64
 80092e2:	fb00 f303 	mul.w	r3, r0, r3
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	3332      	adds	r3, #50	; 0x32
 80092ec:	4a07      	ldr	r2, [pc, #28]	; (800930c <UART_SetConfig+0x118>)
 80092ee:	fba2 2303 	umull	r2, r3, r2, r3
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	f003 020f 	and.w	r2, r3, #15
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	440a      	add	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	40013800 	.word	0x40013800
 800930c:	51eb851f 	.word	0x51eb851f

08009310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009310:	b084      	sub	sp, #16
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	f107 0014 	add.w	r0, r7, #20
 800931e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	b004      	add	sp, #16
 800932e:	4770      	bx	lr

08009330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009340:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009344:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009364:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009368:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	b29b      	uxth	r3, r3
 8009376:	43db      	mvns	r3, r3
 8009378:	b29b      	uxth	r3, r3
 800937a:	4013      	ands	r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr

08009390 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr

080093a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80093a8:	b084      	sub	sp, #16
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	f107 0014 	add.w	r0, r7, #20
 80093b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	b004      	add	sp, #16
 80093e6:	4770      	bx	lr

080093e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b09d      	sub	sp, #116	; 0x74
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800940a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	78db      	ldrb	r3, [r3, #3]
 8009416:	2b03      	cmp	r3, #3
 8009418:	d81f      	bhi.n	800945a <USB_ActivateEndpoint+0x72>
 800941a:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <USB_ActivateEndpoint+0x38>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009431 	.word	0x08009431
 8009424:	0800944d 	.word	0x0800944d
 8009428:	08009463 	.word	0x08009463
 800942c:	0800943f 	.word	0x0800943f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009430:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009438:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800943c:	e012      	b.n	8009464 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800943e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009442:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009446:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800944a:	e00b      	b.n	8009464 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800944c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009454:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009458:	e004      	b.n	8009464 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009460:	e000      	b.n	8009464 <USB_ActivateEndpoint+0x7c>
      break;
 8009462:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	441a      	add	r2, r3
 800946e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800947a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009482:	b29b      	uxth	r3, r3
 8009484:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800949c:	b29a      	uxth	r2, r3
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	441a      	add	r2, r3
 80094b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80094b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	7b1b      	ldrb	r3, [r3, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f040 8178 	bne.w	80097c6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8084 	beq.w	80095e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	61bb      	str	r3, [r7, #24]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	4413      	add	r3, r2
 80094f2:	61bb      	str	r3, [r7, #24]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	011a      	lsls	r2, r3, #4
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	88db      	ldrh	r3, [r3, #6]
 8009508:	085b      	lsrs	r3, r3, #1
 800950a:	b29b      	uxth	r3, r3
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	827b      	strh	r3, [r7, #18]
 8009522:	8a7b      	ldrh	r3, [r7, #18]
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01b      	beq.n	8009564 <USB_ActivateEndpoint+0x17c>
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800953e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009542:	823b      	strh	r3, [r7, #16]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	441a      	add	r2, r3
 800954e:	8a3b      	ldrh	r3, [r7, #16]
 8009550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800955c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009560:	b29b      	uxth	r3, r3
 8009562:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	78db      	ldrb	r3, [r3, #3]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d020      	beq.n	80095ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800957e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009582:	81bb      	strh	r3, [r7, #12]
 8009584:	89bb      	ldrh	r3, [r7, #12]
 8009586:	f083 0320 	eor.w	r3, r3, #32
 800958a:	81bb      	strh	r3, [r7, #12]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	441a      	add	r2, r3
 8009596:	89bb      	ldrh	r3, [r7, #12]
 8009598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800959c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	8013      	strh	r3, [r2, #0]
 80095ac:	e2d5      	b.n	8009b5a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c4:	81fb      	strh	r3, [r7, #14]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	441a      	add	r2, r3
 80095d0:	89fb      	ldrh	r3, [r7, #14]
 80095d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	8013      	strh	r3, [r2, #0]
 80095e6:	e2b8      	b.n	8009b5a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	4413      	add	r3, r2
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	011a      	lsls	r2, r3, #4
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	4413      	add	r3, r2
 8009606:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	88db      	ldrh	r3, [r3, #6]
 8009610:	085b      	lsrs	r3, r3, #1
 8009612:	b29b      	uxth	r3, r3
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	b29a      	uxth	r2, r3
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009626:	b29b      	uxth	r3, r3
 8009628:	461a      	mov	r2, r3
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	4413      	add	r3, r2
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	011a      	lsls	r2, r3, #4
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	4413      	add	r3, r2
 800963a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
 8009646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800964a:	b29a      	uxth	r2, r3
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	801a      	strh	r2, [r3, #0]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b3e      	cmp	r3, #62	; 0x3e
 8009656:	d91d      	bls.n	8009694 <USB_ActivateEndpoint+0x2ac>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	095b      	lsrs	r3, r3, #5
 800965e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f003 031f 	and.w	r3, r3, #31
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <USB_ActivateEndpoint+0x28a>
 800966c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800966e:	3b01      	subs	r3, #1
 8009670:	66bb      	str	r3, [r7, #104]	; 0x68
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	b29a      	uxth	r2, r3
 8009678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800967a:	b29b      	uxth	r3, r3
 800967c:	029b      	lsls	r3, r3, #10
 800967e:	b29b      	uxth	r3, r3
 8009680:	4313      	orrs	r3, r2
 8009682:	b29b      	uxth	r3, r3
 8009684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968c:	b29a      	uxth	r2, r3
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	801a      	strh	r2, [r3, #0]
 8009692:	e026      	b.n	80096e2 <USB_ActivateEndpoint+0x2fa>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10a      	bne.n	80096b2 <USB_ActivateEndpoint+0x2ca>
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	e017      	b.n	80096e2 <USB_ActivateEndpoint+0x2fa>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <USB_ActivateEndpoint+0x2e4>
 80096c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096c8:	3301      	adds	r3, #1
 80096ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	029b      	lsls	r3, r3, #10
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4313      	orrs	r3, r2
 80096dc:	b29a      	uxth	r2, r3
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80096f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01b      	beq.n	8009732 <USB_ActivateEndpoint+0x34a>
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	b29b      	uxth	r3, r3
 8009708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009710:	843b      	strh	r3, [r7, #32]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	441a      	add	r2, r3
 800971c:	8c3b      	ldrh	r3, [r7, #32]
 800971e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800972a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972e:	b29b      	uxth	r3, r3
 8009730:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d124      	bne.n	8009784 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	b29b      	uxth	r3, r3
 8009748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800974c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009750:	83bb      	strh	r3, [r7, #28]
 8009752:	8bbb      	ldrh	r3, [r7, #28]
 8009754:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009758:	83bb      	strh	r3, [r7, #28]
 800975a:	8bbb      	ldrh	r3, [r7, #28]
 800975c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009760:	83bb      	strh	r3, [r7, #28]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	441a      	add	r2, r3
 800976c:	8bbb      	ldrh	r3, [r7, #28]
 800976e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800977a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800977e:	b29b      	uxth	r3, r3
 8009780:	8013      	strh	r3, [r2, #0]
 8009782:	e1ea      	b.n	8009b5a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	b29b      	uxth	r3, r3
 8009792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979a:	83fb      	strh	r3, [r7, #30]
 800979c:	8bfb      	ldrh	r3, [r7, #30]
 800979e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097a2:	83fb      	strh	r3, [r7, #30]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	441a      	add	r2, r3
 80097ae:	8bfb      	ldrh	r3, [r7, #30]
 80097b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	8013      	strh	r3, [r2, #0]
 80097c4:	e1c9      	b.n	8009b5a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	78db      	ldrb	r3, [r3, #3]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d11e      	bne.n	800980c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	441a      	add	r2, r3
 80097f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80097f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009806:	b29b      	uxth	r3, r3
 8009808:	8013      	strh	r3, [r2, #0]
 800980a:	e01d      	b.n	8009848 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800981e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009822:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	441a      	add	r2, r3
 8009830:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800983c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009844:	b29b      	uxth	r3, r3
 8009846:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009852:	b29b      	uxth	r3, r3
 8009854:	461a      	mov	r2, r3
 8009856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009858:	4413      	add	r3, r2
 800985a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	011a      	lsls	r2, r3, #4
 8009862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009864:	4413      	add	r3, r2
 8009866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800986a:	65bb      	str	r3, [r7, #88]	; 0x58
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	891b      	ldrh	r3, [r3, #8]
 8009870:	085b      	lsrs	r3, r3, #1
 8009872:	b29b      	uxth	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	657b      	str	r3, [r7, #84]	; 0x54
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009886:	b29b      	uxth	r3, r3
 8009888:	461a      	mov	r2, r3
 800988a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800988c:	4413      	add	r3, r2
 800988e:	657b      	str	r3, [r7, #84]	; 0x54
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	011a      	lsls	r2, r3, #4
 8009896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009898:	4413      	add	r3, r2
 800989a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800989e:	653b      	str	r3, [r7, #80]	; 0x50
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	895b      	ldrh	r3, [r3, #10]
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 8093 	bne.w	80099e0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80098ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d01b      	beq.n	800990e <USB_ActivateEndpoint+0x526>
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	441a      	add	r2, r3
 80098f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80098fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990a:	b29b      	uxth	r3, r3
 800990c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800991c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800991e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009922:	2b00      	cmp	r3, #0
 8009924:	d01b      	beq.n	800995e <USB_ActivateEndpoint+0x576>
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	441a      	add	r2, r3
 8009948:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800994a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800995a:	b29b      	uxth	r3, r3
 800995c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	b29b      	uxth	r3, r3
 800996c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009974:	873b      	strh	r3, [r7, #56]	; 0x38
 8009976:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009978:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800997c:	873b      	strh	r3, [r7, #56]	; 0x38
 800997e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009980:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009984:	873b      	strh	r3, [r7, #56]	; 0x38
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	441a      	add	r2, r3
 8009990:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	441a      	add	r2, r3
 80099c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099da:	b29b      	uxth	r3, r3
 80099dc:	8013      	strh	r3, [r2, #0]
 80099de:	e0bc      	b.n	8009b5a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80099f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01d      	beq.n	8009a38 <USB_ActivateEndpoint+0x650>
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	441a      	add	r2, r3
 8009a20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009a48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01d      	beq.n	8009a90 <USB_ActivateEndpoint+0x6a8>
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	441a      	add	r2, r3
 8009a78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	78db      	ldrb	r3, [r3, #3]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d024      	beq.n	8009ae2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009ab2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009ab6:	f083 0320 	eor.w	r3, r3, #32
 8009aba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	441a      	add	r2, r3
 8009ac8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	8013      	strh	r3, [r2, #0]
 8009ae0:	e01d      	b.n	8009b1e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009b5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3774      	adds	r7, #116	; 0x74
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b08d      	sub	sp, #52	; 0x34
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	7b1b      	ldrb	r3, [r3, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f040 808e 	bne.w	8009c98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d044      	beq.n	8009c0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	81bb      	strh	r3, [r7, #12]
 8009b92:	89bb      	ldrh	r3, [r7, #12]
 8009b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d01b      	beq.n	8009bd4 <USB_DeactivateEndpoint+0x6c>
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb2:	817b      	strh	r3, [r7, #10]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	441a      	add	r2, r3
 8009bbe:	897b      	ldrh	r3, [r7, #10]
 8009bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bea:	813b      	strh	r3, [r7, #8]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	441a      	add	r2, r3
 8009bf6:	893b      	ldrh	r3, [r7, #8]
 8009bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	8013      	strh	r3, [r2, #0]
 8009c0c:	e192      	b.n	8009f34 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	827b      	strh	r3, [r7, #18]
 8009c1c:	8a7b      	ldrh	r3, [r7, #18]
 8009c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d01b      	beq.n	8009c5e <USB_DeactivateEndpoint+0xf6>
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3c:	823b      	strh	r3, [r7, #16]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	441a      	add	r2, r3
 8009c48:	8a3b      	ldrh	r3, [r7, #16]
 8009c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c74:	81fb      	strh	r3, [r7, #14]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	441a      	add	r2, r3
 8009c80:	89fb      	ldrh	r3, [r7, #14]
 8009c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	8013      	strh	r3, [r2, #0]
 8009c96:	e14d      	b.n	8009f34 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 80a5 	bne.w	8009dec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	843b      	strh	r3, [r7, #32]
 8009cb0:	8c3b      	ldrh	r3, [r7, #32]
 8009cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01b      	beq.n	8009cf2 <USB_DeactivateEndpoint+0x18a>
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd0:	83fb      	strh	r3, [r7, #30]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	441a      	add	r2, r3
 8009cdc:	8bfb      	ldrh	r3, [r7, #30]
 8009cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	83bb      	strh	r3, [r7, #28]
 8009d00:	8bbb      	ldrh	r3, [r7, #28]
 8009d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d01b      	beq.n	8009d42 <USB_DeactivateEndpoint+0x1da>
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d20:	837b      	strh	r3, [r7, #26]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	441a      	add	r2, r3
 8009d2c:	8b7b      	ldrh	r3, [r7, #26]
 8009d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d58:	833b      	strh	r3, [r7, #24]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	441a      	add	r2, r3
 8009d64:	8b3b      	ldrh	r3, [r7, #24]
 8009d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d90:	82fb      	strh	r3, [r7, #22]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	441a      	add	r2, r3
 8009d9c:	8afb      	ldrh	r3, [r7, #22]
 8009d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dc8:	82bb      	strh	r3, [r7, #20]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	441a      	add	r2, r3
 8009dd4:	8abb      	ldrh	r3, [r7, #20]
 8009dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	8013      	strh	r3, [r2, #0]
 8009dea:	e0a3      	b.n	8009f34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01b      	beq.n	8009e3c <USB_DeactivateEndpoint+0x2d4>
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	441a      	add	r2, r3
 8009e26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009e4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d01b      	beq.n	8009e8c <USB_DeactivateEndpoint+0x324>
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	441a      	add	r2, r3
 8009e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	441a      	add	r2, r3
 8009eae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	441a      	add	r2, r3
 8009ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f12:	847b      	strh	r3, [r7, #34]	; 0x22
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	441a      	add	r2, r3
 8009f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3734      	adds	r7, #52	; 0x34
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bc80      	pop	{r7}
 8009f3e:	4770      	bx	lr

08009f40 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b0c2      	sub	sp, #264	; 0x108
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f4e:	6018      	str	r0, [r3, #0]
 8009f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f58:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	f040 86b7 	bne.w	800acda <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699a      	ldr	r2, [r3, #24]
 8009f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d908      	bls.n	8009f9a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f98:	e007      	b.n	8009faa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	7b1b      	ldrb	r3, [r3, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d13a      	bne.n	800a030 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6959      	ldr	r1, [r3, #20]
 8009fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	88da      	ldrh	r2, [r3, #6]
 8009fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009fdc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009fe0:	6800      	ldr	r0, [r0, #0]
 8009fe2:	f001 fc9c 	bl	800b91e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	613b      	str	r3, [r7, #16]
 8009ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a000:	b29b      	uxth	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	4413      	add	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
 800a00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	011a      	lsls	r2, r3, #4
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	4413      	add	r3, r2
 800a01c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	801a      	strh	r2, [r3, #0]
 800a02c:	f000 be1f 	b.w	800ac6e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	78db      	ldrb	r3, [r3, #3]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	f040 8462 	bne.w	800a906 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6a1a      	ldr	r2, [r3, #32]
 800a04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	f240 83df 	bls.w	800a81e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a086:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	441a      	add	r2, r3
 800a0a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6a1a      	ldr	r2, [r3, #32]
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0cc:	1ad2      	subs	r2, r2, r3
 800a0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 81c7 	beq.w	800a490 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	633b      	str	r3, [r7, #48]	; 0x30
 800a10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	785b      	ldrb	r3, [r3, #1]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d177      	bne.n	800a20e <USB_EPStartXfer+0x2ce>
 800a11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	62bb      	str	r3, [r7, #40]	; 0x28
 800a12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	4413      	add	r3, r2
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28
 800a142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	011a      	lsls	r2, r3, #4
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	4413      	add	r3, r2
 800a154:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a164:	b29a      	uxth	r2, r3
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	801a      	strh	r2, [r3, #0]
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16e:	2b3e      	cmp	r3, #62	; 0x3e
 800a170:	d921      	bls.n	800a1b6 <USB_EPStartXfer+0x276>
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a176:	095b      	lsrs	r3, r3, #5
 800a178:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a180:	f003 031f 	and.w	r3, r3, #31
 800a184:	2b00      	cmp	r3, #0
 800a186:	d104      	bne.n	800a192 <USB_EPStartXfer+0x252>
 800a188:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a18c:	3b01      	subs	r3, #1
 800a18e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29a      	uxth	r2, r3
 800a198:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	029b      	lsls	r3, r3, #10
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	e050      	b.n	800a258 <USB_EPStartXfer+0x318>
 800a1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <USB_EPStartXfer+0x294>
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	801a      	strh	r2, [r3, #0]
 800a1d2:	e041      	b.n	800a258 <USB_EPStartXfer+0x318>
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d8:	085b      	lsrs	r3, r3, #1
 800a1da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d004      	beq.n	800a1f4 <USB_EPStartXfer+0x2b4>
 800a1ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	029b      	lsls	r3, r3, #10
 800a202:	b29b      	uxth	r3, r3
 800a204:	4313      	orrs	r3, r2
 800a206:	b29a      	uxth	r2, r3
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	801a      	strh	r2, [r3, #0]
 800a20c:	e024      	b.n	800a258 <USB_EPStartXfer+0x318>
 800a20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d11c      	bne.n	800a258 <USB_EPStartXfer+0x318>
 800a21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	461a      	mov	r2, r3
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	4413      	add	r3, r2
 800a234:	633b      	str	r3, [r7, #48]	; 0x30
 800a236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	011a      	lsls	r2, r3, #4
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	4413      	add	r3, r2
 800a248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a252:	b29a      	uxth	r2, r3
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	895b      	ldrh	r3, [r3, #10]
 800a264:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6959      	ldr	r1, [r3, #20]
 800a274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a27e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a282:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a286:	6800      	ldr	r0, [r0, #0]
 800a288:	f001 fb49 	bl	800b91e <USB_WritePMA>
            ep->xfer_buff += len;
 800a28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	695a      	ldr	r2, [r3, #20]
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a29c:	441a      	add	r2, r3
 800a29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6a1a      	ldr	r2, [r3, #32]
 800a2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d90f      	bls.n	800a2e6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2d6:	1ad2      	subs	r2, r2, r3
 800a2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	621a      	str	r2, [r3, #32]
 800a2e4:	e00e      	b.n	800a304 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2200      	movs	r2, #0
 800a302:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	785b      	ldrb	r3, [r3, #1]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d177      	bne.n	800a404 <USB_EPStartXfer+0x4c4>
 800a314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	61bb      	str	r3, [r7, #24]
 800a320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a32e:	b29b      	uxth	r3, r3
 800a330:	461a      	mov	r2, r3
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	4413      	add	r3, r2
 800a336:	61bb      	str	r3, [r7, #24]
 800a338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	011a      	lsls	r2, r3, #4
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	4413      	add	r3, r2
 800a34a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	b29b      	uxth	r3, r3
 800a356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	801a      	strh	r2, [r3, #0]
 800a360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a364:	2b3e      	cmp	r3, #62	; 0x3e
 800a366:	d921      	bls.n	800a3ac <USB_EPStartXfer+0x46c>
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36c:	095b      	lsrs	r3, r3, #5
 800a36e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a376:	f003 031f 	and.w	r3, r3, #31
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d104      	bne.n	800a388 <USB_EPStartXfer+0x448>
 800a37e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a382:	3b01      	subs	r3, #1
 800a384:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a392:	b29b      	uxth	r3, r3
 800a394:	029b      	lsls	r3, r3, #10
 800a396:	b29b      	uxth	r3, r3
 800a398:	4313      	orrs	r3, r2
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	801a      	strh	r2, [r3, #0]
 800a3aa:	e056      	b.n	800a45a <USB_EPStartXfer+0x51a>
 800a3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <USB_EPStartXfer+0x48a>
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	801a      	strh	r2, [r3, #0]
 800a3c8:	e047      	b.n	800a45a <USB_EPStartXfer+0x51a>
 800a3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ce:	085b      	lsrs	r3, r3, #1
 800a3d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <USB_EPStartXfer+0x4aa>
 800a3e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	029b      	lsls	r3, r3, #10
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	e02a      	b.n	800a45a <USB_EPStartXfer+0x51a>
 800a404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d122      	bne.n	800a45a <USB_EPStartXfer+0x51a>
 800a414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	623b      	str	r3, [r7, #32]
 800a420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a42e:	b29b      	uxth	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	4413      	add	r3, r2
 800a436:	623b      	str	r3, [r7, #32]
 800a438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	011a      	lsls	r2, r3, #4
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	4413      	add	r3, r2
 800a44a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a44e:	61fb      	str	r3, [r7, #28]
 800a450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a454:	b29a      	uxth	r2, r3
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	891b      	ldrh	r3, [r3, #8]
 800a466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6959      	ldr	r1, [r3, #20]
 800a476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a480:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a484:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a488:	6800      	ldr	r0, [r0, #0]
 800a48a:	f001 fa48 	bl	800b91e <USB_WritePMA>
 800a48e:	e3ee      	b.n	800ac6e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d177      	bne.n	800a590 <USB_EPStartXfer+0x650>
 800a4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c0:	4413      	add	r3, r2
 800a4c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	011a      	lsls	r2, r3, #4
 800a4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a4da:	647b      	str	r3, [r7, #68]	; 0x44
 800a4dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ea:	801a      	strh	r2, [r3, #0]
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f0:	2b3e      	cmp	r3, #62	; 0x3e
 800a4f2:	d921      	bls.n	800a538 <USB_EPStartXfer+0x5f8>
 800a4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f8:	095b      	lsrs	r3, r3, #5
 800a4fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a502:	f003 031f 	and.w	r3, r3, #31
 800a506:	2b00      	cmp	r3, #0
 800a508:	d104      	bne.n	800a514 <USB_EPStartXfer+0x5d4>
 800a50a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a50e:	3b01      	subs	r3, #1
 800a510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b29a      	uxth	r2, r3
 800a51a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a51e:	b29b      	uxth	r3, r3
 800a520:	029b      	lsls	r3, r3, #10
 800a522:	b29b      	uxth	r3, r3
 800a524:	4313      	orrs	r3, r2
 800a526:	b29b      	uxth	r3, r3
 800a528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a52c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a530:	b29a      	uxth	r2, r3
 800a532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a534:	801a      	strh	r2, [r3, #0]
 800a536:	e056      	b.n	800a5e6 <USB_EPStartXfer+0x6a6>
 800a538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <USB_EPStartXfer+0x616>
 800a540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	b29b      	uxth	r3, r3
 800a546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a54a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a54e:	b29a      	uxth	r2, r3
 800a550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a552:	801a      	strh	r2, [r3, #0]
 800a554:	e047      	b.n	800a5e6 <USB_EPStartXfer+0x6a6>
 800a556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55a:	085b      	lsrs	r3, r3, #1
 800a55c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d004      	beq.n	800a576 <USB_EPStartXfer+0x636>
 800a56c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a570:	3301      	adds	r3, #1
 800a572:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a580:	b29b      	uxth	r3, r3
 800a582:	029b      	lsls	r3, r3, #10
 800a584:	b29b      	uxth	r3, r3
 800a586:	4313      	orrs	r3, r2
 800a588:	b29a      	uxth	r2, r3
 800a58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a58c:	801a      	strh	r2, [r3, #0]
 800a58e:	e02a      	b.n	800a5e6 <USB_EPStartXfer+0x6a6>
 800a590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	785b      	ldrb	r3, [r3, #1]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d122      	bne.n	800a5e6 <USB_EPStartXfer+0x6a6>
 800a5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c0:	4413      	add	r3, r2
 800a5c2:	653b      	str	r3, [r7, #80]	; 0x50
 800a5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	011a      	lsls	r2, r3, #4
 800a5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	891b      	ldrh	r3, [r3, #8]
 800a5f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6959      	ldr	r1, [r3, #20]
 800a602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a606:	b29b      	uxth	r3, r3
 800a608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a60c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a610:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a614:	6800      	ldr	r0, [r0, #0]
 800a616:	f001 f982 	bl	800b91e <USB_WritePMA>
            ep->xfer_buff += len;
 800a61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695a      	ldr	r2, [r3, #20]
 800a626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62a:	441a      	add	r2, r3
 800a62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6a1a      	ldr	r2, [r3, #32]
 800a644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	429a      	cmp	r2, r3
 800a652:	d90f      	bls.n	800a674 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6a1a      	ldr	r2, [r3, #32]
 800a660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a664:	1ad2      	subs	r2, r2, r3
 800a666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	621a      	str	r2, [r3, #32]
 800a672:	e00e      	b.n	800a692 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2200      	movs	r2, #0
 800a690:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	643b      	str	r3, [r7, #64]	; 0x40
 800a69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	785b      	ldrb	r3, [r3, #1]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d177      	bne.n	800a79e <USB_EPStartXfer+0x85e>
 800a6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	4413      	add	r3, r2
 800a6d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	011a      	lsls	r2, r3, #4
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f8:	801a      	strh	r2, [r3, #0]
 800a6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fe:	2b3e      	cmp	r3, #62	; 0x3e
 800a700:	d921      	bls.n	800a746 <USB_EPStartXfer+0x806>
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	095b      	lsrs	r3, r3, #5
 800a708:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a710:	f003 031f 	and.w	r3, r3, #31
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <USB_EPStartXfer+0x7e2>
 800a718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a71c:	3b01      	subs	r3, #1
 800a71e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	b29a      	uxth	r2, r3
 800a728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	029b      	lsls	r3, r3, #10
 800a730:	b29b      	uxth	r3, r3
 800a732:	4313      	orrs	r3, r2
 800a734:	b29b      	uxth	r3, r3
 800a736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a73a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a73e:	b29a      	uxth	r2, r3
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	801a      	strh	r2, [r3, #0]
 800a744:	e050      	b.n	800a7e8 <USB_EPStartXfer+0x8a8>
 800a746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10a      	bne.n	800a764 <USB_EPStartXfer+0x824>
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	801a      	strh	r2, [r3, #0]
 800a762:	e041      	b.n	800a7e8 <USB_EPStartXfer+0x8a8>
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a768:	085b      	lsrs	r3, r3, #1
 800a76a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <USB_EPStartXfer+0x844>
 800a77a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a77e:	3301      	adds	r3, #1
 800a780:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29a      	uxth	r2, r3
 800a78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a78e:	b29b      	uxth	r3, r3
 800a790:	029b      	lsls	r3, r3, #10
 800a792:	b29b      	uxth	r3, r3
 800a794:	4313      	orrs	r3, r2
 800a796:	b29a      	uxth	r2, r3
 800a798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79a:	801a      	strh	r2, [r3, #0]
 800a79c:	e024      	b.n	800a7e8 <USB_EPStartXfer+0x8a8>
 800a79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	785b      	ldrb	r3, [r3, #1]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d11c      	bne.n	800a7e8 <USB_EPStartXfer+0x8a8>
 800a7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c2:	4413      	add	r3, r2
 800a7c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	011a      	lsls	r2, r3, #4
 800a7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	895b      	ldrh	r3, [r3, #10]
 800a7f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6959      	ldr	r1, [r3, #20]
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a80e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a812:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a816:	6800      	ldr	r0, [r0, #0]
 800a818:	f001 f881 	bl	800b91e <USB_WritePMA>
 800a81c:	e227      	b.n	800ac6e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4413      	add	r3, r2
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a854:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	441a      	add	r2, r3
 800a872:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a87a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a87e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a886:	b29b      	uxth	r3, r3
 800a888:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8aa:	4413      	add	r3, r2
 800a8ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	011a      	lsls	r2, r3, #4
 800a8bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8be:	4413      	add	r3, r2
 800a8c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	891b      	ldrh	r3, [r3, #8]
 800a8dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6959      	ldr	r1, [r3, #20]
 800a8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a8f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a8fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a8fe:	6800      	ldr	r0, [r0, #0]
 800a900:	f001 f80d 	bl	800b91e <USB_WritePMA>
 800a904:	e1b3      	b.n	800ac6e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6a1a      	ldr	r2, [r3, #32]
 800a912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	b29b      	uxth	r3, r3
 800a942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 80c6 	beq.w	800aad8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	673b      	str	r3, [r7, #112]	; 0x70
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	785b      	ldrb	r3, [r3, #1]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d177      	bne.n	800aa58 <USB_EPStartXfer+0xb18>
 800a968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a96c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	66bb      	str	r3, [r7, #104]	; 0x68
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a982:	b29b      	uxth	r3, r3
 800a984:	461a      	mov	r2, r3
 800a986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a988:	4413      	add	r3, r2
 800a98a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	011a      	lsls	r2, r3, #4
 800a99a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a9a2:	667b      	str	r3, [r7, #100]	; 0x64
 800a9a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9b2:	801a      	strh	r2, [r3, #0]
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b8:	2b3e      	cmp	r3, #62	; 0x3e
 800a9ba:	d921      	bls.n	800aa00 <USB_EPStartXfer+0xac0>
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ca:	f003 031f 	and.w	r3, r3, #31
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d104      	bne.n	800a9dc <USB_EPStartXfer+0xa9c>
 800a9d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	029b      	lsls	r3, r3, #10
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	e050      	b.n	800aaa2 <USB_EPStartXfer+0xb62>
 800aa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <USB_EPStartXfer+0xade>
 800aa08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa1a:	801a      	strh	r2, [r3, #0]
 800aa1c:	e041      	b.n	800aaa2 <USB_EPStartXfer+0xb62>
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa22:	085b      	lsrs	r3, r3, #1
 800aa24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <USB_EPStartXfer+0xafe>
 800aa34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aa38:	3301      	adds	r3, #1
 800aa3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa54:	801a      	strh	r2, [r3, #0]
 800aa56:	e024      	b.n	800aaa2 <USB_EPStartXfer+0xb62>
 800aa58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	785b      	ldrb	r3, [r3, #1]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d11c      	bne.n	800aaa2 <USB_EPStartXfer+0xb62>
 800aa68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa7c:	4413      	add	r3, r2
 800aa7e:	673b      	str	r3, [r7, #112]	; 0x70
 800aa80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	011a      	lsls	r2, r3, #4
 800aa8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa90:	4413      	add	r3, r2
 800aa92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaa0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aaa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	895b      	ldrh	r3, [r3, #10]
 800aaae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6959      	ldr	r1, [r3, #20]
 800aabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aac8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aacc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aad0:	6800      	ldr	r0, [r0, #0]
 800aad2:	f000 ff24 	bl	800b91e <USB_WritePMA>
 800aad6:	e0ca      	b.n	800ac6e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aadc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d177      	bne.n	800abd8 <USB_EPStartXfer+0xc98>
 800aae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	461a      	mov	r2, r3
 800ab06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab08:	4413      	add	r3, r2
 800ab0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	011a      	lsls	r2, r3, #4
 800ab1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab22:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab32:	801a      	strh	r2, [r3, #0]
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab38:	2b3e      	cmp	r3, #62	; 0x3e
 800ab3a:	d921      	bls.n	800ab80 <USB_EPStartXfer+0xc40>
 800ab3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab40:	095b      	lsrs	r3, r3, #5
 800ab42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4a:	f003 031f 	and.w	r3, r3, #31
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d104      	bne.n	800ab5c <USB_EPStartXfer+0xc1c>
 800ab52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab56:	3b01      	subs	r3, #1
 800ab58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab5e:	881b      	ldrh	r3, [r3, #0]
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	029b      	lsls	r3, r3, #10
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab7c:	801a      	strh	r2, [r3, #0]
 800ab7e:	e05c      	b.n	800ac3a <USB_EPStartXfer+0xcfa>
 800ab80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10a      	bne.n	800ab9e <USB_EPStartXfer+0xc5e>
 800ab88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab9a:	801a      	strh	r2, [r3, #0]
 800ab9c:	e04d      	b.n	800ac3a <USB_EPStartXfer+0xcfa>
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba2:	085b      	lsrs	r3, r3, #1
 800aba4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <USB_EPStartXfer+0xc7e>
 800abb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800abb8:	3301      	adds	r3, #1
 800abba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800abbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800abc8:	b29b      	uxth	r3, r3
 800abca:	029b      	lsls	r3, r3, #10
 800abcc:	b29b      	uxth	r3, r3
 800abce:	4313      	orrs	r3, r2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abd4:	801a      	strh	r2, [r3, #0]
 800abd6:	e030      	b.n	800ac3a <USB_EPStartXfer+0xcfa>
 800abd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d128      	bne.n	800ac3a <USB_EPStartXfer+0xcfa>
 800abe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	461a      	mov	r2, r3
 800ac08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	011a      	lsls	r2, r3, #4
 800ac20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac24:	4413      	add	r3, r2
 800ac26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	891b      	ldrh	r3, [r3, #8]
 800ac46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6959      	ldr	r1, [r3, #20]
 800ac56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac68:	6800      	ldr	r0, [r0, #0]
 800ac6a:	f000 fe58 	bl	800b91e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ac6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac94:	817b      	strh	r3, [r7, #10]
 800ac96:	897b      	ldrh	r3, [r7, #10]
 800ac98:	f083 0310 	eor.w	r3, r3, #16
 800ac9c:	817b      	strh	r3, [r7, #10]
 800ac9e:	897b      	ldrh	r3, [r7, #10]
 800aca0:	f083 0320 	eor.w	r3, r3, #32
 800aca4:	817b      	strh	r3, [r7, #10]
 800aca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	441a      	add	r2, r3
 800acc0:	897b      	ldrh	r3, [r7, #10]
 800acc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	8013      	strh	r3, [r2, #0]
 800acd6:	f000 bcde 	b.w	800b696 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800acda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	7b1b      	ldrb	r3, [r3, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f040 80bb 	bne.w	800ae62 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800acec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	699a      	ldr	r2, [r3, #24]
 800acf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d917      	bls.n	800ad38 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ad08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ad18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad28:	1ad2      	subs	r2, r2, r3
 800ad2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	619a      	str	r2, [r3, #24]
 800ad36:	e00e      	b.n	800ad56 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ad38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ad48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2200      	movs	r2, #0
 800ad54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	461a      	mov	r2, r3
 800ad76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	011a      	lsls	r2, r3, #4
 800ad8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad92:	4413      	add	r3, r2
 800ad94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ad9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adae:	801a      	strh	r2, [r3, #0]
 800adb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb4:	2b3e      	cmp	r3, #62	; 0x3e
 800adb6:	d924      	bls.n	800ae02 <USB_EPStartXfer+0xec2>
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbc:	095b      	lsrs	r3, r3, #5
 800adbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	f003 031f 	and.w	r3, r3, #31
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d104      	bne.n	800add8 <USB_EPStartXfer+0xe98>
 800adce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800add2:	3b01      	subs	r3, #1
 800add4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800add8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29a      	uxth	r2, r3
 800ade0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	029b      	lsls	r3, r3, #10
 800ade8:	b29b      	uxth	r3, r3
 800adea:	4313      	orrs	r3, r2
 800adec:	b29b      	uxth	r3, r3
 800adee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adfc:	801a      	strh	r2, [r3, #0]
 800adfe:	f000 bc10 	b.w	800b622 <USB_EPStartXfer+0x16e2>
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10c      	bne.n	800ae24 <USB_EPStartXfer+0xee4>
 800ae0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae20:	801a      	strh	r2, [r3, #0]
 800ae22:	e3fe      	b.n	800b622 <USB_EPStartXfer+0x16e2>
 800ae24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae28:	085b      	lsrs	r3, r3, #1
 800ae2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <USB_EPStartXfer+0xf04>
 800ae3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	029b      	lsls	r3, r3, #10
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	4313      	orrs	r3, r2
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae5e:	801a      	strh	r2, [r3, #0]
 800ae60:	e3df      	b.n	800b622 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ae62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	78db      	ldrb	r3, [r3, #3]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	f040 8218 	bne.w	800b2a4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ae74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	785b      	ldrb	r3, [r3, #1]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f040 809d 	bne.w	800afc0 <USB_EPStartXfer+0x1080>
 800ae86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	461a      	mov	r2, r3
 800aea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aeaa:	4413      	add	r3, r2
 800aeac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aeb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	011a      	lsls	r2, r3, #4
 800aebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aec2:	4413      	add	r3, r2
 800aec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aede:	801a      	strh	r2, [r3, #0]
 800aee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	2b3e      	cmp	r3, #62	; 0x3e
 800aeee:	d92b      	bls.n	800af48 <USB_EPStartXfer+0x1008>
 800aef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	095b      	lsrs	r3, r3, #5
 800aefe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f003 031f 	and.w	r3, r3, #31
 800af12:	2b00      	cmp	r3, #0
 800af14:	d104      	bne.n	800af20 <USB_EPStartXfer+0xfe0>
 800af16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1a:	3b01      	subs	r3, #1
 800af1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	b29a      	uxth	r2, r3
 800af28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	029b      	lsls	r3, r3, #10
 800af30:	b29b      	uxth	r3, r3
 800af32:	4313      	orrs	r3, r2
 800af34:	b29b      	uxth	r3, r3
 800af36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af3e:	b29a      	uxth	r2, r3
 800af40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af44:	801a      	strh	r2, [r3, #0]
 800af46:	e070      	b.n	800b02a <USB_EPStartXfer+0x10ea>
 800af48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10c      	bne.n	800af72 <USB_EPStartXfer+0x1032>
 800af58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af68:	b29a      	uxth	r2, r3
 800af6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af6e:	801a      	strh	r2, [r3, #0]
 800af70:	e05b      	b.n	800b02a <USB_EPStartXfer+0x10ea>
 800af72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	085b      	lsrs	r3, r3, #1
 800af80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d004      	beq.n	800afa2 <USB_EPStartXfer+0x1062>
 800af98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9c:	3301      	adds	r3, #1
 800af9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afae:	b29b      	uxth	r3, r3
 800afb0:	029b      	lsls	r3, r3, #10
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	4313      	orrs	r3, r2
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afbc:	801a      	strh	r2, [r3, #0]
 800afbe:	e034      	b.n	800b02a <USB_EPStartXfer+0x10ea>
 800afc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	785b      	ldrb	r3, [r3, #1]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d12c      	bne.n	800b02a <USB_EPStartXfer+0x10ea>
 800afd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afec:	b29b      	uxth	r3, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aff4:	4413      	add	r3, r2
 800aff6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800affa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	011a      	lsls	r2, r3, #4
 800b008:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b00c:	4413      	add	r3, r2
 800b00e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	b29a      	uxth	r2, r3
 800b024:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b028:	801a      	strh	r2, [r3, #0]
 800b02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	785b      	ldrb	r3, [r3, #1]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 809d 	bne.w	800b184 <USB_EPStartXfer+0x1244>
 800b04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b066:	b29b      	uxth	r3, r3
 800b068:	461a      	mov	r2, r3
 800b06a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b06e:	4413      	add	r3, r2
 800b070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	011a      	lsls	r2, r3, #4
 800b082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b086:	4413      	add	r3, r2
 800b088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b08c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b29b      	uxth	r3, r3
 800b098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0a2:	801a      	strh	r2, [r3, #0]
 800b0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	2b3e      	cmp	r3, #62	; 0x3e
 800b0b2:	d92b      	bls.n	800b10c <USB_EPStartXfer+0x11cc>
 800b0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	095b      	lsrs	r3, r3, #5
 800b0c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 031f 	and.w	r3, r3, #31
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d104      	bne.n	800b0e4 <USB_EPStartXfer+0x11a4>
 800b0da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	029b      	lsls	r3, r3, #10
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b102:	b29a      	uxth	r2, r3
 800b104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b108:	801a      	strh	r2, [r3, #0]
 800b10a:	e069      	b.n	800b1e0 <USB_EPStartXfer+0x12a0>
 800b10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10c      	bne.n	800b136 <USB_EPStartXfer+0x11f6>
 800b11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	b29b      	uxth	r3, r3
 800b124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b132:	801a      	strh	r2, [r3, #0]
 800b134:	e054      	b.n	800b1e0 <USB_EPStartXfer+0x12a0>
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	085b      	lsrs	r3, r3, #1
 800b144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b14c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <USB_EPStartXfer+0x1226>
 800b15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b160:	3301      	adds	r3, #1
 800b162:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b166:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b172:	b29b      	uxth	r3, r3
 800b174:	029b      	lsls	r3, r3, #10
 800b176:	b29b      	uxth	r3, r3
 800b178:	4313      	orrs	r3, r2
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b180:	801a      	strh	r2, [r3, #0]
 800b182:	e02d      	b.n	800b1e0 <USB_EPStartXfer+0x12a0>
 800b184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d125      	bne.n	800b1e0 <USB_EPStartXfer+0x12a0>
 800b194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	011a      	lsls	r2, r3, #4
 800b1be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 8218 	beq.w	800b622 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b212:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d005      	beq.n	800b22a <USB_EPStartXfer+0x12ea>
 800b21e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10d      	bne.n	800b246 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b22a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b22e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b232:	2b00      	cmp	r3, #0
 800b234:	f040 81f5 	bne.w	800b622 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b238:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b240:	2b00      	cmp	r3, #0
 800b242:	f040 81ee 	bne.w	800b622 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	b29b      	uxth	r3, r3
 800b264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b26c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	441a      	add	r2, r3
 800b28a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b28e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b29a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	8013      	strh	r3, [r2, #0]
 800b2a2:	e1be      	b.n	800b622 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	78db      	ldrb	r3, [r3, #3]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	f040 81b4 	bne.w	800b61e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	699a      	ldr	r2, [r3, #24]
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d917      	bls.n	800b302 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	699a      	ldr	r2, [r3, #24]
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f2:	1ad2      	subs	r2, r2, r3
 800b2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	619a      	str	r2, [r3, #24]
 800b300:	e00e      	b.n	800b320 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2200      	movs	r2, #0
 800b31e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	785b      	ldrb	r3, [r3, #1]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f040 8085 	bne.w	800b43c <USB_EPStartXfer+0x14fc>
 800b332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b34e:	b29b      	uxth	r3, r3
 800b350:	461a      	mov	r2, r3
 800b352:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b356:	4413      	add	r3, r2
 800b358:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	011a      	lsls	r2, r3, #4
 800b36a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b36e:	4413      	add	r3, r2
 800b370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b378:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b384:	b29a      	uxth	r2, r3
 800b386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b38a:	801a      	strh	r2, [r3, #0]
 800b38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b390:	2b3e      	cmp	r3, #62	; 0x3e
 800b392:	d923      	bls.n	800b3dc <USB_EPStartXfer+0x149c>
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b398:	095b      	lsrs	r3, r3, #5
 800b39a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a2:	f003 031f 	and.w	r3, r3, #31
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d104      	bne.n	800b3b4 <USB_EPStartXfer+0x1474>
 800b3aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	029b      	lsls	r3, r3, #10
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3d8:	801a      	strh	r2, [r3, #0]
 800b3da:	e060      	b.n	800b49e <USB_EPStartXfer+0x155e>
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10c      	bne.n	800b3fe <USB_EPStartXfer+0x14be>
 800b3e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3fa:	801a      	strh	r2, [r3, #0]
 800b3fc:	e04f      	b.n	800b49e <USB_EPStartXfer+0x155e>
 800b3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b402:	085b      	lsrs	r3, r3, #1
 800b404:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d004      	beq.n	800b41e <USB_EPStartXfer+0x14de>
 800b414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b418:	3301      	adds	r3, #1
 800b41a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b41e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b29a      	uxth	r2, r3
 800b426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	029b      	lsls	r3, r3, #10
 800b42e:	b29b      	uxth	r3, r3
 800b430:	4313      	orrs	r3, r2
 800b432:	b29a      	uxth	r2, r3
 800b434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b438:	801a      	strh	r2, [r3, #0]
 800b43a:	e030      	b.n	800b49e <USB_EPStartXfer+0x155e>
 800b43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	785b      	ldrb	r3, [r3, #1]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d128      	bne.n	800b49e <USB_EPStartXfer+0x155e>
 800b44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b468:	b29b      	uxth	r3, r3
 800b46a:	461a      	mov	r2, r3
 800b46c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b470:	4413      	add	r3, r2
 800b472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	011a      	lsls	r2, r3, #4
 800b484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b488:	4413      	add	r3, r2
 800b48a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b48e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b496:	b29a      	uxth	r2, r3
 800b498:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b49c:	801a      	strh	r2, [r3, #0]
 800b49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	785b      	ldrb	r3, [r3, #1]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f040 8085 	bne.w	800b5c8 <USB_EPStartXfer+0x1688>
 800b4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	461a      	mov	r2, r3
 800b4de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	011a      	lsls	r2, r3, #4
 800b4f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4fa:	4413      	add	r3, r2
 800b4fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b504:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b510:	b29a      	uxth	r2, r3
 800b512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b516:	801a      	strh	r2, [r3, #0]
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51c:	2b3e      	cmp	r3, #62	; 0x3e
 800b51e:	d923      	bls.n	800b568 <USB_EPStartXfer+0x1628>
 800b520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b524:	095b      	lsrs	r3, r3, #5
 800b526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52e:	f003 031f 	and.w	r3, r3, #31
 800b532:	2b00      	cmp	r3, #0
 800b534:	d104      	bne.n	800b540 <USB_EPStartXfer+0x1600>
 800b536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b53a:	3b01      	subs	r3, #1
 800b53c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b540:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29a      	uxth	r2, r3
 800b548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	029b      	lsls	r3, r3, #10
 800b550:	b29b      	uxth	r3, r3
 800b552:	4313      	orrs	r3, r2
 800b554:	b29b      	uxth	r3, r3
 800b556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b55a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b55e:	b29a      	uxth	r2, r3
 800b560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b564:	801a      	strh	r2, [r3, #0]
 800b566:	e05c      	b.n	800b622 <USB_EPStartXfer+0x16e2>
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10c      	bne.n	800b58a <USB_EPStartXfer+0x164a>
 800b570:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	b29b      	uxth	r3, r3
 800b578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b57c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b580:	b29a      	uxth	r2, r3
 800b582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b586:	801a      	strh	r2, [r3, #0]
 800b588:	e04b      	b.n	800b622 <USB_EPStartXfer+0x16e2>
 800b58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58e:	085b      	lsrs	r3, r3, #1
 800b590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d004      	beq.n	800b5aa <USB_EPStartXfer+0x166a>
 800b5a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b5aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5ae:	881b      	ldrh	r3, [r3, #0]
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	029b      	lsls	r3, r3, #10
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5c4:	801a      	strh	r2, [r3, #0]
 800b5c6:	e02c      	b.n	800b622 <USB_EPStartXfer+0x16e2>
 800b5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	785b      	ldrb	r3, [r3, #1]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d124      	bne.n	800b622 <USB_EPStartXfer+0x16e2>
 800b5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	011a      	lsls	r2, r3, #4
 800b602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b606:	4413      	add	r3, r2
 800b608:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b60c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b614:	b29a      	uxth	r2, r3
 800b616:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b61a:	801a      	strh	r2, [r3, #0]
 800b61c:	e001      	b.n	800b622 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e03a      	b.n	800b698 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b648:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b64c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b650:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b654:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b658:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b65c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b660:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	441a      	add	r2, r3
 800b67e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b68a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b692:	b29b      	uxth	r3, r3
 800b694:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b085      	sub	sp, #20
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	785b      	ldrb	r3, [r3, #1]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d020      	beq.n	800b6f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ca:	81bb      	strh	r3, [r7, #12]
 800b6cc:	89bb      	ldrh	r3, [r7, #12]
 800b6ce:	f083 0310 	eor.w	r3, r3, #16
 800b6d2:	81bb      	strh	r3, [r7, #12]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	441a      	add	r2, r3
 800b6de:	89bb      	ldrh	r3, [r7, #12]
 800b6e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	8013      	strh	r3, [r2, #0]
 800b6f4:	e01f      	b.n	800b736 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	b29b      	uxth	r3, r3
 800b704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b70c:	81fb      	strh	r3, [r7, #14]
 800b70e:	89fb      	ldrh	r3, [r7, #14]
 800b710:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b714:	81fb      	strh	r3, [r7, #14]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	441a      	add	r2, r3
 800b720:	89fb      	ldrh	r3, [r7, #14]
 800b722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b72a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b72e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b732:	b29b      	uxth	r3, r3
 800b734:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bc80      	pop	{r7}
 800b740:	4770      	bx	lr

0800b742 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b742:	b480      	push	{r7}
 800b744:	b087      	sub	sp, #28
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	7b1b      	ldrb	r3, [r3, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	f040 809d 	bne.w	800b890 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	785b      	ldrb	r3, [r3, #1]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d04c      	beq.n	800b7f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	881b      	ldrh	r3, [r3, #0]
 800b76a:	823b      	strh	r3, [r7, #16]
 800b76c:	8a3b      	ldrh	r3, [r7, #16]
 800b76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b772:	2b00      	cmp	r3, #0
 800b774:	d01b      	beq.n	800b7ae <USB_EPClearStall+0x6c>
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b78c:	81fb      	strh	r3, [r7, #14]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	441a      	add	r2, r3
 800b798:	89fb      	ldrh	r3, [r7, #14]
 800b79a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b79e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	78db      	ldrb	r3, [r3, #3]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d06c      	beq.n	800b890 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4413      	add	r3, r2
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7cc:	81bb      	strh	r3, [r7, #12]
 800b7ce:	89bb      	ldrh	r3, [r7, #12]
 800b7d0:	f083 0320 	eor.w	r3, r3, #32
 800b7d4:	81bb      	strh	r3, [r7, #12]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	441a      	add	r2, r3
 800b7e0:	89bb      	ldrh	r3, [r7, #12]
 800b7e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	8013      	strh	r3, [r2, #0]
 800b7f6:	e04b      	b.n	800b890 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	82fb      	strh	r3, [r7, #22]
 800b806:	8afb      	ldrh	r3, [r7, #22]
 800b808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d01b      	beq.n	800b848 <USB_EPClearStall+0x106>
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4413      	add	r3, r2
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b826:	82bb      	strh	r3, [r7, #20]
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	441a      	add	r2, r3
 800b832:	8abb      	ldrh	r3, [r7, #20]
 800b834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b83c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b844:	b29b      	uxth	r3, r3
 800b846:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	881b      	ldrh	r3, [r3, #0]
 800b854:	b29b      	uxth	r3, r3
 800b856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b85e:	827b      	strh	r3, [r7, #18]
 800b860:	8a7b      	ldrh	r3, [r7, #18]
 800b862:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b866:	827b      	strh	r3, [r7, #18]
 800b868:	8a7b      	ldrh	r3, [r7, #18]
 800b86a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b86e:	827b      	strh	r3, [r7, #18]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	441a      	add	r2, r3
 800b87a:	8a7b      	ldrh	r3, [r7, #18]
 800b87c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	bc80      	pop	{r7}
 800b89a:	4770      	bx	lr

0800b89c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b8a8:	78fb      	ldrb	r3, [r7, #3]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d103      	bne.n	800b8b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2280      	movs	r2, #128	; 0x80
 800b8b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bc80      	pop	{r7}
 800b8c0:	4770      	bx	lr

0800b8c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bc80      	pop	{r7}
 800b8d4:	4770      	bx	lr

0800b8d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bc80      	pop	{r7}
 800b8e8:	4770      	bx	lr

0800b8ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b085      	sub	sp, #20
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	bc80      	pop	{r7}
 800b906:	4770      	bx	lr

0800b908 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr

0800b91e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b91e:	b480      	push	{r7}
 800b920:	b08b      	sub	sp, #44	; 0x2c
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	4611      	mov	r1, r2
 800b92a:	461a      	mov	r2, r3
 800b92c:	460b      	mov	r3, r1
 800b92e:	80fb      	strh	r3, [r7, #6]
 800b930:	4613      	mov	r3, r2
 800b932:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b934:	88bb      	ldrh	r3, [r7, #4]
 800b936:	3301      	adds	r3, #1
 800b938:	085b      	lsrs	r3, r3, #1
 800b93a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b944:	88fb      	ldrh	r3, [r7, #6]
 800b946:	005a      	lsls	r2, r3, #1
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b950:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	627b      	str	r3, [r7, #36]	; 0x24
 800b956:	e01e      	b.n	800b996 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	3301      	adds	r3, #1
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	021b      	lsls	r3, r3, #8
 800b966:	b21a      	sxth	r2, r3
 800b968:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	b21b      	sxth	r3, r3
 800b970:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	8a7a      	ldrh	r2, [r7, #18]
 800b976:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	3302      	adds	r3, #2
 800b97c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	3302      	adds	r3, #2
 800b982:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	3301      	adds	r3, #1
 800b988:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	3301      	adds	r3, #1
 800b98e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	3b01      	subs	r3, #1
 800b994:	627b      	str	r3, [r7, #36]	; 0x24
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1dd      	bne.n	800b958 <USB_WritePMA+0x3a>
  }
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	372c      	adds	r7, #44	; 0x2c
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bc80      	pop	{r7}
 800b9a6:	4770      	bx	lr

0800b9a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b08b      	sub	sp, #44	; 0x2c
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	80fb      	strh	r3, [r7, #6]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b9be:	88bb      	ldrh	r3, [r7, #4]
 800b9c0:	085b      	lsrs	r3, r3, #1
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	005a      	lsls	r2, r3, #1
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e0:	e01b      	b.n	800ba1a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	881b      	ldrh	r3, [r3, #0]
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	3302      	adds	r3, #2
 800b9ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	0a1b      	lsrs	r3, r3, #8
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
 800ba10:	3302      	adds	r3, #2
 800ba12:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	3b01      	subs	r3, #1
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e0      	bne.n	800b9e2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ba20:	88bb      	ldrh	r3, [r7, #4]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d007      	beq.n	800ba3c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	b2da      	uxtb	r2, r3
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	701a      	strb	r2, [r3, #0]
  }
}
 800ba3c:	bf00      	nop
 800ba3e:	372c      	adds	r7, #44	; 0x2c
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bc80      	pop	{r7}
 800ba44:	4770      	bx	lr

0800ba46 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	7c1b      	ldrb	r3, [r3, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d115      	bne.n	800ba8a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba62:	2202      	movs	r2, #2
 800ba64:	2181      	movs	r1, #129	; 0x81
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 fefd 	bl	800d866 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba76:	2202      	movs	r2, #2
 800ba78:	2101      	movs	r1, #1
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 fef3 	bl	800d866 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ba88:	e012      	b.n	800bab0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba8a:	2340      	movs	r3, #64	; 0x40
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	2181      	movs	r1, #129	; 0x81
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f001 fee8 	bl	800d866 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba9c:	2340      	movs	r3, #64	; 0x40
 800ba9e:	2202      	movs	r2, #2
 800baa0:	2101      	movs	r1, #1
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f001 fedf 	bl	800d866 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bab0:	2308      	movs	r3, #8
 800bab2:	2203      	movs	r2, #3
 800bab4:	2182      	movs	r1, #130	; 0x82
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fed5 	bl	800d866 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bac2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bac6:	f001 fff5 	bl	800dab4 <USBD_static_malloc>
 800baca:	4602      	mov	r2, r0
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800badc:	2301      	movs	r3, #1
 800bade:	73fb      	strb	r3, [r7, #15]
 800bae0:	e026      	b.n	800bb30 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7c1b      	ldrb	r3, [r3, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d109      	bne.n	800bb20 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb16:	2101      	movs	r1, #1
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f001 ff95 	bl	800da48 <USBD_LL_PrepareReceive>
 800bb1e:	e007      	b.n	800bb30 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb26:	2340      	movs	r3, #64	; 0x40
 800bb28:	2101      	movs	r1, #1
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f001 ff8c 	bl	800da48 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	460b      	mov	r3, r1
 800bb44:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bb4a:	2181      	movs	r1, #129	; 0x81
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 feb0 	bl	800d8b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bb58:	2101      	movs	r1, #1
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f001 fea9 	bl	800d8b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bb68:	2182      	movs	r1, #130	; 0x82
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f001 fea1 	bl	800d8b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00e      	beq.n	800bb9e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb90:	4618      	mov	r0, r3
 800bb92:	f001 ff9b 	bl	800dacc <USBD_static_free>
    pdev->pClassData = NULL;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d039      	beq.n	800bc46 <USBD_CDC_Setup+0x9e>
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	d17f      	bne.n	800bcd6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	88db      	ldrh	r3, [r3, #6]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d029      	beq.n	800bc32 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	b25b      	sxtb	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	da11      	bge.n	800bc0c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	683a      	ldr	r2, [r7, #0]
 800bbf2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bbf4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	88d2      	ldrh	r2, [r2, #6]
 800bbfa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bbfc:	6939      	ldr	r1, [r7, #16]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	88db      	ldrh	r3, [r3, #6]
 800bc02:	461a      	mov	r2, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 fa0a 	bl	800d01e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bc0a:	e06b      	b.n	800bce4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	785a      	ldrb	r2, [r3, #1]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	88db      	ldrh	r3, [r3, #6]
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bc22:	6939      	ldr	r1, [r7, #16]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	88db      	ldrh	r3, [r3, #6]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f001 fa25 	bl	800d07a <USBD_CtlPrepareRx>
      break;
 800bc30:	e058      	b.n	800bce4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	7850      	ldrb	r0, [r2, #1]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	4798      	blx	r3
      break;
 800bc44:	e04e      	b.n	800bce4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	2b0b      	cmp	r3, #11
 800bc4c:	d02e      	beq.n	800bcac <USBD_CDC_Setup+0x104>
 800bc4e:	2b0b      	cmp	r3, #11
 800bc50:	dc38      	bgt.n	800bcc4 <USBD_CDC_Setup+0x11c>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d002      	beq.n	800bc5c <USBD_CDC_Setup+0xb4>
 800bc56:	2b0a      	cmp	r3, #10
 800bc58:	d014      	beq.n	800bc84 <USBD_CDC_Setup+0xdc>
 800bc5a:	e033      	b.n	800bcc4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d107      	bne.n	800bc76 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bc66:	f107 030c 	add.w	r3, r7, #12
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f001 f9d5 	bl	800d01e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc74:	e02e      	b.n	800bcd4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f001 f966 	bl	800cf4a <USBD_CtlError>
            ret = USBD_FAIL;
 800bc7e:	2302      	movs	r3, #2
 800bc80:	75fb      	strb	r3, [r7, #23]
          break;
 800bc82:	e027      	b.n	800bcd4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d107      	bne.n	800bc9e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc8e:	f107 030f 	add.w	r3, r7, #15
 800bc92:	2201      	movs	r2, #1
 800bc94:	4619      	mov	r1, r3
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f001 f9c1 	bl	800d01e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc9c:	e01a      	b.n	800bcd4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f001 f952 	bl	800cf4a <USBD_CtlError>
            ret = USBD_FAIL;
 800bca6:	2302      	movs	r3, #2
 800bca8:	75fb      	strb	r3, [r7, #23]
          break;
 800bcaa:	e013      	b.n	800bcd4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d00d      	beq.n	800bcd2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800bcb6:	6839      	ldr	r1, [r7, #0]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f001 f946 	bl	800cf4a <USBD_CtlError>
            ret = USBD_FAIL;
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bcc2:	e006      	b.n	800bcd2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 f93f 	bl	800cf4a <USBD_CtlError>
          ret = USBD_FAIL;
 800bccc:	2302      	movs	r3, #2
 800bcce:	75fb      	strb	r3, [r7, #23]
          break;
 800bcd0:	e000      	b.n	800bcd4 <USBD_CDC_Setup+0x12c>
          break;
 800bcd2:	bf00      	nop
      }
      break;
 800bcd4:	e006      	b.n	800bce4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f001 f936 	bl	800cf4a <USBD_CtlError>
      ret = USBD_FAIL;
 800bcde:	2302      	movs	r3, #2
 800bce0:	75fb      	strb	r3, [r7, #23]
      break;
 800bce2:	bf00      	nop
  }

  return ret;
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd00:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd08:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d03a      	beq.n	800bd8a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bd14:	78fa      	ldrb	r2, [r7, #3]
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	440b      	add	r3, r1
 800bd22:	331c      	adds	r3, #28
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d029      	beq.n	800bd7e <USBD_CDC_DataIn+0x90>
 800bd2a:	78fa      	ldrb	r2, [r7, #3]
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	331c      	adds	r3, #28
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	78f9      	ldrb	r1, [r7, #3]
 800bd3e:	68b8      	ldr	r0, [r7, #8]
 800bd40:	460b      	mov	r3, r1
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	440b      	add	r3, r1
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	4403      	add	r3, r0
 800bd4a:	3338      	adds	r3, #56	; 0x38
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd52:	fb01 f303 	mul.w	r3, r1, r3
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d110      	bne.n	800bd7e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bd5c:	78fa      	ldrb	r2, [r7, #3]
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	4613      	mov	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4413      	add	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	440b      	add	r3, r1
 800bd6a:	331c      	adds	r3, #28
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd70:	78f9      	ldrb	r1, [r7, #3]
 800bd72:	2300      	movs	r3, #0
 800bd74:	2200      	movs	r2, #0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f001 fe43 	bl	800da02 <USBD_LL_Transmit>
 800bd7c:	e003      	b.n	800bd86 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	e000      	b.n	800bd8c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bd8a:	2302      	movs	r3, #2
  }
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bda8:	78fb      	ldrb	r3, [r7, #3]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f001 fe6e 	bl	800da8e <USBD_LL_GetRxDataSize>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00d      	beq.n	800bde0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bdd8:	4611      	mov	r1, r2
 800bdda:	4798      	blx	r3

    return USBD_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	e000      	b.n	800bde2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bde0:	2302      	movs	r3, #2
  }
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be00:	2b00      	cmp	r3, #0
 800be02:	d015      	beq.n	800be30 <USBD_CDC_EP0_RxReady+0x46>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be0a:	2bff      	cmp	r3, #255	; 0xff
 800be0c:	d010      	beq.n	800be30 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800be1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be24:	b292      	uxth	r2, r2
 800be26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	22ff      	movs	r2, #255	; 0xff
 800be2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
	...

0800be3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2243      	movs	r2, #67	; 0x43
 800be48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800be4a:	4b03      	ldr	r3, [pc, #12]	; (800be58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	bc80      	pop	{r7}
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	200000ac 	.word	0x200000ac

0800be5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2243      	movs	r2, #67	; 0x43
 800be68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800be6a:	4b03      	ldr	r3, [pc, #12]	; (800be78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	bc80      	pop	{r7}
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	20000068 	.word	0x20000068

0800be7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2243      	movs	r2, #67	; 0x43
 800be88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800be8a:	4b03      	ldr	r3, [pc, #12]	; (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	bc80      	pop	{r7}
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	200000f0 	.word	0x200000f0

0800be9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	220a      	movs	r2, #10
 800bea8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800beaa:	4b03      	ldr	r3, [pc, #12]	; (800beb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bc80      	pop	{r7}
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	20000024 	.word	0x20000024

0800bebc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bec6:	2302      	movs	r3, #2
 800bec8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d005      	beq.n	800bedc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3714      	adds	r7, #20
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bc80      	pop	{r7}
 800bee6:	4770      	bx	lr

0800bee8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf06:	88fa      	ldrh	r2, [r7, #6]
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	371c      	adds	r7, #28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bc80      	pop	{r7}
 800bf18:	4770      	bx	lr

0800bf1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b085      	sub	sp, #20
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bc80      	pop	{r7}
 800bf3e:	4770      	bx	lr

0800bf40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d01c      	beq.n	800bf94 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d115      	bne.n	800bf90 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	2181      	movs	r1, #129	; 0x81
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f001 fd3b 	bl	800da02 <USBD_LL_Transmit>

      return USBD_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e002      	b.n	800bf96 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e000      	b.n	800bf96 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bf94:	2302      	movs	r3, #2
  }
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b084      	sub	sp, #16
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d017      	beq.n	800bfe8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	7c1b      	ldrb	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d109      	bne.n	800bfd4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfca:	2101      	movs	r1, #1
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 fd3b 	bl	800da48 <USBD_LL_PrepareReceive>
 800bfd2:	e007      	b.n	800bfe4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfda:	2340      	movs	r3, #64	; 0x40
 800bfdc:	2101      	movs	r1, #1
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 fd32 	bl	800da48 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	e000      	b.n	800bfea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bfe8:	2302      	movs	r3, #2
  }
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	60f8      	str	r0, [r7, #12]
 800bffa:	60b9      	str	r1, [r7, #8]
 800bffc:	4613      	mov	r3, r2
 800bffe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c006:	2302      	movs	r3, #2
 800c008:	e01a      	b.n	800c040 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	79fa      	ldrb	r2, [r7, #7]
 800c036:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f001 fb9f 	bl	800d77c <USBD_LL_Init>

  return USBD_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d006      	beq.n	800c06a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	73fb      	strb	r3, [r7, #15]
 800c068:	e001      	b.n	800c06e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c06a:	2302      	movs	r3, #2
 800c06c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	bc80      	pop	{r7}
 800c078:	4770      	bx	lr

0800c07a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f001 fbd4 	bl	800d830 <USBD_LL_Start>

  return USBD_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bc80      	pop	{r7}
 800c0a4:	4770      	bx	lr

0800c0a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00c      	beq.n	800c0da <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	78fa      	ldrb	r2, [r7, #3]
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	4798      	blx	r3
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	78fa      	ldrb	r2, [r7, #3]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	4798      	blx	r3

  return USBD_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f000 fed8 	bl	800ced2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2201      	movs	r2, #1
 800c126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c130:	461a      	mov	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c13e:	f003 031f 	and.w	r3, r3, #31
 800c142:	2b02      	cmp	r3, #2
 800c144:	d016      	beq.n	800c174 <USBD_LL_SetupStage+0x6a>
 800c146:	2b02      	cmp	r3, #2
 800c148:	d81c      	bhi.n	800c184 <USBD_LL_SetupStage+0x7a>
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d002      	beq.n	800c154 <USBD_LL_SetupStage+0x4a>
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d008      	beq.n	800c164 <USBD_LL_SetupStage+0x5a>
 800c152:	e017      	b.n	800c184 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 f9cb 	bl	800c4f8 <USBD_StdDevReq>
      break;
 800c162:	e01a      	b.n	800c19a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fa2d 	bl	800c5cc <USBD_StdItfReq>
      break;
 800c172:	e012      	b.n	800c19a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fa6d 	bl	800c65c <USBD_StdEPReq>
      break;
 800c182:	e00a      	b.n	800c19a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c18a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f001 fbac 	bl	800d8f0 <USBD_LL_StallEP>
      break;
 800c198:	bf00      	nop
  }

  return USBD_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	607a      	str	r2, [r7, #4]
 800c1b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c1b2:	7afb      	ldrb	r3, [r7, #11]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d14b      	bne.n	800c250 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d134      	bne.n	800c234 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d919      	bls.n	800c20a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	68da      	ldr	r2, [r3, #12]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	68da      	ldr	r2, [r3, #12]
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d203      	bcs.n	800c1f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	e002      	b.n	800c1fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	461a      	mov	r2, r3
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f000 ff57 	bl	800d0b6 <USBD_CtlContinueRx>
 800c208:	e038      	b.n	800c27c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00a      	beq.n	800c22c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	d105      	bne.n	800c22c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f000 ff54 	bl	800d0da <USBD_CtlSendStatus>
 800c232:	e023      	b.n	800c27c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	d11e      	bne.n	800c27c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c246:	2100      	movs	r1, #0
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f001 fb51 	bl	800d8f0 <USBD_LL_StallEP>
 800c24e:	e015      	b.n	800c27c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c256:	699b      	ldr	r3, [r3, #24]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00d      	beq.n	800c278 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c262:	2b03      	cmp	r3, #3
 800c264:	d108      	bne.n	800c278 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	7afa      	ldrb	r2, [r7, #11]
 800c270:	4611      	mov	r1, r2
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	4798      	blx	r3
 800c276:	e001      	b.n	800c27c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c278:	2302      	movs	r3, #2
 800c27a:	e000      	b.n	800c27e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b086      	sub	sp, #24
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	460b      	mov	r3, r1
 800c290:	607a      	str	r2, [r7, #4]
 800c292:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c294:	7afb      	ldrb	r3, [r7, #11]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d17f      	bne.n	800c39a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3314      	adds	r3, #20
 800c29e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d15c      	bne.n	800c364 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	68da      	ldr	r2, [r3, #12]
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d915      	bls.n	800c2e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	68da      	ldr	r2, [r3, #12]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	1ad2      	subs	r2, r2, r3
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	6879      	ldr	r1, [r7, #4]
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 fec1 	bl	800d056 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2100      	movs	r1, #0
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f001 fbb4 	bl	800da48 <USBD_LL_PrepareReceive>
 800c2e0:	e04e      	b.n	800c380 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	6912      	ldr	r2, [r2, #16]
 800c2ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2ee:	fb01 f202 	mul.w	r2, r1, r2
 800c2f2:	1a9b      	subs	r3, r3, r2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d11c      	bne.n	800c332 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c300:	429a      	cmp	r2, r3
 800c302:	d316      	bcc.n	800c332 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c30e:	429a      	cmp	r2, r3
 800c310:	d20f      	bcs.n	800c332 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c312:	2200      	movs	r2, #0
 800c314:	2100      	movs	r1, #0
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 fe9d 	bl	800d056 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c324:	2300      	movs	r3, #0
 800c326:	2200      	movs	r2, #0
 800c328:	2100      	movs	r1, #0
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f001 fb8c 	bl	800da48 <USBD_LL_PrepareReceive>
 800c330:	e026      	b.n	800c380 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00a      	beq.n	800c354 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c344:	2b03      	cmp	r3, #3
 800c346:	d105      	bne.n	800c354 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c354:	2180      	movs	r1, #128	; 0x80
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f001 faca 	bl	800d8f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 fecf 	bl	800d100 <USBD_CtlReceiveStatus>
 800c362:	e00d      	b.n	800c380 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d004      	beq.n	800c378 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c374:	2b00      	cmp	r3, #0
 800c376:	d103      	bne.n	800c380 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c378:	2180      	movs	r1, #128	; 0x80
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f001 fab8 	bl	800d8f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c386:	2b01      	cmp	r3, #1
 800c388:	d11d      	bne.n	800c3c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f7ff fe81 	bl	800c092 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c398:	e015      	b.n	800c3c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00d      	beq.n	800c3c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d108      	bne.n	800c3c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	7afa      	ldrb	r2, [r7, #11]
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	4798      	blx	r3
 800c3c0:	e001      	b.n	800c3c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	e000      	b.n	800c3c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3d8:	2340      	movs	r3, #64	; 0x40
 800c3da:	2200      	movs	r2, #0
 800c3dc:	2100      	movs	r1, #0
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f001 fa41 	bl	800d866 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2240      	movs	r2, #64	; 0x40
 800c3f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3f4:	2340      	movs	r3, #64	; 0x40
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2180      	movs	r1, #128	; 0x80
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f001 fa33 	bl	800d866 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2240      	movs	r2, #64	; 0x40
 800c40a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c430:	2b00      	cmp	r3, #0
 800c432:	d009      	beq.n	800c448 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	6852      	ldr	r2, [r2, #4]
 800c440:	b2d2      	uxtb	r2, r2
 800c442:	4611      	mov	r1, r2
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	4798      	blx	r3
  }

  return USBD_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c452:	b480      	push	{r7}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	460b      	mov	r3, r1
 800c45c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	78fa      	ldrb	r2, [r7, #3]
 800c462:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bc80      	pop	{r7}
 800c46e:	4770      	bx	lr

0800c470 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2204      	movs	r2, #4
 800c488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	bc80      	pop	{r7}
 800c496:	4770      	bx	lr

0800c498 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4a6:	2b04      	cmp	r3, #4
 800c4a8:	d105      	bne.n	800c4b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bc80      	pop	{r7}
 800c4c0:	4770      	bx	lr

0800c4c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	d10b      	bne.n	800c4ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d005      	beq.n	800c4ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e6:	69db      	ldr	r3, [r3, #28]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
	...

0800c4f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c50e:	2b40      	cmp	r3, #64	; 0x40
 800c510:	d005      	beq.n	800c51e <USBD_StdDevReq+0x26>
 800c512:	2b40      	cmp	r3, #64	; 0x40
 800c514:	d84f      	bhi.n	800c5b6 <USBD_StdDevReq+0xbe>
 800c516:	2b00      	cmp	r3, #0
 800c518:	d009      	beq.n	800c52e <USBD_StdDevReq+0x36>
 800c51a:	2b20      	cmp	r3, #32
 800c51c:	d14b      	bne.n	800c5b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	4798      	blx	r3
      break;
 800c52c:	e048      	b.n	800c5c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	785b      	ldrb	r3, [r3, #1]
 800c532:	2b09      	cmp	r3, #9
 800c534:	d839      	bhi.n	800c5aa <USBD_StdDevReq+0xb2>
 800c536:	a201      	add	r2, pc, #4	; (adr r2, 800c53c <USBD_StdDevReq+0x44>)
 800c538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53c:	0800c58d 	.word	0x0800c58d
 800c540:	0800c5a1 	.word	0x0800c5a1
 800c544:	0800c5ab 	.word	0x0800c5ab
 800c548:	0800c597 	.word	0x0800c597
 800c54c:	0800c5ab 	.word	0x0800c5ab
 800c550:	0800c56f 	.word	0x0800c56f
 800c554:	0800c565 	.word	0x0800c565
 800c558:	0800c5ab 	.word	0x0800c5ab
 800c55c:	0800c583 	.word	0x0800c583
 800c560:	0800c579 	.word	0x0800c579
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f9dc 	bl	800c924 <USBD_GetDescriptor>
          break;
 800c56c:	e022      	b.n	800c5b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fb3f 	bl	800cbf4 <USBD_SetAddress>
          break;
 800c576:	e01d      	b.n	800c5b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fb7e 	bl	800cc7c <USBD_SetConfig>
          break;
 800c580:	e018      	b.n	800c5b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fc07 	bl	800cd98 <USBD_GetConfig>
          break;
 800c58a:	e013      	b.n	800c5b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fc37 	bl	800ce02 <USBD_GetStatus>
          break;
 800c594:	e00e      	b.n	800c5b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fc65 	bl	800ce68 <USBD_SetFeature>
          break;
 800c59e:	e009      	b.n	800c5b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fc74 	bl	800ce90 <USBD_ClrFeature>
          break;
 800c5a8:	e004      	b.n	800c5b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fccc 	bl	800cf4a <USBD_CtlError>
          break;
 800c5b2:	bf00      	nop
      }
      break;
 800c5b4:	e004      	b.n	800c5c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fcc6 	bl	800cf4a <USBD_CtlError>
      break;
 800c5be:	bf00      	nop
  }

  return ret;
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop

0800c5cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5e2:	2b40      	cmp	r3, #64	; 0x40
 800c5e4:	d005      	beq.n	800c5f2 <USBD_StdItfReq+0x26>
 800c5e6:	2b40      	cmp	r3, #64	; 0x40
 800c5e8:	d82e      	bhi.n	800c648 <USBD_StdItfReq+0x7c>
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <USBD_StdItfReq+0x26>
 800c5ee:	2b20      	cmp	r3, #32
 800c5f0:	d12a      	bne.n	800c648 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d81d      	bhi.n	800c63a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	889b      	ldrh	r3, [r3, #4]
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b01      	cmp	r3, #1
 800c606:	d813      	bhi.n	800c630 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	4798      	blx	r3
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	88db      	ldrh	r3, [r3, #6]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d110      	bne.n	800c644 <USBD_StdItfReq+0x78>
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10d      	bne.n	800c644 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fd56 	bl	800d0da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c62e:	e009      	b.n	800c644 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fc89 	bl	800cf4a <USBD_CtlError>
          break;
 800c638:	e004      	b.n	800c644 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fc84 	bl	800cf4a <USBD_CtlError>
          break;
 800c642:	e000      	b.n	800c646 <USBD_StdItfReq+0x7a>
          break;
 800c644:	bf00      	nop
      }
      break;
 800c646:	e004      	b.n	800c652 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fc7d 	bl	800cf4a <USBD_CtlError>
      break;
 800c650:	bf00      	nop
  }

  return USBD_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	889b      	ldrh	r3, [r3, #4]
 800c66e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c678:	2b40      	cmp	r3, #64	; 0x40
 800c67a:	d007      	beq.n	800c68c <USBD_StdEPReq+0x30>
 800c67c:	2b40      	cmp	r3, #64	; 0x40
 800c67e:	f200 8146 	bhi.w	800c90e <USBD_StdEPReq+0x2b2>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00a      	beq.n	800c69c <USBD_StdEPReq+0x40>
 800c686:	2b20      	cmp	r3, #32
 800c688:	f040 8141 	bne.w	800c90e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	4798      	blx	r3
      break;
 800c69a:	e13d      	b.n	800c918 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6a4:	2b20      	cmp	r3, #32
 800c6a6:	d10a      	bne.n	800c6be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	4798      	blx	r3
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	e12d      	b.n	800c91a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	785b      	ldrb	r3, [r3, #1]
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d007      	beq.n	800c6d6 <USBD_StdEPReq+0x7a>
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	f300 811b 	bgt.w	800c902 <USBD_StdEPReq+0x2a6>
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d072      	beq.n	800c7b6 <USBD_StdEPReq+0x15a>
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d03a      	beq.n	800c74a <USBD_StdEPReq+0xee>
 800c6d4:	e115      	b.n	800c902 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d002      	beq.n	800c6e6 <USBD_StdEPReq+0x8a>
 800c6e0:	2b03      	cmp	r3, #3
 800c6e2:	d015      	beq.n	800c710 <USBD_StdEPReq+0xb4>
 800c6e4:	e02b      	b.n	800c73e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6e6:	7bbb      	ldrb	r3, [r7, #14]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00c      	beq.n	800c706 <USBD_StdEPReq+0xaa>
 800c6ec:	7bbb      	ldrb	r3, [r7, #14]
 800c6ee:	2b80      	cmp	r3, #128	; 0x80
 800c6f0:	d009      	beq.n	800c706 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f001 f8fa 	bl	800d8f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c6fc:	2180      	movs	r1, #128	; 0x80
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f001 f8f6 	bl	800d8f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c704:	e020      	b.n	800c748 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fc1e 	bl	800cf4a <USBD_CtlError>
              break;
 800c70e:	e01b      	b.n	800c748 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	885b      	ldrh	r3, [r3, #2]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10e      	bne.n	800c736 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c718:	7bbb      	ldrb	r3, [r7, #14]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <USBD_StdEPReq+0xda>
 800c71e:	7bbb      	ldrb	r3, [r7, #14]
 800c720:	2b80      	cmp	r3, #128	; 0x80
 800c722:	d008      	beq.n	800c736 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	88db      	ldrh	r3, [r3, #6]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d104      	bne.n	800c736 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c72c:	7bbb      	ldrb	r3, [r7, #14]
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f001 f8dd 	bl	800d8f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fccf 	bl	800d0da <USBD_CtlSendStatus>

              break;
 800c73c:	e004      	b.n	800c748 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fc02 	bl	800cf4a <USBD_CtlError>
              break;
 800c746:	bf00      	nop
          }
          break;
 800c748:	e0e0      	b.n	800c90c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c750:	2b02      	cmp	r3, #2
 800c752:	d002      	beq.n	800c75a <USBD_StdEPReq+0xfe>
 800c754:	2b03      	cmp	r3, #3
 800c756:	d015      	beq.n	800c784 <USBD_StdEPReq+0x128>
 800c758:	e026      	b.n	800c7a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c75a:	7bbb      	ldrb	r3, [r7, #14]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00c      	beq.n	800c77a <USBD_StdEPReq+0x11e>
 800c760:	7bbb      	ldrb	r3, [r7, #14]
 800c762:	2b80      	cmp	r3, #128	; 0x80
 800c764:	d009      	beq.n	800c77a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c766:	7bbb      	ldrb	r3, [r7, #14]
 800c768:	4619      	mov	r1, r3
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f001 f8c0 	bl	800d8f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c770:	2180      	movs	r1, #128	; 0x80
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 f8bc 	bl	800d8f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c778:	e01c      	b.n	800c7b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fbe4 	bl	800cf4a <USBD_CtlError>
              break;
 800c782:	e017      	b.n	800c7b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	885b      	ldrh	r3, [r3, #2]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d112      	bne.n	800c7b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c78c:	7bbb      	ldrb	r3, [r7, #14]
 800c78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c792:	2b00      	cmp	r3, #0
 800c794:	d004      	beq.n	800c7a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c796:	7bbb      	ldrb	r3, [r7, #14]
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f001 f8c7 	bl	800d92e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fc9a 	bl	800d0da <USBD_CtlSendStatus>
              }
              break;
 800c7a6:	e004      	b.n	800c7b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fbcd 	bl	800cf4a <USBD_CtlError>
              break;
 800c7b0:	e000      	b.n	800c7b4 <USBD_StdEPReq+0x158>
              break;
 800c7b2:	bf00      	nop
          }
          break;
 800c7b4:	e0aa      	b.n	800c90c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d002      	beq.n	800c7c6 <USBD_StdEPReq+0x16a>
 800c7c0:	2b03      	cmp	r3, #3
 800c7c2:	d032      	beq.n	800c82a <USBD_StdEPReq+0x1ce>
 800c7c4:	e097      	b.n	800c8f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7c6:	7bbb      	ldrb	r3, [r7, #14]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d007      	beq.n	800c7dc <USBD_StdEPReq+0x180>
 800c7cc:	7bbb      	ldrb	r3, [r7, #14]
 800c7ce:	2b80      	cmp	r3, #128	; 0x80
 800c7d0:	d004      	beq.n	800c7dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fbb8 	bl	800cf4a <USBD_CtlError>
                break;
 800c7da:	e091      	b.n	800c900 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	da0b      	bge.n	800c7fc <USBD_StdEPReq+0x1a0>
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
 800c7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	3310      	adds	r3, #16
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	3304      	adds	r3, #4
 800c7fa:	e00b      	b.n	800c814 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7fc:	7bbb      	ldrb	r3, [r7, #14]
 800c7fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c802:	4613      	mov	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	4413      	add	r3, r2
 800c812:	3304      	adds	r3, #4
 800c814:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2202      	movs	r2, #2
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fbfb 	bl	800d01e <USBD_CtlSendData>
              break;
 800c828:	e06a      	b.n	800c900 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c82a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	da11      	bge.n	800c856 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c832:	7bbb      	ldrb	r3, [r7, #14]
 800c834:	f003 020f 	and.w	r2, r3, #15
 800c838:	6879      	ldr	r1, [r7, #4]
 800c83a:	4613      	mov	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	440b      	add	r3, r1
 800c844:	3318      	adds	r3, #24
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d117      	bne.n	800c87c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fb7b 	bl	800cf4a <USBD_CtlError>
                  break;
 800c854:	e054      	b.n	800c900 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	f003 020f 	and.w	r2, r3, #15
 800c85c:	6879      	ldr	r1, [r7, #4]
 800c85e:	4613      	mov	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	4413      	add	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	440b      	add	r3, r1
 800c868:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d104      	bne.n	800c87c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 fb68 	bl	800cf4a <USBD_CtlError>
                  break;
 800c87a:	e041      	b.n	800c900 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c87c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c880:	2b00      	cmp	r3, #0
 800c882:	da0b      	bge.n	800c89c <USBD_StdEPReq+0x240>
 800c884:	7bbb      	ldrb	r3, [r7, #14]
 800c886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	3310      	adds	r3, #16
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	4413      	add	r3, r2
 800c898:	3304      	adds	r3, #4
 800c89a:	e00b      	b.n	800c8b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c89c:	7bbb      	ldrb	r3, [r7, #14]
 800c89e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <USBD_StdEPReq+0x266>
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	2b80      	cmp	r3, #128	; 0x80
 800c8c0:	d103      	bne.n	800c8ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	e00e      	b.n	800c8e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f001 f84c 	bl	800d96c <USBD_LL_IsStallEP>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d003      	beq.n	800c8e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	e002      	b.n	800c8e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fb95 	bl	800d01e <USBD_CtlSendData>
              break;
 800c8f4:	e004      	b.n	800c900 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fb26 	bl	800cf4a <USBD_CtlError>
              break;
 800c8fe:	bf00      	nop
          }
          break;
 800c900:	e004      	b.n	800c90c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fb20 	bl	800cf4a <USBD_CtlError>
          break;
 800c90a:	bf00      	nop
      }
      break;
 800c90c:	e004      	b.n	800c918 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 fb1a 	bl	800cf4a <USBD_CtlError>
      break;
 800c916:	bf00      	nop
  }

  return ret;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c92e:	2300      	movs	r3, #0
 800c930:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c932:	2300      	movs	r3, #0
 800c934:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c936:	2300      	movs	r3, #0
 800c938:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	885b      	ldrh	r3, [r3, #2]
 800c93e:	0a1b      	lsrs	r3, r3, #8
 800c940:	b29b      	uxth	r3, r3
 800c942:	3b01      	subs	r3, #1
 800c944:	2b06      	cmp	r3, #6
 800c946:	f200 8128 	bhi.w	800cb9a <USBD_GetDescriptor+0x276>
 800c94a:	a201      	add	r2, pc, #4	; (adr r2, 800c950 <USBD_GetDescriptor+0x2c>)
 800c94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c950:	0800c96d 	.word	0x0800c96d
 800c954:	0800c985 	.word	0x0800c985
 800c958:	0800c9c5 	.word	0x0800c9c5
 800c95c:	0800cb9b 	.word	0x0800cb9b
 800c960:	0800cb9b 	.word	0x0800cb9b
 800c964:	0800cb3b 	.word	0x0800cb3b
 800c968:	0800cb67 	.word	0x0800cb67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	7c12      	ldrb	r2, [r2, #16]
 800c978:	f107 0108 	add.w	r1, r7, #8
 800c97c:	4610      	mov	r0, r2
 800c97e:	4798      	blx	r3
 800c980:	60f8      	str	r0, [r7, #12]
      break;
 800c982:	e112      	b.n	800cbaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	7c1b      	ldrb	r3, [r3, #16]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d10d      	bne.n	800c9a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c994:	f107 0208 	add.w	r2, r7, #8
 800c998:	4610      	mov	r0, r2
 800c99a:	4798      	blx	r3
 800c99c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c9a6:	e100      	b.n	800cbaa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b0:	f107 0208 	add.w	r2, r7, #8
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	4798      	blx	r3
 800c9b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	2202      	movs	r2, #2
 800c9c0:	701a      	strb	r2, [r3, #0]
      break;
 800c9c2:	e0f2      	b.n	800cbaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	885b      	ldrh	r3, [r3, #2]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b05      	cmp	r3, #5
 800c9cc:	f200 80ac 	bhi.w	800cb28 <USBD_GetDescriptor+0x204>
 800c9d0:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <USBD_GetDescriptor+0xb4>)
 800c9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d6:	bf00      	nop
 800c9d8:	0800c9f1 	.word	0x0800c9f1
 800c9dc:	0800ca25 	.word	0x0800ca25
 800c9e0:	0800ca59 	.word	0x0800ca59
 800c9e4:	0800ca8d 	.word	0x0800ca8d
 800c9e8:	0800cac1 	.word	0x0800cac1
 800c9ec:	0800caf5 	.word	0x0800caf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00b      	beq.n	800ca14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	7c12      	ldrb	r2, [r2, #16]
 800ca08:	f107 0108 	add.w	r1, r7, #8
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3
 800ca10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca12:	e091      	b.n	800cb38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa97 	bl	800cf4a <USBD_CtlError>
            err++;
 800ca1c:	7afb      	ldrb	r3, [r7, #11]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	72fb      	strb	r3, [r7, #11]
          break;
 800ca22:	e089      	b.n	800cb38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00b      	beq.n	800ca48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	7c12      	ldrb	r2, [r2, #16]
 800ca3c:	f107 0108 	add.w	r1, r7, #8
 800ca40:	4610      	mov	r0, r2
 800ca42:	4798      	blx	r3
 800ca44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca46:	e077      	b.n	800cb38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fa7d 	bl	800cf4a <USBD_CtlError>
            err++;
 800ca50:	7afb      	ldrb	r3, [r7, #11]
 800ca52:	3301      	adds	r3, #1
 800ca54:	72fb      	strb	r3, [r7, #11]
          break;
 800ca56:	e06f      	b.n	800cb38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00b      	beq.n	800ca7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	7c12      	ldrb	r2, [r2, #16]
 800ca70:	f107 0108 	add.w	r1, r7, #8
 800ca74:	4610      	mov	r0, r2
 800ca76:	4798      	blx	r3
 800ca78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca7a:	e05d      	b.n	800cb38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fa63 	bl	800cf4a <USBD_CtlError>
            err++;
 800ca84:	7afb      	ldrb	r3, [r7, #11]
 800ca86:	3301      	adds	r3, #1
 800ca88:	72fb      	strb	r3, [r7, #11]
          break;
 800ca8a:	e055      	b.n	800cb38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00b      	beq.n	800cab0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	7c12      	ldrb	r2, [r2, #16]
 800caa4:	f107 0108 	add.w	r1, r7, #8
 800caa8:	4610      	mov	r0, r2
 800caaa:	4798      	blx	r3
 800caac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caae:	e043      	b.n	800cb38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa49 	bl	800cf4a <USBD_CtlError>
            err++;
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	3301      	adds	r3, #1
 800cabc:	72fb      	strb	r3, [r7, #11]
          break;
 800cabe:	e03b      	b.n	800cb38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00b      	beq.n	800cae4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	7c12      	ldrb	r2, [r2, #16]
 800cad8:	f107 0108 	add.w	r1, r7, #8
 800cadc:	4610      	mov	r0, r2
 800cade:	4798      	blx	r3
 800cae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cae2:	e029      	b.n	800cb38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa2f 	bl	800cf4a <USBD_CtlError>
            err++;
 800caec:	7afb      	ldrb	r3, [r7, #11]
 800caee:	3301      	adds	r3, #1
 800caf0:	72fb      	strb	r3, [r7, #11]
          break;
 800caf2:	e021      	b.n	800cb38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00b      	beq.n	800cb18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb06:	699b      	ldr	r3, [r3, #24]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	7c12      	ldrb	r2, [r2, #16]
 800cb0c:	f107 0108 	add.w	r1, r7, #8
 800cb10:	4610      	mov	r0, r2
 800cb12:	4798      	blx	r3
 800cb14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb16:	e00f      	b.n	800cb38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fa15 	bl	800cf4a <USBD_CtlError>
            err++;
 800cb20:	7afb      	ldrb	r3, [r7, #11]
 800cb22:	3301      	adds	r3, #1
 800cb24:	72fb      	strb	r3, [r7, #11]
          break;
 800cb26:	e007      	b.n	800cb38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fa0d 	bl	800cf4a <USBD_CtlError>
          err++;
 800cb30:	7afb      	ldrb	r3, [r7, #11]
 800cb32:	3301      	adds	r3, #1
 800cb34:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cb36:	e038      	b.n	800cbaa <USBD_GetDescriptor+0x286>
 800cb38:	e037      	b.n	800cbaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	7c1b      	ldrb	r3, [r3, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d109      	bne.n	800cb56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4a:	f107 0208 	add.w	r2, r7, #8
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4798      	blx	r3
 800cb52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb54:	e029      	b.n	800cbaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f9f6 	bl	800cf4a <USBD_CtlError>
        err++;
 800cb5e:	7afb      	ldrb	r3, [r7, #11]
 800cb60:	3301      	adds	r3, #1
 800cb62:	72fb      	strb	r3, [r7, #11]
      break;
 800cb64:	e021      	b.n	800cbaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	7c1b      	ldrb	r3, [r3, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10d      	bne.n	800cb8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb76:	f107 0208 	add.w	r2, r7, #8
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	4798      	blx	r3
 800cb7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3301      	adds	r3, #1
 800cb84:	2207      	movs	r2, #7
 800cb86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb88:	e00f      	b.n	800cbaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f9dc 	bl	800cf4a <USBD_CtlError>
        err++;
 800cb92:	7afb      	ldrb	r3, [r7, #11]
 800cb94:	3301      	adds	r3, #1
 800cb96:	72fb      	strb	r3, [r7, #11]
      break;
 800cb98:	e007      	b.n	800cbaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f9d4 	bl	800cf4a <USBD_CtlError>
      err++;
 800cba2:	7afb      	ldrb	r3, [r7, #11]
 800cba4:	3301      	adds	r3, #1
 800cba6:	72fb      	strb	r3, [r7, #11]
      break;
 800cba8:	bf00      	nop
  }

  if (err != 0U)
 800cbaa:	7afb      	ldrb	r3, [r7, #11]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d11c      	bne.n	800cbea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cbb0:	893b      	ldrh	r3, [r7, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d011      	beq.n	800cbda <USBD_GetDescriptor+0x2b6>
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	88db      	ldrh	r3, [r3, #6]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00d      	beq.n	800cbda <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	88da      	ldrh	r2, [r3, #6]
 800cbc2:	893b      	ldrh	r3, [r7, #8]
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	bf28      	it	cs
 800cbc8:	4613      	movcs	r3, r2
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cbce:	893b      	ldrh	r3, [r7, #8]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	68f9      	ldr	r1, [r7, #12]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 fa22 	bl	800d01e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	88db      	ldrh	r3, [r3, #6]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fa79 	bl	800d0da <USBD_CtlSendStatus>
 800cbe8:	e000      	b.n	800cbec <USBD_GetDescriptor+0x2c8>
    return;
 800cbea:	bf00      	nop
    }
  }
}
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop

0800cbf4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	889b      	ldrh	r3, [r3, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d130      	bne.n	800cc68 <USBD_SetAddress+0x74>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	88db      	ldrh	r3, [r3, #6]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d12c      	bne.n	800cc68 <USBD_SetAddress+0x74>
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	885b      	ldrh	r3, [r3, #2]
 800cc12:	2b7f      	cmp	r3, #127	; 0x7f
 800cc14:	d828      	bhi.n	800cc68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	885b      	ldrh	r3, [r3, #2]
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc28:	2b03      	cmp	r3, #3
 800cc2a:	d104      	bne.n	800cc36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f98b 	bl	800cf4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc34:	e01d      	b.n	800cc72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7bfa      	ldrb	r2, [r7, #15]
 800cc3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc3e:	7bfb      	ldrb	r3, [r7, #15]
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 febe 	bl	800d9c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fa46 	bl	800d0da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d004      	beq.n	800cc5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2202      	movs	r2, #2
 800cc58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc5c:	e009      	b.n	800cc72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2201      	movs	r2, #1
 800cc62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc66:	e004      	b.n	800cc72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f96d 	bl	800cf4a <USBD_CtlError>
  }
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
	...

0800cc7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	885b      	ldrh	r3, [r3, #2]
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	4b41      	ldr	r3, [pc, #260]	; (800cd94 <USBD_SetConfig+0x118>)
 800cc8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc90:	4b40      	ldr	r3, [pc, #256]	; (800cd94 <USBD_SetConfig+0x118>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d904      	bls.n	800cca2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f955 	bl	800cf4a <USBD_CtlError>
 800cca0:	e075      	b.n	800cd8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d002      	beq.n	800ccb2 <USBD_SetConfig+0x36>
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d023      	beq.n	800ccf8 <USBD_SetConfig+0x7c>
 800ccb0:	e062      	b.n	800cd78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ccb2:	4b38      	ldr	r3, [pc, #224]	; (800cd94 <USBD_SetConfig+0x118>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d01a      	beq.n	800ccf0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ccba:	4b36      	ldr	r3, [pc, #216]	; (800cd94 <USBD_SetConfig+0x118>)
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2203      	movs	r2, #3
 800ccc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cccc:	4b31      	ldr	r3, [pc, #196]	; (800cd94 <USBD_SetConfig+0x118>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff f9e7 	bl	800c0a6 <USBD_SetClassConfig>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d104      	bne.n	800cce8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f932 	bl	800cf4a <USBD_CtlError>
            return;
 800cce6:	e052      	b.n	800cd8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f9f6 	bl	800d0da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ccee:	e04e      	b.n	800cd8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f9f2 	bl	800d0da <USBD_CtlSendStatus>
        break;
 800ccf6:	e04a      	b.n	800cd8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ccf8:	4b26      	ldr	r3, [pc, #152]	; (800cd94 <USBD_SetConfig+0x118>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d112      	bne.n	800cd26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2202      	movs	r2, #2
 800cd04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800cd08:	4b22      	ldr	r3, [pc, #136]	; (800cd94 <USBD_SetConfig+0x118>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800cd12:	4b20      	ldr	r3, [pc, #128]	; (800cd94 <USBD_SetConfig+0x118>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff f9e3 	bl	800c0e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f9db 	bl	800d0da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cd24:	e033      	b.n	800cd8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800cd26:	4b1b      	ldr	r3, [pc, #108]	; (800cd94 <USBD_SetConfig+0x118>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d01d      	beq.n	800cd70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7ff f9d1 	bl	800c0e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cd42:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <USBD_SetConfig+0x118>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cd4c:	4b11      	ldr	r3, [pc, #68]	; (800cd94 <USBD_SetConfig+0x118>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	4619      	mov	r1, r3
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7ff f9a7 	bl	800c0a6 <USBD_SetClassConfig>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d104      	bne.n	800cd68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f8f2 	bl	800cf4a <USBD_CtlError>
            return;
 800cd66:	e012      	b.n	800cd8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 f9b6 	bl	800d0da <USBD_CtlSendStatus>
        break;
 800cd6e:	e00e      	b.n	800cd8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f9b2 	bl	800d0da <USBD_CtlSendStatus>
        break;
 800cd76:	e00a      	b.n	800cd8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f8e5 	bl	800cf4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cd80:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <USBD_SetConfig+0x118>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	4619      	mov	r1, r3
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff f9ac 	bl	800c0e4 <USBD_ClrClassConfig>
        break;
 800cd8c:	bf00      	nop
    }
  }
}
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	20000e38 	.word	0x20000e38

0800cd98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	88db      	ldrh	r3, [r3, #6]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d004      	beq.n	800cdb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f8cc 	bl	800cf4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cdb2:	e022      	b.n	800cdfa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	dc02      	bgt.n	800cdc4 <USBD_GetConfig+0x2c>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dc03      	bgt.n	800cdca <USBD_GetConfig+0x32>
 800cdc2:	e015      	b.n	800cdf0 <USBD_GetConfig+0x58>
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d00b      	beq.n	800cde0 <USBD_GetConfig+0x48>
 800cdc8:	e012      	b.n	800cdf0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	3308      	adds	r3, #8
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f920 	bl	800d01e <USBD_CtlSendData>
        break;
 800cdde:	e00c      	b.n	800cdfa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3304      	adds	r3, #4
 800cde4:	2201      	movs	r2, #1
 800cde6:	4619      	mov	r1, r3
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f918 	bl	800d01e <USBD_CtlSendData>
        break;
 800cdee:	e004      	b.n	800cdfa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f8a9 	bl	800cf4a <USBD_CtlError>
        break;
 800cdf8:	bf00      	nop
}
 800cdfa:	bf00      	nop
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce12:	3b01      	subs	r3, #1
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d81e      	bhi.n	800ce56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	88db      	ldrh	r3, [r3, #6]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d004      	beq.n	800ce2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f891 	bl	800cf4a <USBD_CtlError>
        break;
 800ce28:	e01a      	b.n	800ce60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d005      	beq.n	800ce46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	f043 0202 	orr.w	r2, r3, #2
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	330c      	adds	r3, #12
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f8e5 	bl	800d01e <USBD_CtlSendData>
      break;
 800ce54:	e004      	b.n	800ce60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ce56:	6839      	ldr	r1, [r7, #0]
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 f876 	bl	800cf4a <USBD_CtlError>
      break;
 800ce5e:	bf00      	nop
  }
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	885b      	ldrh	r3, [r3, #2]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d106      	bne.n	800ce88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f929 	bl	800d0da <USBD_CtlSendStatus>
  }
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea0:	3b01      	subs	r3, #1
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d80b      	bhi.n	800cebe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	885b      	ldrh	r3, [r3, #2]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d10c      	bne.n	800cec8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f90f 	bl	800d0da <USBD_CtlSendStatus>
      }
      break;
 800cebc:	e004      	b.n	800cec8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f842 	bl	800cf4a <USBD_CtlError>
      break;
 800cec6:	e000      	b.n	800ceca <USBD_ClrFeature+0x3a>
      break;
 800cec8:	bf00      	nop
  }
}
 800ceca:	bf00      	nop
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b083      	sub	sp, #12
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	781a      	ldrb	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	785a      	ldrb	r2, [r3, #1]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	3302      	adds	r3, #2
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	3303      	adds	r3, #3
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	021b      	lsls	r3, r3, #8
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	4413      	add	r3, r2
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	3305      	adds	r3, #5
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	4413      	add	r3, r2
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	3306      	adds	r3, #6
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	3307      	adds	r3, #7
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	021b      	lsls	r3, r3, #8
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	4413      	add	r3, r2
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	80da      	strh	r2, [r3, #6]

}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bc80      	pop	{r7}
 800cf48:	4770      	bx	lr

0800cf4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b082      	sub	sp, #8
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cf54:	2180      	movs	r1, #128	; 0x80
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fcca 	bl	800d8f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fcc6 	bl	800d8f0 <USBD_LL_StallEP>
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d032      	beq.n	800cfe8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 f834 	bl	800cff0 <USBD_GetLen>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
 800cf98:	1c5a      	adds	r2, r3, #1
 800cf9a:	75fa      	strb	r2, [r7, #23]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	7812      	ldrb	r2, [r2, #0]
 800cfa6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cfa8:	7dfb      	ldrb	r3, [r7, #23]
 800cfaa:	1c5a      	adds	r2, r3, #1
 800cfac:	75fa      	strb	r2, [r7, #23]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cfb8:	e012      	b.n	800cfe0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	60fa      	str	r2, [r7, #12]
 800cfc0:	7dfa      	ldrb	r2, [r7, #23]
 800cfc2:	1c51      	adds	r1, r2, #1
 800cfc4:	75f9      	strb	r1, [r7, #23]
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	440a      	add	r2, r1
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cfd0:	7dfb      	ldrb	r3, [r7, #23]
 800cfd2:	1c5a      	adds	r2, r3, #1
 800cfd4:	75fa      	strb	r2, [r7, #23]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	4413      	add	r3, r2
 800cfdc:	2200      	movs	r2, #0
 800cfde:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e8      	bne.n	800cfba <USBD_GetString+0x4e>
    }
  }
}
 800cfe8:	bf00      	nop
 800cfea:	3718      	adds	r7, #24
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cffc:	e005      	b.n	800d00a <USBD_GetLen+0x1a>
  {
    len++;
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	3301      	adds	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	3301      	adds	r3, #1
 800d008:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1f5      	bne.n	800cffe <USBD_GetLen+0xe>
  }

  return len;
 800d012:	7bfb      	ldrb	r3, [r7, #15]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	bc80      	pop	{r7}
 800d01c:	4770      	bx	lr

0800d01e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b084      	sub	sp, #16
 800d022:	af00      	add	r7, sp, #0
 800d024:	60f8      	str	r0, [r7, #12]
 800d026:	60b9      	str	r1, [r7, #8]
 800d028:	4613      	mov	r3, r2
 800d02a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2202      	movs	r2, #2
 800d030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d034:	88fa      	ldrh	r2, [r7, #6]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d03a:	88fa      	ldrh	r2, [r7, #6]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d040:	88fb      	ldrh	r3, [r7, #6]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	2100      	movs	r1, #0
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f000 fcdb 	bl	800da02 <USBD_LL_Transmit>

  return USBD_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b084      	sub	sp, #16
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	60f8      	str	r0, [r7, #12]
 800d05e:	60b9      	str	r1, [r7, #8]
 800d060:	4613      	mov	r3, r2
 800d062:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d064:	88fb      	ldrh	r3, [r7, #6]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	2100      	movs	r1, #0
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f000 fcc9 	bl	800da02 <USBD_LL_Transmit>

  return USBD_OK;
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b084      	sub	sp, #16
 800d07e:	af00      	add	r7, sp, #0
 800d080:	60f8      	str	r0, [r7, #12]
 800d082:	60b9      	str	r1, [r7, #8]
 800d084:	4613      	mov	r3, r2
 800d086:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2203      	movs	r2, #3
 800d08c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d090:	88fa      	ldrh	r2, [r7, #6]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d098:	88fa      	ldrh	r2, [r7, #6]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0a0:	88fb      	ldrh	r3, [r7, #6]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f000 fcce 	bl	800da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	60f8      	str	r0, [r7, #12]
 800d0be:	60b9      	str	r1, [r7, #8]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0c4:	88fb      	ldrh	r3, [r7, #6]
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f000 fcbc 	bl	800da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b082      	sub	sp, #8
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2204      	movs	r2, #4
 800d0e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 fc86 	bl	800da02 <USBD_LL_Transmit>

  return USBD_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2205      	movs	r2, #5
 800d10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d110:	2300      	movs	r3, #0
 800d112:	2200      	movs	r2, #0
 800d114:	2100      	movs	r1, #0
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fc96 	bl	800da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d12c:	2200      	movs	r2, #0
 800d12e:	4912      	ldr	r1, [pc, #72]	; (800d178 <MX_USB_DEVICE_Init+0x50>)
 800d130:	4812      	ldr	r0, [pc, #72]	; (800d17c <MX_USB_DEVICE_Init+0x54>)
 800d132:	f7fe ff5e 	bl	800bff2 <USBD_Init>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d001      	beq.n	800d140 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d13c:	f7f5 fb52 	bl	80027e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d140:	490f      	ldr	r1, [pc, #60]	; (800d180 <MX_USB_DEVICE_Init+0x58>)
 800d142:	480e      	ldr	r0, [pc, #56]	; (800d17c <MX_USB_DEVICE_Init+0x54>)
 800d144:	f7fe ff80 	bl	800c048 <USBD_RegisterClass>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d14e:	f7f5 fb49 	bl	80027e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d152:	490c      	ldr	r1, [pc, #48]	; (800d184 <MX_USB_DEVICE_Init+0x5c>)
 800d154:	4809      	ldr	r0, [pc, #36]	; (800d17c <MX_USB_DEVICE_Init+0x54>)
 800d156:	f7fe feb1 	bl	800bebc <USBD_CDC_RegisterInterface>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d001      	beq.n	800d164 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d160:	f7f5 fb40 	bl	80027e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d164:	4805      	ldr	r0, [pc, #20]	; (800d17c <MX_USB_DEVICE_Init+0x54>)
 800d166:	f7fe ff88 	bl	800c07a <USBD_Start>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d001      	beq.n	800d174 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d170:	f7f5 fb38 	bl	80027e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d174:	bf00      	nop
 800d176:	bd80      	pop	{r7, pc}
 800d178:	20000144 	.word	0x20000144
 800d17c:	20000e3c 	.word	0x20000e3c
 800d180:	20000030 	.word	0x20000030
 800d184:	20000134 	.word	0x20000134

0800d188 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d18c:	2200      	movs	r2, #0
 800d18e:	4905      	ldr	r1, [pc, #20]	; (800d1a4 <CDC_Init_FS+0x1c>)
 800d190:	4805      	ldr	r0, [pc, #20]	; (800d1a8 <CDC_Init_FS+0x20>)
 800d192:	f7fe fea9 	bl	800bee8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d196:	4905      	ldr	r1, [pc, #20]	; (800d1ac <CDC_Init_FS+0x24>)
 800d198:	4803      	ldr	r0, [pc, #12]	; (800d1a8 <CDC_Init_FS+0x20>)
 800d19a:	f7fe febe 	bl	800bf1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d19e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	20001200 	.word	0x20001200
 800d1a8:	20000e3c 	.word	0x20000e3c
 800d1ac:	20001100 	.word	0x20001100

0800d1b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d1b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bc80      	pop	{r7}
 800d1bc:	4770      	bx	lr
	...

0800d1c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	6039      	str	r1, [r7, #0]
 800d1ca:	71fb      	strb	r3, [r7, #7]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	2b23      	cmp	r3, #35	; 0x23
 800d1d4:	f200 808c 	bhi.w	800d2f0 <CDC_Control_FS+0x130>
 800d1d8:	a201      	add	r2, pc, #4	; (adr r2, 800d1e0 <CDC_Control_FS+0x20>)
 800d1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1de:	bf00      	nop
 800d1e0:	0800d2f1 	.word	0x0800d2f1
 800d1e4:	0800d2f1 	.word	0x0800d2f1
 800d1e8:	0800d2f1 	.word	0x0800d2f1
 800d1ec:	0800d2f1 	.word	0x0800d2f1
 800d1f0:	0800d2f1 	.word	0x0800d2f1
 800d1f4:	0800d2f1 	.word	0x0800d2f1
 800d1f8:	0800d2f1 	.word	0x0800d2f1
 800d1fc:	0800d2f1 	.word	0x0800d2f1
 800d200:	0800d2f1 	.word	0x0800d2f1
 800d204:	0800d2f1 	.word	0x0800d2f1
 800d208:	0800d2f1 	.word	0x0800d2f1
 800d20c:	0800d2f1 	.word	0x0800d2f1
 800d210:	0800d2f1 	.word	0x0800d2f1
 800d214:	0800d2f1 	.word	0x0800d2f1
 800d218:	0800d2f1 	.word	0x0800d2f1
 800d21c:	0800d2f1 	.word	0x0800d2f1
 800d220:	0800d2f1 	.word	0x0800d2f1
 800d224:	0800d2f1 	.word	0x0800d2f1
 800d228:	0800d2f1 	.word	0x0800d2f1
 800d22c:	0800d2f1 	.word	0x0800d2f1
 800d230:	0800d2f1 	.word	0x0800d2f1
 800d234:	0800d2f1 	.word	0x0800d2f1
 800d238:	0800d2f1 	.word	0x0800d2f1
 800d23c:	0800d2f1 	.word	0x0800d2f1
 800d240:	0800d2f1 	.word	0x0800d2f1
 800d244:	0800d2f1 	.word	0x0800d2f1
 800d248:	0800d2f1 	.word	0x0800d2f1
 800d24c:	0800d2f1 	.word	0x0800d2f1
 800d250:	0800d2f1 	.word	0x0800d2f1
 800d254:	0800d2f1 	.word	0x0800d2f1
 800d258:	0800d2f1 	.word	0x0800d2f1
 800d25c:	0800d2f1 	.word	0x0800d2f1
 800d260:	0800d271 	.word	0x0800d271
 800d264:	0800d2ab 	.word	0x0800d2ab
 800d268:	0800d2f1 	.word	0x0800d2f1
 800d26c:	0800d2f1 	.word	0x0800d2f1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	myLineCodeBuf[0] = pbuf[0];
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781a      	ldrb	r2, [r3, #0]
 800d274:	4b22      	ldr	r3, [pc, #136]	; (800d300 <CDC_Control_FS+0x140>)
 800d276:	701a      	strb	r2, [r3, #0]
    	myLineCodeBuf[1] = pbuf[1];
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	785a      	ldrb	r2, [r3, #1]
 800d27c:	4b20      	ldr	r3, [pc, #128]	; (800d300 <CDC_Control_FS+0x140>)
 800d27e:	705a      	strb	r2, [r3, #1]
    	myLineCodeBuf[2] = pbuf[2];
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	789a      	ldrb	r2, [r3, #2]
 800d284:	4b1e      	ldr	r3, [pc, #120]	; (800d300 <CDC_Control_FS+0x140>)
 800d286:	709a      	strb	r2, [r3, #2]
    	myLineCodeBuf[3] = pbuf[3];
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	78da      	ldrb	r2, [r3, #3]
 800d28c:	4b1c      	ldr	r3, [pc, #112]	; (800d300 <CDC_Control_FS+0x140>)
 800d28e:	70da      	strb	r2, [r3, #3]
    	myLineCodeBuf[4] = pbuf[4];
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	791a      	ldrb	r2, [r3, #4]
 800d294:	4b1a      	ldr	r3, [pc, #104]	; (800d300 <CDC_Control_FS+0x140>)
 800d296:	711a      	strb	r2, [r3, #4]
    	myLineCodeBuf[5] = pbuf[5];
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	795a      	ldrb	r2, [r3, #5]
 800d29c:	4b18      	ldr	r3, [pc, #96]	; (800d300 <CDC_Control_FS+0x140>)
 800d29e:	715a      	strb	r2, [r3, #5]
    	myLineCodeBuf[6] = pbuf[6];
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	799a      	ldrb	r2, [r3, #6]
 800d2a4:	4b16      	ldr	r3, [pc, #88]	; (800d300 <CDC_Control_FS+0x140>)
 800d2a6:	719a      	strb	r2, [r3, #6]
    break;
 800d2a8:	e023      	b.n	800d2f2 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = myLineCodeBuf[0];
 800d2aa:	4b15      	ldr	r3, [pc, #84]	; (800d300 <CDC_Control_FS+0x140>)
 800d2ac:	781a      	ldrb	r2, [r3, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = myLineCodeBuf[1];
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	4a12      	ldr	r2, [pc, #72]	; (800d300 <CDC_Control_FS+0x140>)
 800d2b8:	7852      	ldrb	r2, [r2, #1]
 800d2ba:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = myLineCodeBuf[2];
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	3302      	adds	r3, #2
 800d2c0:	4a0f      	ldr	r2, [pc, #60]	; (800d300 <CDC_Control_FS+0x140>)
 800d2c2:	7892      	ldrb	r2, [r2, #2]
 800d2c4:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = myLineCodeBuf[3];
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	3303      	adds	r3, #3
 800d2ca:	4a0d      	ldr	r2, [pc, #52]	; (800d300 <CDC_Control_FS+0x140>)
 800d2cc:	78d2      	ldrb	r2, [r2, #3]
 800d2ce:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = myLineCodeBuf[4];
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	4a0a      	ldr	r2, [pc, #40]	; (800d300 <CDC_Control_FS+0x140>)
 800d2d6:	7912      	ldrb	r2, [r2, #4]
 800d2d8:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = myLineCodeBuf[5];
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	3305      	adds	r3, #5
 800d2de:	4a08      	ldr	r2, [pc, #32]	; (800d300 <CDC_Control_FS+0x140>)
 800d2e0:	7952      	ldrb	r2, [r2, #5]
 800d2e2:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = myLineCodeBuf[6];
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	3306      	adds	r3, #6
 800d2e8:	4a05      	ldr	r2, [pc, #20]	; (800d300 <CDC_Control_FS+0x140>)
 800d2ea:	7992      	ldrb	r2, [r2, #6]
 800d2ec:	701a      	strb	r2, [r3, #0]
    break;
 800d2ee:	e000      	b.n	800d2f2 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2f0:	bf00      	nop
  }

  return (USBD_OK);
 800d2f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bc80      	pop	{r7}
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	20001300 	.word	0x20001300

0800d304 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800d30e:	4b16      	ldr	r3, [pc, #88]	; (800d368 <CDC_Receive_FS+0x64>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d007      	beq.n	800d326 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800d316:	4b14      	ldr	r3, [pc, #80]	; (800d368 <CDC_Receive_FS+0x64>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	6812      	ldr	r2, [r2, #0]
 800d31e:	b292      	uxth	r2, r2
 800d320:	4611      	mov	r1, r2
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	4798      	blx	r3

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	4810      	ldr	r0, [pc, #64]	; (800d36c <CDC_Receive_FS+0x68>)
 800d32a:	f7fe fdf6 	bl	800bf1a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d32e:	480f      	ldr	r0, [pc, #60]	; (800d36c <CDC_Receive_FS+0x68>)
 800d330:	f7fe fe35 	bl	800bf9e <USBD_CDC_ReceivePacket>

	memset (rxUSBData, '\0', 256);  // clear the buffer
 800d334:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d338:	2100      	movs	r1, #0
 800d33a:	480d      	ldr	r0, [pc, #52]	; (800d370 <CDC_Receive_FS+0x6c>)
 800d33c:	f000 fc62 	bl	800dc04 <memset>
	uint8_t len = (uint8_t)*Len;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	73fb      	strb	r3, [r7, #15]
	memcpy(rxUSBData, Buf, len);  // copy the data to the buffer
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	461a      	mov	r2, r3
 800d34a:	6879      	ldr	r1, [r7, #4]
 800d34c:	4808      	ldr	r0, [pc, #32]	; (800d370 <CDC_Receive_FS+0x6c>)
 800d34e:	f000 fc99 	bl	800dc84 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	461a      	mov	r2, r3
 800d356:	2100      	movs	r1, #0
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fc53 	bl	800dc04 <memset>

	return (USBD_OK);
 800d35e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20001308 	.word	0x20001308
 800d36c:	20000e3c 	.word	0x20000e3c
 800d370:	20000e31 	.word	0x20000e31

0800d374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d396:	2301      	movs	r3, #1
 800d398:	e00b      	b.n	800d3b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d39a:	887b      	ldrh	r3, [r7, #2]
 800d39c:	461a      	mov	r2, r3
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	4806      	ldr	r0, [pc, #24]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d3a2:	f7fe fda1 	bl	800bee8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3a6:	4805      	ldr	r0, [pc, #20]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d3a8:	f7fe fdca 	bl	800bf40 <USBD_CDC_TransmitPacket>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20000e3c 	.word	0x20000e3c

0800d3c0 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800d3c8:	4a03      	ldr	r2, [pc, #12]	; (800d3d8 <CDC_AttachRxData+0x18>)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6013      	str	r3, [r2, #0]
}
 800d3ce:	bf00      	nop
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bc80      	pop	{r7}
 800d3d6:	4770      	bx	lr
 800d3d8:	20001308 	.word	0x20001308

0800d3dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	6039      	str	r1, [r7, #0]
 800d3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2212      	movs	r2, #18
 800d3ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d3ee:	4b03      	ldr	r3, [pc, #12]	; (800d3fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bc80      	pop	{r7}
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	20000160 	.word	0x20000160

0800d400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	6039      	str	r1, [r7, #0]
 800d40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2204      	movs	r2, #4
 800d410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d412:	4b03      	ldr	r3, [pc, #12]	; (800d420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	bc80      	pop	{r7}
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	20000174 	.word	0x20000174

0800d424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	6039      	str	r1, [r7, #0]
 800d42e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d430:	79fb      	ldrb	r3, [r7, #7]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d105      	bne.n	800d442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	4907      	ldr	r1, [pc, #28]	; (800d458 <USBD_FS_ProductStrDescriptor+0x34>)
 800d43a:	4808      	ldr	r0, [pc, #32]	; (800d45c <USBD_FS_ProductStrDescriptor+0x38>)
 800d43c:	f7ff fd96 	bl	800cf6c <USBD_GetString>
 800d440:	e004      	b.n	800d44c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	4904      	ldr	r1, [pc, #16]	; (800d458 <USBD_FS_ProductStrDescriptor+0x34>)
 800d446:	4805      	ldr	r0, [pc, #20]	; (800d45c <USBD_FS_ProductStrDescriptor+0x38>)
 800d448:	f7ff fd90 	bl	800cf6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d44c:	4b02      	ldr	r3, [pc, #8]	; (800d458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	2000130c 	.word	0x2000130c
 800d45c:	0800de34 	.word	0x0800de34

0800d460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	6039      	str	r1, [r7, #0]
 800d46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	4904      	ldr	r1, [pc, #16]	; (800d480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d470:	4804      	ldr	r0, [pc, #16]	; (800d484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d472:	f7ff fd7b 	bl	800cf6c <USBD_GetString>
  return USBD_StrDesc;
 800d476:	4b02      	ldr	r3, [pc, #8]	; (800d480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	2000130c 	.word	0x2000130c
 800d484:	0800de4c 	.word	0x0800de4c

0800d488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	4603      	mov	r3, r0
 800d490:	6039      	str	r1, [r7, #0]
 800d492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	221a      	movs	r2, #26
 800d498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d49a:	f000 f843 	bl	800d524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d49e:	4b02      	ldr	r3, [pc, #8]	; (800d4a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	20000178 	.word	0x20000178

0800d4ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	6039      	str	r1, [r7, #0]
 800d4b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d105      	bne.n	800d4ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	4907      	ldr	r1, [pc, #28]	; (800d4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4c2:	4808      	ldr	r0, [pc, #32]	; (800d4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4c4:	f7ff fd52 	bl	800cf6c <USBD_GetString>
 800d4c8:	e004      	b.n	800d4d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	4904      	ldr	r1, [pc, #16]	; (800d4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4ce:	4805      	ldr	r0, [pc, #20]	; (800d4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4d0:	f7ff fd4c 	bl	800cf6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4d4:	4b02      	ldr	r3, [pc, #8]	; (800d4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	2000130c 	.word	0x2000130c
 800d4e4:	0800de60 	.word	0x0800de60

0800d4e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	6039      	str	r1, [r7, #0]
 800d4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d105      	bne.n	800d506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	4907      	ldr	r1, [pc, #28]	; (800d51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4fe:	4808      	ldr	r0, [pc, #32]	; (800d520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d500:	f7ff fd34 	bl	800cf6c <USBD_GetString>
 800d504:	e004      	b.n	800d510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	4904      	ldr	r1, [pc, #16]	; (800d51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d50a:	4805      	ldr	r0, [pc, #20]	; (800d520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d50c:	f7ff fd2e 	bl	800cf6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d510:	4b02      	ldr	r3, [pc, #8]	; (800d51c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	2000130c 	.word	0x2000130c
 800d520:	0800de6c 	.word	0x0800de6c

0800d524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d52a:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <Get_SerialNum+0x44>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d530:	4b0e      	ldr	r3, [pc, #56]	; (800d56c <Get_SerialNum+0x48>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d536:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <Get_SerialNum+0x4c>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4413      	add	r3, r2
 800d542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d009      	beq.n	800d55e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d54a:	2208      	movs	r2, #8
 800d54c:	4909      	ldr	r1, [pc, #36]	; (800d574 <Get_SerialNum+0x50>)
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f000 f814 	bl	800d57c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d554:	2204      	movs	r2, #4
 800d556:	4908      	ldr	r1, [pc, #32]	; (800d578 <Get_SerialNum+0x54>)
 800d558:	68b8      	ldr	r0, [r7, #8]
 800d55a:	f000 f80f 	bl	800d57c <IntToUnicode>
  }
}
 800d55e:	bf00      	nop
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	1ffff7e8 	.word	0x1ffff7e8
 800d56c:	1ffff7ec 	.word	0x1ffff7ec
 800d570:	1ffff7f0 	.word	0x1ffff7f0
 800d574:	2000017a 	.word	0x2000017a
 800d578:	2000018a 	.word	0x2000018a

0800d57c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b087      	sub	sp, #28
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	4613      	mov	r3, r2
 800d588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d58e:	2300      	movs	r3, #0
 800d590:	75fb      	strb	r3, [r7, #23]
 800d592:	e027      	b.n	800d5e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	0f1b      	lsrs	r3, r3, #28
 800d598:	2b09      	cmp	r3, #9
 800d59a:	d80b      	bhi.n	800d5b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	0f1b      	lsrs	r3, r3, #28
 800d5a0:	b2da      	uxtb	r2, r3
 800d5a2:	7dfb      	ldrb	r3, [r7, #23]
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	440b      	add	r3, r1
 800d5ac:	3230      	adds	r2, #48	; 0x30
 800d5ae:	b2d2      	uxtb	r2, r2
 800d5b0:	701a      	strb	r2, [r3, #0]
 800d5b2:	e00a      	b.n	800d5ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	0f1b      	lsrs	r3, r3, #28
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	4619      	mov	r1, r3
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	440b      	add	r3, r1
 800d5c4:	3237      	adds	r2, #55	; 0x37
 800d5c6:	b2d2      	uxtb	r2, r2
 800d5c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	011b      	lsls	r3, r3, #4
 800d5ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d5d0:	7dfb      	ldrb	r3, [r7, #23]
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	4413      	add	r3, r2
 800d5da:	2200      	movs	r2, #0
 800d5dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d5de:	7dfb      	ldrb	r3, [r7, #23]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	75fb      	strb	r3, [r7, #23]
 800d5e4:	7dfa      	ldrb	r2, [r7, #23]
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d3d3      	bcc.n	800d594 <IntToUnicode+0x18>
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	bf00      	nop
 800d5f0:	371c      	adds	r7, #28
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bc80      	pop	{r7}
 800d5f6:	4770      	bx	lr

0800d5f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a0d      	ldr	r2, [pc, #52]	; (800d63c <HAL_PCD_MspInit+0x44>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d113      	bne.n	800d632 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d60a:	4b0d      	ldr	r3, [pc, #52]	; (800d640 <HAL_PCD_MspInit+0x48>)
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	4a0c      	ldr	r2, [pc, #48]	; (800d640 <HAL_PCD_MspInit+0x48>)
 800d610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d614:	61d3      	str	r3, [r2, #28]
 800d616:	4b0a      	ldr	r3, [pc, #40]	; (800d640 <HAL_PCD_MspInit+0x48>)
 800d618:	69db      	ldr	r3, [r3, #28]
 800d61a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800d622:	2200      	movs	r2, #0
 800d624:	2100      	movs	r1, #0
 800d626:	2014      	movs	r0, #20
 800d628:	f7f6 f881 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d62c:	2014      	movs	r0, #20
 800d62e:	f7f6 f89a 	bl	8003766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d632:	bf00      	nop
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	40005c00 	.word	0x40005c00
 800d640:	40021000 	.word	0x40021000

0800d644 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d658:	4619      	mov	r1, r3
 800d65a:	4610      	mov	r0, r2
 800d65c:	f7fe fd55 	bl	800c10a <USBD_LL_SetupStage>
}
 800d660:	bf00      	nop
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	460b      	mov	r3, r1
 800d672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800d67a:	78fa      	ldrb	r2, [r7, #3]
 800d67c:	6879      	ldr	r1, [r7, #4]
 800d67e:	4613      	mov	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	00db      	lsls	r3, r3, #3
 800d686:	440b      	add	r3, r1
 800d688:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	78fb      	ldrb	r3, [r7, #3]
 800d690:	4619      	mov	r1, r3
 800d692:	f7fe fd87 	bl	800c1a4 <USBD_LL_DataOutStage>
}
 800d696:	bf00      	nop
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b082      	sub	sp, #8
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800d6b0:	78fa      	ldrb	r2, [r7, #3]
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	4413      	add	r3, r2
 800d6ba:	00db      	lsls	r3, r3, #3
 800d6bc:	440b      	add	r3, r1
 800d6be:	333c      	adds	r3, #60	; 0x3c
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	78fb      	ldrb	r3, [r7, #3]
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	f7fe fdde 	bl	800c286 <USBD_LL_DataInStage>
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fe feee 	bl	800c4c2 <USBD_LL_SOF>
}
 800d6e6:	bf00      	nop
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	d001      	beq.n	800d706 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d702:	f7f5 f86f 	bl	80027e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d70c:	7bfa      	ldrb	r2, [r7, #15]
 800d70e:	4611      	mov	r1, r2
 800d710:	4618      	mov	r0, r3
 800d712:	f7fe fe9e 	bl	800c452 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe fe57 	bl	800c3d0 <USBD_LL_Reset>
}
 800d722:	bf00      	nop
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fe98 	bl	800c470 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d005      	beq.n	800d754 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d748:	4b04      	ldr	r3, [pc, #16]	; (800d75c <HAL_PCD_SuspendCallback+0x30>)
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	4a03      	ldr	r2, [pc, #12]	; (800d75c <HAL_PCD_SuspendCallback+0x30>)
 800d74e:	f043 0306 	orr.w	r3, r3, #6
 800d752:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d754:	bf00      	nop
 800d756:	3708      	adds	r7, #8
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	e000ed00 	.word	0xe000ed00

0800d760 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fe fe92 	bl	800c498 <USBD_LL_Resume>
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d784:	4a28      	ldr	r2, [pc, #160]	; (800d828 <USBD_LL_Init+0xac>)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a26      	ldr	r2, [pc, #152]	; (800d828 <USBD_LL_Init+0xac>)
 800d790:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d794:	4b24      	ldr	r3, [pc, #144]	; (800d828 <USBD_LL_Init+0xac>)
 800d796:	4a25      	ldr	r2, [pc, #148]	; (800d82c <USBD_LL_Init+0xb0>)
 800d798:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d79a:	4b23      	ldr	r3, [pc, #140]	; (800d828 <USBD_LL_Init+0xac>)
 800d79c:	2208      	movs	r2, #8
 800d79e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d7a0:	4b21      	ldr	r3, [pc, #132]	; (800d828 <USBD_LL_Init+0xac>)
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d7a6:	4b20      	ldr	r3, [pc, #128]	; (800d828 <USBD_LL_Init+0xac>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d7ac:	4b1e      	ldr	r3, [pc, #120]	; (800d828 <USBD_LL_Init+0xac>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d7b2:	4b1d      	ldr	r3, [pc, #116]	; (800d828 <USBD_LL_Init+0xac>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d7b8:	481b      	ldr	r0, [pc, #108]	; (800d828 <USBD_LL_Init+0xac>)
 800d7ba:	f7f7 ff54 	bl	8005666 <HAL_PCD_Init>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d7c4:	f7f5 f80e 	bl	80027e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7ce:	2318      	movs	r3, #24
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	f7f9 fc73 	bl	80070be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7de:	2358      	movs	r3, #88	; 0x58
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2180      	movs	r1, #128	; 0x80
 800d7e4:	f7f9 fc6b 	bl	80070be <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7ee:	23c0      	movs	r3, #192	; 0xc0
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	2181      	movs	r1, #129	; 0x81
 800d7f4:	f7f9 fc63 	bl	80070be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d802:	2200      	movs	r2, #0
 800d804:	2101      	movs	r1, #1
 800d806:	f7f9 fc5a 	bl	80070be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d810:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d814:	2200      	movs	r2, #0
 800d816:	2182      	movs	r1, #130	; 0x82
 800d818:	f7f9 fc51 	bl	80070be <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	2000150c 	.word	0x2000150c
 800d82c:	40005c00 	.word	0x40005c00

0800d830 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d846:	4618      	mov	r0, r3
 800d848:	f7f8 f80c 	bl	8005864 <HAL_PCD_Start>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d850:	7bfb      	ldrb	r3, [r7, #15]
 800d852:	4618      	mov	r0, r3
 800d854:	f000 f94e 	bl	800daf4 <USBD_Get_USB_Status>
 800d858:	4603      	mov	r3, r0
 800d85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	4608      	mov	r0, r1
 800d870:	4611      	mov	r1, r2
 800d872:	461a      	mov	r2, r3
 800d874:	4603      	mov	r3, r0
 800d876:	70fb      	strb	r3, [r7, #3]
 800d878:	460b      	mov	r3, r1
 800d87a:	70bb      	strb	r3, [r7, #2]
 800d87c:	4613      	mov	r3, r2
 800d87e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d88e:	78bb      	ldrb	r3, [r7, #2]
 800d890:	883a      	ldrh	r2, [r7, #0]
 800d892:	78f9      	ldrb	r1, [r7, #3]
 800d894:	f7f8 f961 	bl	8005b5a <HAL_PCD_EP_Open>
 800d898:	4603      	mov	r3, r0
 800d89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 f928 	bl	800daf4 <USBD_Get_USB_Status>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8cc:	78fa      	ldrb	r2, [r7, #3]
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7f8 f99f 	bl	8005c14 <HAL_PCD_EP_Close>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 f909 	bl	800daf4 <USBD_Get_USB_Status>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d90a:	78fa      	ldrb	r2, [r7, #3]
 800d90c:	4611      	mov	r1, r2
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f8 fa47 	bl	8005da2 <HAL_PCD_EP_SetStall>
 800d914:	4603      	mov	r3, r0
 800d916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d918:	7bfb      	ldrb	r3, [r7, #15]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f000 f8ea 	bl	800daf4 <USBD_Get_USB_Status>
 800d920:	4603      	mov	r3, r0
 800d922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d924:	7bbb      	ldrb	r3, [r7, #14]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b084      	sub	sp, #16
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	460b      	mov	r3, r1
 800d938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d948:	78fa      	ldrb	r2, [r7, #3]
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7f8 fa88 	bl	8005e62 <HAL_PCD_EP_ClrStall>
 800d952:	4603      	mov	r3, r0
 800d954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d956:	7bfb      	ldrb	r3, [r7, #15]
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 f8cb 	bl	800daf4 <USBD_Get_USB_Status>
 800d95e:	4603      	mov	r3, r0
 800d960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d962:	7bbb      	ldrb	r3, [r7, #14]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d97e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d984:	2b00      	cmp	r3, #0
 800d986:	da0c      	bge.n	800d9a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d98e:	68f9      	ldr	r1, [r7, #12]
 800d990:	1c5a      	adds	r2, r3, #1
 800d992:	4613      	mov	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	00db      	lsls	r3, r3, #3
 800d99a:	440b      	add	r3, r1
 800d99c:	3302      	adds	r3, #2
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	e00b      	b.n	800d9ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9a2:	78fb      	ldrb	r3, [r7, #3]
 800d9a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9a8:	68f9      	ldr	r1, [r7, #12]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	440b      	add	r3, r1
 800d9b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d9b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bc80      	pop	{r7}
 800d9c2:	4770      	bx	lr

0800d9c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9de:	78fa      	ldrb	r2, [r7, #3]
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7f8 f894 	bl	8005b10 <HAL_PCD_SetAddress>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 f880 	bl	800daf4 <USBD_Get_USB_Status>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b086      	sub	sp, #24
 800da06:	af00      	add	r7, sp, #0
 800da08:	60f8      	str	r0, [r7, #12]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	461a      	mov	r2, r3
 800da0e:	460b      	mov	r3, r1
 800da10:	72fb      	strb	r3, [r7, #11]
 800da12:	4613      	mov	r3, r2
 800da14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da16:	2300      	movs	r3, #0
 800da18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da1a:	2300      	movs	r3, #0
 800da1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da24:	893b      	ldrh	r3, [r7, #8]
 800da26:	7af9      	ldrb	r1, [r7, #11]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	f7f8 f983 	bl	8005d34 <HAL_PCD_EP_Transmit>
 800da2e:	4603      	mov	r3, r0
 800da30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	4618      	mov	r0, r3
 800da36:	f000 f85d 	bl	800daf4 <USBD_Get_USB_Status>
 800da3a:	4603      	mov	r3, r0
 800da3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	607a      	str	r2, [r7, #4]
 800da52:	461a      	mov	r2, r3
 800da54:	460b      	mov	r3, r1
 800da56:	72fb      	strb	r3, [r7, #11]
 800da58:	4613      	mov	r3, r2
 800da5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da6a:	893b      	ldrh	r3, [r7, #8]
 800da6c:	7af9      	ldrb	r1, [r7, #11]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	f7f8 f918 	bl	8005ca4 <HAL_PCD_EP_Receive>
 800da74:	4603      	mov	r3, r0
 800da76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da78:	7dfb      	ldrb	r3, [r7, #23]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 f83a 	bl	800daf4 <USBD_Get_USB_Status>
 800da80:	4603      	mov	r3, r0
 800da82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da84:	7dbb      	ldrb	r3, [r7, #22]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b082      	sub	sp, #8
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	460b      	mov	r3, r1
 800da98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daa0:	78fa      	ldrb	r2, [r7, #3]
 800daa2:	4611      	mov	r1, r2
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7f8 f92e 	bl	8005d06 <HAL_PCD_EP_GetRxCount>
 800daaa:	4603      	mov	r3, r0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dabc:	4b02      	ldr	r3, [pc, #8]	; (800dac8 <USBD_static_malloc+0x14>)
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bc80      	pop	{r7}
 800dac6:	4770      	bx	lr
 800dac8:	200017fc 	.word	0x200017fc

0800dacc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]

}
 800dad4:	bf00      	nop
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	bc80      	pop	{r7}
 800dadc:	4770      	bx	lr

0800dade <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dade:	b480      	push	{r7}
 800dae0:	b083      	sub	sp, #12
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800daea:	bf00      	nop
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	bc80      	pop	{r7}
 800daf2:	4770      	bx	lr

0800daf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	4603      	mov	r3, r0
 800dafc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	2b03      	cmp	r3, #3
 800db06:	d817      	bhi.n	800db38 <USBD_Get_USB_Status+0x44>
 800db08:	a201      	add	r2, pc, #4	; (adr r2, 800db10 <USBD_Get_USB_Status+0x1c>)
 800db0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0e:	bf00      	nop
 800db10:	0800db21 	.word	0x0800db21
 800db14:	0800db27 	.word	0x0800db27
 800db18:	0800db2d 	.word	0x0800db2d
 800db1c:	0800db33 	.word	0x0800db33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
    break;
 800db24:	e00b      	b.n	800db3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db26:	2302      	movs	r3, #2
 800db28:	73fb      	strb	r3, [r7, #15]
    break;
 800db2a:	e008      	b.n	800db3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db2c:	2301      	movs	r3, #1
 800db2e:	73fb      	strb	r3, [r7, #15]
    break;
 800db30:	e005      	b.n	800db3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db32:	2302      	movs	r3, #2
 800db34:	73fb      	strb	r3, [r7, #15]
    break;
 800db36:	e002      	b.n	800db3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db38:	2302      	movs	r3, #2
 800db3a:	73fb      	strb	r3, [r7, #15]
    break;
 800db3c:	bf00      	nop
  }
  return usb_status;
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	bc80      	pop	{r7}
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop

0800db4c <__itoa>:
 800db4c:	1e93      	subs	r3, r2, #2
 800db4e:	2b22      	cmp	r3, #34	; 0x22
 800db50:	b510      	push	{r4, lr}
 800db52:	460c      	mov	r4, r1
 800db54:	d904      	bls.n	800db60 <__itoa+0x14>
 800db56:	2300      	movs	r3, #0
 800db58:	461c      	mov	r4, r3
 800db5a:	700b      	strb	r3, [r1, #0]
 800db5c:	4620      	mov	r0, r4
 800db5e:	bd10      	pop	{r4, pc}
 800db60:	2a0a      	cmp	r2, #10
 800db62:	d109      	bne.n	800db78 <__itoa+0x2c>
 800db64:	2800      	cmp	r0, #0
 800db66:	da07      	bge.n	800db78 <__itoa+0x2c>
 800db68:	232d      	movs	r3, #45	; 0x2d
 800db6a:	700b      	strb	r3, [r1, #0]
 800db6c:	2101      	movs	r1, #1
 800db6e:	4240      	negs	r0, r0
 800db70:	4421      	add	r1, r4
 800db72:	f000 f805 	bl	800db80 <__utoa>
 800db76:	e7f1      	b.n	800db5c <__itoa+0x10>
 800db78:	2100      	movs	r1, #0
 800db7a:	e7f9      	b.n	800db70 <__itoa+0x24>

0800db7c <itoa>:
 800db7c:	f7ff bfe6 	b.w	800db4c <__itoa>

0800db80 <__utoa>:
 800db80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db82:	b08b      	sub	sp, #44	; 0x2c
 800db84:	4605      	mov	r5, r0
 800db86:	460b      	mov	r3, r1
 800db88:	466e      	mov	r6, sp
 800db8a:	4c1d      	ldr	r4, [pc, #116]	; (800dc00 <__utoa+0x80>)
 800db8c:	f104 0c20 	add.w	ip, r4, #32
 800db90:	4637      	mov	r7, r6
 800db92:	6820      	ldr	r0, [r4, #0]
 800db94:	6861      	ldr	r1, [r4, #4]
 800db96:	3408      	adds	r4, #8
 800db98:	c703      	stmia	r7!, {r0, r1}
 800db9a:	4564      	cmp	r4, ip
 800db9c:	463e      	mov	r6, r7
 800db9e:	d1f7      	bne.n	800db90 <__utoa+0x10>
 800dba0:	7921      	ldrb	r1, [r4, #4]
 800dba2:	6820      	ldr	r0, [r4, #0]
 800dba4:	7139      	strb	r1, [r7, #4]
 800dba6:	1e91      	subs	r1, r2, #2
 800dba8:	2922      	cmp	r1, #34	; 0x22
 800dbaa:	6038      	str	r0, [r7, #0]
 800dbac:	f04f 0100 	mov.w	r1, #0
 800dbb0:	d904      	bls.n	800dbbc <__utoa+0x3c>
 800dbb2:	7019      	strb	r1, [r3, #0]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	b00b      	add	sp, #44	; 0x2c
 800dbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbbc:	1e58      	subs	r0, r3, #1
 800dbbe:	4684      	mov	ip, r0
 800dbc0:	fbb5 f7f2 	udiv	r7, r5, r2
 800dbc4:	fb02 5617 	mls	r6, r2, r7, r5
 800dbc8:	3628      	adds	r6, #40	; 0x28
 800dbca:	446e      	add	r6, sp
 800dbcc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800dbd0:	460c      	mov	r4, r1
 800dbd2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800dbd6:	462e      	mov	r6, r5
 800dbd8:	42b2      	cmp	r2, r6
 800dbda:	463d      	mov	r5, r7
 800dbdc:	f101 0101 	add.w	r1, r1, #1
 800dbe0:	d9ee      	bls.n	800dbc0 <__utoa+0x40>
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	545a      	strb	r2, [r3, r1]
 800dbe6:	1919      	adds	r1, r3, r4
 800dbe8:	1aa5      	subs	r5, r4, r2
 800dbea:	42aa      	cmp	r2, r5
 800dbec:	dae3      	bge.n	800dbb6 <__utoa+0x36>
 800dbee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800dbf2:	780e      	ldrb	r6, [r1, #0]
 800dbf4:	3201      	adds	r2, #1
 800dbf6:	7006      	strb	r6, [r0, #0]
 800dbf8:	f801 5901 	strb.w	r5, [r1], #-1
 800dbfc:	e7f4      	b.n	800dbe8 <__utoa+0x68>
 800dbfe:	bf00      	nop
 800dc00:	0800e076 	.word	0x0800e076

0800dc04 <memset>:
 800dc04:	4603      	mov	r3, r0
 800dc06:	4402      	add	r2, r0
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d100      	bne.n	800dc0e <memset+0xa>
 800dc0c:	4770      	bx	lr
 800dc0e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc12:	e7f9      	b.n	800dc08 <memset+0x4>

0800dc14 <strncpy>:
 800dc14:	4603      	mov	r3, r0
 800dc16:	b510      	push	{r4, lr}
 800dc18:	3901      	subs	r1, #1
 800dc1a:	b132      	cbz	r2, 800dc2a <strncpy+0x16>
 800dc1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dc20:	3a01      	subs	r2, #1
 800dc22:	f803 4b01 	strb.w	r4, [r3], #1
 800dc26:	2c00      	cmp	r4, #0
 800dc28:	d1f7      	bne.n	800dc1a <strncpy+0x6>
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	441a      	add	r2, r3
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d100      	bne.n	800dc34 <strncpy+0x20>
 800dc32:	bd10      	pop	{r4, pc}
 800dc34:	f803 1b01 	strb.w	r1, [r3], #1
 800dc38:	e7f9      	b.n	800dc2e <strncpy+0x1a>
	...

0800dc3c <__libc_init_array>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	2600      	movs	r6, #0
 800dc40:	4d0c      	ldr	r5, [pc, #48]	; (800dc74 <__libc_init_array+0x38>)
 800dc42:	4c0d      	ldr	r4, [pc, #52]	; (800dc78 <__libc_init_array+0x3c>)
 800dc44:	1b64      	subs	r4, r4, r5
 800dc46:	10a4      	asrs	r4, r4, #2
 800dc48:	42a6      	cmp	r6, r4
 800dc4a:	d109      	bne.n	800dc60 <__libc_init_array+0x24>
 800dc4c:	f000 f828 	bl	800dca0 <_init>
 800dc50:	2600      	movs	r6, #0
 800dc52:	4d0a      	ldr	r5, [pc, #40]	; (800dc7c <__libc_init_array+0x40>)
 800dc54:	4c0a      	ldr	r4, [pc, #40]	; (800dc80 <__libc_init_array+0x44>)
 800dc56:	1b64      	subs	r4, r4, r5
 800dc58:	10a4      	asrs	r4, r4, #2
 800dc5a:	42a6      	cmp	r6, r4
 800dc5c:	d105      	bne.n	800dc6a <__libc_init_array+0x2e>
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc64:	4798      	blx	r3
 800dc66:	3601      	adds	r6, #1
 800dc68:	e7ee      	b.n	800dc48 <__libc_init_array+0xc>
 800dc6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc6e:	4798      	blx	r3
 800dc70:	3601      	adds	r6, #1
 800dc72:	e7f2      	b.n	800dc5a <__libc_init_array+0x1e>
 800dc74:	0800e09c 	.word	0x0800e09c
 800dc78:	0800e09c 	.word	0x0800e09c
 800dc7c:	0800e09c 	.word	0x0800e09c
 800dc80:	0800e0a0 	.word	0x0800e0a0

0800dc84 <memcpy>:
 800dc84:	440a      	add	r2, r1
 800dc86:	4291      	cmp	r1, r2
 800dc88:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc8c:	d100      	bne.n	800dc90 <memcpy+0xc>
 800dc8e:	4770      	bx	lr
 800dc90:	b510      	push	{r4, lr}
 800dc92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc96:	4291      	cmp	r1, r2
 800dc98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc9c:	d1f9      	bne.n	800dc92 <memcpy+0xe>
 800dc9e:	bd10      	pop	{r4, pc}

0800dca0 <_init>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	bf00      	nop
 800dca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca6:	bc08      	pop	{r3}
 800dca8:	469e      	mov	lr, r3
 800dcaa:	4770      	bx	lr

0800dcac <_fini>:
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	bf00      	nop
 800dcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcb2:	bc08      	pop	{r3}
 800dcb4:	469e      	mov	lr, r3
 800dcb6:	4770      	bx	lr
