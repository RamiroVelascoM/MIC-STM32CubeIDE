
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800bec8  0800bec8  0001bec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c29c  0800c29c  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800c29c  0800c29c  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c29c  0800c29c  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c29c  0800c29c  0001c29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2a0  0800c2a0  0001c2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800c2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a24  20000198  0800c43c  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bbc  0800c43c  00021bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d99  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d8e  00000000  00000000  00037f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0003bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103a  00000000  00000000  0003d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b514  00000000  00000000  0003e28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a38e  00000000  00000000  0005979e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094c44  00000000  00000000  00073b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005818  00000000  00000000  00108770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000198 	.word	0x20000198
 8000128:	00000000 	.word	0x00000000
 800012c:	0800beb0 	.word	0x0800beb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000019c 	.word	0x2000019c
 8000148:	0800beb0 	.word	0x0800beb0

0800014c <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 8000156:	4b12      	ldr	r3, [pc, #72]	; (80001a0 <ESP01_SetWIFI+0x54>)
 8000158:	2200      	movs	r2, #0
 800015a:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <ESP01_SetWIFI+0x58>)
 800015e:	2200      	movs	r2, #0
 8000160:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 8000162:	2240      	movs	r2, #64	; 0x40
 8000164:	6879      	ldr	r1, [r7, #4]
 8000166:	4810      	ldr	r0, [pc, #64]	; (80001a8 <ESP01_SetWIFI+0x5c>)
 8000168:	f00b fe5c 	bl	800be24 <strncpy>
	esp01SSID[63] = '\0';
 800016c:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <ESP01_SetWIFI+0x5c>)
 800016e:	2200      	movs	r2, #0
 8000170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	strncpy(esp01PASSWORD, password, 32);
 8000174:	2220      	movs	r2, #32
 8000176:	6839      	ldr	r1, [r7, #0]
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <ESP01_SetWIFI+0x60>)
 800017a:	f00b fe53 	bl	800be24 <strncpy>
	esp01PASSWORD[31] = '\0';
 800017e:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <ESP01_SetWIFI+0x60>)
 8000180:	2200      	movs	r2, #0
 8000182:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <ESP01_SetWIFI+0x64>)
 8000186:	2232      	movs	r2, #50	; 0x32
 8000188:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 800018a:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <ESP01_SetWIFI+0x54>)
 800018c:	220d      	movs	r2, #13
 800018e:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <ESP01_SetWIFI+0x68>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]

}
 8000196:	bf00      	nop
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	200001b4 	.word	0x200001b4
 80001a4:	200001b8 	.word	0x200001b8
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	20000210 	.word	0x20000210
 80001b0:	200001bc 	.word	0x200001bc
 80001b4:	200003ec 	.word	0x200003ec

080001b8 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
 80001c4:	4613      	mov	r3, r2
 80001c6:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 80001c8:	4b1d      	ldr	r3, [pc, #116]	; (8000240 <ESP01_StartUDP+0x88>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d102      	bne.n	80001d6 <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 80001d0:	f04f 33ff 	mov.w	r3, #4294967295
 80001d4:	e02f      	b.n	8000236 <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 80001d6:	883b      	ldrh	r3, [r7, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d102      	bne.n	80001e2 <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 80001dc:	f247 5330 	movw	r3, #30000	; 0x7530
 80001e0:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 80001e2:	4b18      	ldr	r3, [pc, #96]	; (8000244 <ESP01_StartUDP+0x8c>)
 80001e4:	4a18      	ldr	r2, [pc, #96]	; (8000248 <ESP01_StartUDP+0x90>)
 80001e6:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 80001e8:	220f      	movs	r2, #15
 80001ea:	6879      	ldr	r1, [r7, #4]
 80001ec:	4817      	ldr	r0, [pc, #92]	; (800024c <ESP01_StartUDP+0x94>)
 80001ee:	f00b fe19 	bl	800be24 <strncpy>
	esp01RemoteIP[15] = '\0';
 80001f2:	4b16      	ldr	r3, [pc, #88]	; (800024c <ESP01_StartUDP+0x94>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 80001f8:	887b      	ldrh	r3, [r7, #2]
 80001fa:	220a      	movs	r2, #10
 80001fc:	4914      	ldr	r1, [pc, #80]	; (8000250 <ESP01_StartUDP+0x98>)
 80001fe:	4618      	mov	r0, r3
 8000200:	f00b fdc4 	bl	800bd8c <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8000204:	883b      	ldrh	r3, [r7, #0]
 8000206:	220a      	movs	r2, #10
 8000208:	4912      	ldr	r1, [pc, #72]	; (8000254 <ESP01_StartUDP+0x9c>)
 800020a:	4618      	mov	r0, r3
 800020c:	f00b fdbe 	bl	800bd8c <itoa>

	if(esp01SSID[0] == '\0')
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <ESP01_StartUDP+0xa0>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d101      	bne.n	800021c <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8000218:	2301      	movs	r3, #1
 800021a:	e00c      	b.n	8000236 <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <ESP01_StartUDP+0xa4>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	f003 0302 	and.w	r3, r3, #2
 8000224:	b2db      	uxtb	r3, r3
 8000226:	2b00      	cmp	r3, #0
 8000228:	d101      	bne.n	800022e <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 800022a:	2300      	movs	r3, #0
 800022c:	e003      	b.n	8000236 <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 800022e:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <ESP01_StartUDP+0xa8>)
 8000230:	2209      	movs	r2, #9
 8000232:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8000234:	2306      	movs	r3, #6
}
 8000236:	4618      	mov	r0, r3
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	200003f0 	.word	0x200003f0
 8000244:	20000000 	.word	0x20000000
 8000248:	00504455 	.word	0x00504455
 800024c:	20000230 	.word	0x20000230
 8000250:	20000240 	.word	0x20000240
 8000254:	20000258 	.word	0x20000258
 8000258:	200001d0 	.word	0x200001d0
 800025c:	200001b8 	.word	0x200001b8
 8000260:	200001b4 	.word	0x200001b4

08000264 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <ESP01_WriteRX+0x38>)
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	b291      	uxth	r1, r2
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <ESP01_WriteRX+0x38>)
 8000278:	8011      	strh	r1, [r2, #0]
 800027a:	4619      	mov	r1, r3
 800027c:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <ESP01_WriteRX+0x3c>)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <ESP01_WriteRX+0x38>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	2b80      	cmp	r3, #128	; 0x80
 8000288:	d102      	bne.n	8000290 <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <ESP01_WriteRX+0x38>)
 800028c:	2200      	movs	r2, #0
 800028e:	801a      	strh	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200003e4 	.word	0x200003e4
 80002a0:	20000264 	.word	0x20000264

080002a4 <ESP01_Init>:

	return ESP01_SEND_BUSY;
}


void ESP01_Init(_sESP01Handle *hESP01){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 80002ac:	220c      	movs	r2, #12
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	4810      	ldr	r0, [pc, #64]	; (80002f4 <ESP01_Init+0x50>)
 80002b2:	f00b fdef 	bl	800be94 <memcpy>

	esp01ATSate = ESP01ATIDLE;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <ESP01_Init+0x54>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <ESP01_Init+0x58>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <ESP01_Init+0x5c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <ESP01_Init+0x60>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <ESP01_Init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <ESP01_Init+0x68>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <ESP01_Init+0x6c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <ESP01_Init+0x70>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <ESP01_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200003f0 	.word	0x200003f0
 80002f8:	200001b4 	.word	0x200001b4
 80002fc:	2000025e 	.word	0x2000025e
 8000300:	200003e8 	.word	0x200003e8
 8000304:	200003ea 	.word	0x200003ea
 8000308:	200003e6 	.word	0x200003e6
 800030c:	200003e4 	.word	0x200003e4
 8000310:	200001b8 	.word	0x200001b8
 8000314:	200001c8 	.word	0x200001c8
 8000318:	200001cc 	.word	0x200001cc

0800031c <ESP01_Task>:

	if(esp01TimeoutTxSymbol)
		esp01TimeoutTxSymbol--;
}

void ESP01_Task(){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0

	if(esp01irRXAT != esp01iwRXAT)
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <ESP01_Task+0x28>)
 8000322:	881a      	ldrh	r2, [r3, #0]
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <ESP01_Task+0x2c>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d001      	beq.n	8000330 <ESP01_Task+0x14>
		ESP01ATDecode();
 800032c:	f000 f810 	bl	8000350 <ESP01ATDecode>

	if(!esp01TimeoutTask)
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <ESP01_Task+0x30>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d101      	bne.n	800033c <ESP01_Task+0x20>
		ESP01DOConnection();
 8000338:	f000 fbc2 	bl	8000ac0 <ESP01DOConnection>

	ESP01SENDData();
 800033c:	f000 fdca 	bl	8000ed4 <ESP01SENDData>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200003e6 	.word	0x200003e6
 8000348:	200003e4 	.word	0x200003e4
 800034c:	200001bc 	.word	0x200001bc

08000350 <ESP01ATDecode>:




/* Private Functions */
static void ESP01ATDecode(){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;

	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8000356:	4b7f      	ldr	r3, [pc, #508]	; (8000554 <ESP01ATDecode+0x204>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b0d      	cmp	r3, #13
 800035c:	d007      	beq.n	800036e <ESP01ATDecode+0x1e>
 800035e:	4b7d      	ldr	r3, [pc, #500]	; (8000554 <ESP01ATDecode+0x204>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b0e      	cmp	r3, #14
 8000364:	d003      	beq.n	800036e <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 8000366:	4b7b      	ldr	r3, [pc, #492]	; (8000554 <ESP01ATDecode+0x204>)
 8000368:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 800036a:	2b0f      	cmp	r3, #15
 800036c:	d104      	bne.n	8000378 <ESP01ATDecode+0x28>
		esp01irRXAT = esp01iwRXAT;
 800036e:	4b7a      	ldr	r3, [pc, #488]	; (8000558 <ESP01ATDecode+0x208>)
 8000370:	881a      	ldrh	r2, [r3, #0]
 8000372:	4b7a      	ldr	r3, [pc, #488]	; (800055c <ESP01ATDecode+0x20c>)
 8000374:	801a      	strh	r2, [r3, #0]
		return;
 8000376:	e383      	b.n	8000a80 <ESP01ATDecode+0x730>
	}


	i = esp01iwRXAT;
 8000378:	4b77      	ldr	r3, [pc, #476]	; (8000558 <ESP01ATDecode+0x208>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 800037e:	4b78      	ldr	r3, [pc, #480]	; (8000560 <ESP01ATDecode+0x210>)
 8000380:	2202      	movs	r2, #2
 8000382:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 8000384:	e376      	b.n	8000a74 <ESP01ATDecode+0x724>
		value = esp01RXATBuf[esp01irRXAT];
 8000386:	4b75      	ldr	r3, [pc, #468]	; (800055c <ESP01ATDecode+0x20c>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	461a      	mov	r2, r3
 800038c:	4b75      	ldr	r3, [pc, #468]	; (8000564 <ESP01ATDecode+0x214>)
 800038e:	5c9b      	ldrb	r3, [r3, r2]
 8000390:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 8000392:	4b75      	ldr	r3, [pc, #468]	; (8000568 <ESP01ATDecode+0x218>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b0c      	cmp	r3, #12
 8000398:	f200 834d 	bhi.w	8000a36 <ESP01ATDecode+0x6e6>
 800039c:	a201      	add	r2, pc, #4	; (adr r2, 80003a4 <ESP01ATDecode+0x54>)
 800039e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a2:	bf00      	nop
 80003a4:	080003d9 	.word	0x080003d9
 80003a8:	080004cb 	.word	0x080004cb
 80003ac:	080006af 	.word	0x080006af
 80003b0:	08000a37 	.word	0x08000a37
 80003b4:	08000a37 	.word	0x08000a37
 80003b8:	080008a7 	.word	0x080008a7
 80003bc:	080008ed 	.word	0x080008ed
 80003c0:	08000903 	.word	0x08000903
 80003c4:	0800092f 	.word	0x0800092f
 80003c8:	08000a37 	.word	0x08000a37
 80003cc:	0800097b 	.word	0x0800097b
 80003d0:	080009a3 	.word	0x080009a3
 80003d4:	080009f9 	.word	0x080009f9
		case 0:
            indexResponse = 0;
 80003d8:	4b64      	ldr	r3, [pc, #400]	; (800056c <ESP01ATDecode+0x21c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 80003de:	4b64      	ldr	r3, [pc, #400]	; (8000570 <ESP01ATDecode+0x220>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 80003e4:	e03f      	b.n	8000466 <ESP01ATDecode+0x116>
                if(value == responses[indexResponse][indexResponseChar]){
 80003e6:	4b61      	ldr	r3, [pc, #388]	; (800056c <ESP01ATDecode+0x21c>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	4b61      	ldr	r3, [pc, #388]	; (8000574 <ESP01ATDecode+0x224>)
 80003ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003f2:	4a5f      	ldr	r2, [pc, #380]	; (8000570 <ESP01ATDecode+0x220>)
 80003f4:	7812      	ldrb	r2, [r2, #0]
 80003f6:	4413      	add	r3, r2
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	797a      	ldrb	r2, [r7, #5]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d12c      	bne.n	800045a <ESP01ATDecode+0x10a>
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8000400:	4b5a      	ldr	r3, [pc, #360]	; (800056c <ESP01ATDecode+0x21c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	4b5b      	ldr	r3, [pc, #364]	; (8000574 <ESP01ATDecode+0x224>)
 8000408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	b29b      	uxth	r3, r3
 8000410:	3b30      	subs	r3, #48	; 0x30
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b58      	ldr	r3, [pc, #352]	; (8000578 <ESP01ATDecode+0x228>)
 8000416:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8000418:	4b57      	ldr	r3, [pc, #348]	; (8000578 <ESP01ATDecode+0x228>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	0092      	lsls	r2, r2, #2
 8000420:	4413      	add	r3, r2
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	b29a      	uxth	r2, r3
 8000426:	4b54      	ldr	r3, [pc, #336]	; (8000578 <ESP01ATDecode+0x228>)
 8000428:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 800042a:	4b50      	ldr	r3, [pc, #320]	; (800056c <ESP01ATDecode+0x21c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	461a      	mov	r2, r3
 8000430:	4b50      	ldr	r3, [pc, #320]	; (8000574 <ESP01ATDecode+0x224>)
 8000432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000436:	3301      	adds	r3, #1
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b4e      	ldr	r3, [pc, #312]	; (8000578 <ESP01ATDecode+0x228>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	4413      	add	r3, r2
 8000442:	b29b      	uxth	r3, r3
 8000444:	3b30      	subs	r3, #48	; 0x30
 8000446:	b29a      	uxth	r2, r3
 8000448:	4b4b      	ldr	r3, [pc, #300]	; (8000578 <ESP01ATDecode+0x228>)
 800044a:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 800044c:	4b4a      	ldr	r3, [pc, #296]	; (8000578 <ESP01ATDecode+0x228>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b48      	ldr	r3, [pc, #288]	; (8000578 <ESP01ATDecode+0x228>)
 8000456:	801a      	strh	r2, [r3, #0]
                    break;
 8000458:	e00d      	b.n	8000476 <ESP01ATDecode+0x126>
                }
                indexResponse++;
 800045a:	4b44      	ldr	r3, [pc, #272]	; (800056c <ESP01ATDecode+0x21c>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b42      	ldr	r3, [pc, #264]	; (800056c <ESP01ATDecode+0x21c>)
 8000464:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8000466:	4b41      	ldr	r3, [pc, #260]	; (800056c <ESP01ATDecode+0x21c>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	4b41      	ldr	r3, [pc, #260]	; (8000574 <ESP01ATDecode+0x224>)
 800046e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1b7      	bne.n	80003e6 <ESP01ATDecode+0x96>
            }
            if(responses[indexResponse] != NULL){
 8000476:	4b3d      	ldr	r3, [pc, #244]	; (800056c <ESP01ATDecode+0x21c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	461a      	mov	r2, r3
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <ESP01ATDecode+0x224>)
 800047e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d009      	beq.n	800049a <ESP01ATDecode+0x14a>
                esp01HState = 1;
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <ESP01ATDecode+0x218>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 800048c:	4b38      	ldr	r3, [pc, #224]	; (8000570 <ESP01ATDecode+0x220>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b36      	ldr	r3, [pc, #216]	; (8000570 <ESP01ATDecode+0x220>)
 8000496:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 8000498:	e2d4      	b.n	8000a44 <ESP01ATDecode+0x6f4>
				esp01TimeoutDataRx = 0;
 800049a:	4b31      	ldr	r3, [pc, #196]	; (8000560 <ESP01ATDecode+0x210>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 80004a0:	4b36      	ldr	r3, [pc, #216]	; (800057c <ESP01ATDecode+0x22c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f000 82ca 	beq.w	8000a44 <ESP01ATDecode+0x6f4>
					if(value == '>'){
 80004b0:	797b      	ldrb	r3, [r7, #5]
 80004b2:	2b3e      	cmp	r3, #62	; 0x3e
 80004b4:	f040 82c6 	bne.w	8000a44 <ESP01ATDecode+0x6f4>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 80004b8:	4a30      	ldr	r2, [pc, #192]	; (800057c <ESP01ATDecode+0x22c>)
 80004ba:	7813      	ldrb	r3, [r2, #0]
 80004bc:	f36f 0300 	bfc	r3, #0, #1
 80004c0:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <ESP01ATDecode+0x230>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
			break;
 80004c8:	e2bc      	b.n	8000a44 <ESP01ATDecode+0x6f4>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 80004ca:	4b28      	ldr	r3, [pc, #160]	; (800056c <ESP01ATDecode+0x21c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b28      	ldr	r3, [pc, #160]	; (8000574 <ESP01ATDecode+0x224>)
 80004d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d6:	4a26      	ldr	r2, [pc, #152]	; (8000570 <ESP01ATDecode+0x220>)
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	797a      	ldrb	r2, [r7, #5]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d133      	bne.n	800054c <ESP01ATDecode+0x1fc>
                esp01nBytes--;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <ESP01ATDecode+0x228>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <ESP01ATDecode+0x228>)
 80004ee:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <ESP01ATDecode+0x228>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d003      	beq.n	8000500 <ESP01ATDecode+0x1b0>
 80004f8:	797b      	ldrb	r3, [r7, #5]
 80004fa:	2b0d      	cmp	r3, #13
 80004fc:	f040 80d0 	bne.w	80006a0 <ESP01ATDecode+0x350>
                    esp01HState = (responses[indexResponse][2] - '0');
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <ESP01ATDecode+0x21c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <ESP01ATDecode+0x224>)
 8000508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800050c:	3302      	adds	r3, #2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3b30      	subs	r3, #48	; 0x30
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <ESP01ATDecode+0x218>)
 8000516:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <ESP01ATDecode+0x218>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	4413      	add	r3, r2
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <ESP01ATDecode+0x218>)
 8000528:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <ESP01ATDecode+0x21c>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <ESP01ATDecode+0x224>)
 8000532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000536:	3303      	adds	r3, #3
 8000538:	781a      	ldrb	r2, [r3, #0]
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <ESP01ATDecode+0x218>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	3b30      	subs	r3, #48	; 0x30
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <ESP01ATDecode+0x218>)
 8000548:	701a      	strb	r2, [r3, #0]
                    break;
 800054a:	e286      	b.n	8000a5a <ESP01ATDecode+0x70a>
                }
            }
            else{
                indexResponse = 0;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <ESP01ATDecode+0x21c>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8000552:	e089      	b.n	8000668 <ESP01ATDecode+0x318>
 8000554:	200001b4 	.word	0x200001b4
 8000558:	200003e4 	.word	0x200003e4
 800055c:	200003e6 	.word	0x200003e6
 8000560:	200001c0 	.word	0x200001c0
 8000564:	20000264 	.word	0x20000264
 8000568:	2000025e 	.word	0x2000025e
 800056c:	200003fc 	.word	0x200003fc
 8000570:	200003fd 	.word	0x200003fd
 8000574:	0800c200 	.word	0x0800c200
 8000578:	20000260 	.word	0x20000260
 800057c:	200001b8 	.word	0x200001b8
 8000580:	200001c4 	.word	0x200001c4
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8000584:	4ba5      	ldr	r3, [pc, #660]	; (800081c <ESP01ATDecode+0x4cc>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4ba5      	ldr	r3, [pc, #660]	; (8000820 <ESP01ATDecode+0x4d0>)
 800058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b29b      	uxth	r3, r3
 8000594:	3b30      	subs	r3, #48	; 0x30
 8000596:	b29a      	uxth	r2, r3
 8000598:	4ba2      	ldr	r3, [pc, #648]	; (8000824 <ESP01ATDecode+0x4d4>)
 800059a:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 800059c:	4ba1      	ldr	r3, [pc, #644]	; (8000824 <ESP01ATDecode+0x4d4>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	0092      	lsls	r2, r2, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b9e      	ldr	r3, [pc, #632]	; (8000824 <ESP01ATDecode+0x4d4>)
 80005ac:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 80005ae:	4b9b      	ldr	r3, [pc, #620]	; (800081c <ESP01ATDecode+0x4cc>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b9a      	ldr	r3, [pc, #616]	; (8000820 <ESP01ATDecode+0x4d0>)
 80005b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ba:	3301      	adds	r3, #1
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b98      	ldr	r3, [pc, #608]	; (8000824 <ESP01ATDecode+0x4d4>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	3b30      	subs	r3, #48	; 0x30
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b95      	ldr	r3, [pc, #596]	; (8000824 <ESP01ATDecode+0x4d4>)
 80005ce:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 80005d0:	4b94      	ldr	r3, [pc, #592]	; (8000824 <ESP01ATDecode+0x4d4>)
 80005d2:	881a      	ldrh	r2, [r3, #0]
 80005d4:	4b94      	ldr	r3, [pc, #592]	; (8000828 <ESP01ATDecode+0x4d8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	b29b      	uxth	r3, r3
 80005de:	3303      	adds	r3, #3
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b90      	ldr	r3, [pc, #576]	; (8000824 <ESP01ATDecode+0x4d4>)
 80005e4:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 80005e6:	4b8f      	ldr	r3, [pc, #572]	; (8000824 <ESP01ATDecode+0x4d4>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	2b7f      	cmp	r3, #127	; 0x7f
 80005ec:	d836      	bhi.n	800065c <ESP01ATDecode+0x30c>
 80005ee:	4b8b      	ldr	r3, [pc, #556]	; (800081c <ESP01ATDecode+0x4cc>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b8a      	ldr	r3, [pc, #552]	; (8000820 <ESP01ATDecode+0x4d0>)
 80005f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005fa:	4a8b      	ldr	r2, [pc, #556]	; (8000828 <ESP01ATDecode+0x4d8>)
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d129      	bne.n	800065c <ESP01ATDecode+0x30c>
                        if(esp01nBytes == 0){
 8000608:	4b86      	ldr	r3, [pc, #536]	; (8000824 <ESP01ATDecode+0x4d4>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d134      	bne.n	800067a <ESP01ATDecode+0x32a>
                            esp01HState = (responses[indexResponse][2] - '0');
 8000610:	4b82      	ldr	r3, [pc, #520]	; (800081c <ESP01ATDecode+0x4cc>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b82      	ldr	r3, [pc, #520]	; (8000820 <ESP01ATDecode+0x4d0>)
 8000618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3b30      	subs	r3, #48	; 0x30
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b81      	ldr	r3, [pc, #516]	; (800082c <ESP01ATDecode+0x4dc>)
 8000626:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8000628:	4b80      	ldr	r3, [pc, #512]	; (800082c <ESP01ATDecode+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b7d      	ldr	r3, [pc, #500]	; (800082c <ESP01ATDecode+0x4dc>)
 8000638:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 800063a:	4b78      	ldr	r3, [pc, #480]	; (800081c <ESP01ATDecode+0x4cc>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4b77      	ldr	r3, [pc, #476]	; (8000820 <ESP01ATDecode+0x4d0>)
 8000642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000646:	3303      	adds	r3, #3
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b78      	ldr	r3, [pc, #480]	; (800082c <ESP01ATDecode+0x4dc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	3b30      	subs	r3, #48	; 0x30
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b75      	ldr	r3, [pc, #468]	; (800082c <ESP01ATDecode+0x4dc>)
 8000658:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800065a:	e00e      	b.n	800067a <ESP01ATDecode+0x32a>
                    }
                    indexResponse++;
 800065c:	4b6f      	ldr	r3, [pc, #444]	; (800081c <ESP01ATDecode+0x4cc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b6d      	ldr	r3, [pc, #436]	; (800081c <ESP01ATDecode+0x4cc>)
 8000666:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8000668:	4b6c      	ldr	r3, [pc, #432]	; (800081c <ESP01ATDecode+0x4cc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <ESP01ATDecode+0x4d0>)
 8000670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d185      	bne.n	8000584 <ESP01ATDecode+0x234>
 8000678:	e000      	b.n	800067c <ESP01ATDecode+0x32c>
                        break;
 800067a:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 800067c:	4b67      	ldr	r3, [pc, #412]	; (800081c <ESP01ATDecode+0x4cc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b67      	ldr	r3, [pc, #412]	; (8000820 <ESP01ATDecode+0x4d0>)
 8000684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d109      	bne.n	80006a0 <ESP01ATDecode+0x350>
                    esp01HState = 0;
 800068c:	4b67      	ldr	r3, [pc, #412]	; (800082c <ESP01ATDecode+0x4dc>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 8000692:	4b67      	ldr	r3, [pc, #412]	; (8000830 <ESP01ATDecode+0x4e0>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	3b01      	subs	r3, #1
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b65      	ldr	r3, [pc, #404]	; (8000830 <ESP01ATDecode+0x4e0>)
 800069c:	801a      	strh	r2, [r3, #0]
                    break;
 800069e:	e1dc      	b.n	8000a5a <ESP01ATDecode+0x70a>
                }
            }
			indexResponseChar++;
 80006a0:	4b61      	ldr	r3, [pc, #388]	; (8000828 <ESP01ATDecode+0x4d8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b5f      	ldr	r3, [pc, #380]	; (8000828 <ESP01ATDecode+0x4d8>)
 80006aa:	701a      	strb	r2, [r3, #0]
			break;
 80006ac:	e1d5      	b.n	8000a5a <ESP01ATDecode+0x70a>
		case 2:
			if(value == '\n'){
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	2b0a      	cmp	r3, #10
 80006b2:	f040 81c9 	bne.w	8000a48 <ESP01ATDecode+0x6f8>
				esp01HState = 0;
 80006b6:	4b5d      	ldr	r3, [pc, #372]	; (800082c <ESP01ATDecode+0x4dc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 80006bc:	4b57      	ldr	r3, [pc, #348]	; (800081c <ESP01ATDecode+0x4cc>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b11      	cmp	r3, #17
 80006c2:	f200 81c1 	bhi.w	8000a48 <ESP01ATDecode+0x6f8>
 80006c6:	a201      	add	r2, pc, #4	; (adr r2, 80006cc <ESP01ATDecode+0x37c>)
 80006c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006cc:	0800088b 	.word	0x0800088b
 80006d0:	0800088b 	.word	0x0800088b
 80006d4:	08000715 	.word	0x08000715
 80006d8:	08000731 	.word	0x08000731
 80006dc:	0800075f 	.word	0x0800075f
 80006e0:	0800088b 	.word	0x0800088b
 80006e4:	08000795 	.word	0x08000795
 80006e8:	08000795 	.word	0x08000795
 80006ec:	080007c9 	.word	0x080007c9
 80006f0:	080007d5 	.word	0x080007d5
 80006f4:	080007f1 	.word	0x080007f1
 80006f8:	0800084d 	.word	0x0800084d
 80006fc:	08000a49 	.word	0x08000a49
 8000700:	08000859 	.word	0x08000859
 8000704:	08000a49 	.word	0x08000a49
 8000708:	0800086f 	.word	0x0800086f
 800070c:	0800088b 	.word	0x0800088b
 8000710:	0800088b 	.word	0x0800088b
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 8000714:	4b47      	ldr	r3, [pc, #284]	; (8000834 <ESP01ATDecode+0x4e4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	f040 80b8 	bne.w	800088e <ESP01ATDecode+0x53e>
						esp01TimeoutTask = 0;
 800071e:	4b46      	ldr	r3, [pc, #280]	; (8000838 <ESP01ATDecode+0x4e8>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8000724:	4a45      	ldr	r2, [pc, #276]	; (800083c <ESP01ATDecode+0x4ec>)
 8000726:	7813      	ldrb	r3, [r2, #0]
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	7013      	strb	r3, [r2, #0]
					}
					break;
 800072e:	e0ae      	b.n	800088e <ESP01ATDecode+0x53e>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8000730:	4b42      	ldr	r3, [pc, #264]	; (800083c <ESP01ATDecode+0x4ec>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	f000 80a9 	beq.w	8000892 <ESP01ATDecode+0x542>
						esp01Flags.bit.SENDINGDATA = 0;
 8000740:	4a3e      	ldr	r2, [pc, #248]	; (800083c <ESP01ATDecode+0x4ec>)
 8000742:	7813      	ldrb	r3, [r2, #0]
 8000744:	f36f 03c3 	bfc	r3, #3, #1
 8000748:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <ESP01ATDecode+0x4ec>)
 800074c:	7813      	ldrb	r3, [r2, #0]
 800074e:	f36f 1386 	bfc	r3, #6, #1
 8000752:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 8000754:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <ESP01ATDecode+0x4f0>)
 8000756:	881a      	ldrh	r2, [r3, #0]
 8000758:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <ESP01ATDecode+0x4f4>)
 800075a:	801a      	strh	r2, [r3, #0]
					}
					break;
 800075c:	e099      	b.n	8000892 <ESP01ATDecode+0x542>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <ESP01ATDecode+0x4e8>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8000764:	4b33      	ldr	r3, [pc, #204]	; (8000834 <ESP01ATDecode+0x4e4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b06      	cmp	r3, #6
 800076a:	d104      	bne.n	8000776 <ESP01ATDecode+0x426>
						esp01Flags.bit.ATRESPONSEOK = 1;
 800076c:	4a33      	ldr	r2, [pc, #204]	; (800083c <ESP01ATDecode+0x4ec>)
 800076e:	7813      	ldrb	r3, [r2, #0]
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 8000776:	4a31      	ldr	r2, [pc, #196]	; (800083c <ESP01ATDecode+0x4ec>)
 8000778:	7813      	ldrb	r3, [r2, #0]
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <ESP01ATDecode+0x4f8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	f000 8086 	beq.w	8000896 <ESP01ATDecode+0x546>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <ESP01ATDecode+0x4f8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2003      	movs	r0, #3
 8000790:	4798      	blx	r3
					break;
 8000792:	e080      	b.n	8000896 <ESP01ATDecode+0x546>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000794:	4a29      	ldr	r2, [pc, #164]	; (800083c <ESP01ATDecode+0x4ec>)
 8000796:	7813      	ldrb	r3, [r2, #0]
 8000798:	f36f 1386 	bfc	r3, #6, #1
 800079c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 800079e:	4a27      	ldr	r2, [pc, #156]	; (800083c <ESP01ATDecode+0x4ec>)
 80007a0:	7813      	ldrb	r3, [r2, #0]
 80007a2:	f36f 0341 	bfc	r3, #1, #1
 80007a6:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <ESP01ATDecode+0x4f8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d003      	beq.n	80007b8 <ESP01ATDecode+0x468>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <ESP01ATDecode+0x4f8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2000      	movs	r0, #0
 80007b6:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <ESP01ATDecode+0x4e4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b06      	cmp	r3, #6
 80007be:	d06c      	beq.n	800089a <ESP01ATDecode+0x54a>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <ESP01ATDecode+0x4e4>)
 80007c2:	220f      	movs	r2, #15
 80007c4:	701a      	strb	r2, [r3, #0]
					break;
 80007c6:	e06d      	b.n	80008a4 <ESP01ATDecode+0x554>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80007c8:	4a1c      	ldr	r2, [pc, #112]	; (800083c <ESP01ATDecode+0x4ec>)
 80007ca:	7813      	ldrb	r3, [r2, #0]
 80007cc:	f36f 1386 	bfc	r3, #6, #1
 80007d0:	7013      	strb	r3, [r2, #0]
					break;
 80007d2:	e067      	b.n	80008a4 <ESP01ATDecode+0x554>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 80007d4:	4a19      	ldr	r2, [pc, #100]	; (800083c <ESP01ATDecode+0x4ec>)
 80007d6:	7813      	ldrb	r3, [r2, #0]
 80007d8:	f36f 03c3 	bfc	r3, #3, #1
 80007dc:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <ESP01ATDecode+0x4f8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d05b      	beq.n	800089e <ESP01ATDecode+0x54e>
						ESP01ChangeState(ESP01_SEND_OK);
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <ESP01ATDecode+0x4f8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	200a      	movs	r0, #10
 80007ec:	4798      	blx	r3
					break;
 80007ee:	e056      	b.n	800089e <ESP01ATDecode+0x54e>
				case 10://CONNECT
					esp01TimeoutTask = 0;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <ESP01ATDecode+0x4e8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <ESP01ATDecode+0x4ec>)
 80007f8:	7813      	ldrb	r3, [r2, #0]
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <ESP01ATDecode+0x4ec>)
 8000802:	7813      	ldrb	r3, [r2, #0]
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <ESP01ATDecode+0x4f8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d047      	beq.n	80008a2 <ESP01ATDecode+0x552>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <ESP01ATDecode+0x4f8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2007      	movs	r0, #7
 8000818:	4798      	blx	r3
					break;
 800081a:	e042      	b.n	80008a2 <ESP01ATDecode+0x552>
 800081c:	200003fc 	.word	0x200003fc
 8000820:	0800c200 	.word	0x0800c200
 8000824:	20000260 	.word	0x20000260
 8000828:	200003fd 	.word	0x200003fd
 800082c:	2000025e 	.word	0x2000025e
 8000830:	200003e6 	.word	0x200003e6
 8000834:	200001b4 	.word	0x200001b4
 8000838:	200001bc 	.word	0x200001bc
 800083c:	200001b8 	.word	0x200001b8
 8000840:	200003ea 	.word	0x200003ea
 8000844:	200003e8 	.word	0x200003e8
 8000848:	200001c8 	.word	0x200001c8
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 800084c:	4a8e      	ldr	r2, [pc, #568]	; (8000a88 <ESP01ATDecode+0x738>)
 800084e:	7813      	ldrb	r3, [r2, #0]
 8000850:	f36f 1386 	bfc	r3, #6, #1
 8000854:	7013      	strb	r3, [r2, #0]
					break;
 8000856:	e025      	b.n	80008a4 <ESP01ATDecode+0x554>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000858:	4a8b      	ldr	r2, [pc, #556]	; (8000a88 <ESP01ATDecode+0x738>)
 800085a:	7813      	ldrb	r3, [r2, #0]
 800085c:	f36f 1386 	bfc	r3, #6, #1
 8000860:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8000862:	4a89      	ldr	r2, [pc, #548]	; (8000a88 <ESP01ATDecode+0x738>)
 8000864:	7813      	ldrb	r3, [r2, #0]
 8000866:	f36f 0341 	bfc	r3, #1, #1
 800086a:	7013      	strb	r3, [r2, #0]
					break;
 800086c:	e01a      	b.n	80008a4 <ESP01ATDecode+0x554>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 800086e:	4a86      	ldr	r2, [pc, #536]	; (8000a88 <ESP01ATDecode+0x738>)
 8000870:	7813      	ldrb	r3, [r2, #0]
 8000872:	f36f 1386 	bfc	r3, #6, #1
 8000876:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8000878:	4a83      	ldr	r2, [pc, #524]	; (8000a88 <ESP01ATDecode+0x738>)
 800087a:	7813      	ldrb	r3, [r2, #0]
 800087c:	f36f 0341 	bfc	r3, #1, #1
 8000880:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8000882:	4b82      	ldr	r3, [pc, #520]	; (8000a8c <ESP01ATDecode+0x73c>)
 8000884:	220f      	movs	r2, #15
 8000886:	701a      	strb	r2, [r3, #0]
					break;
 8000888:	e00c      	b.n	80008a4 <ESP01ATDecode+0x554>
					break;
 800088a:	bf00      	nop
 800088c:	e0dc      	b.n	8000a48 <ESP01ATDecode+0x6f8>
					break;
 800088e:	bf00      	nop
 8000890:	e0da      	b.n	8000a48 <ESP01ATDecode+0x6f8>
					break;
 8000892:	bf00      	nop
 8000894:	e0d8      	b.n	8000a48 <ESP01ATDecode+0x6f8>
					break;
 8000896:	bf00      	nop
 8000898:	e0d6      	b.n	8000a48 <ESP01ATDecode+0x6f8>
						break;
 800089a:	bf00      	nop
 800089c:	e0d4      	b.n	8000a48 <ESP01ATDecode+0x6f8>
					break;
 800089e:	bf00      	nop
 80008a0:	e0d2      	b.n	8000a48 <ESP01ATDecode+0x6f8>
					break;
 80008a2:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 80008a4:	e0d0      	b.n	8000a48 <ESP01ATDecode+0x6f8>
		case 5://CIFR,STAIP
			if(value == ','){
 80008a6:	797b      	ldrb	r3, [r7, #5]
 80008a8:	2b2c      	cmp	r3, #44	; 0x2c
 80008aa:	d10c      	bne.n	80008c6 <ESP01ATDecode+0x576>
				esp01HState = 6;
 80008ac:	4b78      	ldr	r3, [pc, #480]	; (8000a90 <ESP01ATDecode+0x740>)
 80008ae:	2206      	movs	r2, #6
 80008b0:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 80008b2:	4b78      	ldr	r3, [pc, #480]	; (8000a94 <ESP01ATDecode+0x744>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 80c8 	beq.w	8000a4c <ESP01ATDecode+0x6fc>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 80008bc:	4b75      	ldr	r3, [pc, #468]	; (8000a94 <ESP01ATDecode+0x744>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4875      	ldr	r0, [pc, #468]	; (8000a98 <ESP01ATDecode+0x748>)
 80008c2:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 80008c4:	e0c2      	b.n	8000a4c <ESP01ATDecode+0x6fc>
				esp01HState = 0;
 80008c6:	4b72      	ldr	r3, [pc, #456]	; (8000a90 <ESP01ATDecode+0x740>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80008cc:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <ESP01ATDecode+0x74c>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b71      	ldr	r3, [pc, #452]	; (8000a9c <ESP01ATDecode+0x74c>)
 80008d6:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 80008d8:	4b6e      	ldr	r3, [pc, #440]	; (8000a94 <ESP01ATDecode+0x744>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 80b5 	beq.w	8000a4c <ESP01ATDecode+0x6fc>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 80008e2:	4b6c      	ldr	r3, [pc, #432]	; (8000a94 <ESP01ATDecode+0x744>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	486e      	ldr	r0, [pc, #440]	; (8000aa0 <ESP01ATDecode+0x750>)
 80008e8:	4798      	blx	r3
			break;
 80008ea:	e0af      	b.n	8000a4c <ESP01ATDecode+0x6fc>
		case 6:
			if(value == '\"'){
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	2b22      	cmp	r3, #34	; 0x22
 80008f0:	f040 80ae 	bne.w	8000a50 <ESP01ATDecode+0x700>
				esp01HState = 7;
 80008f4:	4b66      	ldr	r3, [pc, #408]	; (8000a90 <ESP01ATDecode+0x740>)
 80008f6:	2207      	movs	r2, #7
 80008f8:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80008fa:	4b6a      	ldr	r3, [pc, #424]	; (8000aa4 <ESP01ATDecode+0x754>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
			}
			break;
 8000900:	e0a6      	b.n	8000a50 <ESP01ATDecode+0x700>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	2b22      	cmp	r3, #34	; 0x22
 8000906:	d003      	beq.n	8000910 <ESP01ATDecode+0x5c0>
 8000908:	4b66      	ldr	r3, [pc, #408]	; (8000aa4 <ESP01ATDecode+0x754>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	2b10      	cmp	r3, #16
 800090e:	d103      	bne.n	8000918 <ESP01ATDecode+0x5c8>
				esp01HState = 8;
 8000910:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <ESP01ATDecode+0x740>)
 8000912:	2208      	movs	r2, #8
 8000914:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 8000916:	e0a0      	b.n	8000a5a <ESP01ATDecode+0x70a>
				esp01LocalIP[esp01nBytes++] = value;
 8000918:	4b62      	ldr	r3, [pc, #392]	; (8000aa4 <ESP01ATDecode+0x754>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	b291      	uxth	r1, r2
 8000920:	4a60      	ldr	r2, [pc, #384]	; (8000aa4 <ESP01ATDecode+0x754>)
 8000922:	8011      	strh	r1, [r2, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4a60      	ldr	r2, [pc, #384]	; (8000aa8 <ESP01ATDecode+0x758>)
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	5453      	strb	r3, [r2, r1]
			break;
 800092c:	e095      	b.n	8000a5a <ESP01ATDecode+0x70a>
		case 8:
			if(value == '\n'){
 800092e:	797b      	ldrb	r3, [r7, #5]
 8000930:	2b0a      	cmp	r3, #10
 8000932:	f040 808f 	bne.w	8000a54 <ESP01ATDecode+0x704>
				esp01HState = 0;
 8000936:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <ESP01ATDecode+0x740>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 800093c:	4b59      	ldr	r3, [pc, #356]	; (8000aa4 <ESP01ATDecode+0x754>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80e      	bhi.n	8000962 <ESP01ATDecode+0x612>
					esp01LocalIP[esp01nBytes] = '\0';
 8000944:	4b57      	ldr	r3, [pc, #348]	; (8000aa4 <ESP01ATDecode+0x754>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <ESP01ATDecode+0x758>)
 800094c:	2100      	movs	r1, #0
 800094e:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8000950:	4a4d      	ldr	r2, [pc, #308]	; (8000a88 <ESP01ATDecode+0x738>)
 8000952:	7813      	ldrb	r3, [r2, #0]
 8000954:	f043 0320 	orr.w	r3, r3, #32
 8000958:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 800095a:	4b54      	ldr	r3, [pc, #336]	; (8000aac <ESP01ATDecode+0x75c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e002      	b.n	8000968 <ESP01ATDecode+0x618>
				}
				else
					esp01LocalIP[0] = '\0';
 8000962:	4b51      	ldr	r3, [pc, #324]	; (8000aa8 <ESP01ATDecode+0x758>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 8000968:	4b51      	ldr	r3, [pc, #324]	; (8000ab0 <ESP01ATDecode+0x760>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d071      	beq.n	8000a54 <ESP01ATDecode+0x704>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 8000970:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <ESP01ATDecode+0x760>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2004      	movs	r0, #4
 8000976:	4798      	blx	r3
			}
			break;
 8000978:	e06c      	b.n	8000a54 <ESP01ATDecode+0x704>
		case 10://IPD
			if(value == ','){
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	2b2c      	cmp	r3, #44	; 0x2c
 800097e:	d106      	bne.n	800098e <ESP01ATDecode+0x63e>
				esp01HState = 11;
 8000980:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <ESP01ATDecode+0x740>)
 8000982:	220b      	movs	r2, #11
 8000984:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8000986:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <ESP01ATDecode+0x754>)
 8000988:	2200      	movs	r2, #0
 800098a:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 800098c:	e065      	b.n	8000a5a <ESP01ATDecode+0x70a>
				esp01HState = 0;
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <ESP01ATDecode+0x740>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <ESP01ATDecode+0x74c>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3b01      	subs	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <ESP01ATDecode+0x74c>)
 800099e:	801a      	strh	r2, [r3, #0]
			break;
 80009a0:	e05b      	b.n	8000a5a <ESP01ATDecode+0x70a>
		case 11:
			if(value == ':')
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	2b3a      	cmp	r3, #58	; 0x3a
 80009a6:	d103      	bne.n	80009b0 <ESP01ATDecode+0x660>
				esp01HState = 12;
 80009a8:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <ESP01ATDecode+0x740>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 80009ae:	e054      	b.n	8000a5a <ESP01ATDecode+0x70a>
				if(value<'0' || value>'9'){
 80009b0:	797b      	ldrb	r3, [r7, #5]
 80009b2:	2b2f      	cmp	r3, #47	; 0x2f
 80009b4:	d902      	bls.n	80009bc <ESP01ATDecode+0x66c>
 80009b6:	797b      	ldrb	r3, [r7, #5]
 80009b8:	2b39      	cmp	r3, #57	; 0x39
 80009ba:	d909      	bls.n	80009d0 <ESP01ATDecode+0x680>
					esp01HState = 0;
 80009bc:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <ESP01ATDecode+0x740>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <ESP01ATDecode+0x74c>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <ESP01ATDecode+0x74c>)
 80009cc:	801a      	strh	r2, [r3, #0]
			break;
 80009ce:	e044      	b.n	8000a5a <ESP01ATDecode+0x70a>
					esp01nBytes *= 10;
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <ESP01ATDecode+0x754>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	4413      	add	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <ESP01ATDecode+0x754>)
 80009e0:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 80009e2:	797b      	ldrb	r3, [r7, #5]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <ESP01ATDecode+0x754>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	3b30      	subs	r3, #48	; 0x30
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <ESP01ATDecode+0x754>)
 80009f4:	801a      	strh	r2, [r3, #0]
			break;
 80009f6:	e030      	b.n	8000a5a <ESP01ATDecode+0x70a>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <ESP01ATDecode+0x764>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d004      	beq.n	8000a0a <ESP01ATDecode+0x6ba>
				esp01Handle.WriteByteToBufRX(value);
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <ESP01ATDecode+0x764>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	797a      	ldrb	r2, [r7, #5]
 8000a06:	4610      	mov	r0, r2
 8000a08:	4798      	blx	r3
			esp01nBytes--;
 8000a0a:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <ESP01ATDecode+0x754>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <ESP01ATDecode+0x754>)
 8000a14:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <ESP01ATDecode+0x754>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11c      	bne.n	8000a58 <ESP01ATDecode+0x708>
				esp01HState = 0;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <ESP01ATDecode+0x740>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <ESP01ATDecode+0x744>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d015      	beq.n	8000a58 <ESP01ATDecode+0x708>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <ESP01ATDecode+0x744>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <ESP01ATDecode+0x768>)
 8000a32:	4798      	blx	r3
			}
			break;
 8000a34:	e010      	b.n	8000a58 <ESP01ATDecode+0x708>
		default:
			esp01HState = 0;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <ESP01ATDecode+0x740>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <ESP01ATDecode+0x76c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e00a      	b.n	8000a5a <ESP01ATDecode+0x70a>
			break;
 8000a44:	bf00      	nop
 8000a46:	e008      	b.n	8000a5a <ESP01ATDecode+0x70a>
			break;
 8000a48:	bf00      	nop
 8000a4a:	e006      	b.n	8000a5a <ESP01ATDecode+0x70a>
			break;
 8000a4c:	bf00      	nop
 8000a4e:	e004      	b.n	8000a5a <ESP01ATDecode+0x70a>
			break;
 8000a50:	bf00      	nop
 8000a52:	e002      	b.n	8000a5a <ESP01ATDecode+0x70a>
			break;
 8000a54:	bf00      	nop
 8000a56:	e000      	b.n	8000a5a <ESP01ATDecode+0x70a>
			break;
 8000a58:	bf00      	nop
		}

		esp01irRXAT++;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <ESP01ATDecode+0x74c>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <ESP01ATDecode+0x74c>)
 8000a64:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ESP01ATDecode+0x74c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	2b80      	cmp	r3, #128	; 0x80
 8000a6c:	d102      	bne.n	8000a74 <ESP01ATDecode+0x724>
			esp01irRXAT = 0;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <ESP01ATDecode+0x74c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <ESP01ATDecode+0x74c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	f47f ac83 	bne.w	8000386 <ESP01ATDecode+0x36>
	}

}
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200001b8 	.word	0x200001b8
 8000a8c:	200001b4 	.word	0x200001b4
 8000a90:	2000025e 	.word	0x2000025e
 8000a94:	200001cc 	.word	0x200001cc
 8000a98:	0800befc 	.word	0x0800befc
 8000a9c:	200003e6 	.word	0x200003e6
 8000aa0:	0800bf14 	.word	0x0800bf14
 8000aa4:	20000260 	.word	0x20000260
 8000aa8:	20000248 	.word	0x20000248
 8000aac:	200001bc 	.word	0x200001bc
 8000ab0:	200001c8 	.word	0x200001c8
 8000ab4:	200003f0 	.word	0x200003f0
 8000ab8:	0800bf28 	.word	0x0800bf28
 8000abc:	200001c0 	.word	0x200001c0

08000ac0 <ESP01DOConnection>:

static void ESP01DOConnection(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

	esp01TimeoutTask = 100;
 8000ac4:	4b9c      	ldr	r3, [pc, #624]	; (8000d38 <ESP01DOConnection+0x278>)
 8000ac6:	2264      	movs	r2, #100	; 0x64
 8000ac8:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 8000aca:	4b9c      	ldr	r3, [pc, #624]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	f200 81e5 	bhi.w	8000e9e <ESP01DOConnection+0x3de>
 8000ad4:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <ESP01DOConnection+0x1c>)
 8000ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ada:	bf00      	nop
 8000adc:	08000b1d 	.word	0x08000b1d
 8000ae0:	08000b7b 	.word	0x08000b7b
 8000ae4:	08000bcd 	.word	0x08000bcd
 8000ae8:	08000beb 	.word	0x08000beb
 8000aec:	08000c09 	.word	0x08000c09
 8000af0:	08000c27 	.word	0x08000c27
 8000af4:	08000cad 	.word	0x08000cad
 8000af8:	08000cd1 	.word	0x08000cd1
 8000afc:	08000cff 	.word	0x08000cff
 8000b00:	08000d8d 	.word	0x08000d8d
 8000b04:	08000db5 	.word	0x08000db5
 8000b08:	08000e47 	.word	0x08000e47
 8000b0c:	08000e65 	.word	0x08000e65
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b45 	.word	0x08000b45
 8000b18:	08000b6d 	.word	0x08000b6d
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 8000b1c:	4b86      	ldr	r3, [pc, #536]	; (8000d38 <ESP01DOConnection+0x278>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
		break;
 8000b22:	e1bc      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8000b24:	4b86      	ldr	r3, [pc, #536]	; (8000d40 <ESP01DOConnection+0x280>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2000      	movs	r0, #0
 8000b2a:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8000b2c:	4b85      	ldr	r3, [pc, #532]	; (8000d44 <ESP01DOConnection+0x284>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <ESP01DOConnection+0x7c>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8000b34:	4b83      	ldr	r3, [pc, #524]	; (8000d44 <ESP01DOConnection+0x284>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4883      	ldr	r0, [pc, #524]	; (8000d48 <ESP01DOConnection+0x288>)
 8000b3a:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 8000b3c:	4b7f      	ldr	r3, [pc, #508]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000b3e:	220e      	movs	r2, #14
 8000b40:	701a      	strb	r2, [r3, #0]
		break;
 8000b42:	e1ac      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 8000b44:	4b7e      	ldr	r3, [pc, #504]	; (8000d40 <ESP01DOConnection+0x280>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8000b4c:	4b7d      	ldr	r3, [pc, #500]	; (8000d44 <ESP01DOConnection+0x284>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <ESP01DOConnection+0x9c>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 8000b54:	4b7b      	ldr	r3, [pc, #492]	; (8000d44 <ESP01DOConnection+0x284>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	487c      	ldr	r0, [pc, #496]	; (8000d4c <ESP01DOConnection+0x28c>)
 8000b5a:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 8000b5c:	4b77      	ldr	r3, [pc, #476]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000b5e:	220f      	movs	r2, #15
 8000b60:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8000b62:	4b75      	ldr	r3, [pc, #468]	; (8000d38 <ESP01DOConnection+0x278>)
 8000b64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b68:	601a      	str	r2, [r3, #0]
		break;
 8000b6a:	e198      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 8000b6c:	4b73      	ldr	r3, [pc, #460]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 8000b72:	4b77      	ldr	r3, [pc, #476]	; (8000d50 <ESP01DOConnection+0x290>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
		break;
 8000b78:	e191      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATAT:
		if(esp01TriesAT){
 8000b7a:	4b75      	ldr	r3, [pc, #468]	; (8000d50 <ESP01DOConnection+0x290>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00d      	beq.n	8000b9e <ESP01DOConnection+0xde>
			esp01TriesAT--;
 8000b82:	4b73      	ldr	r3, [pc, #460]	; (8000d50 <ESP01DOConnection+0x290>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b71      	ldr	r3, [pc, #452]	; (8000d50 <ESP01DOConnection+0x290>)
 8000b8c:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 8000b8e:	4b70      	ldr	r3, [pc, #448]	; (8000d50 <ESP01DOConnection+0x290>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <ESP01DOConnection+0xe4>
				esp01ATSate = ESP01ATHARDRST0;
 8000b96:	4b69      	ldr	r3, [pc, #420]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000b98:	220d      	movs	r2, #13
 8000b9a:	701a      	strb	r2, [r3, #0]
				break;
 8000b9c:	e17f      	b.n	8000e9e <ESP01DOConnection+0x3de>
			}
		}
		else
			esp01TriesAT = 4;
 8000b9e:	4b6c      	ldr	r3, [pc, #432]	; (8000d50 <ESP01DOConnection+0x290>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 8000ba4:	4a6b      	ldr	r2, [pc, #428]	; (8000d54 <ESP01DOConnection+0x294>)
 8000ba6:	7813      	ldrb	r3, [r2, #0]
 8000ba8:	f36f 1345 	bfc	r3, #5, #1
 8000bac:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 8000bae:	486a      	ldr	r0, [pc, #424]	; (8000d58 <ESP01DOConnection+0x298>)
 8000bb0:	f000 fa0c 	bl	8000fcc <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000bb4:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <ESP01DOConnection+0x284>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <ESP01DOConnection+0x104>
			ESP01DbgStr("+&DBGESP01AT\n");
 8000bbc:	4b61      	ldr	r3, [pc, #388]	; (8000d44 <ESP01DOConnection+0x284>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4866      	ldr	r0, [pc, #408]	; (8000d5c <ESP01DOConnection+0x29c>)
 8000bc2:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	701a      	strb	r2, [r3, #0]
		break;
 8000bca:	e168      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8000bcc:	4b61      	ldr	r3, [pc, #388]	; (8000d54 <ESP01DOConnection+0x294>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <ESP01DOConnection+0x122>
			esp01ATSate = ESP01ATCWMODE;
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000bdc:	2203      	movs	r2, #3
 8000bde:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8000be0:	e15d      	b.n	8000e9e <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8000be2:	4b56      	ldr	r3, [pc, #344]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
		break;
 8000be8:	e159      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 8000bea:	485d      	ldr	r0, [pc, #372]	; (8000d60 <ESP01DOConnection+0x2a0>)
 8000bec:	f000 f9ee 	bl	8000fcc <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000bf0:	4b54      	ldr	r3, [pc, #336]	; (8000d44 <ESP01DOConnection+0x284>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <ESP01DOConnection+0x140>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8000bf8:	4b52      	ldr	r3, [pc, #328]	; (8000d44 <ESP01DOConnection+0x284>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4859      	ldr	r0, [pc, #356]	; (8000d64 <ESP01DOConnection+0x2a4>)
 8000bfe:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8000c00:	4b4e      	ldr	r3, [pc, #312]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e14a      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 8000c08:	4857      	ldr	r0, [pc, #348]	; (8000d68 <ESP01DOConnection+0x2a8>)
 8000c0a:	f000 f9df 	bl	8000fcc <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000c0e:	4b4d      	ldr	r3, [pc, #308]	; (8000d44 <ESP01DOConnection+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <ESP01DOConnection+0x15e>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8000c16:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <ESP01DOConnection+0x284>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4854      	ldr	r0, [pc, #336]	; (8000d6c <ESP01DOConnection+0x2ac>)
 8000c1c:	4798      	blx	r3
		esp01ATSate = ESP01ATCWJAP;
 8000c1e:	4b47      	ldr	r3, [pc, #284]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000c20:	2205      	movs	r2, #5
 8000c22:	701a      	strb	r2, [r3, #0]
		break;
 8000c24:	e13b      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8000c26:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <ESP01DOConnection+0x294>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIFSR;
 8000c34:	4b41      	ldr	r3, [pc, #260]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	701a      	strb	r2, [r3, #0]
			break;
 8000c3a:	e130      	b.n	8000e9e <ESP01DOConnection+0x3de>
		}
		if(esp01SSID[0] == '\0')
 8000c3c:	4b4c      	ldr	r3, [pc, #304]	; (8000d70 <ESP01DOConnection+0x2b0>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8129 	beq.w	8000e98 <ESP01DOConnection+0x3d8>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8000c46:	484b      	ldr	r0, [pc, #300]	; (8000d74 <ESP01DOConnection+0x2b4>)
 8000c48:	f000 f9c0 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000c4c:	2022      	movs	r0, #34	; 0x22
 8000c4e:	f000 f9ed 	bl	800102c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8000c52:	4847      	ldr	r0, [pc, #284]	; (8000d70 <ESP01DOConnection+0x2b0>)
 8000c54:	f000 f9ba 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000c58:	2022      	movs	r0, #34	; 0x22
 8000c5a:	f000 f9e7 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000c5e:	202c      	movs	r0, #44	; 0x2c
 8000c60:	f000 f9e4 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8000c64:	2022      	movs	r0, #34	; 0x22
 8000c66:	f000 f9e1 	bl	800102c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 8000c6a:	4843      	ldr	r0, [pc, #268]	; (8000d78 <ESP01DOConnection+0x2b8>)
 8000c6c:	f000 f9ae 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000c70:	2022      	movs	r0, #34	; 0x22
 8000c72:	f000 f9db 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8000c76:	200d      	movs	r0, #13
 8000c78:	f000 f9d8 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f000 f9d5 	bl	800102c <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <ESP01DOConnection+0x284>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <ESP01DOConnection+0x1d2>
			ESP01DbgStr("+&DBGESP01ATCWJAP\n");
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <ESP01DOConnection+0x284>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	483b      	ldr	r0, [pc, #236]	; (8000d7c <ESP01DOConnection+0x2bc>)
 8000c90:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8000c92:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <ESP01DOConnection+0x294>)
 8000c94:	7813      	ldrb	r3, [r2, #0]
 8000c96:	f36f 1345 	bfc	r3, #5, #1
 8000c9a:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000c9e:	2206      	movs	r2, #6
 8000ca0:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 1500;
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <ESP01DOConnection+0x278>)
 8000ca4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ca8:	601a      	str	r2, [r3, #0]
		break;
 8000caa:	e0f8      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <ESP01DOConnection+0x294>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <ESP01DOConnection+0x208>
			esp01ATSate = ESP01ATCIFSR;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <ESP01DOConnection+0x290>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8000cc6:	e0ea      	b.n	8000e9e <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
		break;
 8000cce:	e0e6      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <ESP01DOConnection+0x2c0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 8000cd6:	482b      	ldr	r0, [pc, #172]	; (8000d84 <ESP01DOConnection+0x2c4>)
 8000cd8:	f000 f978 	bl	8000fcc <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <ESP01DOConnection+0x284>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <ESP01DOConnection+0x22c>
			ESP01DbgStr("+&DBGESP01CIFSR\n");
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <ESP01DOConnection+0x284>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4827      	ldr	r0, [pc, #156]	; (8000d88 <ESP01DOConnection+0x2c8>)
 8000cea:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <ESP01DOConnection+0x294>)
 8000cee:	7813      	ldrb	r3, [r2, #0]
 8000cf0:	f36f 1345 	bfc	r3, #5, #1
 8000cf4:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	701a      	strb	r2, [r3, #0]
		break;
 8000cfc:	e0cf      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <ESP01DOConnection+0x294>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f003 0320 	and.w	r3, r3, #32
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <ESP01DOConnection+0x254>
			esp01ATSate = ESP01ATCIPCLOSE;
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000d0e:	2209      	movs	r2, #9
 8000d10:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 8000d12:	e0c4      	b.n	8000e9e <ESP01DOConnection+0x3de>
			esp01TriesAT--;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <ESP01DOConnection+0x290>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <ESP01DOConnection+0x290>)
 8000d1e:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <ESP01DOConnection+0x290>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d103      	bne.n	8000d30 <ESP01DOConnection+0x270>
				esp01ATSate = ESP01ATAT;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
				break;
 8000d2e:	e0b6      	b.n	8000e9e <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATCIFSR;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <ESP01DOConnection+0x27c>)
 8000d32:	2207      	movs	r2, #7
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	e0b2      	b.n	8000e9e <ESP01DOConnection+0x3de>
 8000d38:	200001bc 	.word	0x200001bc
 8000d3c:	200001b4 	.word	0x200001b4
 8000d40:	200003f0 	.word	0x200003f0
 8000d44:	200001cc 	.word	0x200001cc
 8000d48:	0800bf3c 	.word	0x0800bf3c
 8000d4c:	0800bf54 	.word	0x0800bf54
 8000d50:	200003ec 	.word	0x200003ec
 8000d54:	200001b8 	.word	0x200001b8
 8000d58:	0800c088 	.word	0x0800c088
 8000d5c:	0800bf6c 	.word	0x0800bf6c
 8000d60:	0800c0a0 	.word	0x0800c0a0
 8000d64:	0800bf7c 	.word	0x0800bf7c
 8000d68:	0800c090 	.word	0x0800c090
 8000d6c:	0800bf90 	.word	0x0800bf90
 8000d70:	200001d0 	.word	0x200001d0
 8000d74:	0800c0b0 	.word	0x0800c0b0
 8000d78:	20000210 	.word	0x20000210
 8000d7c:	0800bfa4 	.word	0x0800bfa4
 8000d80:	20000248 	.word	0x20000248
 8000d84:	0800c0bc 	.word	0x0800c0bc
 8000d88:	0800bfb8 	.word	0x0800bfb8
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8000d8c:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <ESP01DOConnection+0x3e4>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 8083 	beq.w	8000e9c <ESP01DOConnection+0x3dc>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 8000d96:	4844      	ldr	r0, [pc, #272]	; (8000ea8 <ESP01DOConnection+0x3e8>)
 8000d98:	f000 f918 	bl	8000fcc <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <ESP01DOConnection+0x3ec>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <ESP01DOConnection+0x2ec>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE\n");
 8000da4:	4b41      	ldr	r3, [pc, #260]	; (8000eac <ESP01DOConnection+0x3ec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4841      	ldr	r0, [pc, #260]	; (8000eb0 <ESP01DOConnection+0x3f0>)
 8000daa:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <ESP01DOConnection+0x3f4>)
 8000dae:	220a      	movs	r2, #10
 8000db0:	701a      	strb	r2, [r3, #0]
		break;
 8000db2:	e074      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 8000db4:	4840      	ldr	r0, [pc, #256]	; (8000eb8 <ESP01DOConnection+0x3f8>)
 8000db6:	f000 f909 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000dba:	2022      	movs	r0, #34	; 0x22
 8000dbc:	f000 f936 	bl	800102c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8000dc0:	483e      	ldr	r0, [pc, #248]	; (8000ebc <ESP01DOConnection+0x3fc>)
 8000dc2:	f000 f903 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f000 f930 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000dcc:	202c      	movs	r0, #44	; 0x2c
 8000dce:	f000 f92d 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8000dd2:	2022      	movs	r0, #34	; 0x22
 8000dd4:	f000 f92a 	bl	800102c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8000dd8:	4832      	ldr	r0, [pc, #200]	; (8000ea4 <ESP01DOConnection+0x3e4>)
 8000dda:	f000 f8f7 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000dde:	2022      	movs	r0, #34	; 0x22
 8000de0:	f000 f924 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000de4:	202c      	movs	r0, #44	; 0x2c
 8000de6:	f000 f921 	bl	800102c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 8000dea:	4835      	ldr	r0, [pc, #212]	; (8000ec0 <ESP01DOConnection+0x400>)
 8000dec:	f000 f8ee 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8000df0:	202c      	movs	r0, #44	; 0x2c
 8000df2:	f000 f91b 	bl	800102c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <ESP01DOConnection+0x404>)
 8000df8:	f000 f8e8 	bl	8000fcc <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8000dfc:	202c      	movs	r0, #44	; 0x2c
 8000dfe:	f000 f915 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 8000e02:	2030      	movs	r0, #48	; 0x30
 8000e04:	f000 f912 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8000e08:	200d      	movs	r0, #13
 8000e0a:	f000 f90f 	bl	800102c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8000e0e:	200a      	movs	r0, #10
 8000e10:	f000 f90c 	bl	800102c <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <ESP01DOConnection+0x3ec>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <ESP01DOConnection+0x364>
			ESP01DbgStr("+&DBGESP01ATCIPSTART\n");
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <ESP01DOConnection+0x3ec>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4829      	ldr	r0, [pc, #164]	; (8000ec8 <ESP01DOConnection+0x408>)
 8000e22:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8000e24:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <ESP01DOConnection+0x40c>)
 8000e26:	7813      	ldrb	r3, [r2, #0]
 8000e28:	f36f 1345 	bfc	r3, #5, #1
 8000e2c:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000e2e:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <ESP01DOConnection+0x40c>)
 8000e30:	7813      	ldrb	r3, [r2, #0]
 8000e32:	f36f 1386 	bfc	r3, #6, #1
 8000e36:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <ESP01DOConnection+0x3f4>)
 8000e3a:	220b      	movs	r2, #11
 8000e3c:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 200;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <ESP01DOConnection+0x410>)
 8000e40:	22c8      	movs	r2, #200	; 0xc8
 8000e42:	601a      	str	r2, [r3, #0]
		break;
 8000e44:	e02b      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <ESP01DOConnection+0x40c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <ESP01DOConnection+0x39c>
			esp01ATSate = ESP01ATCONNECTED;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <ESP01DOConnection+0x3f4>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8000e5a:	e020      	b.n	8000e9e <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <ESP01DOConnection+0x3f4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
		break;
 8000e62:	e01c      	b.n	8000e9e <ESP01DOConnection+0x3de>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <ESP01DOConnection+0x40c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d103      	bne.n	8000e7a <ESP01DOConnection+0x3ba>
			esp01ATSate = ESP01ATAT;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <ESP01DOConnection+0x3f4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
			break;
 8000e78:	e011      	b.n	8000e9e <ESP01DOConnection+0x3de>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <ESP01DOConnection+0x40c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <ESP01DOConnection+0x3d0>
			esp01ATSate = ESP01ATCIPCLOSE;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <ESP01DOConnection+0x3f4>)
 8000e8a:	2209      	movs	r2, #9
 8000e8c:	701a      	strb	r2, [r3, #0]
			break;
 8000e8e:	e006      	b.n	8000e9e <ESP01DOConnection+0x3de>
		}
		esp01TimeoutTask = 0;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <ESP01DOConnection+0x410>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
		break;
 8000e96:	e002      	b.n	8000e9e <ESP01DOConnection+0x3de>
			break;
 8000e98:	bf00      	nop
 8000e9a:	e000      	b.n	8000e9e <ESP01DOConnection+0x3de>
			break;
 8000e9c:	bf00      	nop
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000230 	.word	0x20000230
 8000ea8:	0800c0d8 	.word	0x0800c0d8
 8000eac:	200001cc 	.word	0x200001cc
 8000eb0:	0800bfcc 	.word	0x0800bfcc
 8000eb4:	200001b4 	.word	0x200001b4
 8000eb8:	0800c0c8 	.word	0x0800c0c8
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000240 	.word	0x20000240
 8000ec4:	20000258 	.word	0x20000258
 8000ec8:	0800bfe4 	.word	0x0800bfe4
 8000ecc:	200001b8 	.word	0x200001b8
 8000ed0:	200001bc 	.word	0x200001bc

08000ed4 <ESP01SENDData>:

static void ESP01SENDData(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	uint8_t value;

	if(esp01Flags.bit.WAITINGSYMBOL){
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <ESP01SENDData+0xd8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <ESP01SENDData+0xdc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d159      	bne.n	8000fa4 <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <ESP01SENDData+0xe0>)
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000ef6:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8000ef8:	4a2c      	ldr	r2, [pc, #176]	; (8000fac <ESP01SENDData+0xd8>)
 8000efa:	7813      	ldrb	r3, [r2, #0]
 8000efc:	f36f 0300 	bfc	r3, #0, #1
 8000f00:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <ESP01SENDData+0xe8>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <ESP01SENDData+0xec>)
 8000f0a:	220a      	movs	r2, #10
 8000f0c:	601a      	str	r2, [r3, #0]
		}
		return;
 8000f0e:	e049      	b.n	8000fa4 <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <ESP01SENDData+0xe0>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d044      	beq.n	8000fa6 <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <ESP01SENDData+0xf0>)
 8000f24:	5c9b      	ldrb	r3, [r3, r2]
 8000f26:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <ESP01SENDData+0xd8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d004      	beq.n	8000f40 <ESP01SENDData+0x6c>
			if(value == '>')
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b3e      	cmp	r3, #62	; 0x3e
 8000f3a:	d101      	bne.n	8000f40 <ESP01SENDData+0x6c>
				value = '\n';
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <ESP01SENDData+0xf4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	4610      	mov	r0, r2
 8000f48:	4798      	blx	r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d02a      	beq.n	8000fa6 <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <ESP01SENDData+0xd8>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d013      	beq.n	8000f86 <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <ESP01SENDData+0xf0>)
 8000f66:	5c9b      	ldrb	r3, [r3, r2]
 8000f68:	2b3e      	cmp	r3, #62	; 0x3e
 8000f6a:	d10c      	bne.n	8000f86 <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <ESP01SENDData+0xd8>)
 8000f6e:	7813      	ldrb	r3, [r2, #0]
 8000f70:	f36f 0382 	bfc	r3, #2, #1
 8000f74:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 8000f76:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <ESP01SENDData+0xd8>)
 8000f78:	7813      	ldrb	r3, [r2, #0]
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <ESP01SENDData+0xdc>)
 8000f82:	2205      	movs	r2, #5
 8000f84:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000f90:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f9a:	d104      	bne.n	8000fa6 <ESP01SENDData+0xd2>
				esp01irTX = 0;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <ESP01SENDData+0xe4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
 8000fa2:	e000      	b.n	8000fa6 <ESP01SENDData+0xd2>
		return;
 8000fa4:	bf00      	nop
		}
	}
}
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001b8 	.word	0x200001b8
 8000fb0:	200001c4 	.word	0x200001c4
 8000fb4:	200003ea 	.word	0x200003ea
 8000fb8:	200003e8 	.word	0x200003e8
 8000fbc:	200001b4 	.word	0x200001b4
 8000fc0:	200001bc 	.word	0x200001bc
 8000fc4:	200002e4 	.word	0x200002e4
 8000fc8:	200003f0 	.word	0x200003f0

08000fcc <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e017      	b.n	800100a <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	441a      	add	r2, r3
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <ESP01StrToBufTX+0x58>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	1c59      	adds	r1, r3, #1
 8000fe6:	b288      	uxth	r0, r1
 8000fe8:	490e      	ldr	r1, [pc, #56]	; (8001024 <ESP01StrToBufTX+0x58>)
 8000fea:	8008      	strh	r0, [r1, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <ESP01StrToBufTX+0x5c>)
 8000ff2:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <ESP01StrToBufTX+0x58>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ffc:	d102      	bne.n	8001004 <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <ESP01StrToBufTX+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1e1      	bne.n	8000fda <ESP01StrToBufTX+0xe>
	}
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200003ea 	.word	0x200003ea
 8001028:	200002e4 	.word	0x200002e4

0800102c <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <ESP01ByteToBufTX+0x38>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	b291      	uxth	r1, r2
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <ESP01ByteToBufTX+0x38>)
 8001040:	8011      	strh	r1, [r2, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <ESP01ByteToBufTX+0x3c>)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <ESP01ByteToBufTX+0x38>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001052:	d102      	bne.n	800105a <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <ESP01ByteToBufTX+0x38>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	200003ea 	.word	0x200003ea
 8001068:	200002e4 	.word	0x200002e4

0800106c <inicializarBoton>:
#include <stdlib.h>

uint8_t PRESSED = 0;

void inicializarBoton(_sButton *button)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	button->value = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	button->estado = UP;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	705a      	strb	r2, [r3, #1]
	button->event = EV_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	709a      	strb	r2, [r3, #2]
	button->timePush = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
	button->timeDiff = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <checkMEF>:

void checkMEF(_sButton *button)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	switch (button->estado)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d847      	bhi.n	800113c <checkMEF+0xa0>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <checkMEF+0x18>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010c5 	.word	0x080010c5
 80010b8:	080010f5 	.word	0x080010f5
 80010bc:	080010d9 	.word	0x080010d9
 80010c0:	08001115 	.word	0x08001115
	{
		case UP:
			if (button->value == PRESSED)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	781a      	ldrb	r2, [r3, #0]
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <checkMEF+0xb8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d139      	bne.n	8001144 <checkMEF+0xa8>
			{
				button->estado = FALLING;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	705a      	strb	r2, [r3, #1]
			}
			break;
 80010d6:	e035      	b.n	8001144 <checkMEF+0xa8>
		case FALLING:
			if (button->value == PRESSED)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <checkMEF+0xb8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d103      	bne.n	80010ec <checkMEF+0x50>
			{
				button->estado = DOWN;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = UP;
			}
			break;
 80010ea:	e02e      	b.n	800114a <checkMEF+0xae>
				button->estado = UP;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	705a      	strb	r2, [r3, #1]
			break;
 80010f2:	e02a      	b.n	800114a <checkMEF+0xae>
		case DOWN:
			if (button->value == !PRESSED)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <checkMEF+0xb8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	429a      	cmp	r2, r3
 800110a:	d11d      	bne.n	8001148 <checkMEF+0xac>
			{
				button->estado = RISING;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	705a      	strb	r2, [r3, #1]
			}
			break;
 8001112:	e019      	b.n	8001148 <checkMEF+0xac>
		case RISING:
			if (button->value == !PRESSED)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <checkMEF+0xb8>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	429a      	cmp	r2, r3
 800112a:	d103      	bne.n	8001134 <checkMEF+0x98>
			{
				button->estado = UP;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = DOWN;
			}
			break;
 8001132:	e00a      	b.n	800114a <checkMEF+0xae>
				button->estado = DOWN;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	705a      	strb	r2, [r3, #1]
			break;
 800113a:	e006      	b.n	800114a <checkMEF+0xae>
		default:
			button->estado = UP;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	705a      	strb	r2, [r3, #1]
			break;
 8001142:	e002      	b.n	800114a <checkMEF+0xae>
			break;
 8001144:	bf00      	nop
 8001146:	e000      	b.n	800114a <checkMEF+0xae>
			break;
 8001148:	bf00      	nop
	}
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	200003fe 	.word	0x200003fe

08001158 <HAL_TIM_PeriodElapsedCallback>:
void ESP01ChangeState(_eESP01STATUS esp01State);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d114      	bne.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		if (time10ms)
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_TIM_PeriodElapsedCallback+0x26>
			time10ms--;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800117c:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&datosADC.bufADC[datosADC.indexWriteADC], NUMCHANNELSADC);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001180:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001188:	4413      	add	r3, r2
 800118a:	2208      	movs	r2, #8
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001190:	f001 fb24 	bl	80027dc <HAL_ADC_Start_DMA>
	}
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40012c00 	.word	0x40012c00
 80011a0:	20000004 	.word	0x20000004
 80011a4:	20000ba0 	.word	0x20000ba0
 80011a8:	20000400 	.word	0x20000400

080011ac <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	datosADC.indexWriteADC++;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_ADC_ConvCpltCallback+0x34>)
 80011b6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_ADC_ConvCpltCallback+0x34>)
 80011c0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	datosADC.indexWriteADC &= (SIZEBUFADC-1);
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_ADC_ConvCpltCallback+0x34>)
 80011c6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80011ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_ADC_ConvCpltCallback+0x34>)
 80011d2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	20000ba0 	.word	0x20000ba0

080011e4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_UART_RxCpltCallback+0x5c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11f      	bne.n	8001236 <HAL_UART_RxCpltCallback+0x52>
		datosComSerie.indexWriteRx++;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_UART_RxCpltCallback+0x60>)
 80011f8:	78db      	ldrb	r3, [r3, #3]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_UART_RxCpltCallback+0x60>)
 8001200:	70da      	strb	r2, [r3, #3]
		HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_UART_RxCpltCallback+0x60>)
 8001204:	78db      	ldrb	r3, [r3, #3]
 8001206:	461a      	mov	r2, r3
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_UART_RxCpltCallback+0x60>)
 800120a:	4413      	add	r3, r2
 800120c:	3307      	adds	r3, #7
 800120e:	2201      	movs	r2, #1
 8001210:	4619      	mov	r1, r3
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <HAL_UART_RxCpltCallback+0x64>)
 8001214:	f005 fc4c 	bl	8006ab0 <HAL_UART_Receive_IT>

		datosComWIFI.indexWriteRx++;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_UART_RxCpltCallback+0x68>)
 800121a:	78db      	ldrb	r3, [r3, #3]
 800121c:	3301      	adds	r3, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_UART_RxCpltCallback+0x68>)
 8001222:	70da      	strb	r2, [r3, #3]
		ESP01_WriteRX(datosComWIFI.bufferRx[datosComWIFI.indexWriteRx]);
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_UART_RxCpltCallback+0x68>)
 8001226:	78db      	ldrb	r3, [r3, #3]
 8001228:	461a      	mov	r2, r3
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_UART_RxCpltCallback+0x68>)
 800122c:	4413      	add	r3, r2
 800122e:	79db      	ldrb	r3, [r3, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f817 	bl	8000264 <ESP01_WriteRX>
	}
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40013800 	.word	0x40013800
 8001244:	20000588 	.word	0x20000588
 8001248:	20000534 	.word	0x20000534
 800124c:	20000998 	.word	0x20000998

08001250 <USB_Receive>:


void USB_Receive(uint8_t *buf, uint16_t len){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
	memcpy(&datosComUSB.bufferRx[datosComUSB.indexWriteRx], buf, len);
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <USB_Receive+0x40>)
 800125e:	78db      	ldrb	r3, [r3, #3]
 8001260:	461a      	mov	r2, r3
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <USB_Receive+0x40>)
 8001264:	4413      	add	r3, r2
 8001266:	3307      	adds	r3, #7
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f00a fe11 	bl	800be94 <memcpy>
	datosComUSB.indexWriteRx += len;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <USB_Receive+0x40>)
 8001274:	78da      	ldrb	r2, [r3, #3]
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4413      	add	r3, r2
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <USB_Receive+0x40>)
 8001280:	70da      	strb	r2, [r3, #3]
	datosComUSB.newData = true;
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <USB_Receive+0x40>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000790 	.word	0x20000790

08001294 <heartbeatTask>:


void heartbeatTask(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	if (myHB & mask)
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <heartbeatTask+0x4c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <heartbeatTask+0x50>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <heartbeatTask+0x20>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	// ON
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <heartbeatTask+0x54>)
 80012ae:	f002 faca 	bl	8003846 <HAL_GPIO_WritePin>
 80012b2:	e005      	b.n	80012c0 <heartbeatTask+0x2c>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);	// OFF
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <heartbeatTask+0x54>)
 80012bc:	f002 fac3 	bl	8003846 <HAL_GPIO_WritePin>

	mask >>= 1;									// Displace hbMask one place to the right
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <heartbeatTask+0x50>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <heartbeatTask+0x50>)
 80012c8:	6013      	str	r3, [r2, #0]
	if (!mask)
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <heartbeatTask+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d103      	bne.n	80012da <heartbeatTask+0x46>
		mask = 0x80000000;						// If there's a 0 in that place, changes the actual positions to compare the right way
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <heartbeatTask+0x50>)
 80012d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012d8:	601a      	str	r2, [r3, #0]

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000018 	.word	0x20000018
 80012e4:	20000014 	.word	0x20000014
 80012e8:	40011000 	.word	0x40011000

080012ec <do10ms>:


void do10ms(){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	// do something
	time10ms = 40;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <do10ms+0x14>)
 80012f2:	2228      	movs	r2, #40	; 0x28
 80012f4:	701a      	strb	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000004 	.word	0x20000004

08001304 <do40ms>:


void do40ms(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	if (!time40ms){
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <do40ms+0x44>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d112      	bne.n	8001336 <do40ms+0x32>
		myButton.value = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 8001310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <do40ms+0x48>)
 8001316:	f002 fa7f 	bl	8003818 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <do40ms+0x4c>)
 8001320:	701a      	strb	r2, [r3, #0]
		checkMEF(&myButton);
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <do40ms+0x4c>)
 8001324:	f7ff feba 	bl	800109c <checkMEF>
		buttonTask(&myButton);
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <do40ms+0x4c>)
 800132a:	f000 fb3d 	bl	80019a8 <buttonTask>
		time40ms = 4;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <do40ms+0x44>)
 8001330:	2204      	movs	r2, #4
 8001332:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		time40ms--;
	}
}
 8001334:	e005      	b.n	8001342 <do40ms+0x3e>
		time40ms--;
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <do40ms+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b02      	ldr	r3, [pc, #8]	; (8001348 <do40ms+0x44>)
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000005 	.word	0x20000005
 800134c:	40010c00 	.word	0x40010c00
 8001350:	2000057c 	.word	0x2000057c

08001354 <do100ms>:


void do100ms(){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	if (!time100ms){
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <do100ms+0x48>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d115      	bne.n	800138c <do100ms+0x38>
		stateTask();
 8001360:	f000 fb4a 	bl	80019f8 <stateTask>
		heartbeatTask();
 8001364:	f7ff ff96 	bl	8001294 <heartbeatTask>
		datosComSerie.bufferRx[datosComSerie.indexWriteRx+NBYTES]=ANALOG_IR;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <do100ms+0x4c>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	3304      	adds	r3, #4
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <do100ms+0x4c>)
 8001370:	4413      	add	r3, r2
 8001372:	22f2      	movs	r2, #242	; 0xf2
 8001374:	71da      	strb	r2, [r3, #7]
		datosComSerie.indexStart=datosComSerie.indexWriteRx;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <do100ms+0x4c>)
 8001378:	78da      	ldrb	r2, [r3, #3]
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <do100ms+0x4c>)
 800137c:	705a      	strb	r2, [r3, #1]
		decodeData(&datosComSerie);
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <do100ms+0x4c>)
 8001380:	f000 f92c 	bl	80015dc <decodeData>
		time100ms = 10;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <do100ms+0x48>)
 8001386:	220a      	movs	r2, #10
 8001388:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		time100ms--;
	}
}
 800138a:	e005      	b.n	8001398 <do100ms+0x44>
		time100ms--;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <do100ms+0x48>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3b01      	subs	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b01      	ldr	r3, [pc, #4]	; (800139c <do100ms+0x48>)
 8001396:	701a      	strb	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000006 	.word	0x20000006
 80013a0:	20000588 	.word	0x20000588

080013a4 <do500ms>:


void do500ms(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	if (!time500ms){
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <do500ms+0x40>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <do500ms+0x30>
		datosComWIFI.bufferRx[datosComWIFI.indexWriteRx+NBYTES]=ALIVE;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <do500ms+0x44>)
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	3304      	adds	r3, #4
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <do500ms+0x44>)
 80013b8:	4413      	add	r3, r2
 80013ba:	22f0      	movs	r2, #240	; 0xf0
 80013bc:	71da      	strb	r2, [r3, #7]
		datosComWIFI.indexStart=datosComWIFI.indexWriteRx;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <do500ms+0x44>)
 80013c0:	78da      	ldrb	r2, [r3, #3]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <do500ms+0x44>)
 80013c4:	705a      	strb	r2, [r3, #1]
		decodeData(&datosComWIFI);
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <do500ms+0x44>)
 80013c8:	f000 f908 	bl	80015dc <decodeData>
		time500ms = 50;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <do500ms+0x40>)
 80013ce:	2232      	movs	r2, #50	; 0x32
 80013d0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		time500ms--;
	}
}
 80013d2:	e005      	b.n	80013e0 <do500ms+0x3c>
		time500ms--;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <do500ms+0x40>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <do500ms+0x40>)
 80013de:	701a      	strb	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000007 	.word	0x20000007
 80013e8:	20000998 	.word	0x20000998

080013ec <decodeProtocol>:


void decodeProtocol(_sDato *datosCom){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    static uint8_t nBytes=0;
    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	78db      	ldrb	r3, [r3, #3]
 80013f8:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80013fa:	e0df      	b.n	80015bc <decodeProtocol+0x1d0>
    {
        switch (estadoProtocolo) {
 80013fc:	4b75      	ldr	r3, [pc, #468]	; (80015d4 <decodeProtocol+0x1e8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b06      	cmp	r3, #6
 8001402:	f200 80d7 	bhi.w	80015b4 <decodeProtocol+0x1c8>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <decodeProtocol+0x20>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001429 	.word	0x08001429
 8001410:	08001451 	.word	0x08001451
 8001414:	08001485 	.word	0x08001485
 8001418:	080014b9 	.word	0x080014b9
 800141c:	080014ed 	.word	0x080014ed
 8001420:	08001515 	.word	0x08001515
 8001424:	08001557 	.word	0x08001557
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	791b      	ldrb	r3, [r3, #4]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	b2d1      	uxtb	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	7111      	strb	r1, [r2, #4]
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	79db      	ldrb	r3, [r3, #7]
 800143c:	2b55      	cmp	r3, #85	; 0x55
 800143e:	f040 80bd 	bne.w	80015bc <decodeProtocol+0x1d0>
                    estadoProtocolo=HEADER_1;
 8001442:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <decodeProtocol+0x1e8>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
                    datosCom->checksumRx=0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800144e:	e0b5      	b.n	80015bc <decodeProtocol+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	7111      	strb	r1, [r2, #4]
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	79db      	ldrb	r3, [r3, #7]
 8001464:	2b4e      	cmp	r3, #78	; 0x4e
 8001466:	d103      	bne.n	8001470 <decodeProtocol+0x84>
                   estadoProtocolo=HEADER_2;
 8001468:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <decodeProtocol+0x1e8>)
 800146a:	2202      	movs	r2, #2
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e0a5      	b.n	80015bc <decodeProtocol+0x1d0>
                else{
                    datosCom->indexReadRx--;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	3b01      	subs	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <decodeProtocol+0x1e8>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
                }
                break;
 8001482:	e09b      	b.n	80015bc <decodeProtocol+0x1d0>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	791b      	ldrb	r3, [r3, #4]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	b2d1      	uxtb	r1, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	7111      	strb	r1, [r2, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	79db      	ldrb	r3, [r3, #7]
 8001498:	2b45      	cmp	r3, #69	; 0x45
 800149a:	d103      	bne.n	80014a4 <decodeProtocol+0xb8>
                    estadoProtocolo=HEADER_3;
 800149c:	4b4d      	ldr	r3, [pc, #308]	; (80015d4 <decodeProtocol+0x1e8>)
 800149e:	2203      	movs	r2, #3
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e08b      	b.n	80015bc <decodeProtocol+0x1d0>
                else{
                    datosCom->indexReadRx--;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <decodeProtocol+0x1e8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
                }
                break;
 80014b6:	e081      	b.n	80015bc <decodeProtocol+0x1d0>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	b2d1      	uxtb	r1, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	7111      	strb	r1, [r2, #4]
 80014c4:	461a      	mov	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	79db      	ldrb	r3, [r3, #7]
 80014cc:	2b52      	cmp	r3, #82	; 0x52
 80014ce:	d103      	bne.n	80014d8 <decodeProtocol+0xec>
                estadoProtocolo=NBYTES;
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <decodeProtocol+0x1e8>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e071      	b.n	80015bc <decodeProtocol+0x1d0>
            else{
                datosCom->indexReadRx--;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	711a      	strb	r2, [r3, #4]
                estadoProtocolo=START;
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <decodeProtocol+0x1e8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80014ea:	e067      	b.n	80015bc <decodeProtocol+0x1d0>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	791a      	ldrb	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	791b      	ldrb	r3, [r3, #4]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	7111      	strb	r1, [r2, #4]
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	79da      	ldrb	r2, [r3, #7]
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <decodeProtocol+0x1ec>)
 800150a:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 800150c:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <decodeProtocol+0x1e8>)
 800150e:	2205      	movs	r2, #5
 8001510:	701a      	strb	r2, [r3, #0]
                break;
 8001512:	e053      	b.n	80015bc <decodeProtocol+0x1d0>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	b2d1      	uxtb	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	7111      	strb	r1, [r2, #4]
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	79db      	ldrb	r3, [r3, #7]
 8001528:	2b3a      	cmp	r3, #58	; 0x3a
 800152a:	d10a      	bne.n	8001542 <decodeProtocol+0x156>
                   estadoProtocolo=PAYLOAD;
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <decodeProtocol+0x1e8>)
 800152e:	2206      	movs	r2, #6
 8001530:	701a      	strb	r2, [r3, #0]
                    datosCom->checksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <decodeProtocol+0x1ec>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 800153a:	b2da      	uxtb	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	709a      	strb	r2, [r3, #2]
 8001540:	e03c      	b.n	80015bc <decodeProtocol+0x1d0>
                }
                else{
                    datosCom->indexReadRx--;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <decodeProtocol+0x1e8>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
                }
                break;
 8001554:	e032      	b.n	80015bc <decodeProtocol+0x1d0>
            case PAYLOAD:
                if (nBytes>1){
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <decodeProtocol+0x1ec>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d90f      	bls.n	800157e <decodeProtocol+0x192>
                    datosCom->checksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	791b      	ldrb	r3, [r3, #4]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	b2d1      	uxtb	r1, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	7111      	strb	r1, [r2, #4]
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	79da      	ldrb	r2, [r3, #7]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	789b      	ldrb	r3, [r3, #2]
 8001576:	4053      	eors	r3, r2
 8001578:	b2da      	uxtb	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <decodeProtocol+0x1ec>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3b01      	subs	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <decodeProtocol+0x1ec>)
 8001588:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <decodeProtocol+0x1ec>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d114      	bne.n	80015bc <decodeProtocol+0x1d0>
                    estadoProtocolo=START;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <decodeProtocol+0x1e8>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
                    if(datosCom->checksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	789a      	ldrb	r2, [r3, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	791b      	ldrb	r3, [r3, #4]
 80015a0:	4619      	mov	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	440b      	add	r3, r1
 80015a6:	79db      	ldrb	r3, [r3, #7]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d107      	bne.n	80015bc <decodeProtocol+0x1d0>
                        decodeData(datosCom);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f815 	bl	80015dc <decodeData>
                    }
                }
                break;
 80015b2:	e003      	b.n	80015bc <decodeProtocol+0x1d0>
            default:
                estadoProtocolo=START;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <decodeProtocol+0x1e8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
                break;
 80015ba:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	791b      	ldrb	r3, [r3, #4]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	f47f af1a 	bne.w	80013fc <decodeProtocol+0x10>
        }
    }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000fd0 	.word	0x20000fd0
 80015d8:	20000fd2 	.word	0x20000fd2

080015dc <decodeData>:


void decodeData(_sDato *datosCom){
 80015dc:	b480      	push	{r7}
 80015de:	b091      	sub	sp, #68	; 0x44
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    uint8_t auxBuffTx[50], indiceAux=0, checksum;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    auxBuffTx[indiceAux++]='U';
 80015ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80015f4:	3340      	adds	r3, #64	; 0x40
 80015f6:	443b      	add	r3, r7
 80015f8:	2255      	movs	r2, #85	; 0x55
 80015fa:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='N';
 80015fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8001608:	3340      	adds	r3, #64	; 0x40
 800160a:	443b      	add	r3, r7
 800160c:	224e      	movs	r2, #78	; 0x4e
 800160e:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='E';
 8001612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800161c:	3340      	adds	r3, #64	; 0x40
 800161e:	443b      	add	r3, r7
 8001620:	2245      	movs	r2, #69	; 0x45
 8001622:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='R';
 8001626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8001630:	3340      	adds	r3, #64	; 0x40
 8001632:	443b      	add	r3, r7
 8001634:	2252      	movs	r2, #82	; 0x52
 8001636:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]=0;
 800163a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8001644:	3340      	adds	r3, #64	; 0x40
 8001646:	443b      	add	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]=':';
 800164e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8001658:	3340      	adds	r3, #64	; 0x40
 800165a:	443b      	add	r3, r7
 800165c:	223a      	movs	r2, #58	; 0x3a
 800165e:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='9';
 8001662:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800166c:	3340      	adds	r3, #64	; 0x40
 800166e:	443b      	add	r3, r7
 8001670:	2239      	movs	r2, #57	; 0x39
 8001672:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='7';
 8001676:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8001680:	3340      	adds	r3, #64	; 0x40
 8001682:	443b      	add	r3, r7
 8001684:	2237      	movs	r2, #55	; 0x37
 8001686:	f803 2c38 	strb.w	r2, [r3, #-56]

    switch (datosCom->bufferRx[datosCom->indexStart+NBYTES]) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	3304      	adds	r3, #4
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	79db      	ldrb	r3, [r3, #7]
 8001696:	2bf2      	cmp	r3, #242	; 0xf2
 8001698:	d02b      	beq.n	80016f2 <decodeData+0x116>
 800169a:	2bf2      	cmp	r3, #242	; 0xf2
 800169c:	f300 80e9 	bgt.w	8001872 <decodeData+0x296>
 80016a0:	2bf0      	cmp	r3, #240	; 0xf0
 80016a2:	d002      	beq.n	80016aa <decodeData+0xce>
 80016a4:	2bf1      	cmp	r3, #241	; 0xf1
 80016a6:	d017      	beq.n	80016d8 <decodeData+0xfc>
 80016a8:	e0e3      	b.n	8001872 <decodeData+0x296>
        case ALIVE:
            auxBuffTx[indiceAux++] = ALIVE;
 80016aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80016b4:	3340      	adds	r3, #64	; 0x40
 80016b6:	443b      	add	r3, r7
 80016b8:	22f0      	movs	r2, #240	; 0xf0
 80016ba:	f803 2c38 	strb.w	r2, [r3, #-56]
            auxBuffTx[indiceAux++] = ACKNOWLEDGE;
 80016be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80016c8:	3340      	adds	r3, #64	; 0x40
 80016ca:	443b      	add	r3, r7
 80016cc:	220d      	movs	r2, #13
 80016ce:	f803 2c38 	strb.w	r2, [r3, #-56]
            auxBuffTx[NBYTES] = 0x05;
 80016d2:	2305      	movs	r3, #5
 80016d4:	733b      	strb	r3, [r7, #12]
            break;
 80016d6:	e0d9      	b.n	800188c <decodeData+0x2b0>
        case FIRMWARE:
        	auxBuffTx[indiceAux++] = FIRMWARE;
 80016d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80016e2:	3340      	adds	r3, #64	; 0x40
 80016e4:	443b      	add	r3, r7
 80016e6:	22f1      	movs	r2, #241	; 0xf1
 80016e8:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES] = 0x04;
 80016ec:	2304      	movs	r3, #4
 80016ee:	733b      	strb	r3, [r7, #12]
        	break;
 80016f0:	e0cc      	b.n	800188c <decodeData+0x2b0>
        case ANALOG_IR:
        	auxBuffTx[indiceAux++] = ANALOG_IR;
 80016f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80016fc:	3340      	adds	r3, #64	; 0x40
 80016fe:	443b      	add	r3, r7
 8001700:	22f2      	movs	r2, #242	; 0xf2
 8001702:	f803 2c38 	strb.w	r2, [r3, #-56]
        	for (uint8_t c=0; c<NUMCHANNELSADC; c++)					// For all 8 channels
 8001706:	2300      	movs	r3, #0
 8001708:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800170c:	e0a9      	b.n	8001862 <decodeData+0x286>
			{
				for (uint8_t i=2; i<SIZEBUFADC; i++)					// Scans 64 bytes of data
 800170e:	2302      	movs	r3, #2
 8001710:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001714:	e06f      	b.n	80017f6 <decodeData+0x21a>
				{
					datosADC.dynSumDF[c] = 0;							// Clear buffer
 8001716:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800171a:	4a7d      	ldr	r2, [pc, #500]	; (8001910 <decodeData+0x334>)
 800171c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001720:	2100      	movs	r1, #0
 8001722:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					datosADC.dynSumDF[c] += datosADC.bufADC[i][c];		// Add value "i"
 8001726:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800172a:	4a79      	ldr	r2, [pc, #484]	; (8001910 <decodeData+0x334>)
 800172c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001730:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001734:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001738:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800173c:	4874      	ldr	r0, [pc, #464]	; (8001910 <decodeData+0x334>)
 800173e:	00d2      	lsls	r2, r2, #3
 8001740:	4413      	add	r3, r2
 8001742:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8001746:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800174a:	440a      	add	r2, r1
 800174c:	b291      	uxth	r1, r2
 800174e:	4a70      	ldr	r2, [pc, #448]	; (8001910 <decodeData+0x334>)
 8001750:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001754:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					datosADC.dynSumDF[c] += datosADC.bufADC[i-1][c];	// Add value "i-1"
 8001758:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800175c:	4a6c      	ldr	r2, [pc, #432]	; (8001910 <decodeData+0x334>)
 800175e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001762:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001766:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001770:	4867      	ldr	r0, [pc, #412]	; (8001910 <decodeData+0x334>)
 8001772:	00d2      	lsls	r2, r2, #3
 8001774:	4413      	add	r3, r2
 8001776:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800177a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800177e:	440a      	add	r2, r1
 8001780:	b291      	uxth	r1, r2
 8001782:	4a63      	ldr	r2, [pc, #396]	; (8001910 <decodeData+0x334>)
 8001784:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001788:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					datosADC.dynSumDF[c] += datosADC.bufADC[i-2][c];	// Add value "i-2"
 800178c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001790:	4a5f      	ldr	r2, [pc, #380]	; (8001910 <decodeData+0x334>)
 8001792:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001796:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800179a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800179e:	1e9a      	subs	r2, r3, #2
 80017a0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017a4:	485a      	ldr	r0, [pc, #360]	; (8001910 <decodeData+0x334>)
 80017a6:	00d2      	lsls	r2, r2, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80017ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017b2:	440a      	add	r2, r1
 80017b4:	b291      	uxth	r1, r2
 80017b6:	4a56      	ldr	r2, [pc, #344]	; (8001910 <decodeData+0x334>)
 80017b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					datosADC.bufADC[i][c] = (datosADC.dynSumDF[c]/3);	// Calculates average
 80017c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <decodeData+0x334>)
 80017c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80017ce:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80017d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017d6:	484f      	ldr	r0, [pc, #316]	; (8001914 <decodeData+0x338>)
 80017d8:	fba0 0101 	umull	r0, r1, r0, r1
 80017dc:	0849      	lsrs	r1, r1, #1
 80017de:	b288      	uxth	r0, r1
 80017e0:	494b      	ldr	r1, [pc, #300]	; (8001910 <decodeData+0x334>)
 80017e2:	00d2      	lsls	r2, r2, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	4602      	mov	r2, r0
 80017e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for (uint8_t i=2; i<SIZEBUFADC; i++)					// Scans 64 bytes of data
 80017ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80017f0:	3301      	adds	r3, #1
 80017f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80017f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80017fa:	2b3f      	cmp	r3, #63	; 0x3f
 80017fc:	d98b      	bls.n	8001716 <decodeData+0x13a>
				}
				myADCbuf[c].u16 = datosADC.bufADC[SIZEBUFADC-1][c];		// Save average value
 80017fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001802:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001806:	4942      	ldr	r1, [pc, #264]	; (8001910 <decodeData+0x334>)
 8001808:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 800180c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001810:	4a41      	ldr	r2, [pc, #260]	; (8001918 <decodeData+0x33c>)
 8001812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				auxBuffTx[indiceAux++] = myADCbuf[c].u8[0];				// Send low byte
 8001816:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800181a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800181e:	1c59      	adds	r1, r3, #1
 8001820:	f887 103f 	strb.w	r1, [r7, #63]	; 0x3f
 8001824:	4619      	mov	r1, r3
 8001826:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <decodeData+0x33c>)
 8001828:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800182c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8001830:	443b      	add	r3, r7
 8001832:	f803 2c38 	strb.w	r2, [r3, #-56]
				auxBuffTx[indiceAux++] = myADCbuf[c].u8[1];				// Send high byte
 8001836:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800183a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800183e:	1c59      	adds	r1, r3, #1
 8001840:	f887 103f 	strb.w	r1, [r7, #63]	; 0x3f
 8001844:	4618      	mov	r0, r3
 8001846:	4934      	ldr	r1, [pc, #208]	; (8001918 <decodeData+0x33c>)
 8001848:	0053      	lsls	r3, r2, #1
 800184a:	440b      	add	r3, r1
 800184c:	785a      	ldrb	r2, [r3, #1]
 800184e:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8001852:	443b      	add	r3, r7
 8001854:	f803 2c38 	strb.w	r2, [r3, #-56]
        	for (uint8_t c=0; c<NUMCHANNELSADC; c++)					// For all 8 channels
 8001858:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800185c:	3301      	adds	r3, #1
 800185e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001862:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001866:	2b07      	cmp	r3, #7
 8001868:	f67f af51 	bls.w	800170e <decodeData+0x132>
			}
			auxBuffTx[NBYTES] = (0x04)+(0x10); 							// Sends 0x04 + 16 BYTES
 800186c:	2314      	movs	r3, #20
 800186e:	733b      	strb	r3, [r7, #12]
			break;
 8001870:	e00c      	b.n	800188c <decodeData+0x2b0>
        default:
			auxBuffTx[indiceAux++] = UNKNOWNCOMMAND;
 8001872:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800187c:	3340      	adds	r3, #64	; 0x40
 800187e:	443b      	add	r3, r7
 8001880:	22ff      	movs	r2, #255	; 0xff
 8001882:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES] = 0x04;
 8001886:	2304      	movs	r3, #4
 8001888:	733b      	strb	r3, [r7, #12]
			break;
 800188a:	bf00      	nop
	}
    checksum = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(uint8_t a=0; a<indiceAux; a++)
 8001892:	2300      	movs	r3, #0
 8001894:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001898:	e021      	b.n	80018de <decodeData+0x302>
	{
		checksum ^= auxBuffTx[a];
 800189a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800189e:	3340      	adds	r3, #64	; 0x40
 80018a0:	443b      	add	r3, r7
 80018a2:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80018a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018aa:	4053      	eors	r3, r2
 80018ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		datosCom->bufferTx[datosCom->indexWriteTx++] = auxBuffTx[a];
 80018b0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	795b      	ldrb	r3, [r3, #5]
 80018b8:	1c59      	adds	r1, r3, #1
 80018ba:	b2c8      	uxtb	r0, r1
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	7148      	strb	r0, [r1, #5]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80018c6:	443b      	add	r3, r7
 80018c8:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	for(uint8_t a=0; a<indiceAux; a++)
 80018d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018d8:	3301      	adds	r3, #1
 80018da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80018de:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80018e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d3d7      	bcc.n	800189a <decodeData+0x2be>
	}
	datosCom->bufferTx[datosCom->indexWriteTx++] = checksum;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	795b      	ldrb	r3, [r3, #5]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	7151      	strb	r1, [r2, #5]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001900:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

}
 8001904:	bf00      	nop
 8001906:	3744      	adds	r7, #68	; 0x44
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000ba0 	.word	0x20000ba0
 8001914:	aaaaaaab 	.word	0xaaaaaaab
 8001918:	20000fc0 	.word	0x20000fc0

0800191c <communicationTask>:


void communicationTask(_sDato *datosCom, uint8_t source){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
	if (datosCom->indexReadRx != datosCom->indexWriteRx)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	791a      	ldrb	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	78db      	ldrb	r3, [r3, #3]
 8001930:	429a      	cmp	r2, r3
 8001932:	d002      	beq.n	800193a <communicationTask+0x1e>
		decodeProtocol(datosCom);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fd59 	bl	80013ec <decodeProtocol>

	// FOR USART & WIFI COMMUNICATION
	if (datosCom->indexReadTx != datosCom->indexWriteTx){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	799a      	ldrb	r2, [r3, #6]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	795b      	ldrb	r3, [r3, #5]
 8001942:	429a      	cmp	r2, r3
 8001944:	d013      	beq.n	800196e <communicationTask+0x52>
		if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <communicationTask+0x7c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d10c      	bne.n	800196e <communicationTask+0x52>
			USART1->DR = datosCom->bufferTx[datosCom->indexReadTx++];
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	799b      	ldrb	r3, [r3, #6]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	b2d1      	uxtb	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	7191      	strb	r1, [r2, #6]
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <communicationTask+0x80>)
 800196c:	605a      	str	r2, [r3, #4]
		}
	}

	// FOR USB COMMUNICATION
	if (datosCom->newData == true){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10c      	bne.n	8001990 <communicationTask+0x74>
		if ((CDC_Transmit_FS(datosComUSB.bufferRx, datosComUSB.indexWriteRx)) == USBD_OK){
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <communicationTask+0x84>)
 8001978:	78db      	ldrb	r3, [r3, #3]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	4809      	ldr	r0, [pc, #36]	; (80019a4 <communicationTask+0x88>)
 8001980:	f009 fe00 	bl	800b584 <CDC_Transmit_FS>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <communicationTask+0x74>
			datosCom->newData = false;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
				datosCom->newData = false;
			}
		}
	}
	*/
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000534 	.word	0x20000534
 800199c:	40013800 	.word	0x40013800
 80019a0:	20000790 	.word	0x20000790
 80019a4:	20000797 	.word	0x20000797

080019a8 <buttonTask>:


void buttonTask(_sButton *button){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	switch (button->estado)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	785b      	ldrb	r3, [r3, #1]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d002      	beq.n	80019be <buttonTask+0x16>
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d007      	beq.n	80019cc <buttonTask+0x24>
			mode++;
			if (mode == maxMODES)
				mode = 0;						// Increase mode (circular: 0-MAX)
			break;
		default:
			break;
 80019bc:	e014      	b.n	80019e8 <buttonTask+0x40>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	// ON
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <buttonTask+0x48>)
 80019c6:	f001 ff3e 	bl	8003846 <HAL_GPIO_WritePin>
			break;
 80019ca:	e00d      	b.n	80019e8 <buttonTask+0x40>
			mode++;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <buttonTask+0x4c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <buttonTask+0x4c>)
 80019d6:	701a      	strb	r2, [r3, #0]
			if (mode == maxMODES)
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <buttonTask+0x4c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d102      	bne.n	80019e6 <buttonTask+0x3e>
				mode = 0;						// Increase mode (circular: 0-MAX)
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <buttonTask+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
			break;
 80019e6:	bf00      	nop
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40011000 	.word	0x40011000
 80019f4:	20000fd1 	.word	0x20000fd1

080019f8 <stateTask>:


void stateTask(){
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	switch (mode)
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <stateTask+0x44>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d010      	beq.n	8001a26 <stateTask+0x2e>
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	dc13      	bgt.n	8001a30 <stateTask+0x38>
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <stateTask+0x1a>
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d005      	beq.n	8001a1c <stateTask+0x24>
			break;
		case modeTWO:
			myHB = maskTWO;
			break;
		default:
			break;
 8001a10:	e00e      	b.n	8001a30 <stateTask+0x38>
			myHB = maskIDLE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <stateTask+0x48>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <stateTask+0x4c>)
 8001a18:	6013      	str	r3, [r2, #0]
			break;
 8001a1a:	e00a      	b.n	8001a32 <stateTask+0x3a>
			myHB = maskONE;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <stateTask+0x50>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <stateTask+0x4c>)
 8001a22:	6013      	str	r3, [r2, #0]
			break;
 8001a24:	e005      	b.n	8001a32 <stateTask+0x3a>
			myHB = maskTWO;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <stateTask+0x54>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <stateTask+0x4c>)
 8001a2c:	6013      	str	r3, [r2, #0]
			break;
 8001a2e:	e000      	b.n	8001a32 <stateTask+0x3a>
			break;
 8001a30:	bf00      	nop
	}
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000fd1 	.word	0x20000fd1
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000018 	.word	0x20000018
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	20000010 	.word	0x20000010

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f000 fd88 	bl	8002568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f87a 	bl	8001b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5c:	f000 fac8 	bl	8001ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a60:	f000 faa8 	bl	8001fb4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a64:	f000 f9b2 	bl	8001dcc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001a68:	f000 fa7a 	bl	8001f60 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001a6c:	f009 fc64 	bl	800b338 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001a70:	f000 f8cc 	bl	8001c0c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a74:	f000 f96c 	bl	8001d50 <MX_ADC2_Init>
  MX_TIM4_Init();
 8001a78:	f000 f9f8 	bl	8001e6c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001a7c:	4826      	ldr	r0, [pc, #152]	; (8001b18 <main+0xc8>)
 8001a7e:	f004 f97f 	bl	8005d80 <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USB_Receive);
 8001a82:	4826      	ldr	r0, [pc, #152]	; (8001b1c <main+0xcc>)
 8001a84:	f009 fda4 	bl	800b5d0 <CDC_AttachRxData>
  inicializarBoton(&myButton);
 8001a88:	4825      	ldr	r0, [pc, #148]	; (8001b20 <main+0xd0>)
 8001a8a:	f7ff faef 	bl	800106c <inicializarBoton>

  HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <main+0xd4>)
 8001a90:	78db      	ldrb	r3, [r3, #3]
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <main+0xd4>)
 8001a96:	4413      	add	r3, r2
 8001a98:	3307      	adds	r3, #7
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4822      	ldr	r0, [pc, #136]	; (8001b28 <main+0xd8>)
 8001aa0:	f005 f806 	bl	8006ab0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &datosComWIFI.bufferRx[datosComWIFI.indexWriteRx], 1);
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <main+0xdc>)
 8001aa6:	78db      	ldrb	r3, [r3, #3]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <main+0xdc>)
 8001aac:	4413      	add	r3, r2
 8001aae:	3307      	adds	r3, #7
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481c      	ldr	r0, [pc, #112]	; (8001b28 <main+0xd8>)
 8001ab6:	f004 fffb 	bl	8006ab0 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)datosADC.bufADC, NUMCHANNELSADC);
 8001aba:	2208      	movs	r2, #8
 8001abc:	491c      	ldr	r1, [pc, #112]	; (8001b30 <main+0xe0>)
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <main+0xe4>)
 8001ac0:	f000 fe8c 	bl	80027dc <HAL_ADC_Start_DMA>

  ESP01_Init(&esp01);
 8001ac4:	481c      	ldr	r0, [pc, #112]	; (8001b38 <main+0xe8>)
 8001ac6:	f7fe fbed 	bl	80002a4 <ESP01_Init>
  ESP01_SetWIFI(WIFI_SSID, WIFI_PASSWORD);
 8001aca:	491c      	ldr	r1, [pc, #112]	; (8001b3c <main+0xec>)
 8001acc:	481c      	ldr	r0, [pc, #112]	; (8001b40 <main+0xf0>)
 8001ace:	f7fe fb3d 	bl	800014c <ESP01_SetWIFI>
  ESP01_StartUDP(WIFI_UDP_REMOTEIP, WIFI_UDP_REMOTEPORT, WIFI_UDP_LOCALPORT);
 8001ad2:	f247 5230 	movw	r2, #30000	; 0x7530
 8001ad6:	f247 5130 	movw	r1, #30000	; 0x7530
 8001ada:	481a      	ldr	r0, [pc, #104]	; (8001b44 <main+0xf4>)
 8001adc:	f7fe fb6c 	bl	80001b8 <ESP01_StartUDP>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!time10ms)						// Every 10 milliseconds
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <main+0xf8>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <main+0xa8>
	  {
		  do10ms();
 8001ae8:	f7ff fc00 	bl	80012ec <do10ms>
		  do40ms();
 8001aec:	f7ff fc0a 	bl	8001304 <do40ms>
		  do100ms();
 8001af0:	f7ff fc30 	bl	8001354 <do100ms>
		  do500ms();
 8001af4:	f7ff fc56 	bl	80013a4 <do500ms>
	  }
	  communicationTask(&datosComSerie, viaUART);
 8001af8:	2100      	movs	r1, #0
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <main+0xd4>)
 8001afc:	f7ff ff0e 	bl	800191c <communicationTask>
	  communicationTask(&datosComWIFI, viaWIFI);
 8001b00:	2101      	movs	r1, #1
 8001b02:	480a      	ldr	r0, [pc, #40]	; (8001b2c <main+0xdc>)
 8001b04:	f7ff ff0a 	bl	800191c <communicationTask>
	  communicationTask(&datosComUSB, viaUSB);
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4810      	ldr	r0, [pc, #64]	; (8001b4c <main+0xfc>)
 8001b0c:	f7ff ff06 	bl	800191c <communicationTask>
	  ESP01_Task();
 8001b10:	f7fe fc04 	bl	800031c <ESP01_Task>
	  if (!time10ms)						// Every 10 milliseconds
 8001b14:	e7e4      	b.n	8001ae0 <main+0x90>
 8001b16:	bf00      	nop
 8001b18:	200004a4 	.word	0x200004a4
 8001b1c:	08001251 	.word	0x08001251
 8001b20:	2000057c 	.word	0x2000057c
 8001b24:	20000588 	.word	0x20000588
 8001b28:	20000534 	.word	0x20000534
 8001b2c:	20000998 	.word	0x20000998
 8001b30:	20000ba0 	.word	0x20000ba0
 8001b34:	20000400 	.word	0x20000400
 8001b38:	20000fb4 	.word	0x20000fb4
 8001b3c:	0800c010 	.word	0x0800c010
 8001b40:	0800c020 	.word	0x0800c020
 8001b44:	0800c030 	.word	0x0800c030
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	20000790 	.word	0x20000790

08001b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b094      	sub	sp, #80	; 0x50
 8001b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b5a:	2228      	movs	r2, #40	; 0x28
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00a f958 	bl	800be14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b92:	2302      	movs	r3, #2
 8001b94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b9c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fbd4 	bl	8005354 <HAL_RCC_OscConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bb2:	f000 fac7 	bl	8002144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb6:	230f      	movs	r3, #15
 8001bb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fe40 	bl	8005858 <HAL_RCC_ClockConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bde:	f000 fab1 	bl	8002144 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001be2:	2312      	movs	r3, #18
 8001be4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 ffbe 	bl	8005b74 <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001bfe:	f000 faa1 	bl	8002144 <Error_Handler>
  }
}
 8001c02:	bf00      	nop
 8001c04:	3750      	adds	r7, #80	; 0x50
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c1c:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <MX_ADC1_Init+0x140>)
 8001c20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c22:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c30:	4b45      	ldr	r3, [pc, #276]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c38:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c3e:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c46:	2208      	movs	r2, #8
 8001c48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c4a:	483f      	ldr	r0, [pc, #252]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c4c:	f000 fcee 	bl	800262c <HAL_ADC_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001c56:	f000 fa75 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001c62:	2302      	movs	r3, #2
 8001c64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4837      	ldr	r0, [pc, #220]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c6c:	f000 fea6 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f000 fa65 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4830      	ldr	r0, [pc, #192]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001c88:	f000 fe98 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001c92:	f000 fa57 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c96:	2302      	movs	r3, #2
 8001c98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4829      	ldr	r0, [pc, #164]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001ca4:	f000 fe8a 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001cae:	f000 fa49 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4822      	ldr	r0, [pc, #136]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001cc0:	f000 fe7c 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001cca:	f000 fa3b 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481b      	ldr	r0, [pc, #108]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001cdc:	f000 fe6e 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001ce6:	f000 fa2d 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cea:	2305      	movs	r3, #5
 8001cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001cee:	2306      	movs	r3, #6
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4814      	ldr	r0, [pc, #80]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001cf8:	f000 fe60 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001d02:	f000 fa1f 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d06:	2306      	movs	r3, #6
 8001d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	480d      	ldr	r0, [pc, #52]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001d14:	f000 fe52 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001d1e:	f000 fa11 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d22:	2307      	movs	r3, #7
 8001d24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001d26:	2308      	movs	r3, #8
 8001d28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <MX_ADC1_Init+0x13c>)
 8001d30:	f000 fe44 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001d3a:	f000 fa03 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000400 	.word	0x20000400
 8001d4c:	40012400 	.word	0x40012400

08001d50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d62:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <MX_ADC2_Init+0x78>)
 8001d64:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d7a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d7e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001d8e:	f000 fc4d 	bl	800262c <HAL_ADC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001d98:	f000 f9d4 	bl	8002144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_ADC2_Init+0x74>)
 8001dae:	f000 fe05 	bl	80029bc <HAL_ADC_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001db8:	f000 f9c4 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000430 	.word	0x20000430
 8001dc8:	40012800 	.word	0x40012800

08001dcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <MX_TIM1_Init+0x9c>)
 8001dec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001df0:	2247      	movs	r2, #71	; 0x47
 8001df2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001dfc:	22fa      	movs	r2, #250	; 0xfa
 8001dfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e12:	4814      	ldr	r0, [pc, #80]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001e14:	f003 ff64 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001e1e:	f000 f991 	bl	8002144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001e30:	f004 fa12 	bl	8006258 <HAL_TIM_ConfigClockSource>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001e3a:	f000 f983 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e46:	463b      	mov	r3, r7
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <MX_TIM1_Init+0x98>)
 8001e4c:	f004 fd70 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001e56:	f000 f975 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200004a4 	.word	0x200004a4
 8001e68:	40012c00 	.word	0x40012c00

08001e6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001e90:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <MX_TIM4_Init+0xf0>)
 8001e92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001eb4:	4828      	ldr	r0, [pc, #160]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001eb6:	f003 ffb5 	bl	8005e24 <HAL_TIM_PWM_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ec0:	f000 f940 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4821      	ldr	r0, [pc, #132]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001ed4:	f004 fd2c 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ede:	f000 f931 	bl	8002144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee2:	2360      	movs	r3, #96	; 0x60
 8001ee4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4817      	ldr	r0, [pc, #92]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001efa:	f004 f8eb 	bl	80060d4 <HAL_TIM_PWM_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001f04:	f000 f91e 	bl	8002144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001f10:	f004 f8e0 	bl	80060d4 <HAL_TIM_PWM_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f1a:	f000 f913 	bl	8002144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2208      	movs	r2, #8
 8001f22:	4619      	mov	r1, r3
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001f26:	f004 f8d5 	bl	80060d4 <HAL_TIM_PWM_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001f30:	f000 f908 	bl	8002144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	220c      	movs	r2, #12
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4807      	ldr	r0, [pc, #28]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001f3c:	f004 f8ca 	bl	80060d4 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001f46:	f000 f8fd 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <MX_TIM4_Init+0xec>)
 8001f4c:	f000 fa08 	bl	8002360 <HAL_TIM_MspPostInit>

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200004ec 	.word	0x200004ec
 8001f5c:	40000800 	.word	0x40000800

08001f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <MX_USART1_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f98:	f004 fd3a 	bl	8006a10 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f000 f8cf 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000534 	.word	0x20000534
 8001fb0:	40013800 	.word	0x40013800

08001fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_DMA_Init+0x38>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <MX_DMA_Init+0x38>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6153      	str	r3, [r2, #20]
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_DMA_Init+0x38>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	200b      	movs	r0, #11
 8001fd8:	f000 ffc1 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fdc:	200b      	movs	r0, #11
 8001fde:	f000 ffda 	bl	8002f96 <HAL_NVIC_EnableIRQ>

}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <MX_GPIO_Init+0x140>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a49      	ldr	r2, [pc, #292]	; (8002130 <MX_GPIO_Init+0x140>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b47      	ldr	r3, [pc, #284]	; (8002130 <MX_GPIO_Init+0x140>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800201c:	4b44      	ldr	r3, [pc, #272]	; (8002130 <MX_GPIO_Init+0x140>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a43      	ldr	r2, [pc, #268]	; (8002130 <MX_GPIO_Init+0x140>)
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <MX_GPIO_Init+0x140>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <MX_GPIO_Init+0x140>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <MX_GPIO_Init+0x140>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <MX_GPIO_Init+0x140>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204c:	4b38      	ldr	r3, [pc, #224]	; (8002130 <MX_GPIO_Init+0x140>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a37      	ldr	r2, [pc, #220]	; (8002130 <MX_GPIO_Init+0x140>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b35      	ldr	r3, [pc, #212]	; (8002130 <MX_GPIO_Init+0x140>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800206a:	4832      	ldr	r0, [pc, #200]	; (8002134 <MX_GPIO_Init+0x144>)
 800206c:	f001 fbeb 	bl	8003846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_EN_GPIO_Port, CH_EN_Pin, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002076:	4830      	ldr	r0, [pc, #192]	; (8002138 <MX_GPIO_Init+0x148>)
 8002078:	f001 fbe5 	bl	8003846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800207c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2302      	movs	r3, #2
 800208c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4827      	ldr	r0, [pc, #156]	; (8002134 <MX_GPIO_Init+0x144>)
 8002096:	f001 fa3b 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800209a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a0:	2312      	movs	r3, #18
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	4823      	ldr	r0, [pc, #140]	; (800213c <MX_GPIO_Init+0x14c>)
 80020b0:	f001 fa2e 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 80020b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020be:	2301      	movs	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	481c      	ldr	r0, [pc, #112]	; (800213c <MX_GPIO_Init+0x14c>)
 80020ca:	f001 fa21 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_EN_Pin */
  GPIO_InitStruct.Pin = CH_EN_Pin;
 80020ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d4:	2301      	movs	r3, #1
 80020d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH_EN_GPIO_Port, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	4814      	ldr	r0, [pc, #80]	; (8002138 <MX_GPIO_Init+0x148>)
 80020e8:	f001 fa12 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020ec:	2330      	movs	r3, #48	; 0x30
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2302      	movs	r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	480f      	ldr	r0, [pc, #60]	; (800213c <MX_GPIO_Init+0x14c>)
 8002100:	f001 fa06 	bl	8003510 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_GPIO_Init+0x150>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	4a07      	ldr	r2, [pc, #28]	; (8002140 <MX_GPIO_Init+0x150>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	40011000 	.word	0x40011000
 8002138:	40010800 	.word	0x40010800
 800213c:	40010c00 	.word	0x40010c00
 8002140:	40010000 	.word	0x40010000

08002144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002148:	b672      	cpsid	i
}
 800214a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800214c:	e7fe      	b.n	800214c <Error_Handler+0x8>
	...

08002150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_MspInit+0x5c>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_MspInit+0x5c>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6193      	str	r3, [r2, #24]
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_MspInit+0x5c>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_MspInit+0x5c>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <HAL_MspInit+0x5c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_MspInit+0x5c>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_MspInit+0x60>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_MspInit+0x60>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000

080021b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0318 	add.w	r3, r7, #24
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <HAL_ADC_MspInit+0x10c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d14a      	bne.n	800226a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002204:	23ff      	movs	r3, #255	; 0xff
 8002206:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002208:	2303      	movs	r3, #3
 800220a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	4619      	mov	r1, r3
 8002212:	482d      	ldr	r0, [pc, #180]	; (80022c8 <HAL_ADC_MspInit+0x114>)
 8002214:	f001 f97c 	bl	8003510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_ADC_MspInit+0x118>)
 800221a:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <HAL_ADC_MspInit+0x11c>)
 800221c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_ADC_MspInit+0x118>)
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_ADC_MspInit+0x118>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_ADC_MspInit+0x118>)
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_ADC_MspInit+0x118>)
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_ADC_MspInit+0x118>)
 800223a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_ADC_MspInit+0x118>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_ADC_MspInit+0x118>)
 8002248:	2200      	movs	r2, #0
 800224a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800224c:	481f      	ldr	r0, [pc, #124]	; (80022cc <HAL_ADC_MspInit+0x118>)
 800224e:	f000 febd 	bl	8002fcc <HAL_DMA_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002258:	f7ff ff74 	bl	8002144 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_ADC_MspInit+0x118>)
 8002260:	621a      	str	r2, [r3, #32]
 8002262:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_ADC_MspInit+0x118>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002268:	e026      	b.n	80022b8 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_ADC_MspInit+0x120>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d121      	bne.n	80022b8 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_ADC_MspInit+0x110>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022a4:	2304      	movs	r3, #4
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a8:	2303      	movs	r3, #3
 80022aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 0318 	add.w	r3, r7, #24
 80022b0:	4619      	mov	r1, r3
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_ADC_MspInit+0x114>)
 80022b4:	f001 f92c 	bl	8003510 <HAL_GPIO_Init>
}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40012400 	.word	0x40012400
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010800 	.word	0x40010800
 80022cc:	20000460 	.word	0x20000460
 80022d0:	40020008 	.word	0x40020008
 80022d4:	40012800 	.word	0x40012800

080022d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_TIM_Base_MspInit+0x44>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d113      	bne.n	8002312 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_TIM_Base_MspInit+0x48>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <HAL_TIM_Base_MspInit+0x48>)
 80022f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f4:	6193      	str	r3, [r2, #24]
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_TIM_Base_MspInit+0x48>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	2019      	movs	r0, #25
 8002308:	f000 fe29 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800230c:	2019      	movs	r0, #25
 800230e:	f000 fe42 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_TIM_PWM_MspInit+0x34>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10b      	bne.n	800234e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_TIM_PWM_MspInit+0x38>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_TIM_PWM_MspInit+0x38>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_TIM_PWM_MspInit+0x38>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40000800 	.word	0x40000800
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <HAL_TIM_MspPostInit+0x5c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d118      	bne.n	80023b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_TIM_MspPostInit+0x60>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_TIM_MspPostInit+0x60>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_TIM_MspPostInit+0x60>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002398:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800239c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <HAL_TIM_MspPostInit+0x64>)
 80023ae:	f001 f8af 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010c00 	.word	0x40010c00

080023c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <HAL_UART_MspInit+0x9c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d139      	bne.n	800245c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_UART_MspInit+0xa0>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_UART_MspInit+0xa0>)
 80023ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_UART_MspInit+0xa0>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_UART_MspInit+0xa0>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_UART_MspInit+0xa0>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_UART_MspInit+0xa0>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4619      	mov	r1, r3
 800242c:	480f      	ldr	r0, [pc, #60]	; (800246c <HAL_UART_MspInit+0xa4>)
 800242e:	f001 f86f 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4619      	mov	r1, r3
 8002446:	4809      	ldr	r0, [pc, #36]	; (800246c <HAL_UART_MspInit+0xa4>)
 8002448:	f001 f862 	bl	8003510 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2025      	movs	r0, #37	; 0x25
 8002452:	f000 fd84 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002456:	2025      	movs	r0, #37	; 0x25
 8002458:	f000 fd9d 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40013800 	.word	0x40013800
 8002468:	40021000 	.word	0x40021000
 800246c:	40010800 	.word	0x40010800

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002474:	e7fe      	b.n	8002474 <NMI_Handler+0x4>

08002476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <MemManage_Handler+0x4>

08002482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler+0x4>

0800248e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b6:	f000 f89d 	bl	80025f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <DMA1_Channel1_IRQHandler+0x10>)
 80024c6:	f000 feef 	bl	80032a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000460 	.word	0x20000460

080024d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80024da:	f001 faf1 	bl	8003ac0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200016ac 	.word	0x200016ac

080024e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <TIM1_UP_IRQHandler+0x10>)
 80024ee:	f003 fce8 	bl	8005ec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200004a4 	.word	0x200004a4

080024fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <USART1_IRQHandler+0x10>)
 8002502:	f004 fafb 	bl	8006afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000534 	.word	0x20000534

08002510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800251c:	f7ff fff8 	bl	8002510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002520:	480b      	ldr	r0, [pc, #44]	; (8002550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002524:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002538:	4c09      	ldr	r4, [pc, #36]	; (8002560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002546:	f009 fc81 	bl	800be4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254a:	f7ff fa81 	bl	8001a50 <main>
  bx lr
 800254e:	4770      	bx	lr
  ldr r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002554:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002558:	0800c2a4 	.word	0x0800c2a4
  ldr r2, =_sbss
 800255c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002560:	20001bbc 	.word	0x20001bbc

08002564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC1_2_IRQHandler>
	...

08002568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_Init+0x28>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <HAL_Init+0x28>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f000 fce5 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	200f      	movs	r0, #15
 8002580:	f000 f808 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7ff fde4 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000

08002594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x54>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x58>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fcfd 	bl	8002fb2 <HAL_SYSTICK_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00e      	b.n	80025e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d80a      	bhi.n	80025de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f000 fcc5 	bl	8002f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <HAL_InitTick+0x5c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000001c 	.word	0x2000001c
 80025ec:	20000024 	.word	0x20000024
 80025f0:	20000020 	.word	0x20000020

080025f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_IncTick+0x1c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_IncTick+0x20>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a03      	ldr	r2, [pc, #12]	; (8002614 <HAL_IncTick+0x20>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000024 	.word	0x20000024
 8002614:	20000fd4 	.word	0x20000fd4

08002618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <HAL_GetTick+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000fd4 	.word	0x20000fd4

0800262c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0be      	b.n	80027cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fda2 	bl	80021b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 faf5 	bl	8002c60 <ADC_ConversionStop_Disable>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 8099 	bne.w	80027ba <HAL_ADC_Init+0x18e>
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 8095 	bne.w	80027ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002698:	f023 0302 	bic.w	r3, r3, #2
 800269c:	f043 0202 	orr.w	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7b1b      	ldrb	r3, [r3, #12]
 80026b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d003      	beq.n	80026ce <HAL_ADC_Init+0xa2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d102      	bne.n	80026d4 <HAL_ADC_Init+0xa8>
 80026ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d2:	e000      	b.n	80026d6 <HAL_ADC_Init+0xaa>
 80026d4:	2300      	movs	r3, #0
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7d1b      	ldrb	r3, [r3, #20]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d119      	bne.n	8002718 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7b1b      	ldrb	r3, [r3, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	035a      	lsls	r2, r3, #13
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e00b      	b.n	8002718 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	430a      	orrs	r2, r1
 800272a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_ADC_Init+0x1a8>)
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	430b      	orrs	r3, r1
 800273e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002748:	d003      	beq.n	8002752 <HAL_ADC_Init+0x126>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d104      	bne.n	800275c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	3b01      	subs	r3, #1
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	430a      	orrs	r2, r1
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_ADC_Init+0x1ac>)
 8002778:	4013      	ands	r3, r2
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	d10b      	bne.n	8002798 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002796:	e018      	b.n	80027ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f023 0312 	bic.w	r3, r3, #18
 80027a0:	f043 0210 	orr.w	r2, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027b8:	e007      	b.n	80027ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	ffe1f7fd 	.word	0xffe1f7fd
 80027d8:	ff1f0efe 	.word	0xff1f0efe

080027dc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a64      	ldr	r2, [pc, #400]	; (8002984 <HAL_ADC_Start_DMA+0x1a8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_Start_DMA+0x24>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a63      	ldr	r2, [pc, #396]	; (8002988 <HAL_ADC_Start_DMA+0x1ac>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d106      	bne.n	800280e <HAL_ADC_Start_DMA+0x32>
 8002800:	4b60      	ldr	r3, [pc, #384]	; (8002984 <HAL_ADC_Start_DMA+0x1a8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 80b3 	bne.w	8002974 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_ADC_Start_DMA+0x40>
 8002818:	2302      	movs	r3, #2
 800281a:	e0ae      	b.n	800297a <HAL_ADC_Start_DMA+0x19e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f9c1 	bl	8002bac <ADC_Enable>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 809a 	bne.w	800296a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4e      	ldr	r2, [pc, #312]	; (8002988 <HAL_ADC_Start_DMA+0x1ac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d105      	bne.n	8002860 <HAL_ADC_Start_DMA+0x84>
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_ADC_Start_DMA+0x1a8>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d115      	bne.n	800288c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002876:	2b00      	cmp	r3, #0
 8002878:	d026      	beq.n	80028c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800288a:	e01d      	b.n	80028c8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a39      	ldr	r2, [pc, #228]	; (8002984 <HAL_ADC_Start_DMA+0x1a8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_ADC_Start_DMA+0xd0>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a38      	ldr	r2, [pc, #224]	; (8002988 <HAL_ADC_Start_DMA+0x1ac>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d10d      	bne.n	80028c8 <HAL_ADC_Start_DMA+0xec>
 80028ac:	4b35      	ldr	r3, [pc, #212]	; (8002984 <HAL_ADC_Start_DMA+0x1a8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f023 0206 	bic.w	r2, r3, #6
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
 80028e0:	e002      	b.n	80028e8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a25      	ldr	r2, [pc, #148]	; (800298c <HAL_ADC_Start_DMA+0x1b0>)
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a24      	ldr	r2, [pc, #144]	; (8002990 <HAL_ADC_Start_DMA+0x1b4>)
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_ADC_Start_DMA+0x1b8>)
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0202 	mvn.w	r2, #2
 8002910:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002920:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a18      	ldr	r0, [r3, #32]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	334c      	adds	r3, #76	; 0x4c
 800292c:	4619      	mov	r1, r3
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f000 fba5 	bl	8003080 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002940:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002944:	d108      	bne.n	8002958 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002954:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002956:	e00f      	b.n	8002978 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002966:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002968:	e006      	b.n	8002978 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002972:	e001      	b.n	8002978 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002978:	7dfb      	ldrb	r3, [r7, #23]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40012400 	.word	0x40012400
 8002988:	40012800 	.word	0x40012800
 800298c:	08002ce3 	.word	0x08002ce3
 8002990:	08002d5f 	.word	0x08002d5f
 8002994:	08002d7b 	.word	0x08002d7b

08002998 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x20>
 80029d8:	2302      	movs	r3, #2
 80029da:	e0dc      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x1da>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d81c      	bhi.n	8002a26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	3b05      	subs	r3, #5
 80029fe:	221f      	movs	r2, #31
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4019      	ands	r1, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3b05      	subs	r3, #5
 8002a18:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
 8002a24:	e03c      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d81c      	bhi.n	8002a68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b23      	subs	r3, #35	; 0x23
 8002a40:	221f      	movs	r2, #31
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	4019      	ands	r1, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b23      	subs	r3, #35	; 0x23
 8002a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
 8002a66:	e01b      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	3b41      	subs	r3, #65	; 0x41
 8002a7a:	221f      	movs	r2, #31
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4019      	ands	r1, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b41      	subs	r3, #65	; 0x41
 8002a94:	fa00 f203 	lsl.w	r2, r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	d91c      	bls.n	8002ae2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68d9      	ldr	r1, [r3, #12]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b1e      	subs	r3, #30
 8002aba:	2207      	movs	r2, #7
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4019      	ands	r1, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6898      	ldr	r0, [r3, #8]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b1e      	subs	r3, #30
 8002ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]
 8002ae0:	e019      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6919      	ldr	r1, [r3, #16]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	2207      	movs	r2, #7
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4019      	ands	r1, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6898      	ldr	r0, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d003      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b22:	2b11      	cmp	r3, #17
 8002b24:	d132      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d125      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d126      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d11a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	0c9a      	lsrs	r2, r3, #18
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b6c:	e002      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f9      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x1b2>
 8002b7a:	e007      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40012400 	.word	0x40012400
 8002ba4:	2000001c 	.word	0x2000001c
 8002ba8:	431bde83 	.word	0x431bde83

08002bac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d040      	beq.n	8002c4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <ADC_Enable+0xac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <ADC_Enable+0xb0>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002be8:	e002      	b.n	8002bf0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f9      	bne.n	8002bea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bf6:	f7ff fd0f 	bl	8002618 <HAL_GetTick>
 8002bfa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bfc:	e01f      	b.n	8002c3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bfe:	f7ff fd0b 	bl	8002618 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d918      	bls.n	8002c3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d011      	beq.n	8002c3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e007      	b.n	8002c4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d1d8      	bne.n	8002bfe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000001c 	.word	0x2000001c
 8002c5c:	431bde83 	.word	0x431bde83

08002c60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d12e      	bne.n	8002cd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c8a:	f7ff fcc5 	bl	8002618 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c90:	e01b      	b.n	8002cca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c92:	f7ff fcc1 	bl	8002618 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d914      	bls.n	8002cca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10d      	bne.n	8002cca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e007      	b.n	8002cda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d0dc      	beq.n	8002c92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d127      	bne.n	8002d4c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d12:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d16:	d115      	bne.n	8002d44 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d111      	bne.n	8002d44 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7fe fa31 	bl	80011ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d4a:	e004      	b.n	8002d56 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff fe13 	bl	8002998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	f043 0204 	orr.w	r2, r3, #4
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff fe02 	bl	80029aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0b      	blt.n	8002e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4906      	ldr	r1, [pc, #24]	; (8002e48 <__NVIC_EnableIRQ+0x34>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
         );
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff90 	bl	8002e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff2d 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff42 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff90 	bl	8002ea0 <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5f 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff35 	bl	8002e14 <__NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffa2 	bl	8002f04 <SysTick_Config>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e043      	b.n	800306a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_DMA_Init+0xa8>)
 8002fea:	4413      	add	r3, r2
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_DMA_Init+0xac>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	009a      	lsls	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_DMA_Init+0xb0>)
 8002ffe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003016:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800301a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	bffdfff8 	.word	0xbffdfff8
 8003078:	cccccccd 	.word	0xcccccccd
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_DMA_Start_IT+0x20>
 800309c:	2302      	movs	r3, #2
 800309e:	e04b      	b.n	8003138 <HAL_DMA_Start_IT+0xb8>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d13a      	bne.n	800312a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f9eb 	bl	80034b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 020e 	orr.w	r2, r2, #14
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00f      	b.n	8003118 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 020a 	orr.w	r2, r2, #10
 8003116:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e005      	b.n	8003136 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d008      	beq.n	800316a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2204      	movs	r2, #4
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e020      	b.n	80031ac <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020e 	bic.w	r2, r2, #14
 8003178:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d005      	beq.n	80031dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2204      	movs	r2, #4
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	e051      	b.n	8003280 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 020e 	bic.w	r2, r2, #14
 80031ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_DMA_Abort_IT+0xd4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d029      	beq.n	800325a <HAL_DMA_Abort_IT+0xa2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_DMA_Abort_IT+0xd8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_Abort_IT+0x9e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_DMA_Abort_IT+0xdc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01a      	beq.n	8003250 <HAL_DMA_Abort_IT+0x98>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_DMA_Abort_IT+0xe0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d012      	beq.n	800324a <HAL_DMA_Abort_IT+0x92>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_DMA_Abort_IT+0xe4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00a      	beq.n	8003244 <HAL_DMA_Abort_IT+0x8c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_DMA_Abort_IT+0xe8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d102      	bne.n	800323e <HAL_DMA_Abort_IT+0x86>
 8003238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800323c:	e00e      	b.n	800325c <HAL_DMA_Abort_IT+0xa4>
 800323e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003242:	e00b      	b.n	800325c <HAL_DMA_Abort_IT+0xa4>
 8003244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003248:	e008      	b.n	800325c <HAL_DMA_Abort_IT+0xa4>
 800324a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800324e:	e005      	b.n	800325c <HAL_DMA_Abort_IT+0xa4>
 8003250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003254:	e002      	b.n	800325c <HAL_DMA_Abort_IT+0xa4>
 8003256:	2310      	movs	r3, #16
 8003258:	e000      	b.n	800325c <HAL_DMA_Abort_IT+0xa4>
 800325a:	2301      	movs	r3, #1
 800325c:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <HAL_DMA_Abort_IT+0xec>)
 800325e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
    } 
  }
  return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40020008 	.word	0x40020008
 8003290:	4002001c 	.word	0x4002001c
 8003294:	40020030 	.word	0x40020030
 8003298:	40020044 	.word	0x40020044
 800329c:	40020058 	.word	0x40020058
 80032a0:	4002006c 	.word	0x4002006c
 80032a4:	40020000 	.word	0x40020000

080032a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2204      	movs	r2, #4
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d04f      	beq.n	8003370 <HAL_DMA_IRQHandler+0xc8>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d04a      	beq.n	8003370 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0204 	bic.w	r2, r2, #4
 80032f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a66      	ldr	r2, [pc, #408]	; (8003498 <HAL_DMA_IRQHandler+0x1f0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d029      	beq.n	8003356 <HAL_DMA_IRQHandler+0xae>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a65      	ldr	r2, [pc, #404]	; (800349c <HAL_DMA_IRQHandler+0x1f4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d022      	beq.n	8003352 <HAL_DMA_IRQHandler+0xaa>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01a      	beq.n	800334c <HAL_DMA_IRQHandler+0xa4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a62      	ldr	r2, [pc, #392]	; (80034a4 <HAL_DMA_IRQHandler+0x1fc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d012      	beq.n	8003346 <HAL_DMA_IRQHandler+0x9e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a60      	ldr	r2, [pc, #384]	; (80034a8 <HAL_DMA_IRQHandler+0x200>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00a      	beq.n	8003340 <HAL_DMA_IRQHandler+0x98>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5f      	ldr	r2, [pc, #380]	; (80034ac <HAL_DMA_IRQHandler+0x204>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d102      	bne.n	800333a <HAL_DMA_IRQHandler+0x92>
 8003334:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003338:	e00e      	b.n	8003358 <HAL_DMA_IRQHandler+0xb0>
 800333a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800333e:	e00b      	b.n	8003358 <HAL_DMA_IRQHandler+0xb0>
 8003340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003344:	e008      	b.n	8003358 <HAL_DMA_IRQHandler+0xb0>
 8003346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800334a:	e005      	b.n	8003358 <HAL_DMA_IRQHandler+0xb0>
 800334c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003350:	e002      	b.n	8003358 <HAL_DMA_IRQHandler+0xb0>
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	e000      	b.n	8003358 <HAL_DMA_IRQHandler+0xb0>
 8003356:	2304      	movs	r3, #4
 8003358:	4a55      	ldr	r2, [pc, #340]	; (80034b0 <HAL_DMA_IRQHandler+0x208>)
 800335a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8094 	beq.w	800348e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800336e:	e08e      	b.n	800348e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	2202      	movs	r2, #2
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d056      	beq.n	800342e <HAL_DMA_IRQHandler+0x186>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d051      	beq.n	800342e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020a 	bic.w	r2, r2, #10
 80033a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a38      	ldr	r2, [pc, #224]	; (8003498 <HAL_DMA_IRQHandler+0x1f0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d029      	beq.n	800340e <HAL_DMA_IRQHandler+0x166>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a37      	ldr	r2, [pc, #220]	; (800349c <HAL_DMA_IRQHandler+0x1f4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d022      	beq.n	800340a <HAL_DMA_IRQHandler+0x162>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a35      	ldr	r2, [pc, #212]	; (80034a0 <HAL_DMA_IRQHandler+0x1f8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x15c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a34      	ldr	r2, [pc, #208]	; (80034a4 <HAL_DMA_IRQHandler+0x1fc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d012      	beq.n	80033fe <HAL_DMA_IRQHandler+0x156>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a32      	ldr	r2, [pc, #200]	; (80034a8 <HAL_DMA_IRQHandler+0x200>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x150>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_DMA_IRQHandler+0x204>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d102      	bne.n	80033f2 <HAL_DMA_IRQHandler+0x14a>
 80033ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033f0:	e00e      	b.n	8003410 <HAL_DMA_IRQHandler+0x168>
 80033f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f6:	e00b      	b.n	8003410 <HAL_DMA_IRQHandler+0x168>
 80033f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fc:	e008      	b.n	8003410 <HAL_DMA_IRQHandler+0x168>
 80033fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003402:	e005      	b.n	8003410 <HAL_DMA_IRQHandler+0x168>
 8003404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003408:	e002      	b.n	8003410 <HAL_DMA_IRQHandler+0x168>
 800340a:	2320      	movs	r3, #32
 800340c:	e000      	b.n	8003410 <HAL_DMA_IRQHandler+0x168>
 800340e:	2302      	movs	r3, #2
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <HAL_DMA_IRQHandler+0x208>)
 8003412:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	d034      	beq.n	800348e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800342c:	e02f      	b.n	800348e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2208      	movs	r2, #8
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d028      	beq.n	8003490 <HAL_DMA_IRQHandler+0x1e8>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d023      	beq.n	8003490 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 020e 	bic.w	r2, r2, #14
 8003456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
    }
  }
  return;
 800348e:	bf00      	nop
 8003490:	bf00      	nop
}
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40020008 	.word	0x40020008
 800349c:	4002001c 	.word	0x4002001c
 80034a0:	40020030 	.word	0x40020030
 80034a4:	40020044 	.word	0x40020044
 80034a8:	40020058 	.word	0x40020058
 80034ac:	4002006c 	.word	0x4002006c
 80034b0:	40020000 	.word	0x40020000

080034b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d108      	bne.n	80034f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034f2:	e007      	b.n	8003504 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
	...

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b08b      	sub	sp, #44	; 0x2c
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003522:	e169      	b.n	80037f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003524:	2201      	movs	r2, #1
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	429a      	cmp	r2, r3
 800353e:	f040 8158 	bne.w	80037f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a9a      	ldr	r2, [pc, #616]	; (80037b0 <HAL_GPIO_Init+0x2a0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d05e      	beq.n	800360a <HAL_GPIO_Init+0xfa>
 800354c:	4a98      	ldr	r2, [pc, #608]	; (80037b0 <HAL_GPIO_Init+0x2a0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d875      	bhi.n	800363e <HAL_GPIO_Init+0x12e>
 8003552:	4a98      	ldr	r2, [pc, #608]	; (80037b4 <HAL_GPIO_Init+0x2a4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d058      	beq.n	800360a <HAL_GPIO_Init+0xfa>
 8003558:	4a96      	ldr	r2, [pc, #600]	; (80037b4 <HAL_GPIO_Init+0x2a4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d86f      	bhi.n	800363e <HAL_GPIO_Init+0x12e>
 800355e:	4a96      	ldr	r2, [pc, #600]	; (80037b8 <HAL_GPIO_Init+0x2a8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d052      	beq.n	800360a <HAL_GPIO_Init+0xfa>
 8003564:	4a94      	ldr	r2, [pc, #592]	; (80037b8 <HAL_GPIO_Init+0x2a8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d869      	bhi.n	800363e <HAL_GPIO_Init+0x12e>
 800356a:	4a94      	ldr	r2, [pc, #592]	; (80037bc <HAL_GPIO_Init+0x2ac>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d04c      	beq.n	800360a <HAL_GPIO_Init+0xfa>
 8003570:	4a92      	ldr	r2, [pc, #584]	; (80037bc <HAL_GPIO_Init+0x2ac>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d863      	bhi.n	800363e <HAL_GPIO_Init+0x12e>
 8003576:	4a92      	ldr	r2, [pc, #584]	; (80037c0 <HAL_GPIO_Init+0x2b0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d046      	beq.n	800360a <HAL_GPIO_Init+0xfa>
 800357c:	4a90      	ldr	r2, [pc, #576]	; (80037c0 <HAL_GPIO_Init+0x2b0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d85d      	bhi.n	800363e <HAL_GPIO_Init+0x12e>
 8003582:	2b12      	cmp	r3, #18
 8003584:	d82a      	bhi.n	80035dc <HAL_GPIO_Init+0xcc>
 8003586:	2b12      	cmp	r3, #18
 8003588:	d859      	bhi.n	800363e <HAL_GPIO_Init+0x12e>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <HAL_GPIO_Init+0x80>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	0800360b 	.word	0x0800360b
 8003594:	080035e5 	.word	0x080035e5
 8003598:	080035f7 	.word	0x080035f7
 800359c:	08003639 	.word	0x08003639
 80035a0:	0800363f 	.word	0x0800363f
 80035a4:	0800363f 	.word	0x0800363f
 80035a8:	0800363f 	.word	0x0800363f
 80035ac:	0800363f 	.word	0x0800363f
 80035b0:	0800363f 	.word	0x0800363f
 80035b4:	0800363f 	.word	0x0800363f
 80035b8:	0800363f 	.word	0x0800363f
 80035bc:	0800363f 	.word	0x0800363f
 80035c0:	0800363f 	.word	0x0800363f
 80035c4:	0800363f 	.word	0x0800363f
 80035c8:	0800363f 	.word	0x0800363f
 80035cc:	0800363f 	.word	0x0800363f
 80035d0:	0800363f 	.word	0x0800363f
 80035d4:	080035ed 	.word	0x080035ed
 80035d8:	08003601 	.word	0x08003601
 80035dc:	4a79      	ldr	r2, [pc, #484]	; (80037c4 <HAL_GPIO_Init+0x2b4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035e2:	e02c      	b.n	800363e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	623b      	str	r3, [r7, #32]
          break;
 80035ea:	e029      	b.n	8003640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	3304      	adds	r3, #4
 80035f2:	623b      	str	r3, [r7, #32]
          break;
 80035f4:	e024      	b.n	8003640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	3308      	adds	r3, #8
 80035fc:	623b      	str	r3, [r7, #32]
          break;
 80035fe:	e01f      	b.n	8003640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	330c      	adds	r3, #12
 8003606:	623b      	str	r3, [r7, #32]
          break;
 8003608:	e01a      	b.n	8003640 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003612:	2304      	movs	r3, #4
 8003614:	623b      	str	r3, [r7, #32]
          break;
 8003616:	e013      	b.n	8003640 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d105      	bne.n	800362c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003620:	2308      	movs	r3, #8
 8003622:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	611a      	str	r2, [r3, #16]
          break;
 800362a:	e009      	b.n	8003640 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800362c:	2308      	movs	r3, #8
 800362e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	615a      	str	r2, [r3, #20]
          break;
 8003636:	e003      	b.n	8003640 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
          break;
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x130>
          break;
 800363e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	d801      	bhi.n	800364a <HAL_GPIO_Init+0x13a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	e001      	b.n	800364e <HAL_GPIO_Init+0x13e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2bff      	cmp	r3, #255	; 0xff
 8003654:	d802      	bhi.n	800365c <HAL_GPIO_Init+0x14c>
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	e002      	b.n	8003662 <HAL_GPIO_Init+0x152>
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	3b08      	subs	r3, #8
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	210f      	movs	r1, #15
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	401a      	ands	r2, r3
 8003674:	6a39      	ldr	r1, [r7, #32]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	431a      	orrs	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80b1 	beq.w	80037f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003690:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <HAL_GPIO_Init+0x2b8>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	4a4c      	ldr	r2, [pc, #304]	; (80037c8 <HAL_GPIO_Init+0x2b8>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6193      	str	r3, [r2, #24]
 800369c:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_GPIO_Init+0x2b8>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036a8:	4a48      	ldr	r2, [pc, #288]	; (80037cc <HAL_GPIO_Init+0x2bc>)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	3302      	adds	r3, #2
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	220f      	movs	r2, #15
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a40      	ldr	r2, [pc, #256]	; (80037d0 <HAL_GPIO_Init+0x2c0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d013      	beq.n	80036fc <HAL_GPIO_Init+0x1ec>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a3f      	ldr	r2, [pc, #252]	; (80037d4 <HAL_GPIO_Init+0x2c4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00d      	beq.n	80036f8 <HAL_GPIO_Init+0x1e8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a3e      	ldr	r2, [pc, #248]	; (80037d8 <HAL_GPIO_Init+0x2c8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <HAL_GPIO_Init+0x1e4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a3d      	ldr	r2, [pc, #244]	; (80037dc <HAL_GPIO_Init+0x2cc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_GPIO_Init+0x1e0>
 80036ec:	2303      	movs	r3, #3
 80036ee:	e006      	b.n	80036fe <HAL_GPIO_Init+0x1ee>
 80036f0:	2304      	movs	r3, #4
 80036f2:	e004      	b.n	80036fe <HAL_GPIO_Init+0x1ee>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e002      	b.n	80036fe <HAL_GPIO_Init+0x1ee>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_GPIO_Init+0x1ee>
 80036fc:	2300      	movs	r3, #0
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	f002 0203 	and.w	r2, r2, #3
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	4093      	lsls	r3, r2
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800370e:	492f      	ldr	r1, [pc, #188]	; (80037cc <HAL_GPIO_Init+0x2bc>)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	3302      	adds	r3, #2
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d006      	beq.n	8003736 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003728:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	492c      	ldr	r1, [pc, #176]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	43db      	mvns	r3, r3
 800373e:	4928      	ldr	r1, [pc, #160]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003740:	4013      	ands	r3, r2
 8003742:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d006      	beq.n	800375e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4922      	ldr	r1, [pc, #136]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	43db      	mvns	r3, r3
 8003766:	491e      	ldr	r1, [pc, #120]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003768:	4013      	ands	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d006      	beq.n	8003786 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	4918      	ldr	r1, [pc, #96]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e006      	b.n	8003794 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	43db      	mvns	r3, r3
 800378e:	4914      	ldr	r1, [pc, #80]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003790:	4013      	ands	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d021      	beq.n	80037e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	490e      	ldr	r1, [pc, #56]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]
 80037ac:	e021      	b.n	80037f2 <HAL_GPIO_Init+0x2e2>
 80037ae:	bf00      	nop
 80037b0:	10320000 	.word	0x10320000
 80037b4:	10310000 	.word	0x10310000
 80037b8:	10220000 	.word	0x10220000
 80037bc:	10210000 	.word	0x10210000
 80037c0:	10120000 	.word	0x10120000
 80037c4:	10110000 	.word	0x10110000
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40010800 	.word	0x40010800
 80037d4:	40010c00 	.word	0x40010c00
 80037d8:	40011000 	.word	0x40011000
 80037dc:	40011400 	.word	0x40011400
 80037e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_GPIO_Init+0x304>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	4909      	ldr	r1, [pc, #36]	; (8003814 <HAL_GPIO_Init+0x304>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	3301      	adds	r3, #1
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	f47f ae8e 	bne.w	8003524 <HAL_GPIO_Init+0x14>
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	372c      	adds	r7, #44	; 0x2c
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e001      	b.n	800383a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	807b      	strh	r3, [r7, #2]
 8003852:	4613      	mov	r3, r2
 8003854:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003856:	787b      	ldrb	r3, [r7, #1]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800385c:	887a      	ldrh	r2, [r7, #2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003862:	e003      	b.n	800386c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	041a      	lsls	r2, r3, #16
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	611a      	str	r2, [r3, #16]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003878:	b08b      	sub	sp, #44	; 0x2c
 800387a:	af06      	add	r7, sp, #24
 800387c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0f1      	b.n	8003a6c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f007 ffb3 	bl	800b808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2203      	movs	r2, #3
 80038a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f003 fe5c 	bl	800756c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	687e      	ldr	r6, [r7, #4]
 80038bc:	466d      	mov	r5, sp
 80038be:	f106 0410 	add.w	r4, r6, #16
 80038c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	1d33      	adds	r3, r6, #4
 80038cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ce:	6838      	ldr	r0, [r7, #0]
 80038d0:	f003 fe26 	bl	8007520 <USB_CoreInit>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0c2      	b.n	8003a6c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f003 fe57 	bl	80075a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	e040      	b.n	800397a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	440b      	add	r3, r1
 8003908:	3301      	adds	r3, #1
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	3303      	adds	r3, #3
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	3338      	adds	r3, #56	; 0x38
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	333c      	adds	r3, #60	; 0x3c
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	3340      	adds	r3, #64	; 0x40
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	3301      	adds	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d3b9      	bcc.n	80038f8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e044      	b.n	8003a14 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	440b      	add	r3, r1
 8003998:	f203 1369 	addw	r3, r3, #361	; 0x169
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	3301      	adds	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3b5      	bcc.n	800398a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	687e      	ldr	r6, [r7, #4]
 8003a26:	466d      	mov	r5, sp
 8003a28:	f106 0410 	add.w	r4, r6, #16
 8003a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	1d33      	adds	r3, r6, #4
 8003a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a38:	6838      	ldr	r0, [r7, #0]
 8003a3a:	f003 fdbd 	bl	80075b8 <USB_DevInit>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e00d      	b.n	8003a6c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f006 f83e 	bl	8009ae6 <USB_DevDisconnect>

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_PCD_Start+0x16>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e016      	b.n	8003ab8 <HAL_PCD_Start+0x44>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 fd52 	bl	8007540 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f008 f925 	bl	800bcee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f006 f812 	bl	8009ad2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f006 f814 	bl	8009afa <USB_ReadInterrupts>
 8003ad2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fb1b 	bl	800411a <PCD_EP_ISR_Handler>

    return;
 8003ae4:	e119      	b.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b02:	b292      	uxth	r2, r2
 8003b04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f007 fef8 	bl	800b8fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b0e:	2100      	movs	r1, #0
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f905 	bl	8003d20 <HAL_PCD_SetAddress>

    return;
 8003b16:	e100      	b.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b34:	b292      	uxth	r2, r2
 8003b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b3a:	e0ee      	b.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00c      	beq.n	8003b60 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b5e:	e0dc      	b.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d027      	beq.n	8003bba <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0204 	bic.w	r2, r2, #4
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0208 	bic.w	r2, r2, #8
 8003b94:	b292      	uxth	r2, r2
 8003b96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f007 fee8 	bl	800b970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bb8:	e0af      	b.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8083 	beq.w	8003ccc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e010      	b.n	8003bee <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	7ffb      	ldrb	r3, [r7, #31]
 8003bda:	8812      	ldrh	r2, [r2, #0]
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	3320      	adds	r3, #32
 8003be2:	443b      	add	r3, r7
 8003be4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003be8:	7ffb      	ldrb	r3, [r7, #31]
 8003bea:	3301      	adds	r3, #1
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	7ffb      	ldrb	r3, [r7, #31]
 8003bf0:	2b07      	cmp	r3, #7
 8003bf2:	d9eb      	bls.n	8003bcc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	b292      	uxth	r2, r2
 8003c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	b292      	uxth	r2, r2
 8003c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c24:	bf00      	nop
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f6      	beq.n	8003c26 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4a:	b292      	uxth	r2, r2
 8003c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e00f      	b.n	8003c76 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003c56:	7ffb      	ldrb	r3, [r7, #31]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	7ffa      	ldrb	r2, [r7, #31]
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	440a      	add	r2, r1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	3320      	adds	r3, #32
 8003c68:	443b      	add	r3, r7
 8003c6a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c6e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	3301      	adds	r3, #1
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d9ec      	bls.n	8003c56 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0204 	orr.w	r2, r2, #4
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f007 fe39 	bl	800b93c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cca:	e026      	b.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00f      	beq.n	8003cf6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f007 fdf7 	bl	800b8e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cf4:	e011      	b.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d12:	b292      	uxth	r2, r2
 8003d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d18:	bf00      	nop
  }
}
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_PCD_SetAddress+0x1a>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e013      	b.n	8003d62 <HAL_PCD_SetAddress+0x42>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f005 feaa 	bl	8009aac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	4608      	mov	r0, r1
 8003d74:	4611      	mov	r1, r2
 8003d76:	461a      	mov	r2, r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	70fb      	strb	r3, [r7, #3]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	803b      	strh	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da0e      	bge.n	8003dae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	705a      	strb	r2, [r3, #1]
 8003dac:	e00e      	b.n	8003dcc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 0207 	and.w	r2, r3, #7
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dd8:	883a      	ldrh	r2, [r7, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	78ba      	ldrb	r2, [r7, #2]
 8003de2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003de4:	78bb      	ldrb	r3, [r7, #2]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d102      	bne.n	8003df0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_PCD_EP_Open+0x94>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e00e      	b.n	8003e1c <HAL_PCD_EP_Open+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68f9      	ldr	r1, [r7, #12]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f003 fbf3 	bl	80075f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da0e      	bge.n	8003e56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	705a      	strb	r2, [r3, #1]
 8003e54:	e00e      	b.n	8003e74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	f003 0207 	and.w	r2, r3, #7
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_PCD_EP_Close+0x6a>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e00e      	b.n	8003eac <HAL_PCD_EP_Close+0x88>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 ff6b 	bl	8007d78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	f003 0207 	and.w	r2, r3, #7
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef4:	7afb      	ldrb	r3, [r7, #11]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f004 f922 	bl	8008150 <USB_EPStartXfer>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	f003 0207 	and.w	r2, r3, #7
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f38:	681b      	ldr	r3, [r3, #0]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	460b      	mov	r3, r1
 8003f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f54:	7afb      	ldrb	r3, [r7, #11]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 f8d4 	bl	8008150 <USB_EPStartXfer>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 0207 	and.w	r2, r3, #7
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d901      	bls.n	8003fd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e04c      	b.n	800406a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da0e      	bge.n	8003ff6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	705a      	strb	r2, [r3, #1]
 8003ff4:	e00c      	b.n	8004010 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_PCD_EP_SetStall+0x7e>
 800402c:	2302      	movs	r3, #2
 800402e:	e01c      	b.n	800406a <HAL_PCD_EP_SetStall+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	4618      	mov	r0, r3
 8004040:	f005 fc37 	bl	80098b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	2b00      	cmp	r3, #0
 800404c:	d108      	bne.n	8004060 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f005 fd5c 	bl	8009b18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d901      	bls.n	8004090 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e040      	b.n	8004112 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da0e      	bge.n	80040b6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	705a      	strb	r2, [r3, #1]
 80040b4:	e00e      	b.n	80040d4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f003 0207 	and.w	r2, r3, #7
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_PCD_EP_ClrStall+0x82>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e00e      	b.n	8004112 <HAL_PCD_EP_ClrStall+0xa0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68f9      	ldr	r1, [r7, #12]
 8004102:	4618      	mov	r0, r3
 8004104:	f005 fc25 	bl	8009952 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b096      	sub	sp, #88	; 0x58
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004122:	e3bf      	b.n	80048a4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800412c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004130:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800413e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 8179 	bne.w	800443a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d152      	bne.n	80041fa <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004164:	81fb      	strh	r3, [r7, #14]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	89fb      	ldrh	r3, [r7, #14]
 800416c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004174:	b29b      	uxth	r3, r3
 8004176:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3328      	adds	r3, #40	; 0x28
 800417c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	3302      	adds	r3, #2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	441a      	add	r2, r3
 80041b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041b8:	2100      	movs	r1, #0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f007 fb77 	bl	800b8ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 836b 	beq.w	80048a4 <PCD_EP_ISR_Handler+0x78a>
 80041ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 8366 	bne.w	80048a4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b292      	uxth	r2, r2
 80041ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041f8:	e354      	b.n	80048a4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004200:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800420c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004214:	2b00      	cmp	r3, #0
 8004216:	d034      	beq.n	8004282 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004220:	b29b      	uxth	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	3306      	adds	r3, #6
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004242:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800424e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004250:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004254:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004256:	b29b      	uxth	r3, r3
 8004258:	f005 fcae 	bl	8009bb8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29a      	uxth	r2, r3
 8004264:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004268:	4013      	ands	r3, r2
 800426a:	823b      	strh	r3, [r7, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	8a3a      	ldrh	r2, [r7, #16]
 8004272:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004276:	b292      	uxth	r2, r2
 8004278:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f007 faea 	bl	800b854 <HAL_PCD_SetupStageCallback>
 8004280:	e310      	b.n	80048a4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004282:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004286:	2b00      	cmp	r3, #0
 8004288:	f280 830c 	bge.w	80048a4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29a      	uxth	r2, r3
 8004294:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004298:	4013      	ands	r3, r2
 800429a:	83fb      	strh	r3, [r7, #30]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	8bfa      	ldrh	r2, [r7, #30]
 80042a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042a6:	b292      	uxth	r2, r2
 80042a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	3306      	adds	r3, #6
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d019      	beq.n	8004312 <PCD_EP_ISR_Handler+0x1f8>
 80042de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d015      	beq.n	8004312 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ec:	6959      	ldr	r1, [r3, #20]
 80042ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f005 fc5e 	bl	8009bb8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	441a      	add	r2, r3
 8004306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004308:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800430a:	2100      	movs	r1, #0
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f007 fab3 	bl	800b878 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800431c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 82bd 	bne.w	80048a4 <PCD_EP_ISR_Handler+0x78a>
 800432a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800432e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004332:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004336:	f000 82b5 	beq.w	80048a4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4413      	add	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004364:	b29a      	uxth	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b3e      	cmp	r3, #62	; 0x3e
 8004370:	d91d      	bls.n	80043ae <PCD_EP_ISR_Handler+0x294>
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
 800437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <PCD_EP_ISR_Handler+0x272>
 8004386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004388:	3b01      	subs	r3, #1
 800438a:	647b      	str	r3, [r7, #68]	; 0x44
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29a      	uxth	r2, r3
 8004392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004394:	b29b      	uxth	r3, r3
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	b29b      	uxth	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	e026      	b.n	80043fc <PCD_EP_ISR_Handler+0x2e2>
 80043ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <PCD_EP_ISR_Handler+0x2b2>
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	e017      	b.n	80043fc <PCD_EP_ISR_Handler+0x2e2>
 80043cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	647b      	str	r3, [r7, #68]	; 0x44
 80043d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <PCD_EP_ISR_Handler+0x2cc>
 80043e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e2:	3301      	adds	r3, #1
 80043e4:	647b      	str	r3, [r7, #68]	; 0x44
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	827b      	strh	r3, [r7, #18]
 800440e:	8a7b      	ldrh	r3, [r7, #18]
 8004410:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004414:	827b      	strh	r3, [r7, #18]
 8004416:	8a7b      	ldrh	r3, [r7, #18]
 8004418:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800441c:	827b      	strh	r3, [r7, #18]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	8a7b      	ldrh	r3, [r7, #18]
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]
 8004438:	e234      	b.n	80048a4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800444e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004452:	2b00      	cmp	r3, #0
 8004454:	f280 80fc 	bge.w	8004650 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29a      	uxth	r2, r3
 800446a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800446e:	4013      	ands	r3, r2
 8004470:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800448a:	b292      	uxth	r2, r2
 800448c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800448e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80044a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a6:	7b1b      	ldrb	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d125      	bne.n	80044f8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	3306      	adds	r3, #6
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80044d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8092 	beq.w	8004606 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	6959      	ldr	r1, [r3, #20]
 80044ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ec:	88da      	ldrh	r2, [r3, #6]
 80044ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80044f2:	f005 fb61 	bl	8009bb8 <USB_ReadPMA>
 80044f6:	e086      	b.n	8004606 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80044f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fa:	78db      	ldrb	r3, [r3, #3]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d10a      	bne.n	8004516 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004500:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004504:	461a      	mov	r2, r3
 8004506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f9d9 	bl	80048c0 <HAL_PCD_EP_DB_Receive>
 800450e:	4603      	mov	r3, r0
 8004510:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004514:	e077      	b.n	8004606 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004556:	b29b      	uxth	r3, r3
 8004558:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d024      	beq.n	80045be <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800457c:	b29b      	uxth	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	3302      	adds	r3, #2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800459c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80045a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02e      	beq.n	8004606 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ae:	6959      	ldr	r1, [r3, #20]
 80045b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b2:	891a      	ldrh	r2, [r3, #8]
 80045b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80045b8:	f005 fafe 	bl	8009bb8 <USB_ReadPMA>
 80045bc:	e023      	b.n	8004606 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	3306      	adds	r3, #6
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80045ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	6959      	ldr	r1, [r3, #20]
 80045fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fc:	895a      	ldrh	r2, [r3, #10]
 80045fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004602:	f005 fad9 	bl	8009bb8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800460e:	441a      	add	r2, r3
 8004610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004612:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800461c:	441a      	add	r2, r3
 800461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004620:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <PCD_EP_ISR_Handler+0x51c>
 800462a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800462e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	429a      	cmp	r2, r3
 8004634:	d206      	bcs.n	8004644 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f007 f91b 	bl	800b878 <HAL_PCD_DataOutStageCallback>
 8004642:	e005      	b.n	8004650 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800464a:	4618      	mov	r0, r3
 800464c:	f003 fd80 	bl	8008150 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004650:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8123 	beq.w	80048a4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800465e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80046a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80046ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b0:	78db      	ldrb	r3, [r3, #3]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	f040 80a2 	bne.w	80047fc <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80046b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80046be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c0:	7b1b      	ldrb	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8093 	beq.w	80047ee <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d046      	beq.n	8004762 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d126      	bne.n	800472a <PCD_EP_ISR_Handler+0x610>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	4413      	add	r3, r2
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	011a      	lsls	r2, r3, #4
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	4413      	add	r3, r2
 80046fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004702:	623b      	str	r3, [r7, #32]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470e:	b29a      	uxth	r2, r3
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	801a      	strh	r2, [r3, #0]
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800471e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004722:	b29a      	uxth	r2, r3
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	e061      	b.n	80047ee <PCD_EP_ISR_Handler+0x6d4>
 800472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d15d      	bne.n	80047ee <PCD_EP_ISR_Handler+0x6d4>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	4413      	add	r3, r2
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	011a      	lsls	r2, r3, #4
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	4413      	add	r3, r2
 8004754:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	2200      	movs	r2, #0
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e045      	b.n	80047ee <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d126      	bne.n	80047be <PCD_EP_ISR_Handler+0x6a4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004784:	4413      	add	r3, r2
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
 8004788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	011a      	lsls	r2, r3, #4
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004790:	4413      	add	r3, r2
 8004792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004796:	633b      	str	r3, [r7, #48]	; 0x30
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	e017      	b.n	80047ee <PCD_EP_ISR_Handler+0x6d4>
 80047be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d113      	bne.n	80047ee <PCD_EP_ISR_Handler+0x6d4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d4:	4413      	add	r3, r2
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	4413      	add	r3, r2
 80047e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	2200      	movs	r2, #0
 80047ec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f007 f85a 	bl	800b8ae <HAL_PCD_DataInStageCallback>
 80047fa:	e053      	b.n	80048a4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80047fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d146      	bne.n	8004896 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004810:	b29b      	uxth	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	3302      	adds	r3, #2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004830:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800483c:	429a      	cmp	r2, r3
 800483e:	d907      	bls.n	8004850 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004848:	1ad2      	subs	r2, r2, r3
 800484a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484c:	619a      	str	r2, [r3, #24]
 800484e:	e002      	b.n	8004856 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004852:	2200      	movs	r2, #0
 8004854:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800485e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f007 f822 	bl	800b8ae <HAL_PCD_DataInStageCallback>
 800486a:	e01b      	b.n	80048a4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800486c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004874:	441a      	add	r2, r3
 8004876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004878:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800487a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004882:	441a      	add	r2, r3
 8004884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004886:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800488e:	4618      	mov	r0, r3
 8004890:	f003 fc5e 	bl	8008150 <USB_EPStartXfer>
 8004894:	e006      	b.n	80048a4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004896:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800489a:	461a      	mov	r2, r3
 800489c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f91b 	bl	8004ada <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	b21b      	sxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f6ff ac37 	blt.w	8004124 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3758      	adds	r7, #88	; 0x58
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d07e      	beq.n	80049d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	3302      	adds	r3, #2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004900:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	8b7b      	ldrh	r3, [r7, #26]
 8004908:	429a      	cmp	r2, r3
 800490a:	d306      	bcc.n	800491a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	8b7b      	ldrh	r3, [r7, #26]
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	619a      	str	r2, [r3, #24]
 8004918:	e002      	b.n	8004920 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d123      	bne.n	8004970 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	833b      	strh	r3, [r7, #24]
 8004944:	8b3b      	ldrh	r3, [r7, #24]
 8004946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800494a:	833b      	strh	r3, [r7, #24]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	8b3b      	ldrh	r3, [r7, #24]
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01f      	beq.n	80049ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004994:	82fb      	strh	r3, [r7, #22]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	8afb      	ldrh	r3, [r7, #22]
 80049a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80049ba:	8b7b      	ldrh	r3, [r7, #26]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8087 	beq.w	8004ad0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6959      	ldr	r1, [r3, #20]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	891a      	ldrh	r2, [r3, #8]
 80049ce:	8b7b      	ldrh	r3, [r7, #26]
 80049d0:	f005 f8f2 	bl	8009bb8 <USB_ReadPMA>
 80049d4:	e07c      	b.n	8004ad0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	3306      	adds	r3, #6
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	8b7b      	ldrh	r3, [r7, #26]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d306      	bcc.n	8004a18 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	8b7b      	ldrh	r3, [r7, #26]
 8004a10:	1ad2      	subs	r2, r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	619a      	str	r2, [r3, #24]
 8004a16:	e002      	b.n	8004a1e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d123      	bne.n	8004a6e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	83fb      	strh	r3, [r7, #30]
 8004a42:	8bfb      	ldrh	r3, [r7, #30]
 8004a44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a48:	83fb      	strh	r3, [r7, #30]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	441a      	add	r2, r3
 8004a58:	8bfb      	ldrh	r3, [r7, #30]
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d11f      	bne.n	8004ab8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	83bb      	strh	r3, [r7, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	8bbb      	ldrh	r3, [r7, #28]
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ab8:	8b7b      	ldrh	r3, [r7, #26]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6959      	ldr	r1, [r3, #20]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	895a      	ldrh	r2, [r3, #10]
 8004aca:	8b7b      	ldrh	r3, [r7, #26]
 8004acc:	f005 f874 	bl	8009bb8 <USB_ReadPMA>
    }
  }

  return count;
 8004ad0:	8b7b      	ldrh	r3, [r7, #26]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b0a4      	sub	sp, #144	; 0x90
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 81dd 	beq.w	8004eae <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	3302      	adds	r3, #2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	699a      	ldr	r2, [r3, #24]
 8004b24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d907      	bls.n	8004b3c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b34:	1ad2      	subs	r2, r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	619a      	str	r2, [r3, #24]
 8004b3a:	e002      	b.n	8004b42 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 80b9 	bne.w	8004cbe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d126      	bne.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	4413      	add	r3, r2
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	011a      	lsls	r2, r3, #4
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e01a      	b.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d116      	bne.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	4413      	add	r3, r2
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	011a      	lsls	r2, r3, #4
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	4413      	add	r3, r2
 8004bcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d126      	bne.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	011a      	lsls	r2, r3, #4
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	801a      	strh	r2, [r3, #0]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	e017      	b.n	8004c64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d113      	bne.n	8004c64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	4413      	add	r3, r2
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	011a      	lsls	r2, r3, #4
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	4413      	add	r3, r2
 8004c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c5c:	623b      	str	r3, [r7, #32]
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	2200      	movs	r2, #0
 8004c62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f006 fe1f 	bl	800b8ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 82fc 	beq.w	8005274 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	82fb      	strh	r3, [r7, #22]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]
 8004cbc:	e2da      	b.n	8005274 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d021      	beq.n	8004d0c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	f040 82ae 	bne.w	8005274 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d20:	441a      	add	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d2e:	441a      	add	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d30b      	bcc.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d50:	1ad2      	subs	r2, r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	621a      	str	r2, [r3, #32]
 8004d56:	e017      	b.n	8004d88 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d108      	bne.n	8004d72 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004d60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d70:	e00a      	b.n	8004d88 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d165      	bne.n	8004e5c <HAL_PCD_EP_DB_Transmit+0x382>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da4:	4413      	add	r3, r2
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	011a      	lsls	r2, r3, #4
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8004dce:	d91d      	bls.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x332>
 8004dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <HAL_PCD_EP_DB_Transmit+0x310>
 8004de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de6:	3b01      	subs	r3, #1
 8004de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	029b      	lsls	r3, r3, #10
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	e044      	b.n	8004e96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <HAL_PCD_EP_DB_Transmit+0x350>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e035      	b.n	8004e96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e40:	3301      	adds	r3, #1
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	029b      	lsls	r3, r3, #10
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e01c      	b.n	8004e96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d118      	bne.n	8004e96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e78:	4413      	add	r3, r2
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	011a      	lsls	r2, r3, #4
 8004e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e84:	4413      	add	r3, r2
 8004e86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e94:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6959      	ldr	r1, [r3, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	891a      	ldrh	r2, [r3, #8]
 8004ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f004 fe41 	bl	8009b2e <USB_WritePMA>
 8004eac:	e1e2      	b.n	8005274 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3306      	adds	r3, #6
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d307      	bcc.n	8004ef6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	619a      	str	r2, [r3, #24]
 8004ef4:	e002      	b.n	8004efc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 80c0 	bne.w	8005086 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d126      	bne.n	8004f5c <HAL_PCD_EP_DB_Transmit+0x482>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f22:	4413      	add	r3, r2
 8004f24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	011a      	lsls	r2, r3, #4
 8004f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f2e:	4413      	add	r3, r2
 8004f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f34:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e01a      	b.n	8004f92 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d116      	bne.n	8004f92 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	667b      	str	r3, [r7, #100]	; 0x64
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f78:	4413      	add	r3, r2
 8004f7a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	011a      	lsls	r2, r3, #4
 8004f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f84:	4413      	add	r3, r2
 8004f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8e:	2200      	movs	r2, #0
 8004f90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	677b      	str	r3, [r7, #116]	; 0x74
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d12b      	bne.n	8004ff8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	4413      	add	r3, r2
 8004fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	011a      	lsls	r2, r3, #4
 8004fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	e017      	b.n	8005028 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d113      	bne.n	8005028 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005008:	b29b      	uxth	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500e:	4413      	add	r3, r2
 8005010:	677b      	str	r3, [r7, #116]	; 0x74
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501a:	4413      	add	r3, r2
 800501c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005020:	673b      	str	r3, [r7, #112]	; 0x70
 8005022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005024:	2200      	movs	r2, #0
 8005026:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	4619      	mov	r1, r3
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f006 fc3d 	bl	800b8ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503a:	2b00      	cmp	r3, #0
 800503c:	f040 811a 	bne.w	8005274 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005080:	b29b      	uxth	r3, r3
 8005082:	8013      	strh	r3, [r2, #0]
 8005084:	e0f6      	b.n	8005274 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d121      	bne.n	80050d4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050da:	2b01      	cmp	r3, #1
 80050dc:	f040 80ca 	bne.w	8005274 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050e8:	441a      	add	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050f6:	441a      	add	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d30b      	bcc.n	8005120 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005118:	1ad2      	subs	r2, r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	621a      	str	r2, [r3, #32]
 800511e:	e017      	b.n	8005150 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d108      	bne.n	800513a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005128:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800512c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005138:	e00a      	b.n	8005150 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2200      	movs	r2, #0
 8005146:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	657b      	str	r3, [r7, #84]	; 0x54
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d165      	bne.n	800522a <HAL_PCD_EP_DB_Transmit+0x750>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516c:	b29b      	uxth	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005172:	4413      	add	r3, r2
 8005174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	011a      	lsls	r2, r3, #4
 800517c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517e:	4413      	add	r3, r2
 8005180:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005184:	65bb      	str	r3, [r7, #88]	; 0x58
 8005186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005190:	b29a      	uxth	r2, r3
 8005192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800519a:	2b3e      	cmp	r3, #62	; 0x3e
 800519c:	d91d      	bls.n	80051da <HAL_PCD_EP_DB_Transmit+0x700>
 800519e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80051b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051b4:	3b01      	subs	r3, #1
 80051b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29a      	uxth	r2, r3
 80051be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e041      	b.n	800525e <HAL_PCD_EP_DB_Transmit+0x784>
 80051da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80051e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e032      	b.n	800525e <HAL_PCD_EP_DB_Transmit+0x784>
 80051f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_PCD_EP_DB_Transmit+0x738>
 800520c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800520e:	3301      	adds	r3, #1
 8005210:	66bb      	str	r3, [r7, #104]	; 0x68
 8005212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29a      	uxth	r2, r3
 8005218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800521a:	b29b      	uxth	r3, r3
 800521c:	029b      	lsls	r3, r3, #10
 800521e:	b29b      	uxth	r3, r3
 8005220:	4313      	orrs	r3, r2
 8005222:	b29a      	uxth	r2, r3
 8005224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	e019      	b.n	800525e <HAL_PCD_EP_DB_Transmit+0x784>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d115      	bne.n	800525e <HAL_PCD_EP_DB_Transmit+0x784>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005240:	4413      	add	r3, r2
 8005242:	657b      	str	r3, [r7, #84]	; 0x54
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524c:	4413      	add	r3, r2
 800524e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005252:	653b      	str	r3, [r7, #80]	; 0x50
 8005254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005258:	b29a      	uxth	r2, r3
 800525a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6959      	ldr	r1, [r3, #20]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	895a      	ldrh	r2, [r3, #10]
 800526a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800526e:	b29b      	uxth	r3, r3
 8005270:	f004 fc5d 	bl	8009b2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528e:	82bb      	strh	r3, [r7, #20]
 8005290:	8abb      	ldrh	r3, [r7, #20]
 8005292:	f083 0310 	eor.w	r3, r3, #16
 8005296:	82bb      	strh	r3, [r7, #20]
 8005298:	8abb      	ldrh	r3, [r7, #20]
 800529a:	f083 0320 	eor.w	r3, r3, #32
 800529e:	82bb      	strh	r3, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	8abb      	ldrh	r3, [r7, #20]
 80052b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3790      	adds	r7, #144	; 0x90
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b087      	sub	sp, #28
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	817b      	strh	r3, [r7, #10]
 80052dc:	4613      	mov	r3, r2
 80052de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80052e0:	897b      	ldrh	r3, [r7, #10]
 80052e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ec:	897b      	ldrh	r3, [r7, #10]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e009      	b.n	8005318 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005304:	897a      	ldrh	r2, [r7, #10]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005318:	893b      	ldrh	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2200      	movs	r2, #0
 8005322:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	b29a      	uxth	r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	80da      	strh	r2, [r3, #6]
 800532c:	e00b      	b.n	8005346 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2201      	movs	r2, #1
 8005332:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	b29a      	uxth	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	b29a      	uxth	r2, r3
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
	...

08005354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e272      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8087 	beq.w	8005482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005374:	4b92      	ldr	r3, [pc, #584]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	2b04      	cmp	r3, #4
 800537e:	d00c      	beq.n	800539a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005380:	4b8f      	ldr	r3, [pc, #572]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d112      	bne.n	80053b2 <HAL_RCC_OscConfig+0x5e>
 800538c:	4b8c      	ldr	r3, [pc, #560]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d10b      	bne.n	80053b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539a:	4b89      	ldr	r3, [pc, #548]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d06c      	beq.n	8005480 <HAL_RCC_OscConfig+0x12c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d168      	bne.n	8005480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e24c      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0x76>
 80053bc:	4b80      	ldr	r3, [pc, #512]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7f      	ldr	r2, [pc, #508]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e02e      	b.n	8005428 <HAL_RCC_OscConfig+0xd4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x98>
 80053d2:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7a      	ldr	r2, [pc, #488]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b78      	ldr	r3, [pc, #480]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a77      	ldr	r2, [pc, #476]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e01d      	b.n	8005428 <HAL_RCC_OscConfig+0xd4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f4:	d10c      	bne.n	8005410 <HAL_RCC_OscConfig+0xbc>
 80053f6:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a71      	ldr	r2, [pc, #452]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	4b6f      	ldr	r3, [pc, #444]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6e      	ldr	r2, [pc, #440]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e00b      	b.n	8005428 <HAL_RCC_OscConfig+0xd4>
 8005410:	4b6b      	ldr	r3, [pc, #428]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a6a      	ldr	r2, [pc, #424]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a67      	ldr	r2, [pc, #412]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d013      	beq.n	8005458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7fd f8f2 	bl	8002618 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005438:	f7fd f8ee 	bl	8002618 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e200      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	4b5d      	ldr	r3, [pc, #372]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0xe4>
 8005456:	e014      	b.n	8005482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fd f8de 	bl	8002618 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005460:	f7fd f8da 	bl	8002618 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e1ec      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005472:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x10c>
 800547e:	e000      	b.n	8005482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d063      	beq.n	8005556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800548e:	4b4c      	ldr	r3, [pc, #304]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800549a:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d11c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x18c>
 80054a6:	4b46      	ldr	r3, [pc, #280]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d116      	bne.n	80054e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b2:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_RCC_OscConfig+0x176>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e1c0      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4939      	ldr	r1, [pc, #228]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	e03a      	b.n	8005556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e8:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <HAL_RCC_OscConfig+0x270>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fd f893 	bl	8002618 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f6:	f7fd f88f 	bl	8002618 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e1a1      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005514:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4927      	ldr	r1, [pc, #156]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	600b      	str	r3, [r1, #0]
 8005528:	e015      	b.n	8005556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <HAL_RCC_OscConfig+0x270>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fd f872 	bl	8002618 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fd f86e 	bl	8002618 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e180      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d03a      	beq.n	80055d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d019      	beq.n	800559e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556a:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fd f852 	bl	8002618 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fd f84e 	bl	8002618 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e160      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005596:	2001      	movs	r0, #1
 8005598:	f000 face 	bl	8005b38 <RCC_Delay>
 800559c:	e01c      	b.n	80055d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a4:	f7fd f838 	bl	8002618 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055aa:	e00f      	b.n	80055cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ac:	f7fd f834 	bl	8002618 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d908      	bls.n	80055cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e146      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	42420000 	.word	0x42420000
 80055c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b92      	ldr	r3, [pc, #584]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e9      	bne.n	80055ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a6 	beq.w	8005732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b8b      	ldr	r3, [pc, #556]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	4b88      	ldr	r3, [pc, #544]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4a87      	ldr	r2, [pc, #540]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005600:	61d3      	str	r3, [r2, #28]
 8005602:	4b85      	ldr	r3, [pc, #532]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	4b82      	ldr	r3, [pc, #520]	; (800581c <HAL_RCC_OscConfig+0x4c8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d118      	bne.n	8005650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561e:	4b7f      	ldr	r3, [pc, #508]	; (800581c <HAL_RCC_OscConfig+0x4c8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a7e      	ldr	r2, [pc, #504]	; (800581c <HAL_RCC_OscConfig+0x4c8>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562a:	f7fc fff5 	bl	8002618 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fc fff1 	bl	8002618 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b64      	cmp	r3, #100	; 0x64
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e103      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	4b75      	ldr	r3, [pc, #468]	; (800581c <HAL_RCC_OscConfig+0x4c8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x312>
 8005658:	4b6f      	ldr	r3, [pc, #444]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4a6e      	ldr	r2, [pc, #440]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	6213      	str	r3, [r2, #32]
 8005664:	e02d      	b.n	80056c2 <HAL_RCC_OscConfig+0x36e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x334>
 800566e:	4b6a      	ldr	r3, [pc, #424]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4a69      	ldr	r2, [pc, #420]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	6213      	str	r3, [r2, #32]
 800567a:	4b67      	ldr	r3, [pc, #412]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4a66      	ldr	r2, [pc, #408]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005680:	f023 0304 	bic.w	r3, r3, #4
 8005684:	6213      	str	r3, [r2, #32]
 8005686:	e01c      	b.n	80056c2 <HAL_RCC_OscConfig+0x36e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b05      	cmp	r3, #5
 800568e:	d10c      	bne.n	80056aa <HAL_RCC_OscConfig+0x356>
 8005690:	4b61      	ldr	r3, [pc, #388]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	4a60      	ldr	r2, [pc, #384]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	6213      	str	r3, [r2, #32]
 800569c:	4b5e      	ldr	r3, [pc, #376]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4a5d      	ldr	r2, [pc, #372]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	6213      	str	r3, [r2, #32]
 80056a8:	e00b      	b.n	80056c2 <HAL_RCC_OscConfig+0x36e>
 80056aa:	4b5b      	ldr	r3, [pc, #364]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	4a5a      	ldr	r2, [pc, #360]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	6213      	str	r3, [r2, #32]
 80056b6:	4b58      	ldr	r3, [pc, #352]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	4a57      	ldr	r2, [pc, #348]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80056bc:	f023 0304 	bic.w	r3, r3, #4
 80056c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d015      	beq.n	80056f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ca:	f7fc ffa5 	bl	8002618 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	e00a      	b.n	80056e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fc ffa1 	bl	8002618 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e0b1      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e8:	4b4b      	ldr	r3, [pc, #300]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ee      	beq.n	80056d2 <HAL_RCC_OscConfig+0x37e>
 80056f4:	e014      	b.n	8005720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f6:	f7fc ff8f 	bl	8002618 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fc:	e00a      	b.n	8005714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fe:	f7fc ff8b 	bl	8002618 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e09b      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005714:	4b40      	ldr	r3, [pc, #256]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ee      	bne.n	80056fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005726:	4b3c      	ldr	r3, [pc, #240]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	4a3b      	ldr	r2, [pc, #236]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 800572c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8087 	beq.w	800584a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800573c:	4b36      	ldr	r3, [pc, #216]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b08      	cmp	r3, #8
 8005746:	d061      	beq.n	800580c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d146      	bne.n	80057de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005750:	4b33      	ldr	r3, [pc, #204]	; (8005820 <HAL_RCC_OscConfig+0x4cc>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005756:	f7fc ff5f 	bl	8002618 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575e:	f7fc ff5b 	bl	8002618 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e06d      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005770:	4b29      	ldr	r3, [pc, #164]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d108      	bne.n	8005798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	4921      	ldr	r1, [pc, #132]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005798:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a19      	ldr	r1, [r3, #32]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	430b      	orrs	r3, r1
 80057aa:	491b      	ldr	r1, [pc, #108]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_RCC_OscConfig+0x4cc>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b6:	f7fc ff2f 	bl	8002618 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057be:	f7fc ff2b 	bl	8002618 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e03d      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x46a>
 80057dc:	e035      	b.n	800584a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <HAL_RCC_OscConfig+0x4cc>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fc ff18 	bl	8002618 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fc ff14 	bl	8002618 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e026      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_RCC_OscConfig+0x4c4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x498>
 800580a:	e01e      	b.n	800584a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d107      	bne.n	8005824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e019      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
 8005818:	40021000 	.word	0x40021000
 800581c:	40007000 	.word	0x40007000
 8005820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_OscConfig+0x500>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	429a      	cmp	r2, r3
 8005836:	d106      	bne.n	8005846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d001      	beq.n	800584a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40021000 	.word	0x40021000

08005858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0d0      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800586c:	4b6a      	ldr	r3, [pc, #424]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d910      	bls.n	800589c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b67      	ldr	r3, [pc, #412]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 0207 	bic.w	r2, r3, #7
 8005882:	4965      	ldr	r1, [pc, #404]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0b8      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058cc:	4b53      	ldr	r3, [pc, #332]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a52      	ldr	r2, [pc, #328]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80058d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d8:	4b50      	ldr	r3, [pc, #320]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	494d      	ldr	r1, [pc, #308]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d040      	beq.n	8005978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d115      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e07f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d107      	bne.n	8005926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005916:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e073      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005926:	4b3d      	ldr	r3, [pc, #244]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e06b      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005936:	4b39      	ldr	r3, [pc, #228]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f023 0203 	bic.w	r2, r3, #3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4936      	ldr	r1, [pc, #216]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	4313      	orrs	r3, r2
 8005946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005948:	f7fc fe66 	bl	8002618 <HAL_GetTick>
 800594c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	e00a      	b.n	8005966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005950:	f7fc fe62 	bl	8002618 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e053      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	4b2d      	ldr	r3, [pc, #180]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f003 020c 	and.w	r2, r3, #12
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	429a      	cmp	r2, r3
 8005976:	d1eb      	bne.n	8005950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d210      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 0207 	bic.w	r2, r3, #7
 800598e:	4922      	ldr	r1, [pc, #136]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e032      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4916      	ldr	r1, [pc, #88]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	490e      	ldr	r1, [pc, #56]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059e6:	f000 f821 	bl	8005a2c <HAL_RCC_GetSysClockFreq>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	490a      	ldr	r1, [pc, #40]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059f8:	5ccb      	ldrb	r3, [r1, r3]
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <HAL_RCC_ClockConfig+0x1cc>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1d0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc fdc4 	bl	8002594 <HAL_InitTick>

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40022000 	.word	0x40022000
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	0800c24c 	.word	0x0800c24c
 8005a24:	2000001c 	.word	0x2000001c
 8005a28:	20000020 	.word	0x20000020

08005a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	2300      	movs	r3, #0
 8005a38:	60bb      	str	r3, [r7, #8]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a46:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d002      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x30>
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0x36>
 8005a5a:	e027      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a5c:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a5e:	613b      	str	r3, [r7, #16]
      break;
 8005a60:	e027      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	0c9b      	lsrs	r3, r3, #18
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a6c:	5cd3      	ldrb	r3, [r2, r3]
 8005a6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d010      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	0c5b      	lsrs	r3, r3, #17
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	4a11      	ldr	r2, [pc, #68]	; (8005acc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a86:	5cd3      	ldrb	r3, [r2, r3]
 8005a88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a0d      	ldr	r2, [pc, #52]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a8e:	fb03 f202 	mul.w	r2, r3, r2
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e004      	b.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	613b      	str	r3, [r7, #16]
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005aae:	613b      	str	r3, [r7, #16]
      break;
 8005ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab2:	693b      	ldr	r3, [r7, #16]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	007a1200 	.word	0x007a1200
 8005ac8:	0800c264 	.word	0x0800c264
 8005acc:	0800c274 	.word	0x0800c274
 8005ad0:	003d0900 	.word	0x003d0900

08005ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad8:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	2000001c 	.word	0x2000001c

08005ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aec:	f7ff fff2 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4903      	ldr	r1, [pc, #12]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	0800c25c 	.word	0x0800c25c

08005b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b14:	f7ff ffde 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	0adb      	lsrs	r3, r3, #11
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4903      	ldr	r1, [pc, #12]	; (8005b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b26:	5ccb      	ldrb	r3, [r1, r3]
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40021000 	.word	0x40021000
 8005b34:	0800c25c 	.word	0x0800c25c

08005b38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <RCC_Delay+0x34>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <RCC_Delay+0x38>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	0a5b      	lsrs	r3, r3, #9
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b54:	bf00      	nop
  }
  while (Delay --);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1e5a      	subs	r2, r3, #1
 8005b5a:	60fa      	str	r2, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f9      	bne.n	8005b54 <RCC_Delay+0x1c>
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	2000001c 	.word	0x2000001c
 8005b70:	10624dd3 	.word	0x10624dd3

08005b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d07d      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b94:	4b4f      	ldr	r3, [pc, #316]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10d      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba0:	4b4c      	ldr	r3, [pc, #304]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	4a4b      	ldr	r2, [pc, #300]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	61d3      	str	r3, [r2, #28]
 8005bac:	4b49      	ldr	r3, [pc, #292]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbc:	4b46      	ldr	r3, [pc, #280]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d118      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bc8:	4b43      	ldr	r3, [pc, #268]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a42      	ldr	r2, [pc, #264]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd4:	f7fc fd20 	bl	8002618 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bda:	e008      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bdc:	f7fc fd1c 	bl	8002618 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	; 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e06d      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bee:	4b3a      	ldr	r3, [pc, #232]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bfa:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02e      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d027      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c18:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c22:	4b2e      	ldr	r3, [pc, #184]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c28:	4b2c      	ldr	r3, [pc, #176]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c2e:	4a29      	ldr	r2, [pc, #164]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d014      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3e:	f7fc fceb 	bl	8002618 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c44:	e00a      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fc fce7 	bl	8002618 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e036      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0ee      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c68:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4917      	ldr	r1, [pc, #92]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d105      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c80:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c98:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	490b      	ldr	r1, [pc, #44]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	4904      	ldr	r1, [pc, #16]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40007000 	.word	0x40007000
 8005cdc:	42420440 	.word	0x42420440

08005ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e041      	b.n	8005d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc fae6 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f000 fb86 	bl	8006430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d001      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e03a      	b.n	8005e0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <HAL_TIM_Base_Start_IT+0x98>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x58>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc2:	d009      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x58>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <HAL_TIM_Base_Start_IT+0x9c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x58>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d111      	bne.n	8005dfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d010      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	e007      	b.n	8005e0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800

08005e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e041      	b.n	8005eba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc fa6a 	bl	8002324 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f000 fae4 	bl	8006430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d122      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d11b      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f06f 0202 	mvn.w	r2, #2
 8005eee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fa77 	bl	80063f8 <HAL_TIM_IC_CaptureCallback>
 8005f0a:	e005      	b.n	8005f18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fa6a 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fa79 	bl	800640a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d122      	bne.n	8005f72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d11b      	bne.n	8005f72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0204 	mvn.w	r2, #4
 8005f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fa4d 	bl	80063f8 <HAL_TIM_IC_CaptureCallback>
 8005f5e:	e005      	b.n	8005f6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa40 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa4f 	bl	800640a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d122      	bne.n	8005fc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d11b      	bne.n	8005fc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f06f 0208 	mvn.w	r2, #8
 8005f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa23 	bl	80063f8 <HAL_TIM_IC_CaptureCallback>
 8005fb2:	e005      	b.n	8005fc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa16 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa25 	bl	800640a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d122      	bne.n	800601a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d11b      	bne.n	800601a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f06f 0210 	mvn.w	r2, #16
 8005fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2208      	movs	r2, #8
 8005ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f9f9 	bl	80063f8 <HAL_TIM_IC_CaptureCallback>
 8006006:	e005      	b.n	8006014 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9ec 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f9fb 	bl	800640a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b01      	cmp	r3, #1
 8006026:	d10e      	bne.n	8006046 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f06f 0201 	mvn.w	r2, #1
 800603e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fb f889 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b80      	cmp	r3, #128	; 0x80
 8006052:	d10e      	bne.n	8006072 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d107      	bne.n	8006072 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800606a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fcc6 	bl	80069fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d10e      	bne.n	800609e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d107      	bne.n	800609e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f9bf 	bl	800641c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d10e      	bne.n	80060ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d107      	bne.n	80060ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0220 	mvn.w	r2, #32
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fc91 	bl	80069ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e0ae      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b0c      	cmp	r3, #12
 80060fe:	f200 809f 	bhi.w	8006240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	0800613d 	.word	0x0800613d
 800610c:	08006241 	.word	0x08006241
 8006110:	08006241 	.word	0x08006241
 8006114:	08006241 	.word	0x08006241
 8006118:	0800617d 	.word	0x0800617d
 800611c:	08006241 	.word	0x08006241
 8006120:	08006241 	.word	0x08006241
 8006124:	08006241 	.word	0x08006241
 8006128:	080061bf 	.word	0x080061bf
 800612c:	08006241 	.word	0x08006241
 8006130:	08006241 	.word	0x08006241
 8006134:	08006241 	.word	0x08006241
 8006138:	080061ff 	.word	0x080061ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f9d6 	bl	80064f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0208 	orr.w	r2, r2, #8
 8006156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0204 	bic.w	r2, r2, #4
 8006166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6999      	ldr	r1, [r3, #24]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	619a      	str	r2, [r3, #24]
      break;
 800617a:	e064      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fa1c 	bl	80065c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	021a      	lsls	r2, r3, #8
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	619a      	str	r2, [r3, #24]
      break;
 80061bc:	e043      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fa65 	bl	8006694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0208 	orr.w	r2, r2, #8
 80061d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0204 	bic.w	r2, r2, #4
 80061e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69d9      	ldr	r1, [r3, #28]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	61da      	str	r2, [r3, #28]
      break;
 80061fc:	e023      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 faaf 	bl	8006768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69d9      	ldr	r1, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	021a      	lsls	r2, r3, #8
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	61da      	str	r2, [r3, #28]
      break;
 800623e:	e002      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x1c>
 8006270:	2302      	movs	r3, #2
 8006272:	e0b4      	b.n	80063de <HAL_TIM_ConfigClockSource+0x186>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800629a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d03e      	beq.n	800632c <HAL_TIM_ConfigClockSource+0xd4>
 80062ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b2:	f200 8087 	bhi.w	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	f000 8086 	beq.w	80063ca <HAL_TIM_ConfigClockSource+0x172>
 80062be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c2:	d87f      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b70      	cmp	r3, #112	; 0x70
 80062c6:	d01a      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0xa6>
 80062c8:	2b70      	cmp	r3, #112	; 0x70
 80062ca:	d87b      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b60      	cmp	r3, #96	; 0x60
 80062ce:	d050      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0x11a>
 80062d0:	2b60      	cmp	r3, #96	; 0x60
 80062d2:	d877      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b50      	cmp	r3, #80	; 0x50
 80062d6:	d03c      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0xfa>
 80062d8:	2b50      	cmp	r3, #80	; 0x50
 80062da:	d873      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d058      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x13a>
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d86f      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b30      	cmp	r3, #48	; 0x30
 80062e6:	d064      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x15a>
 80062e8:	2b30      	cmp	r3, #48	; 0x30
 80062ea:	d86b      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d060      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x15a>
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d867      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d05c      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x15a>
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d05a      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x15a>
 80062fc:	e062      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800630e:	f000 faf0 	bl	80068f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	609a      	str	r2, [r3, #8]
      break;
 800632a:	e04f      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800633c:	f000 fad9 	bl	80068f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800634e:	609a      	str	r2, [r3, #8]
      break;
 8006350:	e03c      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800635e:	461a      	mov	r2, r3
 8006360:	f000 fa50 	bl	8006804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2150      	movs	r1, #80	; 0x50
 800636a:	4618      	mov	r0, r3
 800636c:	f000 faa7 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 8006370:	e02c      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800637e:	461a      	mov	r2, r3
 8006380:	f000 fa6e 	bl	8006860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2160      	movs	r1, #96	; 0x60
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fa97 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 8006390:	e01c      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800639e:	461a      	mov	r2, r3
 80063a0:	f000 fa30 	bl	8006804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2140      	movs	r1, #64	; 0x40
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fa87 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 80063b0:	e00c      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	4610      	mov	r0, r2
 80063be:	f000 fa7e 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 80063c2:	e003      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
      break;
 80063c8:	e000      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr
	...

08006430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <TIM_Base_SetConfig+0xb8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00b      	beq.n	8006460 <TIM_Base_SetConfig+0x30>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644e:	d007      	beq.n	8006460 <TIM_Base_SetConfig+0x30>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a26      	ldr	r2, [pc, #152]	; (80064ec <TIM_Base_SetConfig+0xbc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_Base_SetConfig+0x30>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a25      	ldr	r2, [pc, #148]	; (80064f0 <TIM_Base_SetConfig+0xc0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d108      	bne.n	8006472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <TIM_Base_SetConfig+0xb8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00b      	beq.n	8006492 <TIM_Base_SetConfig+0x62>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006480:	d007      	beq.n	8006492 <TIM_Base_SetConfig+0x62>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a19      	ldr	r2, [pc, #100]	; (80064ec <TIM_Base_SetConfig+0xbc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_Base_SetConfig+0x62>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <TIM_Base_SetConfig+0xc0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <TIM_Base_SetConfig+0xb8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d103      	bne.n	80064d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	615a      	str	r2, [r3, #20]
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800

080064f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f023 0201 	bic.w	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 0302 	bic.w	r3, r3, #2
 800653c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <TIM_OC1_SetConfig+0xc8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10c      	bne.n	800656a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0308 	bic.w	r3, r3, #8
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0304 	bic.w	r3, r3, #4
 8006568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a13      	ldr	r2, [pc, #76]	; (80065bc <TIM_OC1_SetConfig+0xc8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d111      	bne.n	8006596 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40012c00 	.word	0x40012c00

080065c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f023 0210 	bic.w	r2, r3, #16
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <TIM_OC2_SetConfig+0xd0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10d      	bne.n	800663c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a14      	ldr	r2, [pc, #80]	; (8006690 <TIM_OC2_SetConfig+0xd0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr
 8006690:	40012c00 	.word	0x40012c00

08006694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <TIM_OC3_SetConfig+0xd0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10d      	bne.n	800670e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800670c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a14      	ldr	r2, [pc, #80]	; (8006764 <TIM_OC3_SetConfig+0xd0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d113      	bne.n	800673e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800671c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	621a      	str	r2, [r3, #32]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40012c00 	.word	0x40012c00

08006768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	031b      	lsls	r3, r3, #12
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0f      	ldr	r2, [pc, #60]	; (8006800 <TIM_OC4_SetConfig+0x98>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d109      	bne.n	80067dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	019b      	lsls	r3, r3, #6
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	40012c00 	.word	0x40012c00

08006804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f023 0201 	bic.w	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f023 030a 	bic.w	r3, r3, #10
 8006840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f023 0210 	bic.w	r2, r3, #16
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800688a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	031b      	lsls	r3, r3, #12
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800689c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	f043 0307 	orr.w	r3, r3, #7
 80068e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr

080068f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b087      	sub	sp, #28
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	021a      	lsls	r2, r3, #8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	431a      	orrs	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	4313      	orrs	r3, r2
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	609a      	str	r2, [r3, #8]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006944:	2302      	movs	r3, #2
 8006946:	e046      	b.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006994:	d009      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a10      	ldr	r2, [pc, #64]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10c      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800

080069ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e042      	b.n	8006aa8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fb fcc6 	bl	80023c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fcd5 	bl	8007404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	4613      	mov	r3, r2
 8006abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d112      	bne.n	8006af0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_UART_Receive_IT+0x26>
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e00b      	b.n	8006af2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fab7 	bl	800705a <UART_Start_Receive_IT>
 8006aec:	4603      	mov	r3, r0
 8006aee:	e000      	b.n	8006af2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006af0:	2302      	movs	r3, #2
  }
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b0ba      	sub	sp, #232	; 0xe8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10f      	bne.n	8006b62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <HAL_UART_IRQHandler+0x66>
 8006b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fb93 	bl	8007286 <UART_Receive_IT>
      return;
 8006b60:	e25b      	b.n	800701a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80de 	beq.w	8006d28 <HAL_UART_IRQHandler+0x22c>
 8006b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 80d1 	beq.w	8006d28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <HAL_UART_IRQHandler+0xae>
 8006b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	f043 0201 	orr.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00b      	beq.n	8006bce <HAL_UART_IRQHandler+0xd2>
 8006bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	f043 0202 	orr.w	r2, r3, #2
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_UART_IRQHandler+0xf6>
 8006bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	f043 0204 	orr.w	r2, r3, #4
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d011      	beq.n	8006c22 <HAL_UART_IRQHandler+0x126>
 8006bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	f043 0208 	orr.w	r2, r3, #8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 81f2 	beq.w	8007010 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <HAL_UART_IRQHandler+0x14e>
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fb1e 	bl	8007286 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bf14      	ite	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	2300      	moveq	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <HAL_UART_IRQHandler+0x17a>
 8006c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d04f      	beq.n	8006d16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa28 	bl	80070cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d041      	beq.n	8006d0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1d9      	bne.n	8006c8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d013      	beq.n	8006d06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	4a7e      	ldr	r2, [pc, #504]	; (8006edc <HAL_UART_IRQHandler+0x3e0>)
 8006ce4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fc fa64 	bl	80031b8 <HAL_DMA_Abort_IT>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d016      	beq.n	8006d24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	e00e      	b.n	8006d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f993 	bl	8007032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	e00a      	b.n	8006d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f98f 	bl	8007032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	e006      	b.n	8006d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f98b 	bl	8007032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006d22:	e175      	b.n	8007010 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	bf00      	nop
    return;
 8006d26:	e173      	b.n	8007010 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	f040 814f 	bne.w	8006fd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 8148 	beq.w	8006fd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8141 	beq.w	8006fd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60bb      	str	r3, [r7, #8]
 8006d62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80b6 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8145 	beq.w	8007014 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d92:	429a      	cmp	r2, r3
 8006d94:	f080 813e 	bcs.w	8007014 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	f000 8088 	beq.w	8006ebc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dd8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006de4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1d9      	bne.n	8006dac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3314      	adds	r3, #20
 8006e18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e1c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e1      	bne.n	8006df8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3314      	adds	r3, #20
 8006e54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e58:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e3      	bne.n	8006e34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8c:	f023 0310 	bic.w	r3, r3, #16
 8006e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ea0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ea4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e3      	bne.n	8006e7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fc f942 	bl	8003140 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f8b6 	bl	8007044 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ed8:	e09c      	b.n	8007014 <HAL_UART_IRQHandler+0x518>
 8006eda:	bf00      	nop
 8006edc:	08007191 	.word	0x08007191
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 808e 	beq.w	8007018 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8089 	beq.w	8007018 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	330c      	adds	r3, #12
 8006f26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f2a:	647a      	str	r2, [r7, #68]	; 0x44
 8006f2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e3      	bne.n	8006f06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3314      	adds	r3, #20
 8006f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f62:	633a      	str	r2, [r7, #48]	; 0x30
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e3      	bne.n	8006f3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0310 	bic.w	r3, r3, #16
 8006f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006fa8:	61fa      	str	r2, [r7, #28]
 8006faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e3      	bne.n	8006f84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f83b 	bl	8007044 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fce:	e023      	b.n	8007018 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x4f4>
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f8e5 	bl	80071b8 <UART_Transmit_IT>
    return;
 8006fee:	e014      	b.n	800701a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <HAL_UART_IRQHandler+0x51e>
 8006ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f924 	bl	8007256 <UART_EndTransmit_IT>
    return;
 800700e:	e004      	b.n	800701a <HAL_UART_IRQHandler+0x51e>
    return;
 8007010:	bf00      	nop
 8007012:	e002      	b.n	800701a <HAL_UART_IRQHandler+0x51e>
      return;
 8007014:	bf00      	nop
 8007016:	e000      	b.n	800701a <HAL_UART_IRQHandler+0x51e>
      return;
 8007018:	bf00      	nop
  }
}
 800701a:	37e8      	adds	r7, #232	; 0xe8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr

08007044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr

0800705a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	4613      	mov	r3, r2
 8007066:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2222      	movs	r2, #34	; 0x22
 8007084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d007      	beq.n	80070a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800709e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0220 	orr.w	r2, r2, #32
 80070be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b095      	sub	sp, #84	; 0x54
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330c      	adds	r3, #12
 80070da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070f4:	643a      	str	r2, [r7, #64]	; 0x40
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e5      	bne.n	80070d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3314      	adds	r3, #20
 800710e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	61fb      	str	r3, [r7, #28]
   return(result);
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3314      	adds	r3, #20
 8007126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800712e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e5      	bne.n	8007108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	2b01      	cmp	r3, #1
 8007142:	d119      	bne.n	8007178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	330c      	adds	r3, #12
 800714a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	60bb      	str	r3, [r7, #8]
   return(result);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f023 0310 	bic.w	r3, r3, #16
 800715a:	647b      	str	r3, [r7, #68]	; 0x44
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	330c      	adds	r3, #12
 8007162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007164:	61ba      	str	r2, [r7, #24]
 8007166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6979      	ldr	r1, [r7, #20]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	613b      	str	r3, [r7, #16]
   return(result);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e5      	bne.n	8007144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007186:	bf00      	nop
 8007188:	3754      	adds	r7, #84	; 0x54
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff ff41 	bl	8007032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b21      	cmp	r3, #33	; 0x21
 80071ca:	d13e      	bne.n	800724a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d4:	d114      	bne.n	8007200 <UART_Transmit_IT+0x48>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d110      	bne.n	8007200 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	621a      	str	r2, [r3, #32]
 80071fe:	e008      	b.n	8007212 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6211      	str	r1, [r2, #32]
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4619      	mov	r1, r3
 8007220:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10f      	bne.n	8007246 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	e000      	b.n	800724c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800724a:	2302      	movs	r3, #2
  }
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fed2 	bl	8007020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b08c      	sub	sp, #48	; 0x30
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b22      	cmp	r3, #34	; 0x22
 8007298:	f040 80ae 	bne.w	80073f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a4:	d117      	bne.n	80072d6 <UART_Receive_IT+0x50>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d113      	bne.n	80072d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	629a      	str	r2, [r3, #40]	; 0x28
 80072d4:	e026      	b.n	8007324 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e8:	d007      	beq.n	80072fa <UART_Receive_IT+0x74>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <UART_Receive_IT+0x82>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e008      	b.n	800731a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007314:	b2da      	uxtb	r2, r3
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29b      	uxth	r3, r3
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	4619      	mov	r1, r3
 8007332:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007334:	2b00      	cmp	r3, #0
 8007336:	d15d      	bne.n	80073f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0220 	bic.w	r2, r2, #32
 8007346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0201 	bic.w	r2, r2, #1
 8007366:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	2b01      	cmp	r3, #1
 800737c:	d135      	bne.n	80073ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	613b      	str	r3, [r7, #16]
   return(result);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f023 0310 	bic.w	r3, r3, #16
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a4:	623a      	str	r2, [r7, #32]
 80073a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	69f9      	ldr	r1, [r7, #28]
 80073aa:	6a3a      	ldr	r2, [r7, #32]
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e5      	bne.n	8007384 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b10      	cmp	r3, #16
 80073c4:	d10a      	bne.n	80073dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff fe2e 	bl	8007044 <HAL_UARTEx_RxEventCallback>
 80073e8:	e002      	b.n	80073f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7f9 fefa 	bl	80011e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	e002      	b.n	80073fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e000      	b.n	80073fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073f8:	2302      	movs	r3, #2
  }
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3730      	adds	r7, #48	; 0x30
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800743e:	f023 030c 	bic.w	r3, r3, #12
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	430b      	orrs	r3, r1
 800744a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2c      	ldr	r2, [pc, #176]	; (8007518 <UART_SetConfig+0x114>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d103      	bne.n	8007474 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800746c:	f7fe fb50 	bl	8005b10 <HAL_RCC_GetPCLK2Freq>
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	e002      	b.n	800747a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007474:	f7fe fb38 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8007478:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009a      	lsls	r2, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	4a22      	ldr	r2, [pc, #136]	; (800751c <UART_SetConfig+0x118>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	0119      	lsls	r1, r3, #4
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009a      	lsls	r2, r3, #2
 80074a4:	441a      	add	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80074b0:	4b1a      	ldr	r3, [pc, #104]	; (800751c <UART_SetConfig+0x118>)
 80074b2:	fba3 0302 	umull	r0, r3, r3, r2
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	2064      	movs	r0, #100	; 0x64
 80074ba:	fb00 f303 	mul.w	r3, r0, r3
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	3332      	adds	r3, #50	; 0x32
 80074c4:	4a15      	ldr	r2, [pc, #84]	; (800751c <UART_SetConfig+0x118>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074d0:	4419      	add	r1, r3
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009a      	lsls	r2, r3, #2
 80074dc:	441a      	add	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <UART_SetConfig+0x118>)
 80074ea:	fba3 0302 	umull	r0, r3, r3, r2
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	2064      	movs	r0, #100	; 0x64
 80074f2:	fb00 f303 	mul.w	r3, r0, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	3332      	adds	r3, #50	; 0x32
 80074fc:	4a07      	ldr	r2, [pc, #28]	; (800751c <UART_SetConfig+0x118>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	440a      	add	r2, r1
 800750e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	40013800 	.word	0x40013800
 800751c:	51eb851f 	.word	0x51eb851f

08007520 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007520:	b084      	sub	sp, #16
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	f107 0014 	add.w	r0, r7, #20
 800752e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	b004      	add	sp, #16
 800753e:	4770      	bx	lr

08007540 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007550:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007554:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr

0800756c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007574:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007578:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	b29b      	uxth	r3, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	b29b      	uxth	r3, r3
 800758a:	4013      	ands	r3, r2
 800758c:	b29a      	uxth	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr

080075a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80075b8:	b084      	sub	sp, #16
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	f107 0014 	add.w	r0, r7, #20
 80075c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	b004      	add	sp, #16
 80075f6:	4770      	bx	lr

080075f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b09d      	sub	sp, #116	; 0x74
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800761a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	78db      	ldrb	r3, [r3, #3]
 8007626:	2b03      	cmp	r3, #3
 8007628:	d81f      	bhi.n	800766a <USB_ActivateEndpoint+0x72>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <USB_ActivateEndpoint+0x38>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007641 	.word	0x08007641
 8007634:	0800765d 	.word	0x0800765d
 8007638:	08007673 	.word	0x08007673
 800763c:	0800764f 	.word	0x0800764f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007640:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007648:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800764c:	e012      	b.n	8007674 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800764e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007652:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007656:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800765a:	e00b      	b.n	8007674 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800765c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007664:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007668:	e004      	b.n	8007674 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007670:	e000      	b.n	8007674 <USB_ActivateEndpoint+0x7c>
      break;
 8007672:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	441a      	add	r2, r3
 800767e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007692:	b29b      	uxth	r3, r3
 8007694:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	441a      	add	r2, r3
 80076c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80076c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d8:	b29b      	uxth	r3, r3
 80076da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	7b1b      	ldrb	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f040 8178 	bne.w	80079d6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	785b      	ldrb	r3, [r3, #1]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8084 	beq.w	80077f8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	4413      	add	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	011a      	lsls	r2, r3, #4
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	88db      	ldrh	r3, [r3, #6]
 8007718:	085b      	lsrs	r3, r3, #1
 800771a:	b29b      	uxth	r3, r3
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	827b      	strh	r3, [r7, #18]
 8007732:	8a7b      	ldrh	r3, [r7, #18]
 8007734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01b      	beq.n	8007774 <USB_ActivateEndpoint+0x17c>
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	823b      	strh	r3, [r7, #16]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	441a      	add	r2, r3
 800775e:	8a3b      	ldrh	r3, [r7, #16]
 8007760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007770:	b29b      	uxth	r3, r3
 8007772:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	78db      	ldrb	r3, [r3, #3]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d020      	beq.n	80077be <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007792:	81bb      	strh	r3, [r7, #12]
 8007794:	89bb      	ldrh	r3, [r7, #12]
 8007796:	f083 0320 	eor.w	r3, r3, #32
 800779a:	81bb      	strh	r3, [r7, #12]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	89bb      	ldrh	r3, [r7, #12]
 80077a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	8013      	strh	r3, [r2, #0]
 80077bc:	e2d5      	b.n	8007d6a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d4:	81fb      	strh	r3, [r7, #14]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	441a      	add	r2, r3
 80077e0:	89fb      	ldrh	r3, [r7, #14]
 80077e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	8013      	strh	r3, [r2, #0]
 80077f6:	e2b8      	b.n	8007d6a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	633b      	str	r3, [r7, #48]	; 0x30
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007802:	b29b      	uxth	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	4413      	add	r3, r2
 800780a:	633b      	str	r3, [r7, #48]	; 0x30
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	011a      	lsls	r2, r3, #4
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	4413      	add	r3, r2
 8007816:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	88db      	ldrh	r3, [r3, #6]
 8007820:	085b      	lsrs	r3, r3, #1
 8007822:	b29b      	uxth	r3, r3
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	4413      	add	r3, r2
 800783e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	011a      	lsls	r2, r3, #4
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	4413      	add	r3, r2
 800784a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800785a:	b29a      	uxth	r2, r3
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	801a      	strh	r2, [r3, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b3e      	cmp	r3, #62	; 0x3e
 8007866:	d91d      	bls.n	80078a4 <USB_ActivateEndpoint+0x2ac>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <USB_ActivateEndpoint+0x28a>
 800787c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800787e:	3b01      	subs	r3, #1
 8007880:	66bb      	str	r3, [r7, #104]	; 0x68
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29a      	uxth	r2, r3
 8007888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800788a:	b29b      	uxth	r3, r3
 800788c:	029b      	lsls	r3, r3, #10
 800788e:	b29b      	uxth	r3, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	b29b      	uxth	r3, r3
 8007894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789c:	b29a      	uxth	r2, r3
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	e026      	b.n	80078f2 <USB_ActivateEndpoint+0x2fa>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <USB_ActivateEndpoint+0x2ca>
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e017      	b.n	80078f2 <USB_ActivateEndpoint+0x2fa>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <USB_ActivateEndpoint+0x2e4>
 80078d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078d8:	3301      	adds	r3, #1
 80078da:	66bb      	str	r3, [r7, #104]	; 0x68
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8007900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01b      	beq.n	8007942 <USB_ActivateEndpoint+0x34a>
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007920:	843b      	strh	r3, [r7, #32]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	441a      	add	r2, r3
 800792c:	8c3b      	ldrh	r3, [r7, #32]
 800792e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800793a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793e:	b29b      	uxth	r3, r3
 8007940:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d124      	bne.n	8007994 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007960:	83bb      	strh	r3, [r7, #28]
 8007962:	8bbb      	ldrh	r3, [r7, #28]
 8007964:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007968:	83bb      	strh	r3, [r7, #28]
 800796a:	8bbb      	ldrh	r3, [r7, #28]
 800796c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007970:	83bb      	strh	r3, [r7, #28]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	441a      	add	r2, r3
 800797c:	8bbb      	ldrh	r3, [r7, #28]
 800797e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	b29b      	uxth	r3, r3
 8007990:	8013      	strh	r3, [r2, #0]
 8007992:	e1ea      	b.n	8007d6a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	83fb      	strh	r3, [r7, #30]
 80079ac:	8bfb      	ldrh	r3, [r7, #30]
 80079ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079b2:	83fb      	strh	r3, [r7, #30]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	8bfb      	ldrh	r3, [r7, #30]
 80079c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	8013      	strh	r3, [r2, #0]
 80079d4:	e1c9      	b.n	8007d6a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	78db      	ldrb	r3, [r3, #3]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d11e      	bne.n	8007a1c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	441a      	add	r2, r3
 8007a02:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]
 8007a1a:	e01d      	b.n	8007a58 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a68:	4413      	add	r3, r2
 8007a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	011a      	lsls	r2, r3, #4
 8007a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	891b      	ldrh	r3, [r3, #8]
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a8a:	801a      	strh	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9c:	4413      	add	r3, r2
 8007a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	011a      	lsls	r2, r3, #4
 8007aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007aae:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	895b      	ldrh	r3, [r3, #10]
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007abe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f040 8093 	bne.w	8007bf0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ada:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01b      	beq.n	8007b1e <USB_ActivateEndpoint+0x526>
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	441a      	add	r2, r3
 8007b08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01b      	beq.n	8007b6e <USB_ActivateEndpoint+0x576>
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b84:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b8c:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b94:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bcc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	441a      	add	r2, r3
 8007bd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	8013      	strh	r3, [r2, #0]
 8007bee:	e0bc      	b.n	8007d6a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01d      	beq.n	8007c48 <USB_ActivateEndpoint+0x650>
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01d      	beq.n	8007ca0 <USB_ActivateEndpoint+0x6a8>
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	78db      	ldrb	r3, [r3, #3]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d024      	beq.n	8007cf2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007cc6:	f083 0320 	eor.w	r3, r3, #32
 8007cca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]
 8007cf0:	e01d      	b.n	8007d2e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	441a      	add	r2, r3
 8007d16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	441a      	add	r2, r3
 8007d52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007d6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3774      	adds	r7, #116	; 0x74
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr

08007d78 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b08d      	sub	sp, #52	; 0x34
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	7b1b      	ldrb	r3, [r3, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 808e 	bne.w	8007ea8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d044      	beq.n	8007e1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	81bb      	strh	r3, [r7, #12]
 8007da2:	89bb      	ldrh	r3, [r7, #12]
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01b      	beq.n	8007de4 <USB_DeactivateEndpoint+0x6c>
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc2:	817b      	strh	r3, [r7, #10]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	441a      	add	r2, r3
 8007dce:	897b      	ldrh	r3, [r7, #10]
 8007dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ddc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dfa:	813b      	strh	r3, [r7, #8]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	441a      	add	r2, r3
 8007e06:	893b      	ldrh	r3, [r7, #8]
 8007e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	8013      	strh	r3, [r2, #0]
 8007e1c:	e192      	b.n	8008144 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	827b      	strh	r3, [r7, #18]
 8007e2c:	8a7b      	ldrh	r3, [r7, #18]
 8007e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d01b      	beq.n	8007e6e <USB_DeactivateEndpoint+0xf6>
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4c:	823b      	strh	r3, [r7, #16]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	441a      	add	r2, r3
 8007e58:	8a3b      	ldrh	r3, [r7, #16]
 8007e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e84:	81fb      	strh	r3, [r7, #14]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	441a      	add	r2, r3
 8007e90:	89fb      	ldrh	r3, [r7, #14]
 8007e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	8013      	strh	r3, [r2, #0]
 8007ea6:	e14d      	b.n	8008144 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 80a5 	bne.w	8007ffc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	843b      	strh	r3, [r7, #32]
 8007ec0:	8c3b      	ldrh	r3, [r7, #32]
 8007ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01b      	beq.n	8007f02 <USB_DeactivateEndpoint+0x18a>
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee0:	83fb      	strh	r3, [r7, #30]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	441a      	add	r2, r3
 8007eec:	8bfb      	ldrh	r3, [r7, #30]
 8007eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	83bb      	strh	r3, [r7, #28]
 8007f10:	8bbb      	ldrh	r3, [r7, #28]
 8007f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01b      	beq.n	8007f52 <USB_DeactivateEndpoint+0x1da>
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f30:	837b      	strh	r3, [r7, #26]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	8b7b      	ldrh	r3, [r7, #26]
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f68:	833b      	strh	r3, [r7, #24]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	441a      	add	r2, r3
 8007f74:	8b3b      	ldrh	r3, [r7, #24]
 8007f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa0:	82fb      	strh	r3, [r7, #22]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	441a      	add	r2, r3
 8007fac:	8afb      	ldrh	r3, [r7, #22]
 8007fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd8:	82bb      	strh	r3, [r7, #20]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	441a      	add	r2, r3
 8007fe4:	8abb      	ldrh	r3, [r7, #20]
 8007fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	8013      	strh	r3, [r2, #0]
 8007ffa:	e0a3      	b.n	8008144 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800800a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800800c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01b      	beq.n	800804c <USB_DeactivateEndpoint+0x2d4>
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	441a      	add	r2, r3
 8008036:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800803c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008048:	b29b      	uxth	r3, r3
 800804a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	857b      	strh	r3, [r7, #42]	; 0x2a
 800805a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01b      	beq.n	800809c <USB_DeactivateEndpoint+0x324>
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	853b      	strh	r3, [r7, #40]	; 0x28
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	441a      	add	r2, r3
 8008086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008094:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	441a      	add	r2, r3
 80080be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008108:	b29b      	uxth	r3, r3
 800810a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800811e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008122:	847b      	strh	r3, [r7, #34]	; 0x22
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	441a      	add	r2, r3
 800812e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008140:	b29b      	uxth	r3, r3
 8008142:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3734      	adds	r7, #52	; 0x34
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr

08008150 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b0c2      	sub	sp, #264	; 0x108
 8008154:	af00      	add	r7, sp, #0
 8008156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800815e:	6018      	str	r0, [r3, #0]
 8008160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008168:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b01      	cmp	r3, #1
 8008178:	f040 86b7 	bne.w	8008eea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800817c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d908      	bls.n	80081aa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081a8:	e007      	b.n	80081ba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80081aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	7b1b      	ldrb	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d13a      	bne.n	8008240 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6959      	ldr	r1, [r3, #20]
 80081d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	88da      	ldrh	r2, [r3, #6]
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081f0:	6800      	ldr	r0, [r0, #0]
 80081f2:	f001 fc9c 	bl	8009b2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008210:	b29b      	uxth	r3, r3
 8008212:	461a      	mov	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	4413      	add	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
 800821a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	011a      	lsls	r2, r3, #4
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4413      	add	r3, r2
 800822c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	f000 be1f 	b.w	8008e7e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	78db      	ldrb	r3, [r3, #3]
 800824c:	2b02      	cmp	r3, #2
 800824e:	f040 8462 	bne.w	8008b16 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6a1a      	ldr	r2, [r3, #32]
 800825e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	429a      	cmp	r2, r3
 800826c:	f240 83df 	bls.w	8008a2e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800829a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	441a      	add	r2, r3
 80082b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80082c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6a1a      	ldr	r2, [r3, #32]
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082dc:	1ad2      	subs	r2, r2, r3
 80082de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 81c7 	beq.w	80086a0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	633b      	str	r3, [r7, #48]	; 0x30
 800831e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d177      	bne.n	800841e <USB_EPStartXfer+0x2ce>
 800832e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
 800833a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008348:	b29b      	uxth	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	4413      	add	r3, r2
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
 8008352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	011a      	lsls	r2, r3, #4
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	4413      	add	r3, r2
 8008364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008374:	b29a      	uxth	r2, r3
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837e:	2b3e      	cmp	r3, #62	; 0x3e
 8008380:	d921      	bls.n	80083c6 <USB_EPStartXfer+0x276>
 8008382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008390:	f003 031f 	and.w	r3, r3, #31
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <USB_EPStartXfer+0x252>
 8008398:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800839c:	3b01      	subs	r3, #1
 800839e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	029b      	lsls	r3, r3, #10
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083be:	b29a      	uxth	r2, r3
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	e050      	b.n	8008468 <USB_EPStartXfer+0x318>
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <USB_EPStartXfer+0x294>
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083dc:	b29a      	uxth	r2, r3
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	e041      	b.n	8008468 <USB_EPStartXfer+0x318>
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e8:	085b      	lsrs	r3, r3, #1
 80083ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d004      	beq.n	8008404 <USB_EPStartXfer+0x2b4>
 80083fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083fe:	3301      	adds	r3, #1
 8008400:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29a      	uxth	r2, r3
 800840a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800840e:	b29b      	uxth	r3, r3
 8008410:	029b      	lsls	r3, r3, #10
 8008412:	b29b      	uxth	r3, r3
 8008414:	4313      	orrs	r3, r2
 8008416:	b29a      	uxth	r2, r3
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	801a      	strh	r2, [r3, #0]
 800841c:	e024      	b.n	8008468 <USB_EPStartXfer+0x318>
 800841e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d11c      	bne.n	8008468 <USB_EPStartXfer+0x318>
 800842e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843c:	b29b      	uxth	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	4413      	add	r3, r2
 8008444:	633b      	str	r3, [r7, #48]	; 0x30
 8008446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	011a      	lsls	r2, r3, #4
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	4413      	add	r3, r2
 8008458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800845c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800845e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008462:	b29a      	uxth	r2, r3
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	895b      	ldrh	r3, [r3, #10]
 8008474:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6959      	ldr	r1, [r3, #20]
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008488:	b29b      	uxth	r3, r3
 800848a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800848e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008492:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008496:	6800      	ldr	r0, [r0, #0]
 8008498:	f001 fb49 	bl	8009b2e <USB_WritePMA>
            ep->xfer_buff += len;
 800849c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695a      	ldr	r2, [r3, #20]
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ac:	441a      	add	r2, r3
 80084ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6a1a      	ldr	r2, [r3, #32]
 80084c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d90f      	bls.n	80084f6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80084d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6a1a      	ldr	r2, [r3, #32]
 80084e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e6:	1ad2      	subs	r2, r2, r3
 80084e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	621a      	str	r2, [r3, #32]
 80084f4:	e00e      	b.n	8008514 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80084f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2200      	movs	r2, #0
 8008512:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d177      	bne.n	8008614 <USB_EPStartXfer+0x4c4>
 8008524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853e:	b29b      	uxth	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	4413      	add	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
 8008548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	011a      	lsls	r2, r3, #4
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	4413      	add	r3, r2
 800855a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800856a:	b29a      	uxth	r2, r3
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008574:	2b3e      	cmp	r3, #62	; 0x3e
 8008576:	d921      	bls.n	80085bc <USB_EPStartXfer+0x46c>
 8008578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857c:	095b      	lsrs	r3, r3, #5
 800857e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <USB_EPStartXfer+0x448>
 800858e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008592:	3b01      	subs	r3, #1
 8008594:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29a      	uxth	r2, r3
 800859e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	029b      	lsls	r3, r3, #10
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	801a      	strh	r2, [r3, #0]
 80085ba:	e056      	b.n	800866a <USB_EPStartXfer+0x51a>
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <USB_EPStartXfer+0x48a>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e047      	b.n	800866a <USB_EPStartXfer+0x51a>
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <USB_EPStartXfer+0x4aa>
 80085f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f4:	3301      	adds	r3, #1
 80085f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008604:	b29b      	uxth	r3, r3
 8008606:	029b      	lsls	r3, r3, #10
 8008608:	b29b      	uxth	r3, r3
 800860a:	4313      	orrs	r3, r2
 800860c:	b29a      	uxth	r2, r3
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	e02a      	b.n	800866a <USB_EPStartXfer+0x51a>
 8008614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d122      	bne.n	800866a <USB_EPStartXfer+0x51a>
 8008624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	623b      	str	r3, [r7, #32]
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	4413      	add	r3, r2
 8008646:	623b      	str	r3, [r7, #32]
 8008648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	011a      	lsls	r2, r3, #4
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	4413      	add	r3, r2
 800865a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008664:	b29a      	uxth	r2, r3
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800866a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	891b      	ldrh	r3, [r3, #8]
 8008676:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800867a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6959      	ldr	r1, [r3, #20]
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868a:	b29b      	uxth	r3, r3
 800868c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008690:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008694:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008698:	6800      	ldr	r0, [r0, #0]
 800869a:	f001 fa48 	bl	8009b2e <USB_WritePMA>
 800869e:	e3ee      	b.n	8008e7e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d177      	bne.n	80087a0 <USB_EPStartXfer+0x650>
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80086bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d0:	4413      	add	r3, r2
 80086d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	011a      	lsls	r2, r3, #4
 80086e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e4:	4413      	add	r3, r2
 80086e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086ea:	647b      	str	r3, [r7, #68]	; 0x44
 80086ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fa:	801a      	strh	r2, [r3, #0]
 80086fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008700:	2b3e      	cmp	r3, #62	; 0x3e
 8008702:	d921      	bls.n	8008748 <USB_EPStartXfer+0x5f8>
 8008704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008708:	095b      	lsrs	r3, r3, #5
 800870a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800870e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008712:	f003 031f 	and.w	r3, r3, #31
 8008716:	2b00      	cmp	r3, #0
 8008718:	d104      	bne.n	8008724 <USB_EPStartXfer+0x5d4>
 800871a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800871e:	3b01      	subs	r3, #1
 8008720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29a      	uxth	r2, r3
 800872a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800872e:	b29b      	uxth	r3, r3
 8008730:	029b      	lsls	r3, r3, #10
 8008732:	b29b      	uxth	r3, r3
 8008734:	4313      	orrs	r3, r2
 8008736:	b29b      	uxth	r3, r3
 8008738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008740:	b29a      	uxth	r2, r3
 8008742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008744:	801a      	strh	r2, [r3, #0]
 8008746:	e056      	b.n	80087f6 <USB_EPStartXfer+0x6a6>
 8008748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <USB_EPStartXfer+0x616>
 8008750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	b29b      	uxth	r3, r3
 8008756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800875a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800875e:	b29a      	uxth	r2, r3
 8008760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008762:	801a      	strh	r2, [r3, #0]
 8008764:	e047      	b.n	80087f6 <USB_EPStartXfer+0x6a6>
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <USB_EPStartXfer+0x636>
 800877c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008780:	3301      	adds	r3, #1
 8008782:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29a      	uxth	r2, r3
 800878c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008790:	b29b      	uxth	r3, r3
 8008792:	029b      	lsls	r3, r3, #10
 8008794:	b29b      	uxth	r3, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	e02a      	b.n	80087f6 <USB_EPStartXfer+0x6a6>
 80087a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d122      	bne.n	80087f6 <USB_EPStartXfer+0x6a6>
 80087b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	653b      	str	r3, [r7, #80]	; 0x50
 80087bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d0:	4413      	add	r3, r2
 80087d2:	653b      	str	r3, [r7, #80]	; 0x50
 80087d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	011a      	lsls	r2, r3, #4
 80087e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e4:	4413      	add	r3, r2
 80087e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	891b      	ldrh	r3, [r3, #8]
 8008802:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6959      	ldr	r1, [r3, #20]
 8008812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008816:	b29b      	uxth	r3, r3
 8008818:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800881c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008820:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008824:	6800      	ldr	r0, [r0, #0]
 8008826:	f001 f982 	bl	8009b2e <USB_WritePMA>
            ep->xfer_buff += len;
 800882a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883a:	441a      	add	r2, r3
 800883c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6a1a      	ldr	r2, [r3, #32]
 8008854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	429a      	cmp	r2, r3
 8008862:	d90f      	bls.n	8008884 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6a1a      	ldr	r2, [r3, #32]
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008874:	1ad2      	subs	r2, r2, r3
 8008876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	621a      	str	r2, [r3, #32]
 8008882:	e00e      	b.n	80088a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	643b      	str	r3, [r7, #64]	; 0x40
 80088ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d177      	bne.n	80089ae <USB_EPStartXfer+0x85e>
 80088be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d8:	b29b      	uxth	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	4413      	add	r3, r2
 80088e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80088e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	011a      	lsls	r2, r3, #4
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	4413      	add	r3, r2
 80088f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008904:	b29a      	uxth	r2, r3
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	801a      	strh	r2, [r3, #0]
 800890a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890e:	2b3e      	cmp	r3, #62	; 0x3e
 8008910:	d921      	bls.n	8008956 <USB_EPStartXfer+0x806>
 8008912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800891c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008920:	f003 031f 	and.w	r3, r3, #31
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <USB_EPStartXfer+0x7e2>
 8008928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892c:	3b01      	subs	r3, #1
 800892e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29a      	uxth	r2, r3
 8008938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893c:	b29b      	uxth	r3, r3
 800893e:	029b      	lsls	r3, r3, #10
 8008940:	b29b      	uxth	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b29b      	uxth	r3, r3
 8008946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800894e:	b29a      	uxth	r2, r3
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008952:	801a      	strh	r2, [r3, #0]
 8008954:	e050      	b.n	80089f8 <USB_EPStartXfer+0x8a8>
 8008956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <USB_EPStartXfer+0x824>
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896c:	b29a      	uxth	r2, r3
 800896e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e041      	b.n	80089f8 <USB_EPStartXfer+0x8a8>
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <USB_EPStartXfer+0x844>
 800898a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898e:	3301      	adds	r3, #1
 8008990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29a      	uxth	r2, r3
 800899a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899e:	b29b      	uxth	r3, r3
 80089a0:	029b      	lsls	r3, r3, #10
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089aa:	801a      	strh	r2, [r3, #0]
 80089ac:	e024      	b.n	80089f8 <USB_EPStartXfer+0x8a8>
 80089ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d11c      	bne.n	80089f8 <USB_EPStartXfer+0x8a8>
 80089be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	461a      	mov	r2, r3
 80089d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d2:	4413      	add	r3, r2
 80089d4:	643b      	str	r3, [r7, #64]	; 0x40
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	011a      	lsls	r2, r3, #4
 80089e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e6:	4413      	add	r3, r2
 80089e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	895b      	ldrh	r3, [r3, #10]
 8008a04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6959      	ldr	r1, [r3, #20]
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a26:	6800      	ldr	r0, [r0, #0]
 8008a28:	f001 f881 	bl	8009b2e <USB_WritePMA>
 8008a2c:	e227      	b.n	8008e7e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	441a      	add	r2, r3
 8008a82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aba:	4413      	add	r3, r2
 8008abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	011a      	lsls	r2, r3, #4
 8008acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ace:	4413      	add	r3, r2
 8008ad0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ad4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	891b      	ldrh	r3, [r3, #8]
 8008aec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6959      	ldr	r1, [r3, #20]
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	f001 f80d 	bl	8009b2e <USB_WritePMA>
 8008b14:	e1b3      	b.n	8008e7e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6a1a      	ldr	r2, [r3, #32]
 8008b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b26:	1ad2      	subs	r2, r2, r3
 8008b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 80c6 	beq.w	8008ce8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	673b      	str	r3, [r7, #112]	; 0x70
 8008b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d177      	bne.n	8008c68 <USB_EPStartXfer+0xb18>
 8008b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	461a      	mov	r2, r3
 8008b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b98:	4413      	add	r3, r2
 8008b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	011a      	lsls	r2, r3, #4
 8008baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bac:	4413      	add	r3, r2
 8008bae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8008bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bc2:	801a      	strh	r2, [r3, #0]
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8008bca:	d921      	bls.n	8008c10 <USB_EPStartXfer+0xac0>
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd0:	095b      	lsrs	r3, r3, #5
 8008bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bda:	f003 031f 	and.w	r3, r3, #31
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d104      	bne.n	8008bec <USB_EPStartXfer+0xa9c>
 8008be2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008be6:	3b01      	subs	r3, #1
 8008be8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	029b      	lsls	r3, r3, #10
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c0c:	801a      	strh	r2, [r3, #0]
 8008c0e:	e050      	b.n	8008cb2 <USB_EPStartXfer+0xb62>
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <USB_EPStartXfer+0xade>
 8008c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	e041      	b.n	8008cb2 <USB_EPStartXfer+0xb62>
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c32:	085b      	lsrs	r3, r3, #1
 8008c34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <USB_EPStartXfer+0xafe>
 8008c44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c48:	3301      	adds	r3, #1
 8008c4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	029b      	lsls	r3, r3, #10
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e024      	b.n	8008cb2 <USB_EPStartXfer+0xb62>
 8008c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d11c      	bne.n	8008cb2 <USB_EPStartXfer+0xb62>
 8008c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c8c:	4413      	add	r3, r2
 8008c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8008c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	011a      	lsls	r2, r3, #4
 8008c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	895b      	ldrh	r3, [r3, #10]
 8008cbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6959      	ldr	r1, [r3, #20]
 8008cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cd8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cdc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ce0:	6800      	ldr	r0, [r0, #0]
 8008ce2:	f000 ff24 	bl	8009b2e <USB_WritePMA>
 8008ce6:	e0ca      	b.n	8008e7e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d177      	bne.n	8008de8 <USB_EPStartXfer+0xc98>
 8008cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d18:	4413      	add	r3, r2
 8008d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	011a      	lsls	r2, r3, #4
 8008d2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d32:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d48:	2b3e      	cmp	r3, #62	; 0x3e
 8008d4a:	d921      	bls.n	8008d90 <USB_EPStartXfer+0xc40>
 8008d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <USB_EPStartXfer+0xc1c>
 8008d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d66:	3b01      	subs	r3, #1
 8008d68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	029b      	lsls	r3, r3, #10
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d8c:	801a      	strh	r2, [r3, #0]
 8008d8e:	e05c      	b.n	8008e4a <USB_EPStartXfer+0xcfa>
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <USB_EPStartXfer+0xc5e>
 8008d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	e04d      	b.n	8008e4a <USB_EPStartXfer+0xcfa>
 8008dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <USB_EPStartXfer+0xc7e>
 8008dc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dc8:	3301      	adds	r3, #1
 8008dca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	029b      	lsls	r3, r3, #10
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	4313      	orrs	r3, r2
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	e030      	b.n	8008e4a <USB_EPStartXfer+0xcfa>
 8008de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d128      	bne.n	8008e4a <USB_EPStartXfer+0xcfa>
 8008df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	011a      	lsls	r2, r3, #4
 8008e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e34:	4413      	add	r3, r2
 8008e36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	891b      	ldrh	r3, [r3, #8]
 8008e56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6959      	ldr	r1, [r3, #20]
 8008e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e78:	6800      	ldr	r0, [r0, #0]
 8008e7a:	f000 fe58 	bl	8009b2e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea4:	817b      	strh	r3, [r7, #10]
 8008ea6:	897b      	ldrh	r3, [r7, #10]
 8008ea8:	f083 0310 	eor.w	r3, r3, #16
 8008eac:	817b      	strh	r3, [r7, #10]
 8008eae:	897b      	ldrh	r3, [r7, #10]
 8008eb0:	f083 0320 	eor.w	r3, r3, #32
 8008eb4:	817b      	strh	r3, [r7, #10]
 8008eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	441a      	add	r2, r3
 8008ed0:	897b      	ldrh	r3, [r7, #10]
 8008ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8013      	strh	r3, [r2, #0]
 8008ee6:	f000 bcde 	b.w	80098a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	7b1b      	ldrb	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f040 80bb 	bne.w	8009072 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699a      	ldr	r2, [r3, #24]
 8008f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d917      	bls.n	8008f48 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	699a      	ldr	r2, [r3, #24]
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f38:	1ad2      	subs	r2, r2, r3
 8008f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	619a      	str	r2, [r3, #24]
 8008f46:	e00e      	b.n	8008f66 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2200      	movs	r2, #0
 8008f64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	461a      	mov	r2, r3
 8008f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	011a      	lsls	r2, r3, #4
 8008f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8008fc6:	d924      	bls.n	8009012 <USB_EPStartXfer+0xec2>
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d104      	bne.n	8008fe8 <USB_EPStartXfer+0xe98>
 8008fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	029b      	lsls	r3, r3, #10
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009006:	b29a      	uxth	r2, r3
 8009008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	f000 bc10 	b.w	8009832 <USB_EPStartXfer+0x16e2>
 8009012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10c      	bne.n	8009034 <USB_EPStartXfer+0xee4>
 800901a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800902a:	b29a      	uxth	r2, r3
 800902c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009030:	801a      	strh	r2, [r3, #0]
 8009032:	e3fe      	b.n	8009832 <USB_EPStartXfer+0x16e2>
 8009034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800903e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <USB_EPStartXfer+0xf04>
 800904a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800904e:	3301      	adds	r3, #1
 8009050:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	b29a      	uxth	r2, r3
 800905c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009060:	b29b      	uxth	r3, r3
 8009062:	029b      	lsls	r3, r3, #10
 8009064:	b29b      	uxth	r3, r3
 8009066:	4313      	orrs	r3, r2
 8009068:	b29a      	uxth	r2, r3
 800906a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800906e:	801a      	strh	r2, [r3, #0]
 8009070:	e3df      	b.n	8009832 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	78db      	ldrb	r3, [r3, #3]
 800907e:	2b02      	cmp	r3, #2
 8009080:	f040 8218 	bne.w	80094b4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f040 809d 	bne.w	80091d0 <USB_EPStartXfer+0x1080>
 8009096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090ba:	4413      	add	r3, r2
 80090bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	011a      	lsls	r2, r3, #4
 80090ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090d2:	4413      	add	r3, r2
 80090d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090ee:	801a      	strh	r2, [r3, #0]
 80090f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	2b3e      	cmp	r3, #62	; 0x3e
 80090fe:	d92b      	bls.n	8009158 <USB_EPStartXfer+0x1008>
 8009100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <USB_EPStartXfer+0xfe0>
 8009126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912a:	3b01      	subs	r3, #1
 800912c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29a      	uxth	r2, r3
 8009138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913c:	b29b      	uxth	r3, r3
 800913e:	029b      	lsls	r3, r3, #10
 8009140:	b29b      	uxth	r3, r3
 8009142:	4313      	orrs	r3, r2
 8009144:	b29b      	uxth	r3, r3
 8009146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800914e:	b29a      	uxth	r2, r3
 8009150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e070      	b.n	800923a <USB_EPStartXfer+0x10ea>
 8009158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10c      	bne.n	8009182 <USB_EPStartXfer+0x1032>
 8009168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	b29b      	uxth	r3, r3
 8009170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009178:	b29a      	uxth	r2, r3
 800917a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800917e:	801a      	strh	r2, [r3, #0]
 8009180:	e05b      	b.n	800923a <USB_EPStartXfer+0x10ea>
 8009182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	085b      	lsrs	r3, r3, #1
 8009190:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <USB_EPStartXfer+0x1062>
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ac:	3301      	adds	r3, #1
 80091ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091be:	b29b      	uxth	r3, r3
 80091c0:	029b      	lsls	r3, r3, #10
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091cc:	801a      	strh	r2, [r3, #0]
 80091ce:	e034      	b.n	800923a <USB_EPStartXfer+0x10ea>
 80091d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	785b      	ldrb	r3, [r3, #1]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d12c      	bne.n	800923a <USB_EPStartXfer+0x10ea>
 80091e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009204:	4413      	add	r3, r2
 8009206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800920a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	011a      	lsls	r2, r3, #4
 8009218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800921c:	4413      	add	r3, r2
 800921e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	b29a      	uxth	r2, r3
 8009234:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009238:	801a      	strh	r2, [r3, #0]
 800923a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f040 809d 	bne.w	8009394 <USB_EPStartXfer+0x1244>
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009276:	b29b      	uxth	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800927e:	4413      	add	r3, r2
 8009280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	011a      	lsls	r2, r3, #4
 8009292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009296:	4413      	add	r3, r2
 8009298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800929c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	2b3e      	cmp	r3, #62	; 0x3e
 80092c2:	d92b      	bls.n	800931c <USB_EPStartXfer+0x11cc>
 80092c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	095b      	lsrs	r3, r3, #5
 80092d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 031f 	and.w	r3, r3, #31
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <USB_EPStartXfer+0x11a4>
 80092ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ee:	3b01      	subs	r3, #1
 80092f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	b29b      	uxth	r3, r3
 8009302:	029b      	lsls	r3, r3, #10
 8009304:	b29b      	uxth	r3, r3
 8009306:	4313      	orrs	r3, r2
 8009308:	b29b      	uxth	r3, r3
 800930a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800930e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009312:	b29a      	uxth	r2, r3
 8009314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	e069      	b.n	80093f0 <USB_EPStartXfer+0x12a0>
 800931c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10c      	bne.n	8009346 <USB_EPStartXfer+0x11f6>
 800932c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	b29b      	uxth	r3, r3
 8009334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800933c:	b29a      	uxth	r2, r3
 800933e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	e054      	b.n	80093f0 <USB_EPStartXfer+0x12a0>
 8009346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	085b      	lsrs	r3, r3, #1
 8009354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <USB_EPStartXfer+0x1226>
 800936c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009370:	3301      	adds	r3, #1
 8009372:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009376:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	b29a      	uxth	r2, r3
 800937e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009382:	b29b      	uxth	r3, r3
 8009384:	029b      	lsls	r3, r3, #10
 8009386:	b29b      	uxth	r3, r3
 8009388:	4313      	orrs	r3, r2
 800938a:	b29a      	uxth	r2, r3
 800938c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009390:	801a      	strh	r2, [r3, #0]
 8009392:	e02d      	b.n	80093f0 <USB_EPStartXfer+0x12a0>
 8009394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	785b      	ldrb	r3, [r3, #1]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d125      	bne.n	80093f0 <USB_EPStartXfer+0x12a0>
 80093a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093ba:	4413      	add	r3, r2
 80093bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80093c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	011a      	lsls	r2, r3, #4
 80093ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093d2:	4413      	add	r3, r2
 80093d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093ee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80093f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8218 	beq.w	8009832 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009422:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <USB_EPStartXfer+0x12ea>
 800942e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10d      	bne.n	8009456 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800943a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800943e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009442:	2b00      	cmp	r3, #0
 8009444:	f040 81f5 	bne.w	8009832 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009448:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800944c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009450:	2b00      	cmp	r3, #0
 8009452:	f040 81ee 	bne.w	8009832 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	b29b      	uxth	r3, r3
 8009474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	441a      	add	r2, r3
 800949a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800949e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	8013      	strh	r3, [r2, #0]
 80094b2:	e1be      	b.n	8009832 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80094b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	78db      	ldrb	r3, [r3, #3]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	f040 81b4 	bne.w	800982e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d917      	bls.n	8009512 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80094e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80094f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699a      	ldr	r2, [r3, #24]
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009502:	1ad2      	subs	r2, r2, r3
 8009504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	619a      	str	r2, [r3, #24]
 8009510:	e00e      	b.n	8009530 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2200      	movs	r2, #0
 800952e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	785b      	ldrb	r3, [r3, #1]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f040 8085 	bne.w	800964c <USB_EPStartXfer+0x14fc>
 8009542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800955e:	b29b      	uxth	r3, r3
 8009560:	461a      	mov	r2, r3
 8009562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009566:	4413      	add	r3, r2
 8009568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800956c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	011a      	lsls	r2, r3, #4
 800957a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800957e:	4413      	add	r3, r2
 8009580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009594:	b29a      	uxth	r2, r3
 8009596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800959a:	801a      	strh	r2, [r3, #0]
 800959c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a0:	2b3e      	cmp	r3, #62	; 0x3e
 80095a2:	d923      	bls.n	80095ec <USB_EPStartXfer+0x149c>
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a8:	095b      	lsrs	r3, r3, #5
 80095aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d104      	bne.n	80095c4 <USB_EPStartXfer+0x1474>
 80095ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095be:	3b01      	subs	r3, #1
 80095c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	029b      	lsls	r3, r3, #10
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b29b      	uxth	r3, r3
 80095da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	e060      	b.n	80096ae <USB_EPStartXfer+0x155e>
 80095ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10c      	bne.n	800960e <USB_EPStartXfer+0x14be>
 80095f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009604:	b29a      	uxth	r2, r3
 8009606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800960a:	801a      	strh	r2, [r3, #0]
 800960c:	e04f      	b.n	80096ae <USB_EPStartXfer+0x155e>
 800960e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009612:	085b      	lsrs	r3, r3, #1
 8009614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <USB_EPStartXfer+0x14de>
 8009624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009628:	3301      	adds	r3, #1
 800962a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800962e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29a      	uxth	r2, r3
 8009636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800963a:	b29b      	uxth	r3, r3
 800963c:	029b      	lsls	r3, r3, #10
 800963e:	b29b      	uxth	r3, r3
 8009640:	4313      	orrs	r3, r2
 8009642:	b29a      	uxth	r2, r3
 8009644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	e030      	b.n	80096ae <USB_EPStartXfer+0x155e>
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d128      	bne.n	80096ae <USB_EPStartXfer+0x155e>
 800965c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800966a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800966e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009678:	b29b      	uxth	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009680:	4413      	add	r3, r2
 8009682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	011a      	lsls	r2, r3, #4
 8009694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009698:	4413      	add	r3, r2
 800969a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800969e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80096ac:	801a      	strh	r2, [r3, #0]
 80096ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	785b      	ldrb	r3, [r3, #1]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f040 8085 	bne.w	80097d8 <USB_EPStartXfer+0x1688>
 80096ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	461a      	mov	r2, r3
 80096ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096f2:	4413      	add	r3, r2
 80096f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	011a      	lsls	r2, r3, #4
 8009706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800970a:	4413      	add	r3, r2
 800970c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009720:	b29a      	uxth	r2, r3
 8009722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972c:	2b3e      	cmp	r3, #62	; 0x3e
 800972e:	d923      	bls.n	8009778 <USB_EPStartXfer+0x1628>
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009734:	095b      	lsrs	r3, r3, #5
 8009736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800973a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800973e:	f003 031f 	and.w	r3, r3, #31
 8009742:	2b00      	cmp	r3, #0
 8009744:	d104      	bne.n	8009750 <USB_EPStartXfer+0x1600>
 8009746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800974a:	3b01      	subs	r3, #1
 800974c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	b29a      	uxth	r2, r3
 8009758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800975c:	b29b      	uxth	r3, r3
 800975e:	029b      	lsls	r3, r3, #10
 8009760:	b29b      	uxth	r3, r3
 8009762:	4313      	orrs	r3, r2
 8009764:	b29b      	uxth	r3, r3
 8009766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800976a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800976e:	b29a      	uxth	r2, r3
 8009770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	e05c      	b.n	8009832 <USB_EPStartXfer+0x16e2>
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10c      	bne.n	800979a <USB_EPStartXfer+0x164a>
 8009780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800978c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009790:	b29a      	uxth	r2, r3
 8009792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	e04b      	b.n	8009832 <USB_EPStartXfer+0x16e2>
 800979a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d004      	beq.n	80097ba <USB_EPStartXfer+0x166a>
 80097b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097b4:	3301      	adds	r3, #1
 80097b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	029b      	lsls	r3, r3, #10
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4313      	orrs	r3, r2
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097d4:	801a      	strh	r2, [r3, #0]
 80097d6:	e02c      	b.n	8009832 <USB_EPStartXfer+0x16e2>
 80097d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d124      	bne.n	8009832 <USB_EPStartXfer+0x16e2>
 80097e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	461a      	mov	r2, r3
 80097fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097fe:	4413      	add	r3, r2
 8009800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	011a      	lsls	r2, r3, #4
 8009812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009816:	4413      	add	r3, r2
 8009818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800981c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009824:	b29a      	uxth	r2, r3
 8009826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	e001      	b.n	8009832 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e03a      	b.n	80098a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29b      	uxth	r3, r3
 8009850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009858:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800985c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009860:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009864:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009868:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800986c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009870:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	441a      	add	r2, r3
 800988e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800989e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d020      	beq.n	8009906 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098da:	81bb      	strh	r3, [r7, #12]
 80098dc:	89bb      	ldrh	r3, [r7, #12]
 80098de:	f083 0310 	eor.w	r3, r3, #16
 80098e2:	81bb      	strh	r3, [r7, #12]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	441a      	add	r2, r3
 80098ee:	89bb      	ldrh	r3, [r7, #12]
 80098f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009900:	b29b      	uxth	r3, r3
 8009902:	8013      	strh	r3, [r2, #0]
 8009904:	e01f      	b.n	8009946 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991c:	81fb      	strh	r3, [r7, #14]
 800991e:	89fb      	ldrh	r3, [r7, #14]
 8009920:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009924:	81fb      	strh	r3, [r7, #14]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	89fb      	ldrh	r3, [r7, #14]
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800993e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	bc80      	pop	{r7}
 8009950:	4770      	bx	lr

08009952 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009952:	b480      	push	{r7}
 8009954:	b087      	sub	sp, #28
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	7b1b      	ldrb	r3, [r3, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 809d 	bne.w	8009aa0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	785b      	ldrb	r3, [r3, #1]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04c      	beq.n	8009a08 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	823b      	strh	r3, [r7, #16]
 800997c:	8a3b      	ldrh	r3, [r7, #16]
 800997e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01b      	beq.n	80099be <USB_EPClearStall+0x6c>
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999c:	81fb      	strh	r3, [r7, #14]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	441a      	add	r2, r3
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	78db      	ldrb	r3, [r3, #3]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d06c      	beq.n	8009aa0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099dc:	81bb      	strh	r3, [r7, #12]
 80099de:	89bb      	ldrh	r3, [r7, #12]
 80099e0:	f083 0320 	eor.w	r3, r3, #32
 80099e4:	81bb      	strh	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	441a      	add	r2, r3
 80099f0:	89bb      	ldrh	r3, [r7, #12]
 80099f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	8013      	strh	r3, [r2, #0]
 8009a06:	e04b      	b.n	8009aa0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	82fb      	strh	r3, [r7, #22]
 8009a16:	8afb      	ldrh	r3, [r7, #22]
 8009a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01b      	beq.n	8009a58 <USB_EPClearStall+0x106>
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a36:	82bb      	strh	r3, [r7, #20]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	8abb      	ldrh	r3, [r7, #20]
 8009a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6e:	827b      	strh	r3, [r7, #18]
 8009a70:	8a7b      	ldrh	r3, [r7, #18]
 8009a72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a76:	827b      	strh	r3, [r7, #18]
 8009a78:	8a7b      	ldrh	r3, [r7, #18]
 8009a7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a7e:	827b      	strh	r3, [r7, #18]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	441a      	add	r2, r3
 8009a8a:	8a7b      	ldrh	r3, [r7, #18]
 8009a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d103      	bne.n	8009ac6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2280      	movs	r2, #128	; 0x80
 8009ac2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bc80      	pop	{r7}
 8009ad0:	4770      	bx	lr

08009ad2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr

08009ae6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bc80      	pop	{r7}
 8009af8:	4770      	bx	lr

08009afa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bc80      	pop	{r7}
 8009b2c:	4770      	bx	lr

08009b2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b08b      	sub	sp, #44	; 0x2c
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	80fb      	strh	r3, [r7, #6]
 8009b40:	4613      	mov	r3, r2
 8009b42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b44:	88bb      	ldrh	r3, [r7, #4]
 8009b46:	3301      	adds	r3, #1
 8009b48:	085b      	lsrs	r3, r3, #1
 8009b4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b54:	88fb      	ldrh	r3, [r7, #6]
 8009b56:	005a      	lsls	r2, r3, #1
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
 8009b66:	e01e      	b.n	8009ba6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	3301      	adds	r3, #1
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	b21a      	sxth	r2, r3
 8009b78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	b21b      	sxth	r3, r3
 8009b80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	8a7a      	ldrh	r2, [r7, #18]
 8009b86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	3302      	adds	r3, #2
 8009b92:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	3301      	adds	r3, #1
 8009b98:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1dd      	bne.n	8009b68 <USB_WritePMA+0x3a>
  }
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	372c      	adds	r7, #44	; 0x2c
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr

08009bb8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b08b      	sub	sp, #44	; 0x2c
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	80fb      	strh	r3, [r7, #6]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009bce:	88bb      	ldrh	r3, [r7, #4]
 8009bd0:	085b      	lsrs	r3, r3, #1
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	005a      	lsls	r2, r3, #1
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf0:	e01b      	b.n	8009c2a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	0a1b      	lsrs	r3, r3, #8
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	3302      	adds	r3, #2
 8009c22:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	3b01      	subs	r3, #1
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e0      	bne.n	8009bf2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009c30:	88bb      	ldrh	r3, [r7, #4]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d007      	beq.n	8009c4c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	701a      	strb	r2, [r3, #0]
  }
}
 8009c4c:	bf00      	nop
 8009c4e:	372c      	adds	r7, #44	; 0x2c
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bc80      	pop	{r7}
 8009c54:	4770      	bx	lr

08009c56 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	7c1b      	ldrb	r3, [r3, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d115      	bne.n	8009c9a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c72:	2202      	movs	r2, #2
 8009c74:	2181      	movs	r1, #129	; 0x81
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 fefd 	bl	800ba76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c86:	2202      	movs	r2, #2
 8009c88:	2101      	movs	r1, #1
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 fef3 	bl	800ba76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009c98:	e012      	b.n	8009cc0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	2181      	movs	r1, #129	; 0x81
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fee8 	bl	800ba76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009cac:	2340      	movs	r3, #64	; 0x40
 8009cae:	2202      	movs	r2, #2
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fedf 	bl	800ba76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	2182      	movs	r1, #130	; 0x82
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 fed5 	bl	800ba76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cd2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cd6:	f001 fff5 	bl	800bcc4 <USBD_static_malloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]
 8009cf0:	e026      	b.n	8009d40 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7c1b      	ldrb	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d26:	2101      	movs	r1, #1
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 ff95 	bl	800bc58 <USBD_LL_PrepareReceive>
 8009d2e:	e007      	b.n	8009d40 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d36:	2340      	movs	r3, #64	; 0x40
 8009d38:	2101      	movs	r1, #1
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 ff8c 	bl	800bc58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	460b      	mov	r3, r1
 8009d54:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009d5a:	2181      	movs	r1, #129	; 0x81
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 feb0 	bl	800bac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d68:	2101      	movs	r1, #1
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fea9 	bl	800bac2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d78:	2182      	movs	r1, #130	; 0x82
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 fea1 	bl	800bac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00e      	beq.n	8009dae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 ff9b 	bl	800bcdc <USBD_static_free>
    pdev->pClassData = NULL;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d039      	beq.n	8009e56 <USBD_CDC_Setup+0x9e>
 8009de2:	2b20      	cmp	r3, #32
 8009de4:	d17f      	bne.n	8009ee6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	88db      	ldrh	r3, [r3, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d029      	beq.n	8009e42 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	b25b      	sxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	da11      	bge.n	8009e1c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009e04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	88d2      	ldrh	r2, [r2, #6]
 8009e0a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e0c:	6939      	ldr	r1, [r7, #16]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	88db      	ldrh	r3, [r3, #6]
 8009e12:	461a      	mov	r2, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fa0a 	bl	800b22e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009e1a:	e06b      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	785a      	ldrb	r2, [r3, #1]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	88db      	ldrh	r3, [r3, #6]
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e32:	6939      	ldr	r1, [r7, #16]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	88db      	ldrh	r3, [r3, #6]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fa25 	bl	800b28a <USBD_CtlPrepareRx>
      break;
 8009e40:	e058      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	7850      	ldrb	r0, [r2, #1]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	4798      	blx	r3
      break;
 8009e54:	e04e      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	2b0b      	cmp	r3, #11
 8009e5c:	d02e      	beq.n	8009ebc <USBD_CDC_Setup+0x104>
 8009e5e:	2b0b      	cmp	r3, #11
 8009e60:	dc38      	bgt.n	8009ed4 <USBD_CDC_Setup+0x11c>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <USBD_CDC_Setup+0xb4>
 8009e66:	2b0a      	cmp	r3, #10
 8009e68:	d014      	beq.n	8009e94 <USBD_CDC_Setup+0xdc>
 8009e6a:	e033      	b.n	8009ed4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d107      	bne.n	8009e86 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009e76:	f107 030c 	add.w	r3, r7, #12
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f001 f9d5 	bl	800b22e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e84:	e02e      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 f966 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	75fb      	strb	r3, [r7, #23]
          break;
 8009e92:	e027      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d107      	bne.n	8009eae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e9e:	f107 030f 	add.w	r3, r7, #15
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 f9c1 	bl	800b22e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eac:	e01a      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f952 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eba:	e013      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d00d      	beq.n	8009ee2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f946 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ed2:	e006      	b.n	8009ee2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f93f 	bl	800b15a <USBD_CtlError>
          ret = USBD_FAIL;
 8009edc:	2302      	movs	r3, #2
 8009ede:	75fb      	strb	r3, [r7, #23]
          break;
 8009ee0:	e000      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>
          break;
 8009ee2:	bf00      	nop
      }
      break;
 8009ee4:	e006      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f936 	bl	800b15a <USBD_CtlError>
      ret = USBD_FAIL;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef2:	bf00      	nop
  }

  return ret;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f10:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f18:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d03a      	beq.n	8009f9a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f24:	78fa      	ldrb	r2, [r7, #3]
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	440b      	add	r3, r1
 8009f32:	331c      	adds	r3, #28
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d029      	beq.n	8009f8e <USBD_CDC_DataIn+0x90>
 8009f3a:	78fa      	ldrb	r2, [r7, #3]
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	440b      	add	r3, r1
 8009f48:	331c      	adds	r3, #28
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	78f9      	ldrb	r1, [r7, #3]
 8009f4e:	68b8      	ldr	r0, [r7, #8]
 8009f50:	460b      	mov	r3, r1
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	00db      	lsls	r3, r3, #3
 8009f58:	4403      	add	r3, r0
 8009f5a:	3338      	adds	r3, #56	; 0x38
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f62:	fb01 f303 	mul.w	r3, r1, r3
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d110      	bne.n	8009f8e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	440b      	add	r3, r1
 8009f7a:	331c      	adds	r3, #28
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f80:	78f9      	ldrb	r1, [r7, #3]
 8009f82:	2300      	movs	r3, #0
 8009f84:	2200      	movs	r2, #0
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 fe43 	bl	800bc12 <USBD_LL_Transmit>
 8009f8c:	e003      	b.n	8009f96 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009f9a:	2302      	movs	r3, #2
  }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fe6e 	bl	800bc9e <USBD_LL_GetRxDataSize>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00d      	beq.n	8009ff0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4798      	blx	r3

    return USBD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	e000      	b.n	8009ff2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ff0:	2302      	movs	r3, #2
  }
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a008:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a010:	2b00      	cmp	r3, #0
 800a012:	d015      	beq.n	800a040 <USBD_CDC_EP0_RxReady+0x46>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a01a:	2bff      	cmp	r3, #255	; 0xff
 800a01c:	d010      	beq.n	800a040 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a02c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a034:	b292      	uxth	r2, r2
 800a036:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	22ff      	movs	r2, #255	; 0xff
 800a03c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2243      	movs	r2, #67	; 0x43
 800a058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a05a:	4b03      	ldr	r3, [pc, #12]	; (800a068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	200000b0 	.word	0x200000b0

0800a06c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2243      	movs	r2, #67	; 0x43
 800a078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a07a:	4b03      	ldr	r3, [pc, #12]	; (800a088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	bc80      	pop	{r7}
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	2000006c 	.word	0x2000006c

0800a08c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2243      	movs	r2, #67	; 0x43
 800a098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a09a:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	200000f4 	.word	0x200000f4

0800a0ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	220a      	movs	r2, #10
 800a0b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a0ba:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000028 	.word	0x20000028

0800a0cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bc80      	pop	{r7}
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	371c      	adds	r7, #28
 800a124:	46bd      	mov	sp, r7
 800a126:	bc80      	pop	{r7}
 800a128:	4770      	bx	lr

0800a12a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr

0800a150 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d01c      	beq.n	800a1a4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a170:	2b00      	cmp	r3, #0
 800a172:	d115      	bne.n	800a1a0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a192:	b29b      	uxth	r3, r3
 800a194:	2181      	movs	r1, #129	; 0x81
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f001 fd3b 	bl	800bc12 <USBD_LL_Transmit>

      return USBD_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	e002      	b.n	800a1a6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e000      	b.n	800a1a6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a1a4:	2302      	movs	r3, #2
  }
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d017      	beq.n	800a1f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7c1b      	ldrb	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1da:	2101      	movs	r1, #1
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fd3b 	bl	800bc58 <USBD_LL_PrepareReceive>
 800a1e2:	e007      	b.n	800a1f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f001 fd32 	bl	800bc58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e000      	b.n	800a1fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a1f8:	2302      	movs	r3, #2
  }
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	4613      	mov	r3, r2
 800a20e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a216:	2302      	movs	r3, #2
 800a218:	e01a      	b.n	800a250 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	79fa      	ldrb	r2, [r7, #7]
 800a246:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f001 fb9f 	bl	800b98c <USBD_LL_Init>

  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
 800a278:	e001      	b.n	800a27e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a27a:	2302      	movs	r3, #2
 800a27c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr

0800a28a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 fbd4 	bl	800ba40 <USBD_LL_Start>

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr

0800a2b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00c      	beq.n	800a2ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	4798      	blx	r3
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	4611      	mov	r1, r2
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	4798      	blx	r3

  return USBD_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 fed8 	bl	800b0e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a340:	461a      	mov	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	2b02      	cmp	r3, #2
 800a354:	d016      	beq.n	800a384 <USBD_LL_SetupStage+0x6a>
 800a356:	2b02      	cmp	r3, #2
 800a358:	d81c      	bhi.n	800a394 <USBD_LL_SetupStage+0x7a>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <USBD_LL_SetupStage+0x4a>
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d008      	beq.n	800a374 <USBD_LL_SetupStage+0x5a>
 800a362:	e017      	b.n	800a394 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f9cb 	bl	800a708 <USBD_StdDevReq>
      break;
 800a372:	e01a      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa2d 	bl	800a7dc <USBD_StdItfReq>
      break;
 800a382:	e012      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa6d 	bl	800a86c <USBD_StdEPReq>
      break;
 800a392:	e00a      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a39a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 fbac 	bl	800bb00 <USBD_LL_StallEP>
      break;
 800a3a8:	bf00      	nop
  }

  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d14b      	bne.n	800a460 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d134      	bne.n	800a444 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d919      	bls.n	800a41a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d203      	bcs.n	800a408 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a404:	b29b      	uxth	r3, r3
 800a406:	e002      	b.n	800a40e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 ff57 	bl	800b2c6 <USBD_CtlContinueRx>
 800a418:	e038      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d105      	bne.n	800a43c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 ff54 	bl	800b2ea <USBD_CtlSendStatus>
 800a442:	e023      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d11e      	bne.n	800a48c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a456:	2100      	movs	r1, #0
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f001 fb51 	bl	800bb00 <USBD_LL_StallEP>
 800a45e:	e015      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00d      	beq.n	800a488 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a472:	2b03      	cmp	r3, #3
 800a474:	d108      	bne.n	800a488 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	7afa      	ldrb	r2, [r7, #11]
 800a480:	4611      	mov	r1, r2
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	4798      	blx	r3
 800a486:	e001      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a488:	2302      	movs	r3, #2
 800a48a:	e000      	b.n	800a48e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	607a      	str	r2, [r7, #4]
 800a4a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a4a4:	7afb      	ldrb	r3, [r7, #11]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d17f      	bne.n	800a5aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3314      	adds	r3, #20
 800a4ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d15c      	bne.n	800a574 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	68da      	ldr	r2, [r3, #12]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d915      	bls.n	800a4f2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fec1 	bl	800b266 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f001 fbb4 	bl	800bc58 <USBD_LL_PrepareReceive>
 800a4f0:	e04e      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	6912      	ldr	r2, [r2, #16]
 800a4fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4fe:	fb01 f202 	mul.w	r2, r1, r2
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11c      	bne.n	800a542 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a510:	429a      	cmp	r2, r3
 800a512:	d316      	bcc.n	800a542 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a51e:	429a      	cmp	r2, r3
 800a520:	d20f      	bcs.n	800a542 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a522:	2200      	movs	r2, #0
 800a524:	2100      	movs	r1, #0
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fe9d 	bl	800b266 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a534:	2300      	movs	r3, #0
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f001 fb8c 	bl	800bc58 <USBD_LL_PrepareReceive>
 800a540:	e026      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a554:	2b03      	cmp	r3, #3
 800a556:	d105      	bne.n	800a564 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a564:	2180      	movs	r1, #128	; 0x80
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f001 faca 	bl	800bb00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 fecf 	bl	800b310 <USBD_CtlReceiveStatus>
 800a572:	e00d      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d004      	beq.n	800a588 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a584:	2b00      	cmp	r3, #0
 800a586:	d103      	bne.n	800a590 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a588:	2180      	movs	r1, #128	; 0x80
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f001 fab8 	bl	800bb00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a596:	2b01      	cmp	r3, #1
 800a598:	d11d      	bne.n	800a5d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fe81 	bl	800a2a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5a8:	e015      	b.n	800a5d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d108      	bne.n	800a5d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	7afa      	ldrb	r2, [r7, #11]
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	4798      	blx	r3
 800a5d0:	e001      	b.n	800a5d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e000      	b.n	800a5d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 fa41 	bl	800ba76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2240      	movs	r2, #64	; 0x40
 800a600:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a604:	2340      	movs	r3, #64	; 0x40
 800a606:	2200      	movs	r2, #0
 800a608:	2180      	movs	r1, #128	; 0x80
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fa33 	bl	800ba76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2240      	movs	r2, #64	; 0x40
 800a61a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a640:	2b00      	cmp	r3, #0
 800a642:	d009      	beq.n	800a658 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	6852      	ldr	r2, [r2, #4]
 800a650:	b2d2      	uxtb	r2, r2
 800a652:	4611      	mov	r1, r2
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	4798      	blx	r3
  }

  return USBD_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	78fa      	ldrb	r2, [r7, #3]
 800a672:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr

0800a680 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2204      	movs	r2, #4
 800a698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bc80      	pop	{r7}
 800a6a6:	4770      	bx	lr

0800a6a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d105      	bne.n	800a6c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bc80      	pop	{r7}
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d10b      	bne.n	800a6fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a71e:	2b40      	cmp	r3, #64	; 0x40
 800a720:	d005      	beq.n	800a72e <USBD_StdDevReq+0x26>
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d84f      	bhi.n	800a7c6 <USBD_StdDevReq+0xbe>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d009      	beq.n	800a73e <USBD_StdDevReq+0x36>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d14b      	bne.n	800a7c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
      break;
 800a73c:	e048      	b.n	800a7d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	785b      	ldrb	r3, [r3, #1]
 800a742:	2b09      	cmp	r3, #9
 800a744:	d839      	bhi.n	800a7ba <USBD_StdDevReq+0xb2>
 800a746:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <USBD_StdDevReq+0x44>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a79d 	.word	0x0800a79d
 800a750:	0800a7b1 	.word	0x0800a7b1
 800a754:	0800a7bb 	.word	0x0800a7bb
 800a758:	0800a7a7 	.word	0x0800a7a7
 800a75c:	0800a7bb 	.word	0x0800a7bb
 800a760:	0800a77f 	.word	0x0800a77f
 800a764:	0800a775 	.word	0x0800a775
 800a768:	0800a7bb 	.word	0x0800a7bb
 800a76c:	0800a793 	.word	0x0800a793
 800a770:	0800a789 	.word	0x0800a789
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f9dc 	bl	800ab34 <USBD_GetDescriptor>
          break;
 800a77c:	e022      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fb3f 	bl	800ae04 <USBD_SetAddress>
          break;
 800a786:	e01d      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fb7e 	bl	800ae8c <USBD_SetConfig>
          break;
 800a790:	e018      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fc07 	bl	800afa8 <USBD_GetConfig>
          break;
 800a79a:	e013      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fc37 	bl	800b012 <USBD_GetStatus>
          break;
 800a7a4:	e00e      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fc65 	bl	800b078 <USBD_SetFeature>
          break;
 800a7ae:	e009      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fc74 	bl	800b0a0 <USBD_ClrFeature>
          break;
 800a7b8:	e004      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fccc 	bl	800b15a <USBD_CtlError>
          break;
 800a7c2:	bf00      	nop
      }
      break;
 800a7c4:	e004      	b.n	800a7d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fcc6 	bl	800b15a <USBD_CtlError>
      break;
 800a7ce:	bf00      	nop
  }

  return ret;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop

0800a7dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d005      	beq.n	800a802 <USBD_StdItfReq+0x26>
 800a7f6:	2b40      	cmp	r3, #64	; 0x40
 800a7f8:	d82e      	bhi.n	800a858 <USBD_StdItfReq+0x7c>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <USBD_StdItfReq+0x26>
 800a7fe:	2b20      	cmp	r3, #32
 800a800:	d12a      	bne.n	800a858 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a808:	3b01      	subs	r3, #1
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d81d      	bhi.n	800a84a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	889b      	ldrh	r3, [r3, #4]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b01      	cmp	r3, #1
 800a816:	d813      	bhi.n	800a840 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
 800a826:	4603      	mov	r3, r0
 800a828:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	88db      	ldrh	r3, [r3, #6]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d110      	bne.n	800a854 <USBD_StdItfReq+0x78>
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10d      	bne.n	800a854 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fd56 	bl	800b2ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a83e:	e009      	b.n	800a854 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc89 	bl	800b15a <USBD_CtlError>
          break;
 800a848:	e004      	b.n	800a854 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc84 	bl	800b15a <USBD_CtlError>
          break;
 800a852:	e000      	b.n	800a856 <USBD_StdItfReq+0x7a>
          break;
 800a854:	bf00      	nop
      }
      break;
 800a856:	e004      	b.n	800a862 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc7d 	bl	800b15a <USBD_CtlError>
      break;
 800a860:	bf00      	nop
  }

  return USBD_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	889b      	ldrh	r3, [r3, #4]
 800a87e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a888:	2b40      	cmp	r3, #64	; 0x40
 800a88a:	d007      	beq.n	800a89c <USBD_StdEPReq+0x30>
 800a88c:	2b40      	cmp	r3, #64	; 0x40
 800a88e:	f200 8146 	bhi.w	800ab1e <USBD_StdEPReq+0x2b2>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <USBD_StdEPReq+0x40>
 800a896:	2b20      	cmp	r3, #32
 800a898:	f040 8141 	bne.w	800ab1e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
      break;
 800a8aa:	e13d      	b.n	800ab28 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d10a      	bne.n	800a8ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	e12d      	b.n	800ab2a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d007      	beq.n	800a8e6 <USBD_StdEPReq+0x7a>
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	f300 811b 	bgt.w	800ab12 <USBD_StdEPReq+0x2a6>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d072      	beq.n	800a9c6 <USBD_StdEPReq+0x15a>
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d03a      	beq.n	800a95a <USBD_StdEPReq+0xee>
 800a8e4:	e115      	b.n	800ab12 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d002      	beq.n	800a8f6 <USBD_StdEPReq+0x8a>
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d015      	beq.n	800a920 <USBD_StdEPReq+0xb4>
 800a8f4:	e02b      	b.n	800a94e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00c      	beq.n	800a916 <USBD_StdEPReq+0xaa>
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b80      	cmp	r3, #128	; 0x80
 800a900:	d009      	beq.n	800a916 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 f8fa 	bl	800bb00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a90c:	2180      	movs	r1, #128	; 0x80
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 f8f6 	bl	800bb00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a914:	e020      	b.n	800a958 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fc1e 	bl	800b15a <USBD_CtlError>
              break;
 800a91e:	e01b      	b.n	800a958 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	885b      	ldrh	r3, [r3, #2]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10e      	bne.n	800a946 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00b      	beq.n	800a946 <USBD_StdEPReq+0xda>
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b80      	cmp	r3, #128	; 0x80
 800a932:	d008      	beq.n	800a946 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	88db      	ldrh	r3, [r3, #6]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d104      	bne.n	800a946 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 f8dd 	bl	800bb00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fccf 	bl	800b2ea <USBD_CtlSendStatus>

              break;
 800a94c:	e004      	b.n	800a958 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc02 	bl	800b15a <USBD_CtlError>
              break;
 800a956:	bf00      	nop
          }
          break;
 800a958:	e0e0      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	2b02      	cmp	r3, #2
 800a962:	d002      	beq.n	800a96a <USBD_StdEPReq+0xfe>
 800a964:	2b03      	cmp	r3, #3
 800a966:	d015      	beq.n	800a994 <USBD_StdEPReq+0x128>
 800a968:	e026      	b.n	800a9b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00c      	beq.n	800a98a <USBD_StdEPReq+0x11e>
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d009      	beq.n	800a98a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 f8c0 	bl	800bb00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 f8bc 	bl	800bb00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a988:	e01c      	b.n	800a9c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fbe4 	bl	800b15a <USBD_CtlError>
              break;
 800a992:	e017      	b.n	800a9c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	885b      	ldrh	r3, [r3, #2]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d112      	bne.n	800a9c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 f8c7 	bl	800bb3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fc9a 	bl	800b2ea <USBD_CtlSendStatus>
              }
              break;
 800a9b6:	e004      	b.n	800a9c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fbcd 	bl	800b15a <USBD_CtlError>
              break;
 800a9c0:	e000      	b.n	800a9c4 <USBD_StdEPReq+0x158>
              break;
 800a9c2:	bf00      	nop
          }
          break;
 800a9c4:	e0aa      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d002      	beq.n	800a9d6 <USBD_StdEPReq+0x16a>
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d032      	beq.n	800aa3a <USBD_StdEPReq+0x1ce>
 800a9d4:	e097      	b.n	800ab06 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d007      	beq.n	800a9ec <USBD_StdEPReq+0x180>
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	2b80      	cmp	r3, #128	; 0x80
 800a9e0:	d004      	beq.n	800a9ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fbb8 	bl	800b15a <USBD_CtlError>
                break;
 800a9ea:	e091      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	da0b      	bge.n	800aa0c <USBD_StdEPReq+0x1a0>
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	3310      	adds	r3, #16
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	4413      	add	r3, r2
 800aa08:	3304      	adds	r3, #4
 800aa0a:	e00b      	b.n	800aa24 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	3304      	adds	r3, #4
 800aa24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fbfb 	bl	800b22e <USBD_CtlSendData>
              break;
 800aa38:	e06a      	b.n	800ab10 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	da11      	bge.n	800aa66 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	f003 020f 	and.w	r2, r3, #15
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	440b      	add	r3, r1
 800aa54:	3318      	adds	r3, #24
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d117      	bne.n	800aa8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fb7b 	bl	800b15a <USBD_CtlError>
                  break;
 800aa64:	e054      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fb68 	bl	800b15a <USBD_CtlError>
                  break;
 800aa8a:	e041      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	da0b      	bge.n	800aaac <USBD_StdEPReq+0x240>
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	3310      	adds	r3, #16
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	e00b      	b.n	800aac4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	4413      	add	r3, r2
 800aac2:	3304      	adds	r3, #4
 800aac4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <USBD_StdEPReq+0x266>
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	2b80      	cmp	r3, #128	; 0x80
 800aad0:	d103      	bne.n	800aada <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	e00e      	b.n	800aaf8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 f84c 	bl	800bb7c <USBD_LL_IsStallEP>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2201      	movs	r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e002      	b.n	800aaf8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2202      	movs	r2, #2
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fb95 	bl	800b22e <USBD_CtlSendData>
              break;
 800ab04:	e004      	b.n	800ab10 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fb26 	bl	800b15a <USBD_CtlError>
              break;
 800ab0e:	bf00      	nop
          }
          break;
 800ab10:	e004      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fb20 	bl	800b15a <USBD_CtlError>
          break;
 800ab1a:	bf00      	nop
      }
      break;
 800ab1c:	e004      	b.n	800ab28 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fb1a 	bl	800b15a <USBD_CtlError>
      break;
 800ab26:	bf00      	nop
  }

  return ret;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	885b      	ldrh	r3, [r3, #2]
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	3b01      	subs	r3, #1
 800ab54:	2b06      	cmp	r3, #6
 800ab56:	f200 8128 	bhi.w	800adaa <USBD_GetDescriptor+0x276>
 800ab5a:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <USBD_GetDescriptor+0x2c>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ab7d 	.word	0x0800ab7d
 800ab64:	0800ab95 	.word	0x0800ab95
 800ab68:	0800abd5 	.word	0x0800abd5
 800ab6c:	0800adab 	.word	0x0800adab
 800ab70:	0800adab 	.word	0x0800adab
 800ab74:	0800ad4b 	.word	0x0800ad4b
 800ab78:	0800ad77 	.word	0x0800ad77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
      break;
 800ab92:	e112      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7c1b      	ldrb	r3, [r3, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	4610      	mov	r0, r2
 800abaa:	4798      	blx	r3
 800abac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	2202      	movs	r2, #2
 800abb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abb6:	e100      	b.n	800adba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f107 0208 	add.w	r2, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	2202      	movs	r2, #2
 800abd0:	701a      	strb	r2, [r3, #0]
      break;
 800abd2:	e0f2      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	885b      	ldrh	r3, [r3, #2]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b05      	cmp	r3, #5
 800abdc:	f200 80ac 	bhi.w	800ad38 <USBD_GetDescriptor+0x204>
 800abe0:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBD_GetDescriptor+0xb4>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800ac01 	.word	0x0800ac01
 800abec:	0800ac35 	.word	0x0800ac35
 800abf0:	0800ac69 	.word	0x0800ac69
 800abf4:	0800ac9d 	.word	0x0800ac9d
 800abf8:	0800acd1 	.word	0x0800acd1
 800abfc:	0800ad05 	.word	0x0800ad05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00b      	beq.n	800ac24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	7c12      	ldrb	r2, [r2, #16]
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
 800ac20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac22:	e091      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fa97 	bl	800b15a <USBD_CtlError>
            err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
          break;
 800ac32:	e089      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7c12      	ldrb	r2, [r2, #16]
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac56:	e077      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa7d 	bl	800b15a <USBD_CtlError>
            err++;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	3301      	adds	r3, #1
 800ac64:	72fb      	strb	r3, [r7, #11]
          break;
 800ac66:	e06f      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8a:	e05d      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa63 	bl	800b15a <USBD_CtlError>
            err++;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	3301      	adds	r3, #1
 800ac98:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9a:	e055      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acbe:	e043      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa49 	bl	800b15a <USBD_CtlError>
            err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
          break;
 800acce:	e03b      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf2:	e029      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa2f 	bl	800b15a <USBD_CtlError>
            err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
          break;
 800ad02:	e021      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7c12      	ldrb	r2, [r2, #16]
 800ad1c:	f107 0108 	add.w	r1, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad26:	e00f      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa15 	bl	800b15a <USBD_CtlError>
            err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
          break;
 800ad36:	e007      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa0d 	bl	800b15a <USBD_CtlError>
          err++;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	3301      	adds	r3, #1
 800ad44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ad46:	e038      	b.n	800adba <USBD_GetDescriptor+0x286>
 800ad48:	e037      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	7c1b      	ldrb	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5a:	f107 0208 	add.w	r2, r7, #8
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4798      	blx	r3
 800ad62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad64:	e029      	b.n	800adba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f9f6 	bl	800b15a <USBD_CtlError>
        err++;
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	3301      	adds	r3, #1
 800ad72:	72fb      	strb	r3, [r7, #11]
      break;
 800ad74:	e021      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	7c1b      	ldrb	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10d      	bne.n	800ad9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f107 0208 	add.w	r2, r7, #8
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4798      	blx	r3
 800ad8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	2207      	movs	r2, #7
 800ad96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad98:	e00f      	b.n	800adba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f9dc 	bl	800b15a <USBD_CtlError>
        err++;
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	3301      	adds	r3, #1
 800ada6:	72fb      	strb	r3, [r7, #11]
      break;
 800ada8:	e007      	b.n	800adba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f9d4 	bl	800b15a <USBD_CtlError>
      err++;
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	3301      	adds	r3, #1
 800adb6:	72fb      	strb	r3, [r7, #11]
      break;
 800adb8:	bf00      	nop
  }

  if (err != 0U)
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11c      	bne.n	800adfa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800adc0:	893b      	ldrh	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d011      	beq.n	800adea <USBD_GetDescriptor+0x2b6>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	88db      	ldrh	r3, [r3, #6]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00d      	beq.n	800adea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88da      	ldrh	r2, [r3, #6]
 800add2:	893b      	ldrh	r3, [r7, #8]
 800add4:	4293      	cmp	r3, r2
 800add6:	bf28      	it	cs
 800add8:	4613      	movcs	r3, r2
 800adda:	b29b      	uxth	r3, r3
 800addc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adde:	893b      	ldrh	r3, [r7, #8]
 800ade0:	461a      	mov	r2, r3
 800ade2:	68f9      	ldr	r1, [r7, #12]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa22 	bl	800b22e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa79 	bl	800b2ea <USBD_CtlSendStatus>
 800adf8:	e000      	b.n	800adfc <USBD_GetDescriptor+0x2c8>
    return;
 800adfa:	bf00      	nop
    }
  }
}
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop

0800ae04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	889b      	ldrh	r3, [r3, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d130      	bne.n	800ae78 <USBD_SetAddress+0x74>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	88db      	ldrh	r3, [r3, #6]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d12c      	bne.n	800ae78 <USBD_SetAddress+0x74>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	2b7f      	cmp	r3, #127	; 0x7f
 800ae24:	d828      	bhi.n	800ae78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	885b      	ldrh	r3, [r3, #2]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d104      	bne.n	800ae46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f98b 	bl	800b15a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae44:	e01d      	b.n	800ae82 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	7bfa      	ldrb	r2, [r7, #15]
 800ae4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 febe 	bl	800bbd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fa46 	bl	800b2ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae6c:	e009      	b.n	800ae82 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae76:	e004      	b.n	800ae82 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f96d 	bl	800b15a <USBD_CtlError>
  }
}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	885b      	ldrh	r3, [r3, #2]
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	4b41      	ldr	r3, [pc, #260]	; (800afa4 <USBD_SetConfig+0x118>)
 800ae9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aea0:	4b40      	ldr	r3, [pc, #256]	; (800afa4 <USBD_SetConfig+0x118>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d904      	bls.n	800aeb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f955 	bl	800b15a <USBD_CtlError>
 800aeb0:	e075      	b.n	800af9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d002      	beq.n	800aec2 <USBD_SetConfig+0x36>
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d023      	beq.n	800af08 <USBD_SetConfig+0x7c>
 800aec0:	e062      	b.n	800af88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aec2:	4b38      	ldr	r3, [pc, #224]	; (800afa4 <USBD_SetConfig+0x118>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01a      	beq.n	800af00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aeca:	4b36      	ldr	r3, [pc, #216]	; (800afa4 <USBD_SetConfig+0x118>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2203      	movs	r2, #3
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aedc:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <USBD_SetConfig+0x118>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff f9e7 	bl	800a2b6 <USBD_SetClassConfig>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d104      	bne.n	800aef8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f932 	bl	800b15a <USBD_CtlError>
            return;
 800aef6:	e052      	b.n	800af9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f9f6 	bl	800b2ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aefe:	e04e      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f9f2 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af06:	e04a      	b.n	800af9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800af08:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <USBD_SetConfig+0x118>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d112      	bne.n	800af36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800af18:	4b22      	ldr	r3, [pc, #136]	; (800afa4 <USBD_SetConfig+0x118>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800af22:	4b20      	ldr	r3, [pc, #128]	; (800afa4 <USBD_SetConfig+0x118>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff f9e3 	bl	800a2f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f9db 	bl	800b2ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af34:	e033      	b.n	800af9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800af36:	4b1b      	ldr	r3, [pc, #108]	; (800afa4 <USBD_SetConfig+0x118>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	429a      	cmp	r2, r3
 800af42:	d01d      	beq.n	800af80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff f9d1 	bl	800a2f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800af52:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <USBD_SetConfig+0x118>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <USBD_SetConfig+0x118>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff f9a7 	bl	800a2b6 <USBD_SetClassConfig>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d104      	bne.n	800af78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f8f2 	bl	800b15a <USBD_CtlError>
            return;
 800af76:	e012      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f9b6 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af7e:	e00e      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f9b2 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af86:	e00a      	b.n	800af9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f8e5 	bl	800b15a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800af90:	4b04      	ldr	r3, [pc, #16]	; (800afa4 <USBD_SetConfig+0x118>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f9ac 	bl	800a2f4 <USBD_ClrClassConfig>
        break;
 800af9c:	bf00      	nop
    }
  }
}
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	20000fd8 	.word	0x20000fd8

0800afa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	88db      	ldrh	r3, [r3, #6]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d004      	beq.n	800afc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f8cc 	bl	800b15a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afc2:	e022      	b.n	800b00a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afca:	2b02      	cmp	r3, #2
 800afcc:	dc02      	bgt.n	800afd4 <USBD_GetConfig+0x2c>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	dc03      	bgt.n	800afda <USBD_GetConfig+0x32>
 800afd2:	e015      	b.n	800b000 <USBD_GetConfig+0x58>
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d00b      	beq.n	800aff0 <USBD_GetConfig+0x48>
 800afd8:	e012      	b.n	800b000 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3308      	adds	r3, #8
 800afe4:	2201      	movs	r2, #1
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f920 	bl	800b22e <USBD_CtlSendData>
        break;
 800afee:	e00c      	b.n	800b00a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	2201      	movs	r2, #1
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f918 	bl	800b22e <USBD_CtlSendData>
        break;
 800affe:	e004      	b.n	800b00a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f8a9 	bl	800b15a <USBD_CtlError>
        break;
 800b008:	bf00      	nop
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	3b01      	subs	r3, #1
 800b024:	2b02      	cmp	r3, #2
 800b026:	d81e      	bhi.n	800b066 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	88db      	ldrh	r3, [r3, #6]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d004      	beq.n	800b03a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f891 	bl	800b15a <USBD_CtlError>
        break;
 800b038:	e01a      	b.n	800b070 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b046:	2b00      	cmp	r3, #0
 800b048:	d005      	beq.n	800b056 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	f043 0202 	orr.w	r2, r3, #2
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	330c      	adds	r3, #12
 800b05a:	2202      	movs	r2, #2
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f8e5 	bl	800b22e <USBD_CtlSendData>
      break;
 800b064:	e004      	b.n	800b070 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f876 	bl	800b15a <USBD_CtlError>
      break;
 800b06e:	bf00      	nop
  }
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	885b      	ldrh	r3, [r3, #2]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d106      	bne.n	800b098 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f929 	bl	800b2ea <USBD_CtlSendStatus>
  }
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d80b      	bhi.n	800b0ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d10c      	bne.n	800b0d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f90f 	bl	800b2ea <USBD_CtlSendStatus>
      }
      break;
 800b0cc:	e004      	b.n	800b0d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f842 	bl	800b15a <USBD_CtlError>
      break;
 800b0d6:	e000      	b.n	800b0da <USBD_ClrFeature+0x3a>
      break;
 800b0d8:	bf00      	nop
  }
}
 800b0da:	bf00      	nop
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	785a      	ldrb	r2, [r3, #1]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	3302      	adds	r3, #2
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	b29a      	uxth	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3303      	adds	r3, #3
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	021b      	lsls	r3, r3, #8
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4413      	add	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	3304      	adds	r3, #4
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b29a      	uxth	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3305      	adds	r3, #5
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b29b      	uxth	r3, r3
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	4413      	add	r3, r2
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	3306      	adds	r3, #6
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	3307      	adds	r3, #7
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	021b      	lsls	r3, r3, #8
 800b146:	b29b      	uxth	r3, r3
 800b148:	4413      	add	r3, r2
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	80da      	strh	r2, [r3, #6]

}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr

0800b15a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b164:	2180      	movs	r1, #128	; 0x80
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fcca 	bl	800bb00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b16c:	2100      	movs	r1, #0
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fcc6 	bl	800bb00 <USBD_LL_StallEP>
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d032      	beq.n	800b1f8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 f834 	bl	800b200 <USBD_GetLen>
 800b198:	4603      	mov	r3, r0
 800b19a:	3301      	adds	r3, #1
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	75fa      	strb	r2, [r7, #23]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	7812      	ldrb	r2, [r2, #0]
 800b1b6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b1b8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	75fa      	strb	r2, [r7, #23]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b1c8:	e012      	b.n	800b1f0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	60fa      	str	r2, [r7, #12]
 800b1d0:	7dfa      	ldrb	r2, [r7, #23]
 800b1d2:	1c51      	adds	r1, r2, #1
 800b1d4:	75f9      	strb	r1, [r7, #23]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	440a      	add	r2, r1
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	75fa      	strb	r2, [r7, #23]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e8      	bne.n	800b1ca <USBD_GetString+0x4e>
    }
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b20c:	e005      	b.n	800b21a <USBD_GetLen+0x1a>
  {
    len++;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	3301      	adds	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3301      	adds	r3, #1
 800b218:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1f5      	bne.n	800b20e <USBD_GetLen+0xe>
  }

  return len;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	bc80      	pop	{r7}
 800b22c:	4770      	bx	lr

0800b22e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	4613      	mov	r3, r2
 800b23a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2202      	movs	r2, #2
 800b240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b24a:	88fa      	ldrh	r2, [r7, #6]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	2100      	movs	r1, #0
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fcdb 	bl	800bc12 <USBD_LL_Transmit>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	4613      	mov	r3, r2
 800b272:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	2100      	movs	r1, #0
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 fcc9 	bl	800bc12 <USBD_LL_Transmit>

  return USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	4613      	mov	r3, r2
 800b296:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2203      	movs	r2, #3
 800b29c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2a0:	88fa      	ldrh	r2, [r7, #6]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 fcce 	bl	800bc58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2d4:	88fb      	ldrh	r3, [r7, #6]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f000 fcbc 	bl	800bc58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2204      	movs	r2, #4
 800b2f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2100      	movs	r1, #0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fc86 	bl	800bc12 <USBD_LL_Transmit>

  return USBD_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2205      	movs	r2, #5
 800b31c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b320:	2300      	movs	r3, #0
 800b322:	2200      	movs	r2, #0
 800b324:	2100      	movs	r1, #0
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fc96 	bl	800bc58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b33c:	2200      	movs	r2, #0
 800b33e:	4912      	ldr	r1, [pc, #72]	; (800b388 <MX_USB_DEVICE_Init+0x50>)
 800b340:	4812      	ldr	r0, [pc, #72]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b342:	f7fe ff5e 	bl	800a202 <USBD_Init>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b34c:	f7f6 fefa 	bl	8002144 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b350:	490f      	ldr	r1, [pc, #60]	; (800b390 <MX_USB_DEVICE_Init+0x58>)
 800b352:	480e      	ldr	r0, [pc, #56]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b354:	f7fe ff80 	bl	800a258 <USBD_RegisterClass>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b35e:	f7f6 fef1 	bl	8002144 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b362:	490c      	ldr	r1, [pc, #48]	; (800b394 <MX_USB_DEVICE_Init+0x5c>)
 800b364:	4809      	ldr	r0, [pc, #36]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b366:	f7fe feb1 	bl	800a0cc <USBD_CDC_RegisterInterface>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b370:	f7f6 fee8 	bl	8002144 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b374:	4805      	ldr	r0, [pc, #20]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b376:	f7fe ff88 	bl	800a28a <USBD_Start>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b380:	f7f6 fee0 	bl	8002144 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b384:	bf00      	nop
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20000148 	.word	0x20000148
 800b38c:	20000fdc 	.word	0x20000fdc
 800b390:	20000034 	.word	0x20000034
 800b394:	20000138 	.word	0x20000138

0800b398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b39c:	2200      	movs	r2, #0
 800b39e:	4905      	ldr	r1, [pc, #20]	; (800b3b4 <CDC_Init_FS+0x1c>)
 800b3a0:	4805      	ldr	r0, [pc, #20]	; (800b3b8 <CDC_Init_FS+0x20>)
 800b3a2:	f7fe fea9 	bl	800a0f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3a6:	4905      	ldr	r1, [pc, #20]	; (800b3bc <CDC_Init_FS+0x24>)
 800b3a8:	4803      	ldr	r0, [pc, #12]	; (800b3b8 <CDC_Init_FS+0x20>)
 800b3aa:	f7fe febe 	bl	800a12a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b3ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	200013a0 	.word	0x200013a0
 800b3b8:	20000fdc 	.word	0x20000fdc
 800b3bc:	200012a0 	.word	0x200012a0

0800b3c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bc80      	pop	{r7}
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3e0:	79fb      	ldrb	r3, [r7, #7]
 800b3e2:	2b23      	cmp	r3, #35	; 0x23
 800b3e4:	f200 808c 	bhi.w	800b500 <CDC_Control_FS+0x130>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <CDC_Control_FS+0x20>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b501 	.word	0x0800b501
 800b3f4:	0800b501 	.word	0x0800b501
 800b3f8:	0800b501 	.word	0x0800b501
 800b3fc:	0800b501 	.word	0x0800b501
 800b400:	0800b501 	.word	0x0800b501
 800b404:	0800b501 	.word	0x0800b501
 800b408:	0800b501 	.word	0x0800b501
 800b40c:	0800b501 	.word	0x0800b501
 800b410:	0800b501 	.word	0x0800b501
 800b414:	0800b501 	.word	0x0800b501
 800b418:	0800b501 	.word	0x0800b501
 800b41c:	0800b501 	.word	0x0800b501
 800b420:	0800b501 	.word	0x0800b501
 800b424:	0800b501 	.word	0x0800b501
 800b428:	0800b501 	.word	0x0800b501
 800b42c:	0800b501 	.word	0x0800b501
 800b430:	0800b501 	.word	0x0800b501
 800b434:	0800b501 	.word	0x0800b501
 800b438:	0800b501 	.word	0x0800b501
 800b43c:	0800b501 	.word	0x0800b501
 800b440:	0800b501 	.word	0x0800b501
 800b444:	0800b501 	.word	0x0800b501
 800b448:	0800b501 	.word	0x0800b501
 800b44c:	0800b501 	.word	0x0800b501
 800b450:	0800b501 	.word	0x0800b501
 800b454:	0800b501 	.word	0x0800b501
 800b458:	0800b501 	.word	0x0800b501
 800b45c:	0800b501 	.word	0x0800b501
 800b460:	0800b501 	.word	0x0800b501
 800b464:	0800b501 	.word	0x0800b501
 800b468:	0800b501 	.word	0x0800b501
 800b46c:	0800b501 	.word	0x0800b501
 800b470:	0800b481 	.word	0x0800b481
 800b474:	0800b4bb 	.word	0x0800b4bb
 800b478:	0800b501 	.word	0x0800b501
 800b47c:	0800b501 	.word	0x0800b501
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	myLineCodeBuf[0] = pbuf[0];
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	4b22      	ldr	r3, [pc, #136]	; (800b510 <CDC_Control_FS+0x140>)
 800b486:	701a      	strb	r2, [r3, #0]
    	myLineCodeBuf[1] = pbuf[1];
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	785a      	ldrb	r2, [r3, #1]
 800b48c:	4b20      	ldr	r3, [pc, #128]	; (800b510 <CDC_Control_FS+0x140>)
 800b48e:	705a      	strb	r2, [r3, #1]
    	myLineCodeBuf[2] = pbuf[2];
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	789a      	ldrb	r2, [r3, #2]
 800b494:	4b1e      	ldr	r3, [pc, #120]	; (800b510 <CDC_Control_FS+0x140>)
 800b496:	709a      	strb	r2, [r3, #2]
    	myLineCodeBuf[3] = pbuf[3];
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	78da      	ldrb	r2, [r3, #3]
 800b49c:	4b1c      	ldr	r3, [pc, #112]	; (800b510 <CDC_Control_FS+0x140>)
 800b49e:	70da      	strb	r2, [r3, #3]
    	myLineCodeBuf[4] = pbuf[4];
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	791a      	ldrb	r2, [r3, #4]
 800b4a4:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <CDC_Control_FS+0x140>)
 800b4a6:	711a      	strb	r2, [r3, #4]
    	myLineCodeBuf[5] = pbuf[5];
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	795a      	ldrb	r2, [r3, #5]
 800b4ac:	4b18      	ldr	r3, [pc, #96]	; (800b510 <CDC_Control_FS+0x140>)
 800b4ae:	715a      	strb	r2, [r3, #5]
    	myLineCodeBuf[6] = pbuf[6];
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	799a      	ldrb	r2, [r3, #6]
 800b4b4:	4b16      	ldr	r3, [pc, #88]	; (800b510 <CDC_Control_FS+0x140>)
 800b4b6:	719a      	strb	r2, [r3, #6]
    break;
 800b4b8:	e023      	b.n	800b502 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = myLineCodeBuf[0];
 800b4ba:	4b15      	ldr	r3, [pc, #84]	; (800b510 <CDC_Control_FS+0x140>)
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = myLineCodeBuf[1];
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	4a12      	ldr	r2, [pc, #72]	; (800b510 <CDC_Control_FS+0x140>)
 800b4c8:	7852      	ldrb	r2, [r2, #1]
 800b4ca:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = myLineCodeBuf[2];
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	3302      	adds	r3, #2
 800b4d0:	4a0f      	ldr	r2, [pc, #60]	; (800b510 <CDC_Control_FS+0x140>)
 800b4d2:	7892      	ldrb	r2, [r2, #2]
 800b4d4:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = myLineCodeBuf[3];
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	3303      	adds	r3, #3
 800b4da:	4a0d      	ldr	r2, [pc, #52]	; (800b510 <CDC_Control_FS+0x140>)
 800b4dc:	78d2      	ldrb	r2, [r2, #3]
 800b4de:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = myLineCodeBuf[4];
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4a0a      	ldr	r2, [pc, #40]	; (800b510 <CDC_Control_FS+0x140>)
 800b4e6:	7912      	ldrb	r2, [r2, #4]
 800b4e8:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = myLineCodeBuf[5];
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	3305      	adds	r3, #5
 800b4ee:	4a08      	ldr	r2, [pc, #32]	; (800b510 <CDC_Control_FS+0x140>)
 800b4f0:	7952      	ldrb	r2, [r2, #5]
 800b4f2:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = myLineCodeBuf[6];
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	3306      	adds	r3, #6
 800b4f8:	4a05      	ldr	r2, [pc, #20]	; (800b510 <CDC_Control_FS+0x140>)
 800b4fa:	7992      	ldrb	r2, [r2, #6]
 800b4fc:	701a      	strb	r2, [r3, #0]
    break;
 800b4fe:	e000      	b.n	800b502 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b500:	bf00      	nop
  }

  return (USBD_OK);
 800b502:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	bc80      	pop	{r7}
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	200014a0 	.word	0x200014a0

0800b514 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800b51e:	4b16      	ldr	r3, [pc, #88]	; (800b578 <CDC_Receive_FS+0x64>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d007      	beq.n	800b536 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800b526:	4b14      	ldr	r3, [pc, #80]	; (800b578 <CDC_Receive_FS+0x64>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	6812      	ldr	r2, [r2, #0]
 800b52e:	b292      	uxth	r2, r2
 800b530:	4611      	mov	r1, r2
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	4798      	blx	r3

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b536:	6879      	ldr	r1, [r7, #4]
 800b538:	4810      	ldr	r0, [pc, #64]	; (800b57c <CDC_Receive_FS+0x68>)
 800b53a:	f7fe fdf6 	bl	800a12a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b53e:	480f      	ldr	r0, [pc, #60]	; (800b57c <CDC_Receive_FS+0x68>)
 800b540:	f7fe fe35 	bl	800a1ae <USBD_CDC_ReceivePacket>

	memset (datosComUSB.bufferRx, '\0', 256);  // clear the buffer
 800b544:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b548:	2100      	movs	r1, #0
 800b54a:	480d      	ldr	r0, [pc, #52]	; (800b580 <CDC_Receive_FS+0x6c>)
 800b54c:	f000 fc62 	bl	800be14 <memset>
	uint8_t len = (uint8_t)*Len;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	73fb      	strb	r3, [r7, #15]
	memcpy(datosComUSB.bufferRx, Buf, len);  // copy the data to the buffer
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	461a      	mov	r2, r3
 800b55a:	6879      	ldr	r1, [r7, #4]
 800b55c:	4808      	ldr	r0, [pc, #32]	; (800b580 <CDC_Receive_FS+0x6c>)
 800b55e:	f000 fc99 	bl	800be94 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	461a      	mov	r2, r3
 800b566:	2100      	movs	r1, #0
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fc53 	bl	800be14 <memset>

	return (USBD_OK);
 800b56e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	200014a8 	.word	0x200014a8
 800b57c:	20000fdc 	.word	0x20000fdc
 800b580:	20000797 	.word	0x20000797

0800b584 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b594:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <CDC_Transmit_FS+0x48>)
 800b596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e00b      	b.n	800b5c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5aa:	887b      	ldrh	r3, [r7, #2]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	6879      	ldr	r1, [r7, #4]
 800b5b0:	4806      	ldr	r0, [pc, #24]	; (800b5cc <CDC_Transmit_FS+0x48>)
 800b5b2:	f7fe fda1 	bl	800a0f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5b6:	4805      	ldr	r0, [pc, #20]	; (800b5cc <CDC_Transmit_FS+0x48>)
 800b5b8:	f7fe fdca 	bl	800a150 <USBD_CDC_TransmitPacket>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20000fdc 	.word	0x20000fdc

0800b5d0 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800b5d8:	4a03      	ldr	r2, [pc, #12]	; (800b5e8 <CDC_AttachRxData+0x18>)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6013      	str	r3, [r2, #0]
}
 800b5de:	bf00      	nop
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bc80      	pop	{r7}
 800b5e6:	4770      	bx	lr
 800b5e8:	200014a8 	.word	0x200014a8

0800b5ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	6039      	str	r1, [r7, #0]
 800b5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	2212      	movs	r2, #18
 800b5fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5fe:	4b03      	ldr	r3, [pc, #12]	; (800b60c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	bc80      	pop	{r7}
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	20000164 	.word	0x20000164

0800b610 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	6039      	str	r1, [r7, #0]
 800b61a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2204      	movs	r2, #4
 800b620:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b622:	4b03      	ldr	r3, [pc, #12]	; (800b630 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	bc80      	pop	{r7}
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	20000178 	.word	0x20000178

0800b634 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	4603      	mov	r3, r0
 800b63c:	6039      	str	r1, [r7, #0]
 800b63e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d105      	bne.n	800b652 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	4907      	ldr	r1, [pc, #28]	; (800b668 <USBD_FS_ProductStrDescriptor+0x34>)
 800b64a:	4808      	ldr	r0, [pc, #32]	; (800b66c <USBD_FS_ProductStrDescriptor+0x38>)
 800b64c:	f7ff fd96 	bl	800b17c <USBD_GetString>
 800b650:	e004      	b.n	800b65c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	4904      	ldr	r1, [pc, #16]	; (800b668 <USBD_FS_ProductStrDescriptor+0x34>)
 800b656:	4805      	ldr	r0, [pc, #20]	; (800b66c <USBD_FS_ProductStrDescriptor+0x38>)
 800b658:	f7ff fd90 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b65c:	4b02      	ldr	r3, [pc, #8]	; (800b668 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	200014ac 	.word	0x200014ac
 800b66c:	0800c040 	.word	0x0800c040

0800b670 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	6039      	str	r1, [r7, #0]
 800b67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	4904      	ldr	r1, [pc, #16]	; (800b690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b680:	4804      	ldr	r0, [pc, #16]	; (800b694 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b682:	f7ff fd7b 	bl	800b17c <USBD_GetString>
  return USBD_StrDesc;
 800b686:	4b02      	ldr	r3, [pc, #8]	; (800b690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	200014ac 	.word	0x200014ac
 800b694:	0800c058 	.word	0x0800c058

0800b698 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	6039      	str	r1, [r7, #0]
 800b6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	221a      	movs	r2, #26
 800b6a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b6aa:	f000 f843 	bl	800b734 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b6ae:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	2000017c 	.word	0x2000017c

0800b6bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	6039      	str	r1, [r7, #0]
 800b6c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d105      	bne.n	800b6da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	4907      	ldr	r1, [pc, #28]	; (800b6f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6d2:	4808      	ldr	r0, [pc, #32]	; (800b6f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6d4:	f7ff fd52 	bl	800b17c <USBD_GetString>
 800b6d8:	e004      	b.n	800b6e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	4904      	ldr	r1, [pc, #16]	; (800b6f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6de:	4805      	ldr	r0, [pc, #20]	; (800b6f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6e0:	f7ff fd4c 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6e4:	4b02      	ldr	r3, [pc, #8]	; (800b6f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	200014ac 	.word	0x200014ac
 800b6f4:	0800c06c 	.word	0x0800c06c

0800b6f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	4603      	mov	r3, r0
 800b700:	6039      	str	r1, [r7, #0]
 800b702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d105      	bne.n	800b716 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	4907      	ldr	r1, [pc, #28]	; (800b72c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b70e:	4808      	ldr	r0, [pc, #32]	; (800b730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b710:	f7ff fd34 	bl	800b17c <USBD_GetString>
 800b714:	e004      	b.n	800b720 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	4904      	ldr	r1, [pc, #16]	; (800b72c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b71a:	4805      	ldr	r0, [pc, #20]	; (800b730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b71c:	f7ff fd2e 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b720:	4b02      	ldr	r3, [pc, #8]	; (800b72c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	200014ac 	.word	0x200014ac
 800b730:	0800c078 	.word	0x0800c078

0800b734 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b73a:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <Get_SerialNum+0x44>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b740:	4b0e      	ldr	r3, [pc, #56]	; (800b77c <Get_SerialNum+0x48>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b746:	4b0e      	ldr	r3, [pc, #56]	; (800b780 <Get_SerialNum+0x4c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d009      	beq.n	800b76e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b75a:	2208      	movs	r2, #8
 800b75c:	4909      	ldr	r1, [pc, #36]	; (800b784 <Get_SerialNum+0x50>)
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 f814 	bl	800b78c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b764:	2204      	movs	r2, #4
 800b766:	4908      	ldr	r1, [pc, #32]	; (800b788 <Get_SerialNum+0x54>)
 800b768:	68b8      	ldr	r0, [r7, #8]
 800b76a:	f000 f80f 	bl	800b78c <IntToUnicode>
  }
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	1ffff7e8 	.word	0x1ffff7e8
 800b77c:	1ffff7ec 	.word	0x1ffff7ec
 800b780:	1ffff7f0 	.word	0x1ffff7f0
 800b784:	2000017e 	.word	0x2000017e
 800b788:	2000018e 	.word	0x2000018e

0800b78c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4613      	mov	r3, r2
 800b798:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b79e:	2300      	movs	r3, #0
 800b7a0:	75fb      	strb	r3, [r7, #23]
 800b7a2:	e027      	b.n	800b7f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	0f1b      	lsrs	r3, r3, #28
 800b7a8:	2b09      	cmp	r3, #9
 800b7aa:	d80b      	bhi.n	800b7c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	0f1b      	lsrs	r3, r3, #28
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	7dfb      	ldrb	r3, [r7, #23]
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	440b      	add	r3, r1
 800b7bc:	3230      	adds	r2, #48	; 0x30
 800b7be:	b2d2      	uxtb	r2, r2
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	e00a      	b.n	800b7da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	0f1b      	lsrs	r3, r3, #28
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	440b      	add	r3, r1
 800b7d4:	3237      	adds	r2, #55	; 0x37
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	75fb      	strb	r3, [r7, #23]
 800b7f4:	7dfa      	ldrb	r2, [r7, #23]
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d3d3      	bcc.n	800b7a4 <IntToUnicode+0x18>
  }
}
 800b7fc:	bf00      	nop
 800b7fe:	bf00      	nop
 800b800:	371c      	adds	r7, #28
 800b802:	46bd      	mov	sp, r7
 800b804:	bc80      	pop	{r7}
 800b806:	4770      	bx	lr

0800b808 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a0d      	ldr	r2, [pc, #52]	; (800b84c <HAL_PCD_MspInit+0x44>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d113      	bne.n	800b842 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b81a:	4b0d      	ldr	r3, [pc, #52]	; (800b850 <HAL_PCD_MspInit+0x48>)
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	4a0c      	ldr	r2, [pc, #48]	; (800b850 <HAL_PCD_MspInit+0x48>)
 800b820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b824:	61d3      	str	r3, [r2, #28]
 800b826:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <HAL_PCD_MspInit+0x48>)
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b832:	2200      	movs	r2, #0
 800b834:	2100      	movs	r1, #0
 800b836:	2014      	movs	r0, #20
 800b838:	f7f7 fb91 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b83c:	2014      	movs	r0, #20
 800b83e:	f7f7 fbaa 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	40005c00 	.word	0x40005c00
 800b850:	40021000 	.word	0x40021000

0800b854 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b868:	4619      	mov	r1, r3
 800b86a:	4610      	mov	r0, r2
 800b86c:	f7fe fd55 	bl	800a31a <USBD_LL_SetupStage>
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800b88a:	78fa      	ldrb	r2, [r7, #3]
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	440b      	add	r3, r1
 800b898:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	78fb      	ldrb	r3, [r7, #3]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	f7fe fd87 	bl	800a3b4 <USBD_LL_DataOutStage>
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800b8c0:	78fa      	ldrb	r2, [r7, #3]
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	440b      	add	r3, r1
 800b8ce:	333c      	adds	r3, #60	; 0x3c
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	78fb      	ldrb	r3, [r7, #3]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f7fe fdde 	bl	800a496 <USBD_LL_DataInStage>
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fe feee 	bl	800a6d2 <USBD_LL_SOF>
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b906:	2301      	movs	r3, #1
 800b908:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d001      	beq.n	800b916 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b912:	f7f6 fc17 	bl	8002144 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b91c:	7bfa      	ldrb	r2, [r7, #15]
 800b91e:	4611      	mov	r1, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe fe9e 	bl	800a662 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fe fe57 	bl	800a5e0 <USBD_LL_Reset>
}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fe fe98 	bl	800a680 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b958:	4b04      	ldr	r3, [pc, #16]	; (800b96c <HAL_PCD_SuspendCallback+0x30>)
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	4a03      	ldr	r2, [pc, #12]	; (800b96c <HAL_PCD_SuspendCallback+0x30>)
 800b95e:	f043 0306 	orr.w	r3, r3, #6
 800b962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	e000ed00 	.word	0xe000ed00

0800b970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fe92 	bl	800a6a8 <USBD_LL_Resume>
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b994:	4a28      	ldr	r2, [pc, #160]	; (800ba38 <USBD_LL_Init+0xac>)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a26      	ldr	r2, [pc, #152]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b9a4:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9a6:	4a25      	ldr	r2, [pc, #148]	; (800ba3c <USBD_LL_Init+0xb0>)
 800b9a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b9aa:	4b23      	ldr	r3, [pc, #140]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9ac:	2208      	movs	r2, #8
 800b9ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b9b0:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b9b6:	4b20      	ldr	r3, [pc, #128]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b9bc:	4b1e      	ldr	r3, [pc, #120]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b9c8:	481b      	ldr	r0, [pc, #108]	; (800ba38 <USBD_LL_Init+0xac>)
 800b9ca:	f7f7 ff54 	bl	8003876 <HAL_PCD_Init>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b9d4:	f7f6 fbb6 	bl	8002144 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9de:	2318      	movs	r3, #24
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	f7f9 fc73 	bl	80052ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9ee:	2358      	movs	r3, #88	; 0x58
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2180      	movs	r1, #128	; 0x80
 800b9f4:	f7f9 fc6b 	bl	80052ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9fe:	23c0      	movs	r3, #192	; 0xc0
 800ba00:	2200      	movs	r2, #0
 800ba02:	2181      	movs	r1, #129	; 0x81
 800ba04:	f7f9 fc63 	bl	80052ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ba12:	2200      	movs	r2, #0
 800ba14:	2101      	movs	r1, #1
 800ba16:	f7f9 fc5a 	bl	80052ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba24:	2200      	movs	r2, #0
 800ba26:	2182      	movs	r1, #130	; 0x82
 800ba28:	f7f9 fc51 	bl	80052ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	200016ac 	.word	0x200016ac
 800ba3c:	40005c00 	.word	0x40005c00

0800ba40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f8 f80c 	bl	8003a74 <HAL_PCD_Start>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f94e 	bl	800bd04 <USBD_Get_USB_Status>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	4608      	mov	r0, r1
 800ba80:	4611      	mov	r1, r2
 800ba82:	461a      	mov	r2, r3
 800ba84:	4603      	mov	r3, r0
 800ba86:	70fb      	strb	r3, [r7, #3]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70bb      	strb	r3, [r7, #2]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba9e:	78bb      	ldrb	r3, [r7, #2]
 800baa0:	883a      	ldrh	r2, [r7, #0]
 800baa2:	78f9      	ldrb	r1, [r7, #3]
 800baa4:	f7f8 f961 	bl	8003d6a <HAL_PCD_EP_Open>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f928 	bl	800bd04 <USBD_Get_USB_Status>
 800bab4:	4603      	mov	r3, r0
 800bab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	460b      	mov	r3, r1
 800bacc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800badc:	78fa      	ldrb	r2, [r7, #3]
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7f8 f99f 	bl	8003e24 <HAL_PCD_EP_Close>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baea:	7bfb      	ldrb	r3, [r7, #15]
 800baec:	4618      	mov	r0, r3
 800baee:	f000 f909 	bl	800bd04 <USBD_Get_USB_Status>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb1a:	78fa      	ldrb	r2, [r7, #3]
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7f8 fa47 	bl	8003fb2 <HAL_PCD_EP_SetStall>
 800bb24:	4603      	mov	r3, r0
 800bb26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 f8ea 	bl	800bd04 <USBD_Get_USB_Status>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb58:	78fa      	ldrb	r2, [r7, #3]
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f8 fa88 	bl	8004072 <HAL_PCD_EP_ClrStall>
 800bb62:	4603      	mov	r3, r0
 800bb64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f8cb 	bl	800bd04 <USBD_Get_USB_Status>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	da0c      	bge.n	800bbb2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb98:	78fb      	ldrb	r3, [r7, #3]
 800bb9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb9e:	68f9      	ldr	r1, [r7, #12]
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	4613      	mov	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	00db      	lsls	r3, r3, #3
 800bbaa:	440b      	add	r3, r1
 800bbac:	3302      	adds	r3, #2
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	e00b      	b.n	800bbca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbb2:	78fb      	ldrb	r3, [r7, #3]
 800bbb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbb8:	68f9      	ldr	r1, [r7, #12]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	440b      	add	r3, r1
 800bbc4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bbc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bc80      	pop	{r7}
 800bbd2:	4770      	bx	lr

0800bbd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbee:	78fa      	ldrb	r2, [r7, #3]
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7f8 f894 	bl	8003d20 <HAL_PCD_SetAddress>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 f880 	bl	800bd04 <USBD_Get_USB_Status>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b086      	sub	sp, #24
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	607a      	str	r2, [r7, #4]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	460b      	mov	r3, r1
 800bc20:	72fb      	strb	r3, [r7, #11]
 800bc22:	4613      	mov	r3, r2
 800bc24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc34:	893b      	ldrh	r3, [r7, #8]
 800bc36:	7af9      	ldrb	r1, [r7, #11]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	f7f8 f983 	bl	8003f44 <HAL_PCD_EP_Transmit>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 f85d 	bl	800bd04 <USBD_Get_USB_Status>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc4e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3718      	adds	r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	607a      	str	r2, [r7, #4]
 800bc62:	461a      	mov	r2, r3
 800bc64:	460b      	mov	r3, r1
 800bc66:	72fb      	strb	r3, [r7, #11]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc7a:	893b      	ldrh	r3, [r7, #8]
 800bc7c:	7af9      	ldrb	r1, [r7, #11]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	f7f8 f918 	bl	8003eb4 <HAL_PCD_EP_Receive>
 800bc84:	4603      	mov	r3, r0
 800bc86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f83a 	bl	800bd04 <USBD_Get_USB_Status>
 800bc90:	4603      	mov	r3, r0
 800bc92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc94:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcb0:	78fa      	ldrb	r2, [r7, #3]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f8 f92e 	bl	8003f16 <HAL_PCD_EP_GetRxCount>
 800bcba:	4603      	mov	r3, r0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bccc:	4b02      	ldr	r3, [pc, #8]	; (800bcd8 <USBD_static_malloc+0x14>)
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bc80      	pop	{r7}
 800bcd6:	4770      	bx	lr
 800bcd8:	2000199c 	.word	0x2000199c

0800bcdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]

}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bc80      	pop	{r7}
 800bcec:	4770      	bx	lr

0800bcee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bcfa:	bf00      	nop
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bc80      	pop	{r7}
 800bd02:	4770      	bx	lr

0800bd04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd12:	79fb      	ldrb	r3, [r7, #7]
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	d817      	bhi.n	800bd48 <USBD_Get_USB_Status+0x44>
 800bd18:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <USBD_Get_USB_Status+0x1c>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bd31 	.word	0x0800bd31
 800bd24:	0800bd37 	.word	0x0800bd37
 800bd28:	0800bd3d 	.word	0x0800bd3d
 800bd2c:	0800bd43 	.word	0x0800bd43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
    break;
 800bd34:	e00b      	b.n	800bd4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd36:	2302      	movs	r3, #2
 800bd38:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3a:	e008      	b.n	800bd4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd40:	e005      	b.n	800bd4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd42:	2302      	movs	r3, #2
 800bd44:	73fb      	strb	r3, [r7, #15]
    break;
 800bd46:	e002      	b.n	800bd4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd48:	2302      	movs	r3, #2
 800bd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd4c:	bf00      	nop
  }
  return usb_status;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bc80      	pop	{r7}
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop

0800bd5c <__itoa>:
 800bd5c:	1e93      	subs	r3, r2, #2
 800bd5e:	2b22      	cmp	r3, #34	; 0x22
 800bd60:	b510      	push	{r4, lr}
 800bd62:	460c      	mov	r4, r1
 800bd64:	d904      	bls.n	800bd70 <__itoa+0x14>
 800bd66:	2300      	movs	r3, #0
 800bd68:	461c      	mov	r4, r3
 800bd6a:	700b      	strb	r3, [r1, #0]
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	bd10      	pop	{r4, pc}
 800bd70:	2a0a      	cmp	r2, #10
 800bd72:	d109      	bne.n	800bd88 <__itoa+0x2c>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	da07      	bge.n	800bd88 <__itoa+0x2c>
 800bd78:	232d      	movs	r3, #45	; 0x2d
 800bd7a:	700b      	strb	r3, [r1, #0]
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	4240      	negs	r0, r0
 800bd80:	4421      	add	r1, r4
 800bd82:	f000 f805 	bl	800bd90 <__utoa>
 800bd86:	e7f1      	b.n	800bd6c <__itoa+0x10>
 800bd88:	2100      	movs	r1, #0
 800bd8a:	e7f9      	b.n	800bd80 <__itoa+0x24>

0800bd8c <itoa>:
 800bd8c:	f7ff bfe6 	b.w	800bd5c <__itoa>

0800bd90 <__utoa>:
 800bd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd92:	b08b      	sub	sp, #44	; 0x2c
 800bd94:	4605      	mov	r5, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	466e      	mov	r6, sp
 800bd9a:	4c1d      	ldr	r4, [pc, #116]	; (800be10 <__utoa+0x80>)
 800bd9c:	f104 0c20 	add.w	ip, r4, #32
 800bda0:	4637      	mov	r7, r6
 800bda2:	6820      	ldr	r0, [r4, #0]
 800bda4:	6861      	ldr	r1, [r4, #4]
 800bda6:	3408      	adds	r4, #8
 800bda8:	c703      	stmia	r7!, {r0, r1}
 800bdaa:	4564      	cmp	r4, ip
 800bdac:	463e      	mov	r6, r7
 800bdae:	d1f7      	bne.n	800bda0 <__utoa+0x10>
 800bdb0:	7921      	ldrb	r1, [r4, #4]
 800bdb2:	6820      	ldr	r0, [r4, #0]
 800bdb4:	7139      	strb	r1, [r7, #4]
 800bdb6:	1e91      	subs	r1, r2, #2
 800bdb8:	2922      	cmp	r1, #34	; 0x22
 800bdba:	6038      	str	r0, [r7, #0]
 800bdbc:	f04f 0100 	mov.w	r1, #0
 800bdc0:	d904      	bls.n	800bdcc <__utoa+0x3c>
 800bdc2:	7019      	strb	r1, [r3, #0]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	b00b      	add	sp, #44	; 0x2c
 800bdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdcc:	1e58      	subs	r0, r3, #1
 800bdce:	4684      	mov	ip, r0
 800bdd0:	fbb5 f7f2 	udiv	r7, r5, r2
 800bdd4:	fb02 5617 	mls	r6, r2, r7, r5
 800bdd8:	3628      	adds	r6, #40	; 0x28
 800bdda:	446e      	add	r6, sp
 800bddc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bde0:	460c      	mov	r4, r1
 800bde2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bde6:	462e      	mov	r6, r5
 800bde8:	42b2      	cmp	r2, r6
 800bdea:	463d      	mov	r5, r7
 800bdec:	f101 0101 	add.w	r1, r1, #1
 800bdf0:	d9ee      	bls.n	800bdd0 <__utoa+0x40>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	545a      	strb	r2, [r3, r1]
 800bdf6:	1919      	adds	r1, r3, r4
 800bdf8:	1aa5      	subs	r5, r4, r2
 800bdfa:	42aa      	cmp	r2, r5
 800bdfc:	dae3      	bge.n	800bdc6 <__utoa+0x36>
 800bdfe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800be02:	780e      	ldrb	r6, [r1, #0]
 800be04:	3201      	adds	r2, #1
 800be06:	7006      	strb	r6, [r0, #0]
 800be08:	f801 5901 	strb.w	r5, [r1], #-1
 800be0c:	e7f4      	b.n	800bdf8 <__utoa+0x68>
 800be0e:	bf00      	nop
 800be10:	0800c276 	.word	0x0800c276

0800be14 <memset>:
 800be14:	4603      	mov	r3, r0
 800be16:	4402      	add	r2, r0
 800be18:	4293      	cmp	r3, r2
 800be1a:	d100      	bne.n	800be1e <memset+0xa>
 800be1c:	4770      	bx	lr
 800be1e:	f803 1b01 	strb.w	r1, [r3], #1
 800be22:	e7f9      	b.n	800be18 <memset+0x4>

0800be24 <strncpy>:
 800be24:	4603      	mov	r3, r0
 800be26:	b510      	push	{r4, lr}
 800be28:	3901      	subs	r1, #1
 800be2a:	b132      	cbz	r2, 800be3a <strncpy+0x16>
 800be2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be30:	3a01      	subs	r2, #1
 800be32:	f803 4b01 	strb.w	r4, [r3], #1
 800be36:	2c00      	cmp	r4, #0
 800be38:	d1f7      	bne.n	800be2a <strncpy+0x6>
 800be3a:	2100      	movs	r1, #0
 800be3c:	441a      	add	r2, r3
 800be3e:	4293      	cmp	r3, r2
 800be40:	d100      	bne.n	800be44 <strncpy+0x20>
 800be42:	bd10      	pop	{r4, pc}
 800be44:	f803 1b01 	strb.w	r1, [r3], #1
 800be48:	e7f9      	b.n	800be3e <strncpy+0x1a>
	...

0800be4c <__libc_init_array>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	2600      	movs	r6, #0
 800be50:	4d0c      	ldr	r5, [pc, #48]	; (800be84 <__libc_init_array+0x38>)
 800be52:	4c0d      	ldr	r4, [pc, #52]	; (800be88 <__libc_init_array+0x3c>)
 800be54:	1b64      	subs	r4, r4, r5
 800be56:	10a4      	asrs	r4, r4, #2
 800be58:	42a6      	cmp	r6, r4
 800be5a:	d109      	bne.n	800be70 <__libc_init_array+0x24>
 800be5c:	f000 f828 	bl	800beb0 <_init>
 800be60:	2600      	movs	r6, #0
 800be62:	4d0a      	ldr	r5, [pc, #40]	; (800be8c <__libc_init_array+0x40>)
 800be64:	4c0a      	ldr	r4, [pc, #40]	; (800be90 <__libc_init_array+0x44>)
 800be66:	1b64      	subs	r4, r4, r5
 800be68:	10a4      	asrs	r4, r4, #2
 800be6a:	42a6      	cmp	r6, r4
 800be6c:	d105      	bne.n	800be7a <__libc_init_array+0x2e>
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
 800be70:	f855 3b04 	ldr.w	r3, [r5], #4
 800be74:	4798      	blx	r3
 800be76:	3601      	adds	r6, #1
 800be78:	e7ee      	b.n	800be58 <__libc_init_array+0xc>
 800be7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7e:	4798      	blx	r3
 800be80:	3601      	adds	r6, #1
 800be82:	e7f2      	b.n	800be6a <__libc_init_array+0x1e>
 800be84:	0800c29c 	.word	0x0800c29c
 800be88:	0800c29c 	.word	0x0800c29c
 800be8c:	0800c29c 	.word	0x0800c29c
 800be90:	0800c2a0 	.word	0x0800c2a0

0800be94 <memcpy>:
 800be94:	440a      	add	r2, r1
 800be96:	4291      	cmp	r1, r2
 800be98:	f100 33ff 	add.w	r3, r0, #4294967295
 800be9c:	d100      	bne.n	800bea0 <memcpy+0xc>
 800be9e:	4770      	bx	lr
 800bea0:	b510      	push	{r4, lr}
 800bea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea6:	4291      	cmp	r1, r2
 800bea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beac:	d1f9      	bne.n	800bea2 <memcpy+0xe>
 800beae:	bd10      	pop	{r4, pc}

0800beb0 <_init>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	bf00      	nop
 800beb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb6:	bc08      	pop	{r3}
 800beb8:	469e      	mov	lr, r3
 800beba:	4770      	bx	lr

0800bebc <_fini>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr
