
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d600  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800d70c  0800d70c  0001d70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf0  0800daf0  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800daf0  0800daf0  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800daf0  0800daf0  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daf0  0800daf0  0001daf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800daf4  0800daf4  0001daf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800daf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001828  20000194  0800dc8c  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  0800dc8c  000219bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b98e  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043e2  00000000  00000000  0003bb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0003ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000132b  00000000  00000000  00041828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1b1  00000000  00000000  00042b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f74d  00000000  00000000  0005ed04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097d9e  00000000  00000000  0007e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000687c  00000000  00000000  001161f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d6f4 	.word	0x0800d6f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	0800d6f4 	.word	0x0800d6f4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 8000166:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <ESP01_SetWIFI+0x54>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <ESP01_SetWIFI+0x58>)
 800016e:	2200      	movs	r2, #0
 8000170:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 8000172:	2240      	movs	r2, #64	; 0x40
 8000174:	6879      	ldr	r1, [r7, #4]
 8000176:	4810      	ldr	r0, [pc, #64]	; (80001b8 <ESP01_SetWIFI+0x5c>)
 8000178:	f00d fa76 	bl	800d668 <strncpy>
	esp01SSID[63] = '\0';
 800017c:	4b0e      	ldr	r3, [pc, #56]	; (80001b8 <ESP01_SetWIFI+0x5c>)
 800017e:	2200      	movs	r2, #0
 8000180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	strncpy(esp01PASSWORD, password, 32);
 8000184:	2220      	movs	r2, #32
 8000186:	6839      	ldr	r1, [r7, #0]
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <ESP01_SetWIFI+0x60>)
 800018a:	f00d fa6d 	bl	800d668 <strncpy>
	esp01PASSWORD[31] = '\0';
 800018e:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <ESP01_SetWIFI+0x60>)
 8000190:	2200      	movs	r2, #0
 8000192:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 8000194:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <ESP01_SetWIFI+0x64>)
 8000196:	2232      	movs	r2, #50	; 0x32
 8000198:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <ESP01_SetWIFI+0x54>)
 800019c:	220d      	movs	r2, #13
 800019e:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <ESP01_SetWIFI+0x68>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]

}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200001b0 	.word	0x200001b0
 80001b4:	200001b4 	.word	0x200001b4
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	2000020c 	.word	0x2000020c
 80001c0:	200001b8 	.word	0x200001b8
 80001c4:	200003e8 	.word	0x200003e8

080001c8 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
 80001d4:	4613      	mov	r3, r2
 80001d6:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 80001d8:	4b1d      	ldr	r3, [pc, #116]	; (8000250 <ESP01_StartUDP+0x88>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d102      	bne.n	80001e6 <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 80001e0:	f04f 33ff 	mov.w	r3, #4294967295
 80001e4:	e02f      	b.n	8000246 <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 80001e6:	883b      	ldrh	r3, [r7, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d102      	bne.n	80001f2 <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 80001ec:	f247 5330 	movw	r3, #30000	; 0x7530
 80001f0:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <ESP01_StartUDP+0x8c>)
 80001f4:	4a18      	ldr	r2, [pc, #96]	; (8000258 <ESP01_StartUDP+0x90>)
 80001f6:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 80001f8:	220f      	movs	r2, #15
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	4817      	ldr	r0, [pc, #92]	; (800025c <ESP01_StartUDP+0x94>)
 80001fe:	f00d fa33 	bl	800d668 <strncpy>
	esp01RemoteIP[15] = '\0';
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <ESP01_StartUDP+0x94>)
 8000204:	2200      	movs	r2, #0
 8000206:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8000208:	887b      	ldrh	r3, [r7, #2]
 800020a:	220a      	movs	r2, #10
 800020c:	4914      	ldr	r1, [pc, #80]	; (8000260 <ESP01_StartUDP+0x98>)
 800020e:	4618      	mov	r0, r3
 8000210:	f00d f9de 	bl	800d5d0 <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8000214:	883b      	ldrh	r3, [r7, #0]
 8000216:	220a      	movs	r2, #10
 8000218:	4912      	ldr	r1, [pc, #72]	; (8000264 <ESP01_StartUDP+0x9c>)
 800021a:	4618      	mov	r0, r3
 800021c:	f00d f9d8 	bl	800d5d0 <itoa>

	if(esp01SSID[0] == '\0')
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <ESP01_StartUDP+0xa0>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d101      	bne.n	800022c <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8000228:	2301      	movs	r3, #1
 800022a:	e00c      	b.n	8000246 <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <ESP01_StartUDP+0xa4>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	f003 0302 	and.w	r3, r3, #2
 8000234:	b2db      	uxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d101      	bne.n	800023e <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 800023a:	2300      	movs	r3, #0
 800023c:	e003      	b.n	8000246 <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <ESP01_StartUDP+0xa8>)
 8000240:	2209      	movs	r2, #9
 8000242:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8000244:	2306      	movs	r3, #6
}
 8000246:	4618      	mov	r0, r3
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200003ec 	.word	0x200003ec
 8000254:	20000000 	.word	0x20000000
 8000258:	00504455 	.word	0x00504455
 800025c:	2000022c 	.word	0x2000022c
 8000260:	2000023c 	.word	0x2000023c
 8000264:	20000254 	.word	0x20000254
 8000268:	200001cc 	.word	0x200001cc
 800026c:	200001b4 	.word	0x200001b4
 8000270:	200001b0 	.word	0x200001b0

08000274 <ESP01_GetLocalIP>:
		return ESP01_WIFI_CONNECTED;
	else
		return ESP01_WIFI_DISCONNECTED;
}

char *ESP01_GetLocalIP(){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	if(esp01Flags.bit.WIFICONNECTED &&  esp01LocalIP[0]!='\0')
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <ESP01_GetLocalIP+0x28>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	f003 0302 	and.w	r3, r3, #2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d005      	beq.n	8000292 <ESP01_GetLocalIP+0x1e>
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <ESP01_GetLocalIP+0x2c>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <ESP01_GetLocalIP+0x1e>
		return esp01LocalIP;
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <ESP01_GetLocalIP+0x2c>)
 8000290:	e000      	b.n	8000294 <ESP01_GetLocalIP+0x20>

	return NULL;
 8000292:	2300      	movs	r3, #0
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	200001b4 	.word	0x200001b4
 80002a0:	20000244 	.word	0x20000244

080002a4 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <ESP01_WriteRX+0x38>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	b291      	uxth	r1, r2
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <ESP01_WriteRX+0x38>)
 80002b8:	8011      	strh	r1, [r2, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <ESP01_WriteRX+0x3c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <ESP01_WriteRX+0x38>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	2b80      	cmp	r3, #128	; 0x80
 80002c8:	d102      	bne.n	80002d0 <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <ESP01_WriteRX+0x38>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	801a      	strh	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	200003e0 	.word	0x200003e0
 80002e0:	20000260 	.word	0x20000260

080002e4 <ESP01_Send>:

_eESP01STATUS ESP01_Send(uint8_t *buf, uint16_t irRingBuf, uint16_t length, uint16_t sizeRingBuf){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	4608      	mov	r0, r1
 80002ee:	4611      	mov	r1, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	4603      	mov	r3, r0
 80002f4:	817b      	strh	r3, [r7, #10]
 80002f6:	460b      	mov	r3, r1
 80002f8:	813b      	strh	r3, [r7, #8]
 80002fa:	4613      	mov	r3, r2
 80002fc:	80fb      	strh	r3, [r7, #6]
	if(esp01Handle.WriteUSARTByte == NULL)
 80002fe:	4b46      	ldr	r3, [pc, #280]	; (8000418 <ESP01_Send+0x134>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d102      	bne.n	800030c <ESP01_Send+0x28>
		return ESP01_NOT_INIT;
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	e081      	b.n	8000410 <ESP01_Send+0x12c>

	if(esp01Flags.bit.UDPTCPCONNECTED == 0)
 800030c:	4b43      	ldr	r3, [pc, #268]	; (800041c <ESP01_Send+0x138>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d101      	bne.n	800031e <ESP01_Send+0x3a>
		return ESP01_UDPTCP_DISCONNECTED;
 800031a:	2305      	movs	r3, #5
 800031c:	e078      	b.n	8000410 <ESP01_Send+0x12c>

	if(esp01Flags.bit.SENDINGDATA == 0){
 800031e:	4b3f      	ldr	r3, [pc, #252]	; (800041c <ESP01_Send+0x138>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	f003 0308 	and.w	r3, r3, #8
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d168      	bne.n	80003fe <ESP01_Send+0x11a>
		char strInt[10];
		uint8_t l = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	777b      	strb	r3, [r7, #29]

		itoa(length, strInt, 10);
 8000330:	893b      	ldrh	r3, [r7, #8]
 8000332:	f107 0110 	add.w	r1, r7, #16
 8000336:	220a      	movs	r2, #10
 8000338:	4618      	mov	r0, r3
 800033a:	f00d f949 	bl	800d5d0 <itoa>
		l = strlen(strInt);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff02 	bl	800014c <strlen>
 8000348:	4603      	mov	r3, r0
 800034a:	777b      	strb	r3, [r7, #29]
		if(l>4 || l==0)
 800034c:	7f7b      	ldrb	r3, [r7, #29]
 800034e:	2b04      	cmp	r3, #4
 8000350:	d802      	bhi.n	8000358 <ESP01_Send+0x74>
 8000352:	7f7b      	ldrb	r3, [r7, #29]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d101      	bne.n	800035c <ESP01_Send+0x78>
			return ESP01_SEND_ERROR;
 8000358:	230b      	movs	r3, #11
 800035a:	e059      	b.n	8000410 <ESP01_Send+0x12c>

		ESP01StrToBufTX(ATCIPSEND);
 800035c:	4830      	ldr	r0, [pc, #192]	; (8000420 <ESP01_Send+0x13c>)
 800035e:	f000 ff41 	bl	80011e4 <ESP01StrToBufTX>
		ESP01StrToBufTX(strInt);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4618      	mov	r0, r3
 8000368:	f000 ff3c 	bl	80011e4 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 800036c:	482d      	ldr	r0, [pc, #180]	; (8000424 <ESP01_Send+0x140>)
 800036e:	f000 ff39 	bl	80011e4 <ESP01StrToBufTX>

		for(uint16_t i=0; i<length; i++){
 8000372:	2300      	movs	r3, #0
 8000374:	83fb      	strh	r3, [r7, #30]
 8000376:	e020      	b.n	80003ba <ESP01_Send+0xd6>
			esp01TXATBuf[esp01iwTX++] = buf[irRingBuf++];
 8000378:	897b      	ldrh	r3, [r7, #10]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	817a      	strh	r2, [r7, #10]
 800037e:	461a      	mov	r2, r3
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	441a      	add	r2, r3
 8000384:	4b28      	ldr	r3, [pc, #160]	; (8000428 <ESP01_Send+0x144>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	1c59      	adds	r1, r3, #1
 800038a:	b288      	uxth	r0, r1
 800038c:	4926      	ldr	r1, [pc, #152]	; (8000428 <ESP01_Send+0x144>)
 800038e:	8008      	strh	r0, [r1, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	4b25      	ldr	r3, [pc, #148]	; (800042c <ESP01_Send+0x148>)
 8000396:	545a      	strb	r2, [r3, r1]
			if(esp01iwTX == ESP01TXBUFAT)
 8000398:	4b23      	ldr	r3, [pc, #140]	; (8000428 <ESP01_Send+0x144>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003a0:	d102      	bne.n	80003a8 <ESP01_Send+0xc4>
				esp01iwTX = 0;
 80003a2:	4b21      	ldr	r3, [pc, #132]	; (8000428 <ESP01_Send+0x144>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	801a      	strh	r2, [r3, #0]
			if(irRingBuf == sizeRingBuf)
 80003a8:	897a      	ldrh	r2, [r7, #10]
 80003aa:	88fb      	ldrh	r3, [r7, #6]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d101      	bne.n	80003b4 <ESP01_Send+0xd0>
				irRingBuf = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	817b      	strh	r3, [r7, #10]
		for(uint16_t i=0; i<length; i++){
 80003b4:	8bfb      	ldrh	r3, [r7, #30]
 80003b6:	3301      	adds	r3, #1
 80003b8:	83fb      	strh	r3, [r7, #30]
 80003ba:	8bfa      	ldrh	r2, [r7, #30]
 80003bc:	893b      	ldrh	r3, [r7, #8]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3da      	bcc.n	8000378 <ESP01_Send+0x94>
		}

		esp01Flags.bit.TXCIPSEND = 1;
 80003c2:	4a16      	ldr	r2, [pc, #88]	; (800041c <ESP01_Send+0x138>)
 80003c4:	7813      	ldrb	r3, [r2, #0]
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <ESP01_Send+0x138>)
 80003ce:	7813      	ldrb	r3, [r2, #0]
 80003d0:	f043 0308 	orr.w	r3, r3, #8
 80003d4:	7013      	strb	r3, [r2, #0]

		if(ESP01DbgStr != NULL){
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <ESP01_Send+0x14c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d00d      	beq.n	80003fa <ESP01_Send+0x116>
			ESP01DbgStr("+&DBGSENDING DATA ");
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <ESP01_Send+0x14c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <ESP01_Send+0x150>)
 80003e4:	4798      	blx	r3
			ESP01DbgStr(strInt);
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <ESP01_Send+0x14c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f107 0210 	add.w	r2, r7, #16
 80003ee:	4610      	mov	r0, r2
 80003f0:	4798      	blx	r3
			ESP01DbgStr("\n");
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <ESP01_Send+0x14c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <ESP01_Send+0x154>)
 80003f8:	4798      	blx	r3
		}


		return ESP01_SEND_READY;
 80003fa:	2309      	movs	r3, #9
 80003fc:	e008      	b.n	8000410 <ESP01_Send+0x12c>
	}

	if(ESP01DbgStr != NULL)
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <ESP01_Send+0x14c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d003      	beq.n	800040e <ESP01_Send+0x12a>
		ESP01DbgStr("+&DBGSENDING DATA BUSY\n");
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <ESP01_Send+0x14c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <ESP01_Send+0x158>)
 800040c:	4798      	blx	r3

	return ESP01_SEND_BUSY;
 800040e:	2308      	movs	r3, #8
}
 8000410:	4618      	mov	r0, r3
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200003ec 	.word	0x200003ec
 800041c:	200001b4 	.word	0x200001b4
 8000420:	0800d930 	.word	0x0800d930
 8000424:	0800d70c 	.word	0x0800d70c
 8000428:	200003e6 	.word	0x200003e6
 800042c:	200002e0 	.word	0x200002e0
 8000430:	200001c8 	.word	0x200001c8
 8000434:	0800d710 	.word	0x0800d710
 8000438:	0800d724 	.word	0x0800d724
 800043c:	0800d728 	.word	0x0800d728

08000440 <ESP01_Init>:


void ESP01_Init(_sESP01Handle *hESP01){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8000448:	220c      	movs	r2, #12
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	4810      	ldr	r0, [pc, #64]	; (8000490 <ESP01_Init+0x50>)
 800044e:	f00d f943 	bl	800d6d8 <memcpy>

	esp01ATSate = ESP01ATIDLE;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <ESP01_Init+0x54>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <ESP01_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <ESP01_Init+0x5c>)
 8000460:	2200      	movs	r2, #0
 8000462:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <ESP01_Init+0x60>)
 8000466:	2200      	movs	r2, #0
 8000468:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <ESP01_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <ESP01_Init+0x68>)
 8000472:	2200      	movs	r2, #0
 8000474:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <ESP01_Init+0x6c>)
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <ESP01_Init+0x70>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <ESP01_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200003ec 	.word	0x200003ec
 8000494:	200001b0 	.word	0x200001b0
 8000498:	2000025a 	.word	0x2000025a
 800049c:	200003e4 	.word	0x200003e4
 80004a0:	200003e6 	.word	0x200003e6
 80004a4:	200003e2 	.word	0x200003e2
 80004a8:	200003e0 	.word	0x200003e0
 80004ac:	200001b4 	.word	0x200001b4
 80004b0:	200001c4 	.word	0x200001c4
 80004b4:	200001c8 	.word	0x200001c8

080004b8 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <ESP01_Timeout10ms+0x50>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d004      	beq.n	80004ce <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <ESP01_Timeout10ms+0x50>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <ESP01_Timeout10ms+0x50>)
 80004cc:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d00b      	beq.n	80004ee <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3b01      	subs	r3, #1
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004de:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <ESP01_Timeout10ms+0x54>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d102      	bne.n	80004ee <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <ESP01_Timeout10ms+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <ESP01_Timeout10ms+0x5c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d004      	beq.n	8000500 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <ESP01_Timeout10ms+0x5c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <ESP01_Timeout10ms+0x5c>)
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	200001b8 	.word	0x200001b8
 800050c:	200001bc 	.word	0x200001bc
 8000510:	2000025a 	.word	0x2000025a
 8000514:	200001c0 	.word	0x200001c0

08000518 <ESP01_Task>:

void ESP01_Task(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

	if(esp01irRXAT != esp01iwRXAT)
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <ESP01_Task+0x28>)
 800051e:	881a      	ldrh	r2, [r3, #0]
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <ESP01_Task+0x2c>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	429a      	cmp	r2, r3
 8000526:	d001      	beq.n	800052c <ESP01_Task+0x14>
		ESP01ATDecode();
 8000528:	f000 f81e 	bl	8000568 <ESP01ATDecode>

	if(!esp01TimeoutTask)
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <ESP01_Task+0x30>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d101      	bne.n	8000538 <ESP01_Task+0x20>
		ESP01DOConnection();
 8000534:	f000 fbd0 	bl	8000cd8 <ESP01DOConnection>

	ESP01SENDData();
 8000538:	f000 fdd8 	bl	80010ec <ESP01SENDData>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200003e2 	.word	0x200003e2
 8000544:	200003e0 	.word	0x200003e0
 8000548:	200001b8 	.word	0x200001b8

0800054c <ESP01_AttachChangeState>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	ESP01ChangeState = aESP01ChangeState;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <ESP01_AttachChangeState+0x18>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	200001c4 	.word	0x200001c4

08000568 <ESP01ATDecode>:




/* Private Functions */
static void ESP01ATDecode(){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;

	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 800056e:	4b7f      	ldr	r3, [pc, #508]	; (800076c <ESP01ATDecode+0x204>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b0d      	cmp	r3, #13
 8000574:	d007      	beq.n	8000586 <ESP01ATDecode+0x1e>
 8000576:	4b7d      	ldr	r3, [pc, #500]	; (800076c <ESP01ATDecode+0x204>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b0e      	cmp	r3, #14
 800057c:	d003      	beq.n	8000586 <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 800057e:	4b7b      	ldr	r3, [pc, #492]	; (800076c <ESP01ATDecode+0x204>)
 8000580:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8000582:	2b0f      	cmp	r3, #15
 8000584:	d104      	bne.n	8000590 <ESP01ATDecode+0x28>
		esp01irRXAT = esp01iwRXAT;
 8000586:	4b7a      	ldr	r3, [pc, #488]	; (8000770 <ESP01ATDecode+0x208>)
 8000588:	881a      	ldrh	r2, [r3, #0]
 800058a:	4b7a      	ldr	r3, [pc, #488]	; (8000774 <ESP01ATDecode+0x20c>)
 800058c:	801a      	strh	r2, [r3, #0]
		return;
 800058e:	e383      	b.n	8000c98 <ESP01ATDecode+0x730>
	}


	i = esp01iwRXAT;
 8000590:	4b77      	ldr	r3, [pc, #476]	; (8000770 <ESP01ATDecode+0x208>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 8000596:	4b78      	ldr	r3, [pc, #480]	; (8000778 <ESP01ATDecode+0x210>)
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 800059c:	e376      	b.n	8000c8c <ESP01ATDecode+0x724>
		value = esp01RXATBuf[esp01irRXAT];
 800059e:	4b75      	ldr	r3, [pc, #468]	; (8000774 <ESP01ATDecode+0x20c>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b75      	ldr	r3, [pc, #468]	; (800077c <ESP01ATDecode+0x214>)
 80005a6:	5c9b      	ldrb	r3, [r3, r2]
 80005a8:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 80005aa:	4b75      	ldr	r3, [pc, #468]	; (8000780 <ESP01ATDecode+0x218>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b0c      	cmp	r3, #12
 80005b0:	f200 834d 	bhi.w	8000c4e <ESP01ATDecode+0x6e6>
 80005b4:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <ESP01ATDecode+0x54>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	080006e3 	.word	0x080006e3
 80005c4:	080008c7 	.word	0x080008c7
 80005c8:	08000c4f 	.word	0x08000c4f
 80005cc:	08000c4f 	.word	0x08000c4f
 80005d0:	08000abf 	.word	0x08000abf
 80005d4:	08000b05 	.word	0x08000b05
 80005d8:	08000b1b 	.word	0x08000b1b
 80005dc:	08000b47 	.word	0x08000b47
 80005e0:	08000c4f 	.word	0x08000c4f
 80005e4:	08000b93 	.word	0x08000b93
 80005e8:	08000bbb 	.word	0x08000bbb
 80005ec:	08000c11 	.word	0x08000c11
		case 0:
            indexResponse = 0;
 80005f0:	4b64      	ldr	r3, [pc, #400]	; (8000784 <ESP01ATDecode+0x21c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 80005f6:	4b64      	ldr	r3, [pc, #400]	; (8000788 <ESP01ATDecode+0x220>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 80005fc:	e03f      	b.n	800067e <ESP01ATDecode+0x116>
                if(value == responses[indexResponse][indexResponseChar]){
 80005fe:	4b61      	ldr	r3, [pc, #388]	; (8000784 <ESP01ATDecode+0x21c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	4b61      	ldr	r3, [pc, #388]	; (800078c <ESP01ATDecode+0x224>)
 8000606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800060a:	4a5f      	ldr	r2, [pc, #380]	; (8000788 <ESP01ATDecode+0x220>)
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	797a      	ldrb	r2, [r7, #5]
 8000614:	429a      	cmp	r2, r3
 8000616:	d12c      	bne.n	8000672 <ESP01ATDecode+0x10a>
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8000618:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <ESP01ATDecode+0x21c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b5b      	ldr	r3, [pc, #364]	; (800078c <ESP01ATDecode+0x224>)
 8000620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b30      	subs	r3, #48	; 0x30
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b58      	ldr	r3, [pc, #352]	; (8000790 <ESP01ATDecode+0x228>)
 800062e:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8000630:	4b57      	ldr	r3, [pc, #348]	; (8000790 <ESP01ATDecode+0x228>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	0092      	lsls	r2, r2, #2
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b54      	ldr	r3, [pc, #336]	; (8000790 <ESP01ATDecode+0x228>)
 8000640:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8000642:	4b50      	ldr	r3, [pc, #320]	; (8000784 <ESP01ATDecode+0x21c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b50      	ldr	r3, [pc, #320]	; (800078c <ESP01ATDecode+0x224>)
 800064a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <ESP01ATDecode+0x228>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	3b30      	subs	r3, #48	; 0x30
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <ESP01ATDecode+0x228>)
 8000662:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 8000664:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <ESP01ATDecode+0x228>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	3b01      	subs	r3, #1
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b48      	ldr	r3, [pc, #288]	; (8000790 <ESP01ATDecode+0x228>)
 800066e:	801a      	strh	r2, [r3, #0]
                    break;
 8000670:	e00d      	b.n	800068e <ESP01ATDecode+0x126>
                }
                indexResponse++;
 8000672:	4b44      	ldr	r3, [pc, #272]	; (8000784 <ESP01ATDecode+0x21c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b42      	ldr	r3, [pc, #264]	; (8000784 <ESP01ATDecode+0x21c>)
 800067c:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 800067e:	4b41      	ldr	r3, [pc, #260]	; (8000784 <ESP01ATDecode+0x21c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4b41      	ldr	r3, [pc, #260]	; (800078c <ESP01ATDecode+0x224>)
 8000686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1b7      	bne.n	80005fe <ESP01ATDecode+0x96>
            }
            if(responses[indexResponse] != NULL){
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <ESP01ATDecode+0x21c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b3d      	ldr	r3, [pc, #244]	; (800078c <ESP01ATDecode+0x224>)
 8000696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d009      	beq.n	80006b2 <ESP01ATDecode+0x14a>
                esp01HState = 1;
 800069e:	4b38      	ldr	r3, [pc, #224]	; (8000780 <ESP01ATDecode+0x218>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 80006a4:	4b38      	ldr	r3, [pc, #224]	; (8000788 <ESP01ATDecode+0x220>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <ESP01ATDecode+0x220>)
 80006ae:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 80006b0:	e2d4      	b.n	8000c5c <ESP01ATDecode+0x6f4>
				esp01TimeoutDataRx = 0;
 80006b2:	4b31      	ldr	r3, [pc, #196]	; (8000778 <ESP01ATDecode+0x210>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <ESP01ATDecode+0x22c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 82ca 	beq.w	8000c5c <ESP01ATDecode+0x6f4>
					if(value == '>'){
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	2b3e      	cmp	r3, #62	; 0x3e
 80006cc:	f040 82c6 	bne.w	8000c5c <ESP01ATDecode+0x6f4>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 80006d0:	4a30      	ldr	r2, [pc, #192]	; (8000794 <ESP01ATDecode+0x22c>)
 80006d2:	7813      	ldrb	r3, [r2, #0]
 80006d4:	f36f 0300 	bfc	r3, #0, #1
 80006d8:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <ESP01ATDecode+0x230>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			break;
 80006e0:	e2bc      	b.n	8000c5c <ESP01ATDecode+0x6f4>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <ESP01ATDecode+0x21c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <ESP01ATDecode+0x224>)
 80006ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <ESP01ATDecode+0x220>)
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	797a      	ldrb	r2, [r7, #5]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d133      	bne.n	8000764 <ESP01ATDecode+0x1fc>
                esp01nBytes--;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <ESP01ATDecode+0x228>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3b01      	subs	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <ESP01ATDecode+0x228>)
 8000706:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <ESP01ATDecode+0x228>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <ESP01ATDecode+0x1b0>
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	2b0d      	cmp	r3, #13
 8000714:	f040 80d0 	bne.w	80008b8 <ESP01ATDecode+0x350>
                    esp01HState = (responses[indexResponse][2] - '0');
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <ESP01ATDecode+0x21c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <ESP01ATDecode+0x224>)
 8000720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000724:	3302      	adds	r3, #2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3b30      	subs	r3, #48	; 0x30
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <ESP01ATDecode+0x218>)
 800072e:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <ESP01ATDecode+0x218>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	4413      	add	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <ESP01ATDecode+0x218>)
 8000740:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <ESP01ATDecode+0x21c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <ESP01ATDecode+0x224>)
 800074a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800074e:	3303      	adds	r3, #3
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <ESP01ATDecode+0x218>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	3b30      	subs	r3, #48	; 0x30
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <ESP01ATDecode+0x218>)
 8000760:	701a      	strb	r2, [r3, #0]
                    break;
 8000762:	e286      	b.n	8000c72 <ESP01ATDecode+0x70a>
                }
            }
            else{
                indexResponse = 0;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <ESP01ATDecode+0x21c>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 800076a:	e089      	b.n	8000880 <ESP01ATDecode+0x318>
 800076c:	200001b0 	.word	0x200001b0
 8000770:	200003e0 	.word	0x200003e0
 8000774:	200003e2 	.word	0x200003e2
 8000778:	200001bc 	.word	0x200001bc
 800077c:	20000260 	.word	0x20000260
 8000780:	2000025a 	.word	0x2000025a
 8000784:	200003f8 	.word	0x200003f8
 8000788:	200003f9 	.word	0x200003f9
 800078c:	0800da54 	.word	0x0800da54
 8000790:	2000025c 	.word	0x2000025c
 8000794:	200001b4 	.word	0x200001b4
 8000798:	200001c0 	.word	0x200001c0
                    esp01nBytes = (responses[indexResponse][0] - '0');
 800079c:	4ba5      	ldr	r3, [pc, #660]	; (8000a34 <ESP01ATDecode+0x4cc>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4ba5      	ldr	r3, [pc, #660]	; (8000a38 <ESP01ATDecode+0x4d0>)
 80007a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	3b30      	subs	r3, #48	; 0x30
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4ba2      	ldr	r3, [pc, #648]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007b2:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 80007b4:	4ba1      	ldr	r3, [pc, #644]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	4413      	add	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b9e      	ldr	r3, [pc, #632]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007c4:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 80007c6:	4b9b      	ldr	r3, [pc, #620]	; (8000a34 <ESP01ATDecode+0x4cc>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b9a      	ldr	r3, [pc, #616]	; (8000a38 <ESP01ATDecode+0x4d0>)
 80007ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d2:	3301      	adds	r3, #1
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b98      	ldr	r3, [pc, #608]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	3b30      	subs	r3, #48	; 0x30
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b95      	ldr	r3, [pc, #596]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007e6:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 80007e8:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007ea:	881a      	ldrh	r2, [r3, #0]
 80007ec:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <ESP01ATDecode+0x4d8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	3303      	adds	r3, #3
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b90      	ldr	r3, [pc, #576]	; (8000a3c <ESP01ATDecode+0x4d4>)
 80007fc:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 80007fe:	4b8f      	ldr	r3, [pc, #572]	; (8000a3c <ESP01ATDecode+0x4d4>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	2b7f      	cmp	r3, #127	; 0x7f
 8000804:	d836      	bhi.n	8000874 <ESP01ATDecode+0x30c>
 8000806:	4b8b      	ldr	r3, [pc, #556]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	4b8a      	ldr	r3, [pc, #552]	; (8000a38 <ESP01ATDecode+0x4d0>)
 800080e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000812:	4a8b      	ldr	r2, [pc, #556]	; (8000a40 <ESP01ATDecode+0x4d8>)
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	797a      	ldrb	r2, [r7, #5]
 800081c:	429a      	cmp	r2, r3
 800081e:	d129      	bne.n	8000874 <ESP01ATDecode+0x30c>
                        if(esp01nBytes == 0){
 8000820:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <ESP01ATDecode+0x4d4>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d134      	bne.n	8000892 <ESP01ATDecode+0x32a>
                            esp01HState = (responses[indexResponse][2] - '0');
 8000828:	4b82      	ldr	r3, [pc, #520]	; (8000a34 <ESP01ATDecode+0x4cc>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b82      	ldr	r3, [pc, #520]	; (8000a38 <ESP01ATDecode+0x4d0>)
 8000830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000834:	3302      	adds	r3, #2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3b30      	subs	r3, #48	; 0x30
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b81      	ldr	r3, [pc, #516]	; (8000a44 <ESP01ATDecode+0x4dc>)
 800083e:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8000840:	4b80      	ldr	r3, [pc, #512]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	4413      	add	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b7d      	ldr	r3, [pc, #500]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000850:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8000852:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b77      	ldr	r3, [pc, #476]	; (8000a38 <ESP01ATDecode+0x4d0>)
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	3303      	adds	r3, #3
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b78      	ldr	r3, [pc, #480]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3b30      	subs	r3, #48	; 0x30
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b75      	ldr	r3, [pc, #468]	; (8000a44 <ESP01ATDecode+0x4dc>)
 8000870:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8000872:	e00e      	b.n	8000892 <ESP01ATDecode+0x32a>
                    }
                    indexResponse++;
 8000874:	4b6f      	ldr	r3, [pc, #444]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <ESP01ATDecode+0x4cc>)
 800087e:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8000880:	4b6c      	ldr	r3, [pc, #432]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b6c      	ldr	r3, [pc, #432]	; (8000a38 <ESP01ATDecode+0x4d0>)
 8000888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d185      	bne.n	800079c <ESP01ATDecode+0x234>
 8000890:	e000      	b.n	8000894 <ESP01ATDecode+0x32c>
                        break;
 8000892:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 8000894:	4b67      	ldr	r3, [pc, #412]	; (8000a34 <ESP01ATDecode+0x4cc>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b67      	ldr	r3, [pc, #412]	; (8000a38 <ESP01ATDecode+0x4d0>)
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <ESP01ATDecode+0x350>
                    esp01HState = 0;
 80008a4:	4b67      	ldr	r3, [pc, #412]	; (8000a44 <ESP01ATDecode+0x4dc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 80008aa:	4b67      	ldr	r3, [pc, #412]	; (8000a48 <ESP01ATDecode+0x4e0>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <ESP01ATDecode+0x4e0>)
 80008b4:	801a      	strh	r2, [r3, #0]
                    break;
 80008b6:	e1dc      	b.n	8000c72 <ESP01ATDecode+0x70a>
                }
            }
			indexResponseChar++;
 80008b8:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <ESP01ATDecode+0x4d8>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b5f      	ldr	r3, [pc, #380]	; (8000a40 <ESP01ATDecode+0x4d8>)
 80008c2:	701a      	strb	r2, [r3, #0]
			break;
 80008c4:	e1d5      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 2:
			if(value == '\n'){
 80008c6:	797b      	ldrb	r3, [r7, #5]
 80008c8:	2b0a      	cmp	r3, #10
 80008ca:	f040 81c9 	bne.w	8000c60 <ESP01ATDecode+0x6f8>
				esp01HState = 0;
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <ESP01ATDecode+0x4dc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 80008d4:	4b57      	ldr	r3, [pc, #348]	; (8000a34 <ESP01ATDecode+0x4cc>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b11      	cmp	r3, #17
 80008da:	f200 81c1 	bhi.w	8000c60 <ESP01ATDecode+0x6f8>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <ESP01ATDecode+0x37c>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	08000aa3 	.word	0x08000aa3
 80008e8:	08000aa3 	.word	0x08000aa3
 80008ec:	0800092d 	.word	0x0800092d
 80008f0:	08000949 	.word	0x08000949
 80008f4:	08000977 	.word	0x08000977
 80008f8:	08000aa3 	.word	0x08000aa3
 80008fc:	080009ad 	.word	0x080009ad
 8000900:	080009ad 	.word	0x080009ad
 8000904:	080009e1 	.word	0x080009e1
 8000908:	080009ed 	.word	0x080009ed
 800090c:	08000a09 	.word	0x08000a09
 8000910:	08000a65 	.word	0x08000a65
 8000914:	08000c61 	.word	0x08000c61
 8000918:	08000a71 	.word	0x08000a71
 800091c:	08000c61 	.word	0x08000c61
 8000920:	08000a87 	.word	0x08000a87
 8000924:	08000aa3 	.word	0x08000aa3
 8000928:	08000aa3 	.word	0x08000aa3
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 800092c:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <ESP01ATDecode+0x4e4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b02      	cmp	r3, #2
 8000932:	f040 80b8 	bne.w	8000aa6 <ESP01ATDecode+0x53e>
						esp01TimeoutTask = 0;
 8000936:	4b46      	ldr	r3, [pc, #280]	; (8000a50 <ESP01ATDecode+0x4e8>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 800093c:	4a45      	ldr	r2, [pc, #276]	; (8000a54 <ESP01ATDecode+0x4ec>)
 800093e:	7813      	ldrb	r3, [r2, #0]
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	7013      	strb	r3, [r2, #0]
					}
					break;
 8000946:	e0ae      	b.n	8000aa6 <ESP01ATDecode+0x53e>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8000948:	4b42      	ldr	r3, [pc, #264]	; (8000a54 <ESP01ATDecode+0x4ec>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 80a9 	beq.w	8000aaa <ESP01ATDecode+0x542>
						esp01Flags.bit.SENDINGDATA = 0;
 8000958:	4a3e      	ldr	r2, [pc, #248]	; (8000a54 <ESP01ATDecode+0x4ec>)
 800095a:	7813      	ldrb	r3, [r2, #0]
 800095c:	f36f 03c3 	bfc	r3, #3, #1
 8000960:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000962:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000964:	7813      	ldrb	r3, [r2, #0]
 8000966:	f36f 1386 	bfc	r3, #6, #1
 800096a:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 800096c:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <ESP01ATDecode+0x4f0>)
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <ESP01ATDecode+0x4f4>)
 8000972:	801a      	strh	r2, [r3, #0]
					}
					break;
 8000974:	e099      	b.n	8000aaa <ESP01ATDecode+0x542>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <ESP01ATDecode+0x4e8>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <ESP01ATDecode+0x4e4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b06      	cmp	r3, #6
 8000982:	d104      	bne.n	800098e <ESP01ATDecode+0x426>
						esp01Flags.bit.ATRESPONSEOK = 1;
 8000984:	4a33      	ldr	r2, [pc, #204]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000986:	7813      	ldrb	r3, [r2, #0]
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 800098e:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000990:	7813      	ldrb	r3, [r2, #0]
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <ESP01ATDecode+0x4f8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 8086 	beq.w	8000aae <ESP01ATDecode+0x546>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2003      	movs	r0, #3
 80009a8:	4798      	blx	r3
					break;
 80009aa:	e080      	b.n	8000aae <ESP01ATDecode+0x546>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80009ac:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009ae:	7813      	ldrb	r3, [r2, #0]
 80009b0:	f36f 1386 	bfc	r3, #6, #1
 80009b4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80009b6:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009b8:	7813      	ldrb	r3, [r2, #0]
 80009ba:	f36f 0341 	bfc	r3, #1, #1
 80009be:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <ESP01ATDecode+0x468>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2000      	movs	r0, #0
 80009ce:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <ESP01ATDecode+0x4e4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d06c      	beq.n	8000ab2 <ESP01ATDecode+0x54a>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <ESP01ATDecode+0x4e4>)
 80009da:	220f      	movs	r2, #15
 80009dc:	701a      	strb	r2, [r3, #0]
					break;
 80009de:	e06d      	b.n	8000abc <ESP01ATDecode+0x554>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009e2:	7813      	ldrb	r3, [r2, #0]
 80009e4:	f36f 1386 	bfc	r3, #6, #1
 80009e8:	7013      	strb	r3, [r2, #0]
					break;
 80009ea:	e067      	b.n	8000abc <ESP01ATDecode+0x554>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <ESP01ATDecode+0x4ec>)
 80009ee:	7813      	ldrb	r3, [r2, #0]
 80009f0:	f36f 03c3 	bfc	r3, #3, #1
 80009f4:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <ESP01ATDecode+0x4f8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d05b      	beq.n	8000ab6 <ESP01ATDecode+0x54e>
						ESP01ChangeState(ESP01_SEND_OK);
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <ESP01ATDecode+0x4f8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	200a      	movs	r0, #10
 8000a04:	4798      	blx	r3
					break;
 8000a06:	e056      	b.n	8000ab6 <ESP01ATDecode+0x54e>
				case 10://CONNECT
					esp01TimeoutTask = 0;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <ESP01ATDecode+0x4e8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000a10:	7813      	ldrb	r3, [r2, #0]
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <ESP01ATDecode+0x4ec>)
 8000a1a:	7813      	ldrb	r3, [r2, #0]
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <ESP01ATDecode+0x4f8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d047      	beq.n	8000aba <ESP01ATDecode+0x552>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <ESP01ATDecode+0x4f8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2007      	movs	r0, #7
 8000a30:	4798      	blx	r3
					break;
 8000a32:	e042      	b.n	8000aba <ESP01ATDecode+0x552>
 8000a34:	200003f8 	.word	0x200003f8
 8000a38:	0800da54 	.word	0x0800da54
 8000a3c:	2000025c 	.word	0x2000025c
 8000a40:	200003f9 	.word	0x200003f9
 8000a44:	2000025a 	.word	0x2000025a
 8000a48:	200003e2 	.word	0x200003e2
 8000a4c:	200001b0 	.word	0x200001b0
 8000a50:	200001b8 	.word	0x200001b8
 8000a54:	200001b4 	.word	0x200001b4
 8000a58:	200003e6 	.word	0x200003e6
 8000a5c:	200003e4 	.word	0x200003e4
 8000a60:	200001c4 	.word	0x200001c4
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000a64:	4a8e      	ldr	r2, [pc, #568]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a66:	7813      	ldrb	r3, [r2, #0]
 8000a68:	f36f 1386 	bfc	r3, #6, #1
 8000a6c:	7013      	strb	r3, [r2, #0]
					break;
 8000a6e:	e025      	b.n	8000abc <ESP01ATDecode+0x554>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000a70:	4a8b      	ldr	r2, [pc, #556]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a72:	7813      	ldrb	r3, [r2, #0]
 8000a74:	f36f 1386 	bfc	r3, #6, #1
 8000a78:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8000a7a:	4a89      	ldr	r2, [pc, #548]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a7c:	7813      	ldrb	r3, [r2, #0]
 8000a7e:	f36f 0341 	bfc	r3, #1, #1
 8000a82:	7013      	strb	r3, [r2, #0]
					break;
 8000a84:	e01a      	b.n	8000abc <ESP01ATDecode+0x554>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8000a86:	4a86      	ldr	r2, [pc, #536]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a88:	7813      	ldrb	r3, [r2, #0]
 8000a8a:	f36f 1386 	bfc	r3, #6, #1
 8000a8e:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8000a90:	4a83      	ldr	r2, [pc, #524]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000a92:	7813      	ldrb	r3, [r2, #0]
 8000a94:	f36f 0341 	bfc	r3, #1, #1
 8000a98:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8000a9a:	4b82      	ldr	r3, [pc, #520]	; (8000ca4 <ESP01ATDecode+0x73c>)
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	701a      	strb	r2, [r3, #0]
					break;
 8000aa0:	e00c      	b.n	8000abc <ESP01ATDecode+0x554>
					break;
 8000aa2:	bf00      	nop
 8000aa4:	e0dc      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aa6:	bf00      	nop
 8000aa8:	e0da      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aaa:	bf00      	nop
 8000aac:	e0d8      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aae:	bf00      	nop
 8000ab0:	e0d6      	b.n	8000c60 <ESP01ATDecode+0x6f8>
						break;
 8000ab2:	bf00      	nop
 8000ab4:	e0d4      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000ab6:	bf00      	nop
 8000ab8:	e0d2      	b.n	8000c60 <ESP01ATDecode+0x6f8>
					break;
 8000aba:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 8000abc:	e0d0      	b.n	8000c60 <ESP01ATDecode+0x6f8>
		case 5://CIFR,STAIP
			if(value == ','){
 8000abe:	797b      	ldrb	r3, [r7, #5]
 8000ac0:	2b2c      	cmp	r3, #44	; 0x2c
 8000ac2:	d10c      	bne.n	8000ade <ESP01ATDecode+0x576>
				esp01HState = 6;
 8000ac4:	4b78      	ldr	r3, [pc, #480]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000ac6:	2206      	movs	r2, #6
 8000ac8:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8000aca:	4b78      	ldr	r3, [pc, #480]	; (8000cac <ESP01ATDecode+0x744>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 80c8 	beq.w	8000c64 <ESP01ATDecode+0x6fc>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 8000ad4:	4b75      	ldr	r3, [pc, #468]	; (8000cac <ESP01ATDecode+0x744>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4875      	ldr	r0, [pc, #468]	; (8000cb0 <ESP01ATDecode+0x748>)
 8000ada:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 8000adc:	e0c2      	b.n	8000c64 <ESP01ATDecode+0x6fc>
				esp01HState = 0;
 8000ade:	4b72      	ldr	r3, [pc, #456]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8000ae4:	4b73      	ldr	r3, [pc, #460]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b71      	ldr	r3, [pc, #452]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000aee:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8000af0:	4b6e      	ldr	r3, [pc, #440]	; (8000cac <ESP01ATDecode+0x744>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 80b5 	beq.w	8000c64 <ESP01ATDecode+0x6fc>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 8000afa:	4b6c      	ldr	r3, [pc, #432]	; (8000cac <ESP01ATDecode+0x744>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	486e      	ldr	r0, [pc, #440]	; (8000cb8 <ESP01ATDecode+0x750>)
 8000b00:	4798      	blx	r3
			break;
 8000b02:	e0af      	b.n	8000c64 <ESP01ATDecode+0x6fc>
		case 6:
			if(value == '\"'){
 8000b04:	797b      	ldrb	r3, [r7, #5]
 8000b06:	2b22      	cmp	r3, #34	; 0x22
 8000b08:	f040 80ae 	bne.w	8000c68 <ESP01ATDecode+0x700>
				esp01HState = 7;
 8000b0c:	4b66      	ldr	r3, [pc, #408]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b0e:	2207      	movs	r2, #7
 8000b10:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8000b12:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
			}
			break;
 8000b18:	e0a6      	b.n	8000c68 <ESP01ATDecode+0x700>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 8000b1a:	797b      	ldrb	r3, [r7, #5]
 8000b1c:	2b22      	cmp	r3, #34	; 0x22
 8000b1e:	d003      	beq.n	8000b28 <ESP01ATDecode+0x5c0>
 8000b20:	4b66      	ldr	r3, [pc, #408]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2b10      	cmp	r3, #16
 8000b26:	d103      	bne.n	8000b30 <ESP01ATDecode+0x5c8>
				esp01HState = 8;
 8000b28:	4b5f      	ldr	r3, [pc, #380]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 8000b2e:	e0a0      	b.n	8000c72 <ESP01ATDecode+0x70a>
				esp01LocalIP[esp01nBytes++] = value;
 8000b30:	4b62      	ldr	r3, [pc, #392]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	b291      	uxth	r1, r2
 8000b38:	4a60      	ldr	r2, [pc, #384]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b3a:	8011      	strh	r1, [r2, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4a60      	ldr	r2, [pc, #384]	; (8000cc0 <ESP01ATDecode+0x758>)
 8000b40:	797b      	ldrb	r3, [r7, #5]
 8000b42:	5453      	strb	r3, [r2, r1]
			break;
 8000b44:	e095      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 8:
			if(value == '\n'){
 8000b46:	797b      	ldrb	r3, [r7, #5]
 8000b48:	2b0a      	cmp	r3, #10
 8000b4a:	f040 808f 	bne.w	8000c6c <ESP01ATDecode+0x704>
				esp01HState = 0;
 8000b4e:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 8000b54:	4b59      	ldr	r3, [pc, #356]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80e      	bhi.n	8000b7a <ESP01ATDecode+0x612>
					esp01LocalIP[esp01nBytes] = '\0';
 8000b5c:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <ESP01ATDecode+0x754>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <ESP01ATDecode+0x758>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8000b68:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <ESP01ATDecode+0x738>)
 8000b6a:	7813      	ldrb	r3, [r2, #0]
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 8000b72:	4b54      	ldr	r3, [pc, #336]	; (8000cc4 <ESP01ATDecode+0x75c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	e002      	b.n	8000b80 <ESP01ATDecode+0x618>
				}
				else
					esp01LocalIP[0] = '\0';
 8000b7a:	4b51      	ldr	r3, [pc, #324]	; (8000cc0 <ESP01ATDecode+0x758>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 8000b80:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <ESP01ATDecode+0x760>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d071      	beq.n	8000c6c <ESP01ATDecode+0x704>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 8000b88:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <ESP01ATDecode+0x760>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	4798      	blx	r3
			}
			break;
 8000b90:	e06c      	b.n	8000c6c <ESP01ATDecode+0x704>
		case 10://IPD
			if(value == ','){
 8000b92:	797b      	ldrb	r3, [r7, #5]
 8000b94:	2b2c      	cmp	r3, #44	; 0x2c
 8000b96:	d106      	bne.n	8000ba6 <ESP01ATDecode+0x63e>
				esp01HState = 11;
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000b9a:	220b      	movs	r2, #11
 8000b9c:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8000b9e:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <ESP01ATDecode+0x754>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 8000ba4:	e065      	b.n	8000c72 <ESP01ATDecode+0x70a>
				esp01HState = 0;
 8000ba6:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8000bac:	4b41      	ldr	r3, [pc, #260]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000bb6:	801a      	strh	r2, [r3, #0]
			break;
 8000bb8:	e05b      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 11:
			if(value == ':')
 8000bba:	797b      	ldrb	r3, [r7, #5]
 8000bbc:	2b3a      	cmp	r3, #58	; 0x3a
 8000bbe:	d103      	bne.n	8000bc8 <ESP01ATDecode+0x660>
				esp01HState = 12;
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 8000bc6:	e054      	b.n	8000c72 <ESP01ATDecode+0x70a>
				if(value<'0' || value>'9'){
 8000bc8:	797b      	ldrb	r3, [r7, #5]
 8000bca:	2b2f      	cmp	r3, #47	; 0x2f
 8000bcc:	d902      	bls.n	8000bd4 <ESP01ATDecode+0x66c>
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	2b39      	cmp	r3, #57	; 0x39
 8000bd2:	d909      	bls.n	8000be8 <ESP01ATDecode+0x680>
					esp01HState = 0;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000be4:	801a      	strh	r2, [r3, #0]
			break;
 8000be6:	e044      	b.n	8000c72 <ESP01ATDecode+0x70a>
					esp01nBytes *= 10;
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <ESP01ATDecode+0x754>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <ESP01ATDecode+0x754>)
 8000bf8:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3b30      	subs	r3, #48	; 0x30
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c0c:	801a      	strh	r2, [r3, #0]
			break;
 8000c0e:	e030      	b.n	8000c72 <ESP01ATDecode+0x70a>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <ESP01ATDecode+0x764>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d004      	beq.n	8000c22 <ESP01ATDecode+0x6ba>
				esp01Handle.WriteByteToBufRX(value);
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <ESP01ATDecode+0x764>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	797a      	ldrb	r2, [r7, #5]
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4798      	blx	r3
			esp01nBytes--;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c2c:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <ESP01ATDecode+0x754>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11c      	bne.n	8000c70 <ESP01ATDecode+0x708>
				esp01HState = 0;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <ESP01ATDecode+0x744>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d015      	beq.n	8000c70 <ESP01ATDecode+0x708>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <ESP01ATDecode+0x744>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4821      	ldr	r0, [pc, #132]	; (8000cd0 <ESP01ATDecode+0x768>)
 8000c4a:	4798      	blx	r3
			}
			break;
 8000c4c:	e010      	b.n	8000c70 <ESP01ATDecode+0x708>
		default:
			esp01HState = 0;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <ESP01ATDecode+0x740>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <ESP01ATDecode+0x76c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e00a      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c5c:	bf00      	nop
 8000c5e:	e008      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c60:	bf00      	nop
 8000c62:	e006      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c64:	bf00      	nop
 8000c66:	e004      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c68:	bf00      	nop
 8000c6a:	e002      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c6c:	bf00      	nop
 8000c6e:	e000      	b.n	8000c72 <ESP01ATDecode+0x70a>
			break;
 8000c70:	bf00      	nop
		}

		esp01irRXAT++;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c7c:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2b80      	cmp	r3, #128	; 0x80
 8000c84:	d102      	bne.n	8000c8c <ESP01ATDecode+0x724>
			esp01irRXAT = 0;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <ESP01ATDecode+0x74c>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	f47f ac83 	bne.w	800059e <ESP01ATDecode+0x36>
	}

}
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001b4 	.word	0x200001b4
 8000ca4:	200001b0 	.word	0x200001b0
 8000ca8:	2000025a 	.word	0x2000025a
 8000cac:	200001c8 	.word	0x200001c8
 8000cb0:	0800d740 	.word	0x0800d740
 8000cb4:	200003e2 	.word	0x200003e2
 8000cb8:	0800d758 	.word	0x0800d758
 8000cbc:	2000025c 	.word	0x2000025c
 8000cc0:	20000244 	.word	0x20000244
 8000cc4:	200001b8 	.word	0x200001b8
 8000cc8:	200001c4 	.word	0x200001c4
 8000ccc:	200003ec 	.word	0x200003ec
 8000cd0:	0800d76c 	.word	0x0800d76c
 8000cd4:	200001bc 	.word	0x200001bc

08000cd8 <ESP01DOConnection>:

static void ESP01DOConnection(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

	esp01TimeoutTask = 100;
 8000cdc:	4b9c      	ldr	r3, [pc, #624]	; (8000f50 <ESP01DOConnection+0x278>)
 8000cde:	2264      	movs	r2, #100	; 0x64
 8000ce0:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 8000ce2:	4b9c      	ldr	r3, [pc, #624]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	f200 81e5 	bhi.w	80010b6 <ESP01DOConnection+0x3de>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <ESP01DOConnection+0x1c>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d35 	.word	0x08000d35
 8000cf8:	08000d93 	.word	0x08000d93
 8000cfc:	08000de5 	.word	0x08000de5
 8000d00:	08000e03 	.word	0x08000e03
 8000d04:	08000e21 	.word	0x08000e21
 8000d08:	08000e3f 	.word	0x08000e3f
 8000d0c:	08000ec5 	.word	0x08000ec5
 8000d10:	08000ee9 	.word	0x08000ee9
 8000d14:	08000f17 	.word	0x08000f17
 8000d18:	08000fa5 	.word	0x08000fa5
 8000d1c:	08000fcd 	.word	0x08000fcd
 8000d20:	0800105f 	.word	0x0800105f
 8000d24:	0800107d 	.word	0x0800107d
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d5d 	.word	0x08000d5d
 8000d30:	08000d85 	.word	0x08000d85
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 8000d34:	4b86      	ldr	r3, [pc, #536]	; (8000f50 <ESP01DOConnection+0x278>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
		break;
 8000d3a:	e1bc      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8000d3c:	4b86      	ldr	r3, [pc, #536]	; (8000f58 <ESP01DOConnection+0x280>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2000      	movs	r0, #0
 8000d42:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8000d44:	4b85      	ldr	r3, [pc, #532]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <ESP01DOConnection+0x7c>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8000d4c:	4b83      	ldr	r3, [pc, #524]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4883      	ldr	r0, [pc, #524]	; (8000f60 <ESP01DOConnection+0x288>)
 8000d52:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 8000d54:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000d56:	220e      	movs	r2, #14
 8000d58:	701a      	strb	r2, [r3, #0]
		break;
 8000d5a:	e1ac      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 8000d5c:	4b7e      	ldr	r3, [pc, #504]	; (8000f58 <ESP01DOConnection+0x280>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2001      	movs	r0, #1
 8000d62:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8000d64:	4b7d      	ldr	r3, [pc, #500]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <ESP01DOConnection+0x9c>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 8000d6c:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <ESP01DOConnection+0x284>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	487c      	ldr	r0, [pc, #496]	; (8000f64 <ESP01DOConnection+0x28c>)
 8000d72:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 8000d74:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000d76:	220f      	movs	r2, #15
 8000d78:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8000d7a:	4b75      	ldr	r3, [pc, #468]	; (8000f50 <ESP01DOConnection+0x278>)
 8000d7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d80:	601a      	str	r2, [r3, #0]
		break;
 8000d82:	e198      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 8000d84:	4b73      	ldr	r3, [pc, #460]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 8000d8a:	4b77      	ldr	r3, [pc, #476]	; (8000f68 <ESP01DOConnection+0x290>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
		break;
 8000d90:	e191      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATAT:
		if(esp01TriesAT){
 8000d92:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <ESP01DOConnection+0x290>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00d      	beq.n	8000db6 <ESP01DOConnection+0xde>
			esp01TriesAT--;
 8000d9a:	4b73      	ldr	r3, [pc, #460]	; (8000f68 <ESP01DOConnection+0x290>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b71      	ldr	r3, [pc, #452]	; (8000f68 <ESP01DOConnection+0x290>)
 8000da4:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 8000da6:	4b70      	ldr	r3, [pc, #448]	; (8000f68 <ESP01DOConnection+0x290>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <ESP01DOConnection+0xe4>
				esp01ATSate = ESP01ATHARDRST0;
 8000dae:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000db0:	220d      	movs	r2, #13
 8000db2:	701a      	strb	r2, [r3, #0]
				break;
 8000db4:	e17f      	b.n	80010b6 <ESP01DOConnection+0x3de>
			}
		}
		else
			esp01TriesAT = 4;
 8000db6:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <ESP01DOConnection+0x290>)
 8000db8:	2204      	movs	r2, #4
 8000dba:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 8000dbc:	4a6b      	ldr	r2, [pc, #428]	; (8000f6c <ESP01DOConnection+0x294>)
 8000dbe:	7813      	ldrb	r3, [r2, #0]
 8000dc0:	f36f 1345 	bfc	r3, #5, #1
 8000dc4:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 8000dc6:	486a      	ldr	r0, [pc, #424]	; (8000f70 <ESP01DOConnection+0x298>)
 8000dc8:	f000 fa0c 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <ESP01DOConnection+0x284>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <ESP01DOConnection+0x104>
			ESP01DbgStr("+&DBGESP01AT\n");
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <ESP01DOConnection+0x284>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4866      	ldr	r0, [pc, #408]	; (8000f74 <ESP01DOConnection+0x29c>)
 8000dda:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	701a      	strb	r2, [r3, #0]
		break;
 8000de2:	e168      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8000de4:	4b61      	ldr	r3, [pc, #388]	; (8000f6c <ESP01DOConnection+0x294>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <ESP01DOConnection+0x122>
			esp01ATSate = ESP01ATCWMODE;
 8000df2:	4b58      	ldr	r3, [pc, #352]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8000df8:	e15d      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
		break;
 8000e00:	e159      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 8000e02:	485d      	ldr	r0, [pc, #372]	; (8000f78 <ESP01DOConnection+0x2a0>)
 8000e04:	f000 f9ee 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000e08:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <ESP01DOConnection+0x140>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4859      	ldr	r0, [pc, #356]	; (8000f7c <ESP01DOConnection+0x2a4>)
 8000e16:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8000e18:	4b4e      	ldr	r3, [pc, #312]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	701a      	strb	r2, [r3, #0]
		break;
 8000e1e:	e14a      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 8000e20:	4857      	ldr	r0, [pc, #348]	; (8000f80 <ESP01DOConnection+0x2a8>)
 8000e22:	f000 f9df 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000e26:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <ESP01DOConnection+0x15e>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4854      	ldr	r0, [pc, #336]	; (8000f84 <ESP01DOConnection+0x2ac>)
 8000e34:	4798      	blx	r3
		esp01ATSate = ESP01ATCWJAP;
 8000e36:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000e38:	2205      	movs	r2, #5
 8000e3a:	701a      	strb	r2, [r3, #0]
		break;
 8000e3c:	e13b      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <ESP01DOConnection+0x294>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIFSR;
 8000e4c:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	701a      	strb	r2, [r3, #0]
			break;
 8000e52:	e130      	b.n	80010b6 <ESP01DOConnection+0x3de>
		}
		if(esp01SSID[0] == '\0')
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <ESP01DOConnection+0x2b0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8129 	beq.w	80010b0 <ESP01DOConnection+0x3d8>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8000e5e:	484b      	ldr	r0, [pc, #300]	; (8000f8c <ESP01DOConnection+0x2b4>)
 8000e60:	f000 f9c0 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000e64:	2022      	movs	r0, #34	; 0x22
 8000e66:	f000 f9ed 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8000e6a:	4847      	ldr	r0, [pc, #284]	; (8000f88 <ESP01DOConnection+0x2b0>)
 8000e6c:	f000 f9ba 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000e70:	2022      	movs	r0, #34	; 0x22
 8000e72:	f000 f9e7 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f000 f9e4 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8000e7c:	2022      	movs	r0, #34	; 0x22
 8000e7e:	f000 f9e1 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 8000e82:	4843      	ldr	r0, [pc, #268]	; (8000f90 <ESP01DOConnection+0x2b8>)
 8000e84:	f000 f9ae 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000e88:	2022      	movs	r0, #34	; 0x22
 8000e8a:	f000 f9db 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8000e8e:	200d      	movs	r0, #13
 8000e90:	f000 f9d8 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8000e94:	200a      	movs	r0, #10
 8000e96:	f000 f9d5 	bl	8001244 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <ESP01DOConnection+0x284>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <ESP01DOConnection+0x1d2>
			ESP01DbgStr("+&DBGESP01ATCWJAP\n");
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <ESP01DOConnection+0x284>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	483b      	ldr	r0, [pc, #236]	; (8000f94 <ESP01DOConnection+0x2bc>)
 8000ea8:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8000eaa:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <ESP01DOConnection+0x294>)
 8000eac:	7813      	ldrb	r3, [r2, #0]
 8000eae:	f36f 1345 	bfc	r3, #5, #1
 8000eb2:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000eb6:	2206      	movs	r2, #6
 8000eb8:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 1500;
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <ESP01DOConnection+0x278>)
 8000ebc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ec0:	601a      	str	r2, [r3, #0]
		break;
 8000ec2:	e0f8      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <ESP01DOConnection+0x294>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <ESP01DOConnection+0x208>
			esp01ATSate = ESP01ATCIFSR;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <ESP01DOConnection+0x290>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8000ede:	e0ea      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
		break;
 8000ee6:	e0e6      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <ESP01DOConnection+0x2c0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 8000eee:	482b      	ldr	r0, [pc, #172]	; (8000f9c <ESP01DOConnection+0x2c4>)
 8000ef0:	f000 f978 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <ESP01DOConnection+0x284>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <ESP01DOConnection+0x22c>
			ESP01DbgStr("+&DBGESP01CIFSR\n");
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <ESP01DOConnection+0x284>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <ESP01DOConnection+0x2c8>)
 8000f02:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <ESP01DOConnection+0x294>)
 8000f06:	7813      	ldrb	r3, [r2, #0]
 8000f08:	f36f 1345 	bfc	r3, #5, #1
 8000f0c:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f10:	2208      	movs	r2, #8
 8000f12:	701a      	strb	r2, [r3, #0]
		break;
 8000f14:	e0cf      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <ESP01DOConnection+0x294>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <ESP01DOConnection+0x254>
			esp01ATSate = ESP01ATCIPCLOSE;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f26:	2209      	movs	r2, #9
 8000f28:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 8000f2a:	e0c4      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01TriesAT--;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <ESP01DOConnection+0x290>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <ESP01DOConnection+0x290>)
 8000f36:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <ESP01DOConnection+0x290>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d103      	bne.n	8000f48 <ESP01DOConnection+0x270>
				esp01ATSate = ESP01ATAT;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
				break;
 8000f46:	e0b6      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATCIFSR;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <ESP01DOConnection+0x27c>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	701a      	strb	r2, [r3, #0]
		break;
 8000f4e:	e0b2      	b.n	80010b6 <ESP01DOConnection+0x3de>
 8000f50:	200001b8 	.word	0x200001b8
 8000f54:	200001b0 	.word	0x200001b0
 8000f58:	200003ec 	.word	0x200003ec
 8000f5c:	200001c8 	.word	0x200001c8
 8000f60:	0800d780 	.word	0x0800d780
 8000f64:	0800d798 	.word	0x0800d798
 8000f68:	200003e8 	.word	0x200003e8
 8000f6c:	200001b4 	.word	0x200001b4
 8000f70:	0800d8d0 	.word	0x0800d8d0
 8000f74:	0800d7b0 	.word	0x0800d7b0
 8000f78:	0800d8e8 	.word	0x0800d8e8
 8000f7c:	0800d7c0 	.word	0x0800d7c0
 8000f80:	0800d8d8 	.word	0x0800d8d8
 8000f84:	0800d7d4 	.word	0x0800d7d4
 8000f88:	200001cc 	.word	0x200001cc
 8000f8c:	0800d8f8 	.word	0x0800d8f8
 8000f90:	2000020c 	.word	0x2000020c
 8000f94:	0800d7e8 	.word	0x0800d7e8
 8000f98:	20000244 	.word	0x20000244
 8000f9c:	0800d904 	.word	0x0800d904
 8000fa0:	0800d7fc 	.word	0x0800d7fc
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8000fa4:	4b45      	ldr	r3, [pc, #276]	; (80010bc <ESP01DOConnection+0x3e4>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8083 	beq.w	80010b4 <ESP01DOConnection+0x3dc>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 8000fae:	4844      	ldr	r0, [pc, #272]	; (80010c0 <ESP01DOConnection+0x3e8>)
 8000fb0:	f000 f918 	bl	80011e4 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <ESP01DOConnection+0x3ec>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <ESP01DOConnection+0x2ec>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE\n");
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <ESP01DOConnection+0x3ec>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4841      	ldr	r0, [pc, #260]	; (80010c8 <ESP01DOConnection+0x3f0>)
 8000fc2:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <ESP01DOConnection+0x3f4>)
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	701a      	strb	r2, [r3, #0]
		break;
 8000fca:	e074      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 8000fcc:	4840      	ldr	r0, [pc, #256]	; (80010d0 <ESP01DOConnection+0x3f8>)
 8000fce:	f000 f909 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000fd2:	2022      	movs	r0, #34	; 0x22
 8000fd4:	f000 f936 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8000fd8:	483e      	ldr	r0, [pc, #248]	; (80010d4 <ESP01DOConnection+0x3fc>)
 8000fda:	f000 f903 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000fde:	2022      	movs	r0, #34	; 0x22
 8000fe0:	f000 f930 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000fe4:	202c      	movs	r0, #44	; 0x2c
 8000fe6:	f000 f92d 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8000fea:	2022      	movs	r0, #34	; 0x22
 8000fec:	f000 f92a 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8000ff0:	4832      	ldr	r0, [pc, #200]	; (80010bc <ESP01DOConnection+0x3e4>)
 8000ff2:	f000 f8f7 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f000 f924 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8000ffc:	202c      	movs	r0, #44	; 0x2c
 8000ffe:	f000 f921 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 8001002:	4835      	ldr	r0, [pc, #212]	; (80010d8 <ESP01DOConnection+0x400>)
 8001004:	f000 f8ee 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8001008:	202c      	movs	r0, #44	; 0x2c
 800100a:	f000 f91b 	bl	8001244 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 800100e:	4833      	ldr	r0, [pc, #204]	; (80010dc <ESP01DOConnection+0x404>)
 8001010:	f000 f8e8 	bl	80011e4 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8001014:	202c      	movs	r0, #44	; 0x2c
 8001016:	f000 f915 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 800101a:	2030      	movs	r0, #48	; 0x30
 800101c:	f000 f912 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8001020:	200d      	movs	r0, #13
 8001022:	f000 f90f 	bl	8001244 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8001026:	200a      	movs	r0, #10
 8001028:	f000 f90c 	bl	8001244 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <ESP01DOConnection+0x3ec>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <ESP01DOConnection+0x364>
			ESP01DbgStr("+&DBGESP01ATCIPSTART\n");
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <ESP01DOConnection+0x3ec>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4829      	ldr	r0, [pc, #164]	; (80010e0 <ESP01DOConnection+0x408>)
 800103a:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 800103c:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <ESP01DOConnection+0x40c>)
 800103e:	7813      	ldrb	r3, [r2, #0]
 8001040:	f36f 1345 	bfc	r3, #5, #1
 8001044:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <ESP01DOConnection+0x40c>)
 8001048:	7813      	ldrb	r3, [r2, #0]
 800104a:	f36f 1386 	bfc	r3, #6, #1
 800104e:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <ESP01DOConnection+0x3f4>)
 8001052:	220b      	movs	r2, #11
 8001054:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 200;
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <ESP01DOConnection+0x410>)
 8001058:	22c8      	movs	r2, #200	; 0xc8
 800105a:	601a      	str	r2, [r3, #0]
		break;
 800105c:	e02b      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <ESP01DOConnection+0x40c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <ESP01DOConnection+0x39c>
			esp01ATSate = ESP01ATCONNECTED;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <ESP01DOConnection+0x3f4>)
 800106e:	220c      	movs	r2, #12
 8001070:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8001072:	e020      	b.n	80010b6 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <ESP01DOConnection+0x3f4>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
		break;
 800107a:	e01c      	b.n	80010b6 <ESP01DOConnection+0x3de>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <ESP01DOConnection+0x40c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <ESP01DOConnection+0x3ba>
			esp01ATSate = ESP01ATAT;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <ESP01DOConnection+0x3f4>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
			break;
 8001090:	e011      	b.n	80010b6 <ESP01DOConnection+0x3de>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <ESP01DOConnection+0x40c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <ESP01DOConnection+0x3d0>
			esp01ATSate = ESP01ATCIPCLOSE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <ESP01DOConnection+0x3f4>)
 80010a2:	2209      	movs	r2, #9
 80010a4:	701a      	strb	r2, [r3, #0]
			break;
 80010a6:	e006      	b.n	80010b6 <ESP01DOConnection+0x3de>
		}
		esp01TimeoutTask = 0;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <ESP01DOConnection+0x410>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
		break;
 80010ae:	e002      	b.n	80010b6 <ESP01DOConnection+0x3de>
			break;
 80010b0:	bf00      	nop
 80010b2:	e000      	b.n	80010b6 <ESP01DOConnection+0x3de>
			break;
 80010b4:	bf00      	nop
	}
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000022c 	.word	0x2000022c
 80010c0:	0800d920 	.word	0x0800d920
 80010c4:	200001c8 	.word	0x200001c8
 80010c8:	0800d810 	.word	0x0800d810
 80010cc:	200001b0 	.word	0x200001b0
 80010d0:	0800d910 	.word	0x0800d910
 80010d4:	20000000 	.word	0x20000000
 80010d8:	2000023c 	.word	0x2000023c
 80010dc:	20000254 	.word	0x20000254
 80010e0:	0800d828 	.word	0x0800d828
 80010e4:	200001b4 	.word	0x200001b4
 80010e8:	200001b8 	.word	0x200001b8

080010ec <ESP01SENDData>:

static void ESP01SENDData(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	uint8_t value;

	if(esp01Flags.bit.WAITINGSYMBOL){
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <ESP01SENDData+0xd8>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <ESP01SENDData+0xdc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d159      	bne.n	80011bc <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <ESP01SENDData+0xe0>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <ESP01SENDData+0xe4>)
 800110e:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8001110:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <ESP01SENDData+0xd8>)
 8001112:	7813      	ldrb	r3, [r2, #0]
 8001114:	f36f 0300 	bfc	r3, #0, #1
 8001118:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <ESP01SENDData+0xe8>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <ESP01SENDData+0xec>)
 8001122:	220a      	movs	r2, #10
 8001124:	601a      	str	r2, [r3, #0]
		}
		return;
 8001126:	e049      	b.n	80011bc <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <ESP01SENDData+0xe4>)
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <ESP01SENDData+0xe0>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d044      	beq.n	80011be <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <ESP01SENDData+0xe4>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <ESP01SENDData+0xf0>)
 800113c:	5c9b      	ldrb	r3, [r3, r2]
 800113e:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <ESP01SENDData+0xd8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d004      	beq.n	8001158 <ESP01SENDData+0x6c>
			if(value == '>')
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b3e      	cmp	r3, #62	; 0x3e
 8001152:	d101      	bne.n	8001158 <ESP01SENDData+0x6c>
				value = '\n';
 8001154:	230a      	movs	r3, #10
 8001156:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <ESP01SENDData+0xf4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	4610      	mov	r0, r2
 8001160:	4798      	blx	r3
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d02a      	beq.n	80011be <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <ESP01SENDData+0xd8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d013      	beq.n	800119e <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <ESP01SENDData+0xe4>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <ESP01SENDData+0xf0>)
 800117e:	5c9b      	ldrb	r3, [r3, r2]
 8001180:	2b3e      	cmp	r3, #62	; 0x3e
 8001182:	d10c      	bne.n	800119e <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <ESP01SENDData+0xd8>)
 8001186:	7813      	ldrb	r3, [r2, #0]
 8001188:	f36f 0382 	bfc	r3, #2, #1
 800118c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <ESP01SENDData+0xd8>)
 8001190:	7813      	ldrb	r3, [r2, #0]
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <ESP01SENDData+0xdc>)
 800119a:	2205      	movs	r2, #5
 800119c:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <ESP01SENDData+0xe4>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <ESP01SENDData+0xe4>)
 80011a8:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <ESP01SENDData+0xe4>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b2:	d104      	bne.n	80011be <ESP01SENDData+0xd2>
				esp01irTX = 0;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <ESP01SENDData+0xe4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	e000      	b.n	80011be <ESP01SENDData+0xd2>
		return;
 80011bc:	bf00      	nop
		}
	}
}
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001b4 	.word	0x200001b4
 80011c8:	200001c0 	.word	0x200001c0
 80011cc:	200003e6 	.word	0x200003e6
 80011d0:	200003e4 	.word	0x200003e4
 80011d4:	200001b0 	.word	0x200001b0
 80011d8:	200001b8 	.word	0x200001b8
 80011dc:	200002e0 	.word	0x200002e0
 80011e0:	200003ec 	.word	0x200003ec

080011e4 <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e017      	b.n	8001222 <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	441a      	add	r2, r3
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <ESP01StrToBufTX+0x58>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	b288      	uxth	r0, r1
 8001200:	490e      	ldr	r1, [pc, #56]	; (800123c <ESP01StrToBufTX+0x58>)
 8001202:	8008      	strh	r0, [r1, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <ESP01StrToBufTX+0x5c>)
 800120a:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <ESP01StrToBufTX+0x58>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001214:	d102      	bne.n	800121c <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <ESP01StrToBufTX+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1e1      	bne.n	80011f2 <ESP01StrToBufTX+0xe>
	}
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200003e6 	.word	0x200003e6
 8001240:	200002e0 	.word	0x200002e0

08001244 <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <ESP01ByteToBufTX+0x38>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	b291      	uxth	r1, r2
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <ESP01ByteToBufTX+0x38>)
 8001258:	8011      	strh	r1, [r2, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <ESP01ByteToBufTX+0x3c>)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <ESP01ByteToBufTX+0x38>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126a:	d102      	bne.n	8001272 <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <ESP01ByteToBufTX+0x38>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200003e6 	.word	0x200003e6
 8001280:	200002e0 	.word	0x200002e0

08001284 <UNERBUS_DecodeHeader>:

static uint8_t HEADER[7] = {'U', 'N', 'E', 'R', 0x00, ':', 0x00};

static _uUNERBUSWork w;

static void UNERBUS_DecodeHeader(_sUNERBUSHandle *aBus){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t value;
	uint8_t index = aBus->rx.iWrite;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	799b      	ldrb	r3, [r3, #6]
 8001290:	73fb      	strb	r3, [r7, #15]

	while (aBus->rx.iRead != index)
 8001292:	e0b5      	b.n	8001400 <UNERBUS_DecodeHeader+0x17c>
	{
		value = aBus->rx.buf[aBus->rx.iRead];
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	7952      	ldrb	r2, [r2, #5]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	73bb      	strb	r3, [r7, #14]
		switch(aBus->rx.header){
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a9b      	ldrb	r3, [r3, #10]
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	f200 808d 	bhi.w	80013c6 <UNERBUS_DecodeHeader+0x142>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <UNERBUS_DecodeHeader+0x30>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012d1 	.word	0x080012d1
 80012b8:	080012f5 	.word	0x080012f5
 80012bc:	080012f5 	.word	0x080012f5
 80012c0:	080012f5 	.word	0x080012f5
 80012c4:	08001335 	.word	0x08001335
 80012c8:	080012f5 	.word	0x080012f5
 80012cc:	08001373 	.word	0x08001373
		case 0:
			if(value == HEADER[aBus->rx.header]){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7a9b      	ldrb	r3, [r3, #10]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b50      	ldr	r3, [pc, #320]	; (8001418 <UNERBUS_DecodeHeader+0x194>)
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	7bba      	ldrb	r2, [r7, #14]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d176      	bne.n	80013ce <UNERBUS_DecodeHeader+0x14a>
				aBus->rx.header = 1;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	729a      	strb	r2, [r3, #10]
				aBus->rx.timeout = 5;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2205      	movs	r2, #5
 80012ea:	72da      	strb	r2, [r3, #11]
				aBus->rx.cks = value;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7bba      	ldrb	r2, [r7, #14]
 80012f0:	731a      	strb	r2, [r3, #12]
			}
			break;
 80012f2:	e06c      	b.n	80013ce <UNERBUS_DecodeHeader+0x14a>
		case 1:
		case 2:
		case 3:
		case 5:
			if(value == HEADER[aBus->rx.header]){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7a9b      	ldrb	r3, [r3, #10]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <UNERBUS_DecodeHeader+0x194>)
 80012fc:	5c9b      	ldrb	r3, [r3, r2]
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	429a      	cmp	r2, r3
 8001302:	d10d      	bne.n	8001320 <UNERBUS_DecodeHeader+0x9c>
				aBus->rx.cks ^= value;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7b1a      	ldrb	r2, [r3, #12]
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	4053      	eors	r3, r2
 800130c:	b2da      	uxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	731a      	strb	r2, [r3, #12]
				aBus->rx.header++;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7a9b      	ldrb	r3, [r3, #10]
 8001316:	3301      	adds	r3, #1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	729a      	strb	r2, [r3, #10]
			}
			else{
				aBus->rx.header = 0;
				aBus->rx.iRead--;
			}
			break;
 800131e:	e059      	b.n	80013d4 <UNERBUS_DecodeHeader+0x150>
				aBus->rx.header = 0;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	729a      	strb	r2, [r3, #10]
				aBus->rx.iRead--;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	3b01      	subs	r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	715a      	strb	r2, [r3, #5]
			break;
 8001332:	e04f      	b.n	80013d4 <UNERBUS_DecodeHeader+0x150>
		case 4:
			aBus->rx.cks ^= value;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7b1a      	ldrb	r2, [r3, #12]
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	4053      	eors	r3, r2
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	731a      	strb	r2, [r3, #12]
			aBus->rx.nBytes = value;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7bba      	ldrb	r2, [r7, #14]
 8001346:	725a      	strb	r2, [r3, #9]
			aBus->rx.iData = aBus->rx.iRead+2;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	3302      	adds	r3, #2
 800134e:	b2da      	uxtb	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	71da      	strb	r2, [r3, #7]
			aBus->rx.iData &= aBus->rx.maxIndexRingBuf;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	79da      	ldrb	r2, [r3, #7]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	4013      	ands	r3, r2
 800135e:	b2da      	uxtb	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	71da      	strb	r2, [r3, #7]
			aBus->rx.newData = 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	721a      	strb	r2, [r3, #8]
			aBus->rx.header = 5;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2205      	movs	r2, #5
 800136e:	729a      	strb	r2, [r3, #10]
			break;
 8001370:	e030      	b.n	80013d4 <UNERBUS_DecodeHeader+0x150>
		case 6:
			aBus->rx.nBytes--;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7a5b      	ldrb	r3, [r3, #9]
 8001376:	3b01      	subs	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	725a      	strb	r2, [r3, #9]
			if(aBus->rx.nBytes)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7a5b      	ldrb	r3, [r3, #9]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <UNERBUS_DecodeHeader+0x112>
				aBus->rx.cks ^= value;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7b1a      	ldrb	r2, [r3, #12]
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	4053      	eors	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	731a      	strb	r2, [r3, #12]
						aBus->MyDataReady(aBus, aBus->rx.iData);
					else
						aBus->rx.newData = 1;
				}
			}
			break;
 8001394:	e01d      	b.n	80013d2 <UNERBUS_DecodeHeader+0x14e>
				aBus->rx.header = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	729a      	strb	r2, [r3, #10]
				if(value == aBus->rx.cks){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7b1b      	ldrb	r3, [r3, #12]
 80013a0:	7bba      	ldrb	r2, [r7, #14]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d115      	bne.n	80013d2 <UNERBUS_DecodeHeader+0x14e>
					if(aBus->MyDataReady != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <UNERBUS_DecodeHeader+0x13a>
						aBus->MyDataReady(aBus, aBus->rx.iData);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	79d2      	ldrb	r2, [r2, #7]
 80013b6:	4611      	mov	r1, r2
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
			break;
 80013bc:	e009      	b.n	80013d2 <UNERBUS_DecodeHeader+0x14e>
						aBus->rx.newData = 1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	721a      	strb	r2, [r3, #8]
			break;
 80013c4:	e005      	b.n	80013d2 <UNERBUS_DecodeHeader+0x14e>
		default:
			aBus->rx.header = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	729a      	strb	r2, [r3, #10]
 80013cc:	e002      	b.n	80013d4 <UNERBUS_DecodeHeader+0x150>
			break;
 80013ce:	bf00      	nop
 80013d0:	e000      	b.n	80013d4 <UNERBUS_DecodeHeader+0x150>
			break;
 80013d2:	bf00      	nop
		}

		aBus->rx.iRead &= aBus->rx.maxIndexRingBuf;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	795a      	ldrb	r2, [r3, #5]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	4013      	ands	r3, r2
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	715a      	strb	r2, [r3, #5]
		aBus->rx.iRead++;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	795b      	ldrb	r3, [r3, #5]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	715a      	strb	r2, [r3, #5]
		aBus->rx.iRead &= aBus->rx.maxIndexRingBuf;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	795a      	ldrb	r2, [r3, #5]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	791b      	ldrb	r3, [r3, #4]
 80013f8:	4013      	ands	r3, r2
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	715a      	strb	r2, [r3, #5]
	while (aBus->rx.iRead != index)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	795b      	ldrb	r3, [r3, #5]
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	429a      	cmp	r2, r3
 8001408:	f47f af44 	bne.w	8001294 <UNERBUS_DecodeHeader+0x10>
	}
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000004 	.word	0x20000004

0800141c <UNERBUS_Init>:

void UNERBUS_Init(_sUNERBUSHandle *aBus){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	aBus->rx.header = 0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	729a      	strb	r2, [r3, #10]
	aBus->rx.iRead = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	715a      	strb	r2, [r3, #5]
	aBus->rx.iWrite = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	719a      	strb	r2, [r3, #6]
	aBus->rx.newData = 0;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	721a      	strb	r2, [r3, #8]
	aBus->tx.iRead = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	755a      	strb	r2, [r3, #21]
	aBus->tx.iWrite = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	759a      	strb	r2, [r3, #22]
	aBus->iiTXw = 6;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2206      	movs	r2, #6
 800144c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <UNERBUS_Write>:


void UNERBUS_Write(_sUNERBUSHandle *aBus, uint8_t *buf, uint8_t lenBuf){
 800145a:	b490      	push	{r4, r7}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	4613      	mov	r3, r2
 8001466:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i<lenBuf; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	75fb      	strb	r3, [r7, #23]
 800146c:	e01c      	b.n	80014a8 <UNERBUS_Write+0x4e>
	{
		aBus->tx.buf[aBus->iiTXw++] = buf[i];
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	441a      	add	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6919      	ldr	r1, [r3, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	1c58      	adds	r0, r3, #1
 8001480:	b2c4      	uxtb	r4, r0
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f880 4020 	strb.w	r4, [r0, #32]
 8001488:	440b      	add	r3, r1
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	701a      	strb	r2, [r3, #0]
		aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	7d1b      	ldrb	r3, [r3, #20]
 8001498:	4013      	ands	r3, r2
 800149a:	b2da      	uxtb	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f883 2020 	strb.w	r2, [r3, #32]
	for (uint8_t i=0; i<lenBuf; i++)
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	3301      	adds	r3, #1
 80014a6:	75fb      	strb	r3, [r7, #23]
 80014a8:	7dfa      	ldrb	r2, [r7, #23]
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3de      	bcc.n	800146e <UNERBUS_Write+0x14>
	}
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc90      	pop	{r4, r7}
 80014ba:	4770      	bx	lr

080014bc <UNERBUS_WriteByte>:

void UNERBUS_WriteByte(_sUNERBUSHandle *aBus, uint8_t value){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
	aBus->tx.buf[aBus->iiTXw++] = value;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	b2c8      	uxtb	r0, r1
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f881 0020 	strb.w	r0, [r1, #32]
 80014dc:	4413      	add	r3, r2
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	701a      	strb	r2, [r3, #0]
	aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7d1b      	ldrb	r3, [r3, #20]
 80014ec:	4013      	ands	r3, r2
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <UNERBUS_Send>:

void UNERBUS_Send(_sUNERBUSHandle *aBus, uint8_t cmdID, uint8_t lenCMD){
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
 800150c:	4613      	mov	r3, r2
 800150e:	70bb      	strb	r3, [r7, #2]
	uint8_t i;

	i = aBus->tx.iWrite + 7;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7d9b      	ldrb	r3, [r3, #22]
 8001514:	3307      	adds	r3, #7
 8001516:	73fb      	strb	r3, [r7, #15]
	i &= aBus->tx.maxIndexRingBuf;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d1a      	ldrb	r2, [r3, #20]
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	4013      	ands	r3, r2
 8001520:	73fb      	strb	r3, [r7, #15]
	
	if(aBus->iiTXw == i)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	429a      	cmp	r2, r3
 800152c:	d063      	beq.n	80015f6 <UNERBUS_Send+0xf6>
		return;
	
	HEADER[4] = lenCMD + 1;
 800152e:	78bb      	ldrb	r3, [r7, #2]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <UNERBUS_Send+0x100>)
 8001536:	711a      	strb	r2, [r3, #4]
	HEADER[6] = cmdID;
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <UNERBUS_Send+0x100>)
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	7193      	strb	r3, [r2, #6]


	aBus->tx.cks = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	75da      	strb	r2, [r3, #23]

	lenCMD += 6;
 8001544:	78bb      	ldrb	r3, [r7, #2]
 8001546:	3306      	adds	r3, #6
 8001548:	70bb      	strb	r3, [r7, #2]
	
	for (i=0; i<lenCMD; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e028      	b.n	80015a2 <UNERBUS_Send+0xa2>
	{
		if(i < 7)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b06      	cmp	r3, #6
 8001554:	d808      	bhi.n	8001568 <UNERBUS_Send+0x68>
			aBus->tx.buf[aBus->tx.iWrite] = HEADER[i];
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	7d89      	ldrb	r1, [r1, #22]
 8001560:	440b      	add	r3, r1
 8001562:	4927      	ldr	r1, [pc, #156]	; (8001600 <UNERBUS_Send+0x100>)
 8001564:	5c8a      	ldrb	r2, [r1, r2]
 8001566:	701a      	strb	r2, [r3, #0]
		aBus->tx.cks ^= aBus->tx.buf[aBus->tx.iWrite];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7dda      	ldrb	r2, [r3, #23]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	7d89      	ldrb	r1, [r1, #22]
 8001574:	440b      	add	r3, r1
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4053      	eors	r3, r2
 800157a:	b2da      	uxtb	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	75da      	strb	r2, [r3, #23]
		aBus->tx.iWrite++;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7d9b      	ldrb	r3, [r3, #22]
 8001584:	3301      	adds	r3, #1
 8001586:	b2da      	uxtb	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	759a      	strb	r2, [r3, #22]
		aBus->tx.iWrite &= aBus->tx.maxIndexRingBuf;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7d9a      	ldrb	r2, [r3, #22]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7d1b      	ldrb	r3, [r3, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	759a      	strb	r2, [r3, #22]
	for (i=0; i<lenCMD; i++)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	78bb      	ldrb	r3, [r7, #2]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3d2      	bcc.n	8001550 <UNERBUS_Send+0x50>

	}

	aBus->tx.buf[aBus->tx.iWrite++] = aBus->tx.cks;	
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7d9b      	ldrb	r3, [r3, #22]
 80015b2:	1c59      	adds	r1, r3, #1
 80015b4:	b2c8      	uxtb	r0, r1
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	7588      	strb	r0, [r1, #22]
 80015ba:	4413      	add	r3, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	7dd2      	ldrb	r2, [r2, #23]
 80015c0:	701a      	strb	r2, [r3, #0]
	aBus->tx.iWrite &= aBus->tx.maxIndexRingBuf;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7d9a      	ldrb	r2, [r3, #22]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7d1b      	ldrb	r3, [r3, #20]
 80015ca:	4013      	ands	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	759a      	strb	r2, [r3, #22]
	aBus->iiTXw = (aBus->tx.iWrite + 7);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7d9b      	ldrb	r3, [r3, #22]
 80015d6:	3307      	adds	r3, #7
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f883 2020 	strb.w	r2, [r3, #32]
	aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7d1b      	ldrb	r3, [r3, #20]
 80015ea:	4013      	ands	r3, r2
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]
 80015f4:	e000      	b.n	80015f8 <UNERBUS_Send+0xf8>
		return;
 80015f6:	bf00      	nop
}
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000004 	.word	0x20000004

08001604 <UNERBUS_ReceiveByte>:
	aBus->iiTXw = (aBus->tx.iWrite + 7);
	aBus->iiTXw &= aBus->tx.maxIndexRingBuf;
	
}

void UNERBUS_ReceiveByte(_sUNERBUSHandle *aBus, uint8_t value){
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
	aBus->rx.buf[aBus->rx.iWrite++] = value;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	799b      	ldrb	r3, [r3, #6]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	b2c8      	uxtb	r0, r1
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	7188      	strb	r0, [r1, #6]
 8001620:	4413      	add	r3, r2
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	701a      	strb	r2, [r3, #0]
	aBus->rx.iWrite &= aBus->rx.maxIndexRingBuf;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	799a      	ldrb	r2, [r3, #6]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	791b      	ldrb	r3, [r3, #4]
 800162e:	4013      	ands	r3, r2
 8001630:	b2da      	uxtb	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	719a      	strb	r2, [r3, #6]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <UNERBUS_ReceiveBuf>:

void UNERBUS_ReceiveBuf(_sUNERBUSHandle *aBus, uint8_t *buf, uint8_t lenBuf){
 8001640:	b490      	push	{r4, r7}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i<lenBuf; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]
 8001652:	e018      	b.n	8001686 <UNERBUS_ReceiveBuf+0x46>
	{
		aBus->rx.buf[aBus->rx.iWrite++] = buf[i];
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	441a      	add	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	799b      	ldrb	r3, [r3, #6]
 8001662:	1c58      	adds	r0, r3, #1
 8001664:	b2c4      	uxtb	r4, r0
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	7184      	strb	r4, [r0, #6]
 800166a:	440b      	add	r3, r1
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
		aBus->rx.iWrite &= aBus->rx.maxIndexRingBuf;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	799a      	ldrb	r2, [r3, #6]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	4013      	ands	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	719a      	strb	r2, [r3, #6]
	for (uint8_t i=0; i<lenBuf; i++)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	3301      	adds	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
 8001686:	7dfa      	ldrb	r2, [r7, #23]
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	429a      	cmp	r2, r3
 800168c:	d3e2      	bcc.n	8001654 <UNERBUS_ReceiveBuf+0x14>
	}
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bc90      	pop	{r4, r7}
 8001698:	4770      	bx	lr
	...

0800169c <UNERBUS_GetUInt8>:
		aBus->rx.iData &= aBus->rx.maxIndexRingBuf;
	}
}


uint8_t UNERBUS_GetUInt8(_sUNERBUSHandle *aBus){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	w.u8[0] = aBus->rx.buf[aBus->rx.iData++];
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	79db      	ldrb	r3, [r3, #7]
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	b2c8      	uxtb	r0, r1
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	71c8      	strb	r0, [r1, #7]
 80016b4:	4413      	add	r3, r2
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <UNERBUS_GetUInt8+0x40>)
 80016ba:	701a      	strb	r2, [r3, #0]
	aBus->rx.iData &= aBus->rx.maxIndexRingBuf;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	79da      	ldrb	r2, [r3, #7]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	4013      	ands	r3, r2
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	71da      	strb	r2, [r3, #7]
	
	return w.u8[0];
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <UNERBUS_GetUInt8+0x40>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	200003fc 	.word	0x200003fc

080016e0 <UNERBUS_Task>:

void UNERBUS_ResetNewData(_sUNERBUSHandle *aBus){
	aBus->rx.newData = 0;
}

void UNERBUS_Task(_sUNERBUSHandle *aBus){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if(aBus->rx.iRead != aBus->rx.iWrite)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	795a      	ldrb	r2, [r3, #5]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	799b      	ldrb	r3, [r3, #6]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d002      	beq.n	80016fa <UNERBUS_Task+0x1a>
		UNERBUS_DecodeHeader(aBus);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fdc5 	bl	8001284 <UNERBUS_DecodeHeader>
		
	if(aBus->WriteUSARTByte != NULL){
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d020      	beq.n	8001744 <UNERBUS_Task+0x64>
		if(aBus->tx.iRead != aBus->tx.iWrite){
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7d5a      	ldrb	r2, [r3, #21]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7d9b      	ldrb	r3, [r3, #22]
 800170a:	429a      	cmp	r2, r3
 800170c:	d01a      	beq.n	8001744 <UNERBUS_Task+0x64>
			if(aBus->WriteUSARTByte(aBus->tx.buf[aBus->tx.iRead])){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6912      	ldr	r2, [r2, #16]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	7d49      	ldrb	r1, [r1, #21]
 800171a:	440a      	add	r2, r1
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	4610      	mov	r0, r2
 8001720:	4798      	blx	r3
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00d      	beq.n	8001744 <UNERBUS_Task+0x64>
				aBus->tx.iRead++;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7d5b      	ldrb	r3, [r3, #21]
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	755a      	strb	r2, [r3, #21]
				aBus->tx.iRead &= aBus->tx.maxIndexRingBuf;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7d5a      	ldrb	r2, [r3, #21]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7d1b      	ldrb	r3, [r3, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	b2da      	uxtb	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	755a      	strb	r2, [r3, #21]
			}
		}
	}	
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <UNERBUS_Timeout>:


void UNERBUS_Timeout(_sUNERBUSHandle *aBus){
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	if(aBus->rx.timeout){
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7adb      	ldrb	r3, [r3, #11]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <UNERBUS_Timeout+0x2a>
		aBus->rx.timeout--;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7adb      	ldrb	r3, [r3, #11]
 8001760:	3b01      	subs	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	72da      	strb	r2, [r3, #11]
		if(!aBus->rx.timeout)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7adb      	ldrb	r3, [r3, #11]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <UNERBUS_Timeout+0x2a>
			aBus->rx.header = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	729a      	strb	r2, [r3, #10]
	}
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <inicializarBoton>:
#include <stdlib.h>

uint8_t PRESSED = 0;

void inicializarBoton(_sButton *button)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	button->value = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
	button->estado = UP;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	705a      	strb	r2, [r3, #1]
	button->event = EV_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	709a      	strb	r2, [r3, #2]
	button->timePush = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
	button->timeDiff = 0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <checkMEF>:

void checkMEF(_sButton *button)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	switch (button->estado)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d847      	bhi.n	8001850 <checkMEF+0xa0>
 80017c0:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <checkMEF+0x18>)
 80017c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c6:	bf00      	nop
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	08001809 	.word	0x08001809
 80017d0:	080017ed 	.word	0x080017ed
 80017d4:	08001829 	.word	0x08001829
	{
		case UP:
			if (button->value == PRESSED)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <checkMEF+0xb8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d139      	bne.n	8001858 <checkMEF+0xa8>
			{
				button->estado = FALLING;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	705a      	strb	r2, [r3, #1]
			}
			break;
 80017ea:	e035      	b.n	8001858 <checkMEF+0xa8>
		case FALLING:
			if (button->value == PRESSED)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <checkMEF+0xb8>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d103      	bne.n	8001800 <checkMEF+0x50>
			{
				button->estado = DOWN;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = UP;
			}
			break;
 80017fe:	e02e      	b.n	800185e <checkMEF+0xae>
				button->estado = UP;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	705a      	strb	r2, [r3, #1]
			break;
 8001806:	e02a      	b.n	800185e <checkMEF+0xae>
		case DOWN:
			if (button->value == !PRESSED)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <checkMEF+0xb8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf0c      	ite	eq
 8001816:	2301      	moveq	r3, #1
 8001818:	2300      	movne	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	429a      	cmp	r2, r3
 800181e:	d11d      	bne.n	800185c <checkMEF+0xac>
			{
				button->estado = RISING;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2203      	movs	r2, #3
 8001824:	705a      	strb	r2, [r3, #1]
			}
			break;
 8001826:	e019      	b.n	800185c <checkMEF+0xac>
		case RISING:
			if (button->value == !PRESSED)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <checkMEF+0xb8>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf0c      	ite	eq
 8001836:	2301      	moveq	r3, #1
 8001838:	2300      	movne	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	429a      	cmp	r2, r3
 800183e:	d103      	bne.n	8001848 <checkMEF+0x98>
			{
				button->estado = UP;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = DOWN;
			}
			break;
 8001846:	e00a      	b.n	800185e <checkMEF+0xae>
				button->estado = DOWN;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	705a      	strb	r2, [r3, #1]
			break;
 800184e:	e006      	b.n	800185e <checkMEF+0xae>
		default:
			button->estado = UP;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	705a      	strb	r2, [r3, #1]
			break;
 8001856:	e002      	b.n	800185e <checkMEF+0xae>
			break;
 8001858:	bf00      	nop
 800185a:	e000      	b.n	800185e <checkMEF+0xae>
			break;
 800185c:	bf00      	nop
	}
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000400 	.word	0x20000400

0800186c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//CALLBACKS
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d116      	bne.n	80018ac <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms--;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	3b01      	subs	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001888:	701a      	strb	r2, [r3, #0]
		if(!time10ms){
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d107      	bne.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x36>
			ON10MS = 1;
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001894:	7813      	ldrb	r3, [r2, #0]
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	7013      	strb	r3, [r2, #0]
			time10ms = 40;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800189e:	2228      	movs	r2, #40	; 0x28
 80018a0:	701a      	strb	r2, [r3, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&myADC.data, NUMCHANNELSADC);
 80018a2:	2208      	movs	r2, #8
 80018a4:	4906      	ldr	r1, [pc, #24]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018a8:	f001 fb60 	bl	8002f6c <HAL_ADC_Start_DMA>
	}
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	2000000b 	.word	0x2000000b
 80018bc:	200005d4 	.word	0x200005d4
 80018c0:	20000638 	.word	0x20000638
 80018c4:	20000404 	.word	0x20000404

080018c8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e05b      	b.n	800198e <HAL_ADC_ConvCpltCallback+0xc6>
	{
		myADC.sum[c] -= myADC.buf[c][myADC.index[c]];
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 80018da:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80018de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	7bf9      	ldrb	r1, [r7, #15]
 80018e6:	482e      	ldr	r0, [pc, #184]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 80018e8:	5c41      	ldrb	r1, [r0, r1]
 80018ea:	4608      	mov	r0, r1
 80018ec:	492c      	ldr	r1, [pc, #176]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 80018ee:	019b      	lsls	r3, r3, #6
 80018f0:	4403      	add	r3, r0
 80018f2:	3314      	adds	r3, #20
 80018f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018f8:	4619      	mov	r1, r3
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	1a52      	subs	r2, r2, r1
 80018fe:	4928      	ldr	r1, [pc, #160]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001900:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		myADC.sum[c] += myADC.data[c];
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800190c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001918:	3304      	adds	r3, #4
 800191a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800191e:	4619      	mov	r1, r3
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	440a      	add	r2, r1
 8001924:	491e      	ldr	r1, [pc, #120]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001926:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		myADC.buf[c][myADC.index[c]] = myADC.data[c];
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	7bf9      	ldrb	r1, [r7, #15]
 8001934:	481a      	ldr	r0, [pc, #104]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001936:	5c41      	ldrb	r1, [r0, r1]
 8001938:	4608      	mov	r0, r1
 800193a:	4919      	ldr	r1, [pc, #100]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800193c:	3204      	adds	r2, #4
 800193e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	4403      	add	r3, r0
 8001948:	3314      	adds	r3, #20
 800194a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		myADC.value[c] = myADC.sum[c]/SIZEBUFADC;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001952:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	099a      	lsrs	r2, r3, #6
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	b291      	uxth	r1, r2
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001962:	330c      	adds	r3, #12
 8001964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		myADC.index[c]++;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800196c:	5cd2      	ldrb	r2, [r2, r3]
 800196e:	3201      	adds	r2, #1
 8001970:	b2d1      	uxtb	r1, r2
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001974:	54d1      	strb	r1, [r2, r3]
		myADC.index[c] &= (SIZEBUFADC-1);
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800197a:	5cd2      	ldrb	r2, [r2, r3]
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001982:	b2d1      	uxtb	r1, r2
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001986:	54d1      	strb	r1, [r2, r3]
	for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3301      	adds	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b07      	cmp	r3, #7
 8001992:	d9a0      	bls.n	80018d6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000630 	.word	0x20000630

080019a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_UART_RxCpltCallback+0x30>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d109      	bne.n	80019ca <HAL_UART_RxCpltCallback+0x26>
		ESP01_WriteRX(dataRXESP01);
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_UART_RxCpltCallback+0x34>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc72 	bl	80002a4 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &dataRXESP01, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	4905      	ldr	r1, [pc, #20]	; (80019d8 <HAL_UART_RxCpltCallback+0x34>)
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_UART_RxCpltCallback+0x38>)
 80019c6:	f006 fc95 	bl	80082f4 <HAL_UART_Receive_IT>
	}
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40013800 	.word	0x40013800
 80019d8:	20000dd0 	.word	0x20000dd0
 80019dc:	2000058c 	.word	0x2000058c

080019e0 <ESP01DoCHPD>:
//.

void ESP01DoCHPD(uint8_t value){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CH_EN_GPIO_Port, CH_EN_Pin, value);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	461a      	mov	r2, r3
 80019ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <ESP01DoCHPD+0x20>)
 80019f4:	f002 faef 	bl	8003fd6 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010800 	.word	0x40010800

08001a04 <ESP01WriteUSARTByte>:

int ESP01WriteUSARTByte(uint8_t value){
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, USART_SR_TXE)){
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <ESP01WriteUSARTByte+0x30>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a18:	2b80      	cmp	r3, #128	; 0x80
 8001a1a:	d104      	bne.n	8001a26 <ESP01WriteUSARTByte+0x22>
		USART1->DR = value;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <ESP01WriteUSARTByte+0x34>)
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	6053      	str	r3, [r2, #4]
		return 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <ESP01WriteUSARTByte+0x24>
	}
	return 0;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	2000058c 	.word	0x2000058c
 8001a38:	40013800 	.word	0x40013800

08001a3c <ESP01WriteByteToBufRX>:

void ESP01WriteByteToBufRX(uint8_t value){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	UNERBUS_ReceiveByte(&unerbusESP01, value);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <ESP01WriteByteToBufRX+0x1c>)
 8001a4c:	f7ff fdda 	bl	8001604 <UNERBUS_ReceiveByte>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000060c 	.word	0x2000060c

08001a5c <ESP01ChangeState>:

void ESP01ChangeState(_eESP01STATUS esp01State){
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
	switch((uint32_t)esp01State){
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d822      	bhi.n	8001ab4 <ESP01ChangeState+0x58>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <ESP01ChangeState+0x18>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001aad 	.word	0x08001aad
 8001a78:	08001ab5 	.word	0x08001ab5
 8001a7c:	08001ab5 	.word	0x08001ab5
 8001a80:	08001a95 	.word	0x08001a95
 8001a84:	08001ab5 	.word	0x08001ab5
 8001a88:	08001aa5 	.word	0x08001aa5
 8001a8c:	08001ab5 	.word	0x08001ab5
 8001a90:	08001a9d 	.word	0x08001a9d
	case ESP01_WIFI_CONNECTED:
		myHB = HEARTBEAT_WIFI_READY;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <ESP01ChangeState+0x64>)
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <ESP01ChangeState+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
		break;
 8001a9a:	e00b      	b.n	8001ab4 <ESP01ChangeState+0x58>
	case ESP01_UDPTCP_CONNECTED:
		myHB = HEARTBEAT_UDP_READY;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <ESP01ChangeState+0x64>)
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <ESP01ChangeState+0x6c>)
 8001aa0:	601a      	str	r2, [r3, #0]
		break;
 8001aa2:	e007      	b.n	8001ab4 <ESP01ChangeState+0x58>
	case ESP01_UDPTCP_DISCONNECTED:
		myHB = HEARTBEAT_WIFI_READY;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <ESP01ChangeState+0x64>)
 8001aa6:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <ESP01ChangeState+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
		break;
 8001aaa:	e003      	b.n	8001ab4 <ESP01ChangeState+0x58>
	case ESP01_WIFI_DISCONNECTED:
		myHB = HEARTBEAT_IDLE;
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <ESP01ChangeState+0x64>)
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <ESP01ChangeState+0x70>)
 8001ab0:	601a      	str	r2, [r3, #0]
		break;
 8001ab2:	bf00      	nop
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000010 	.word	0x20000010
 8001ac4:	f0a0a0a0 	.word	0xf0a0a0a0
 8001ac8:	f0aaf0aa 	.word	0xf0aaf0aa
 8001acc:	f0a0f000 	.word	0xf0a0f000

08001ad0 <DecodeCMD>:


void DecodeCMD(struct UNERBUSHandle *aBus, uint8_t iStartData){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
	uint8_t id;
	uint8_t length = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]

	id = UNERBUS_GetUInt8(aBus);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fddb 	bl	800169c <UNERBUS_GetUInt8>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	737b      	strb	r3, [r7, #13]
	switch(id){
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	2bf2      	cmp	r3, #242	; 0xf2
 8001aee:	d01e      	beq.n	8001b2e <DecodeCMD+0x5e>
 8001af0:	2bf2      	cmp	r3, #242	; 0xf2
 8001af2:	f300 80ab 	bgt.w	8001c4c <DecodeCMD+0x17c>
 8001af6:	2bf0      	cmp	r3, #240	; 0xf0
 8001af8:	d012      	beq.n	8001b20 <DecodeCMD+0x50>
 8001afa:	2bf0      	cmp	r3, #240	; 0xf0
 8001afc:	f300 80a6 	bgt.w	8001c4c <DecodeCMD+0x17c>
 8001b00:	2ba2      	cmp	r3, #162	; 0xa2
 8001b02:	d034      	beq.n	8001b6e <DecodeCMD+0x9e>
 8001b04:	2be0      	cmp	r3, #224	; 0xe0
 8001b06:	f040 80a1 	bne.w	8001c4c <DecodeCMD+0x17c>
		case GETLOCALIP:
			UNERBUS_Write(aBus, (uint8_t *)ESP01_GetLocalIP(), 16);
 8001b0a:	f7fe fbb3 	bl	8000274 <ESP01_GetLocalIP>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2210      	movs	r2, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fca0 	bl	800145a <UNERBUS_Write>
			length = 17;
 8001b1a:	2311      	movs	r3, #17
 8001b1c:	73fb      	strb	r3, [r7, #15]
			break;
 8001b1e:	e096      	b.n	8001c4e <DecodeCMD+0x17e>
		case ALIVE:
			UNERBUS_WriteByte(aBus, 0x0D);
 8001b20:	210d      	movs	r1, #13
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fcca 	bl	80014bc <UNERBUS_WriteByte>
			length = 2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	73fb      	strb	r3, [r7, #15]
			break;
 8001b2c:	e08f      	b.n	8001c4e <DecodeCMD+0x17e>
		case ANALOG_IR:
			for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73bb      	strb	r3, [r7, #14]
 8001b32:	e016      	b.n	8001b62 <DecodeCMD+0x92>
			{
				w.u32 = myADC.value[c];
 8001b34:	7bbb      	ldrb	r3, [r7, #14]
 8001b36:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <DecodeCMD+0x198>)
 8001b38:	330c      	adds	r3, #12
 8001b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <DecodeCMD+0x19c>)
 8001b42:	601a      	str	r2, [r3, #0]
				UNERBUS_WriteByte(aBus, w.u8[0]);
 8001b44:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <DecodeCMD+0x19c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fcb6 	bl	80014bc <UNERBUS_WriteByte>
				UNERBUS_WriteByte(aBus, w.u8[1]);
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <DecodeCMD+0x19c>)
 8001b52:	785b      	ldrb	r3, [r3, #1]
 8001b54:	4619      	mov	r1, r3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fcb0 	bl	80014bc <UNERBUS_WriteByte>
			for (uint8_t c=0; c<NUMCHANNELSADC; c++)
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73bb      	strb	r3, [r7, #14]
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d9e5      	bls.n	8001b34 <DecodeCMD+0x64>
			}
			length = 17;
 8001b68:	2311      	movs	r3, #17
 8001b6a:	73fb      	strb	r3, [r7, #15]
			break;
 8001b6c:	e06f      	b.n	8001c4e <DecodeCMD+0x17e>
		case MPU_6050:
			w.u16[0] = (uint16_t)myMPU.Ax;
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <DecodeCMD+0x1a0>)
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <DecodeCMD+0x19c>)
 8001b78:	801a      	strh	r2, [r3, #0]
			UNERBUS_WriteByte(aBus, w.u8[1]);
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <DecodeCMD+0x19c>)
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fc9b 	bl	80014bc <UNERBUS_WriteByte>
			UNERBUS_WriteByte(aBus, w.u8[0]);
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <DecodeCMD+0x19c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fc95 	bl	80014bc <UNERBUS_WriteByte>
			w.u16[0] = (uint16_t)myMPU.Ay;
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <DecodeCMD+0x1a0>)
 8001b94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <DecodeCMD+0x19c>)
 8001b9c:	801a      	strh	r2, [r3, #0]
			UNERBUS_WriteByte(aBus, w.u8[1]);
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <DecodeCMD+0x19c>)
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fc89 	bl	80014bc <UNERBUS_WriteByte>
			UNERBUS_WriteByte(aBus, w.u8[0]);
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <DecodeCMD+0x19c>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fc83 	bl	80014bc <UNERBUS_WriteByte>
			w.u16[0] = (uint16_t)myMPU.Az;
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <DecodeCMD+0x1a0>)
 8001bb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <DecodeCMD+0x19c>)
 8001bc0:	801a      	strh	r2, [r3, #0]
			UNERBUS_WriteByte(aBus, w.u8[1]);
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <DecodeCMD+0x19c>)
 8001bc4:	785b      	ldrb	r3, [r3, #1]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fc77 	bl	80014bc <UNERBUS_WriteByte>
			UNERBUS_WriteByte(aBus, w.u8[0]);
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <DecodeCMD+0x19c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fc71 	bl	80014bc <UNERBUS_WriteByte>
			w.u16[0] = (uint16_t)myMPU.Gx;
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <DecodeCMD+0x1a0>)
 8001bdc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <DecodeCMD+0x19c>)
 8001be4:	801a      	strh	r2, [r3, #0]
			UNERBUS_WriteByte(aBus, w.u8[1]);
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <DecodeCMD+0x19c>)
 8001be8:	785b      	ldrb	r3, [r3, #1]
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fc65 	bl	80014bc <UNERBUS_WriteByte>
			UNERBUS_WriteByte(aBus, w.u8[0]);
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <DecodeCMD+0x19c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fc5f 	bl	80014bc <UNERBUS_WriteByte>
			w.u16[0] = (uint16_t)myMPU.Gy;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <DecodeCMD+0x1a0>)
 8001c00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <DecodeCMD+0x19c>)
 8001c08:	801a      	strh	r2, [r3, #0]
			UNERBUS_WriteByte(aBus, w.u8[1]);
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <DecodeCMD+0x19c>)
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fc53 	bl	80014bc <UNERBUS_WriteByte>
			UNERBUS_WriteByte(aBus, w.u8[0]);
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <DecodeCMD+0x19c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fc4d 	bl	80014bc <UNERBUS_WriteByte>
			w.u16[0] = (uint16_t)myMPU.Gz;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <DecodeCMD+0x1a0>)
 8001c24:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <DecodeCMD+0x19c>)
 8001c2c:	801a      	strh	r2, [r3, #0]
			UNERBUS_WriteByte(aBus, w.u8[1]);
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <DecodeCMD+0x19c>)
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fc41 	bl	80014bc <UNERBUS_WriteByte>
			UNERBUS_WriteByte(aBus, w.u8[0]);
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <DecodeCMD+0x19c>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fc3b 	bl	80014bc <UNERBUS_WriteByte>
			length = 13;
 8001c46:	230d      	movs	r3, #13
 8001c48:	73fb      	strb	r3, [r7, #15]
			break;
 8001c4a:	e000      	b.n	8001c4e <DecodeCMD+0x17e>
		default:
			break;
 8001c4c:	bf00      	nop
	}

	if(length){
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <DecodeCMD+0x190>
		UNERBUS_Send(aBus, id, length);
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	7b7b      	ldrb	r3, [r7, #13]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fc50 	bl	8001500 <UNERBUS_Send>
	}
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000630 	.word	0x20000630
 8001c6c:	200005d8 	.word	0x200005d8
 8001c70:	20000b44 	.word	0x20000b44

08001c74 <Do10ms>:

void Do10ms(){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	ON10MS = 0;
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <Do10ms+0x38>)
 8001c7a:	7813      	ldrb	r3, [r2, #0]
 8001c7c:	f36f 0300 	bfc	r3, #0, #1
 8001c80:	7013      	strb	r3, [r2, #0]

	if(time100ms)
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <Do10ms+0x3c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <Do10ms+0x22>
		time100ms--;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <Do10ms+0x3c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <Do10ms+0x3c>)
 8001c94:	701a      	strb	r2, [r3, #0]

	ESP01_Timeout10ms();
 8001c96:	f7fe fc0f 	bl	80004b8 <ESP01_Timeout10ms>
	UNERBUS_Timeout(&unerbusESP01);
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <Do10ms+0x40>)
 8001c9c:	f7ff fd56 	bl	800174c <UNERBUS_Timeout>
	UNERBUS_Timeout(&unerbusPC);
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <Do10ms+0x44>)
 8001ca2:	f7ff fd53 	bl	800174c <UNERBUS_Timeout>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200005d4 	.word	0x200005d4
 8001cb0:	2000000c 	.word	0x2000000c
 8001cb4:	2000060c 	.word	0x2000060c
 8001cb8:	200005e8 	.word	0x200005e8

08001cbc <Do100ms>:

void Do100ms(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	time100ms = 10;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <Do100ms+0x80>)
 8001cc2:	220a      	movs	r2, #10
 8001cc4:	701a      	strb	r2, [r3, #0]

	if(maskHB & myHB)
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <Do100ms+0x84>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <Do100ms+0x88>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <Do100ms+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // ON
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cda:	481b      	ldr	r0, [pc, #108]	; (8001d48 <Do100ms+0x8c>)
 8001cdc:	f002 f97b 	bl	8003fd6 <HAL_GPIO_WritePin>
 8001ce0:	e005      	b.n	8001cee <Do100ms+0x32>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1); // OFF
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce8:	4817      	ldr	r0, [pc, #92]	; (8001d48 <Do100ms+0x8c>)
 8001cea:	f002 f974 	bl	8003fd6 <HAL_GPIO_WritePin>

	maskHB >>= 1;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <Do100ms+0x84>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <Do100ms+0x84>)
 8001cf6:	6013      	str	r3, [r2, #0]
	if(!maskHB)
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <Do100ms+0x84>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <Do100ms+0x4c>
		maskHB = 0x80000000;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <Do100ms+0x84>)
 8001d02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d06:	601a      	str	r2, [r3, #0]

	if(timeOutAlive)
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <Do100ms+0x90>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <Do100ms+0x60>
		timeOutAlive--;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <Do100ms+0x90>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <Do100ms+0x90>)
 8001d1a:	701a      	strb	r2, [r3, #0]

	if (timeOutButton)
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <Do100ms+0x94>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <Do100ms+0x74>
		timeOutButton--;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <Do100ms+0x94>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <Do100ms+0x94>)
 8001d2e:	701a      	strb	r2, [r3, #0]

	MPU6050_Read_All(&hi2c2, &myMPU);
 8001d30:	4908      	ldr	r1, [pc, #32]	; (8001d54 <Do100ms+0x98>)
 8001d32:	4809      	ldr	r0, [pc, #36]	; (8001d58 <Do100ms+0x9c>)
 8001d34:	f000 fd48 	bl	80027c8 <MPU6050_Read_All>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000000c 	.word	0x2000000c
 8001d40:	20000014 	.word	0x20000014
 8001d44:	20000010 	.word	0x20000010
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	2000000e 	.word	0x2000000e
 8001d50:	2000000d 	.word	0x2000000d
 8001d54:	20000b44 	.word	0x20000b44
 8001d58:	200004a8 	.word	0x200004a8

08001d5c <USBReceive>:


void USBReceive(uint8_t *buf, uint16_t len){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
	UNERBUS_ReceiveBuf(&unerbusPC, buf, len);
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <USBReceive+0x24>)
 8001d72:	f7ff fc65 	bl	8001640 <UNERBUS_ReceiveBuf>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200005e8 	.word	0x200005e8

08001d84 <buttonTask>:

void buttonTask(_sButton *button){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	timeOutButton = TIMEOUT_BUTTON;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <buttonTask+0x68>)
 8001d8e:	2204      	movs	r2, #4
 8001d90:	701a      	strb	r2, [r3, #0]

	myButton.value = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 8001d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d96:	4816      	ldr	r0, [pc, #88]	; (8001df0 <buttonTask+0x6c>)
 8001d98:	f002 f906 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <buttonTask+0x70>)
 8001da2:	701a      	strb	r2, [r3, #0]
	checkMEF(&myButton);
 8001da4:	4813      	ldr	r0, [pc, #76]	; (8001df4 <buttonTask+0x70>)
 8001da6:	f7ff fd03 	bl	80017b0 <checkMEF>

	switch (button->estado){
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d002      	beq.n	8001db8 <buttonTask+0x34>
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d007      	beq.n	8001dc6 <buttonTask+0x42>
			mode++;
			if (mode == maxMODES)
				mode = 0;						// Increase mode (circular: 0-MAX)
			break;
		default:
			break;
 8001db6:	e014      	b.n	8001de2 <buttonTask+0x5e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	// ON
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dbe:	480e      	ldr	r0, [pc, #56]	; (8001df8 <buttonTask+0x74>)
 8001dc0:	f002 f909 	bl	8003fd6 <HAL_GPIO_WritePin>
			break;
 8001dc4:	e00d      	b.n	8001de2 <buttonTask+0x5e>
			mode++;
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <buttonTask+0x78>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <buttonTask+0x78>)
 8001dd0:	701a      	strb	r2, [r3, #0]
			if (mode == maxMODES)
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <buttonTask+0x78>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d102      	bne.n	8001de0 <buttonTask+0x5c>
				mode = 0;						// Increase mode (circular: 0-MAX)
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <buttonTask+0x78>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
			break;
 8001de0:	bf00      	nop
	}
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000000d 	.word	0x2000000d
 8001df0:	40010c00 	.word	0x40010c00
 8001df4:	20000b38 	.word	0x20000b38
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	20000dd2 	.word	0x20000dd2

08001e00 <communicationTask>:

void communicationTask(){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	if(unerbusESP01.tx.iRead != unerbusESP01.tx.iWrite){
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <communicationTask+0xdc>)
 8001e06:	7d5a      	ldrb	r2, [r3, #21]
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <communicationTask+0xdc>)
 8001e0a:	7d9b      	ldrb	r3, [r3, #22]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d025      	beq.n	8001e5c <communicationTask+0x5c>
		w.u8[0] = unerbusESP01.tx.iWrite - unerbusESP01.tx.iRead;
 8001e10:	4b32      	ldr	r3, [pc, #200]	; (8001edc <communicationTask+0xdc>)
 8001e12:	7d9a      	ldrb	r2, [r3, #22]
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <communicationTask+0xdc>)
 8001e16:	7d5b      	ldrb	r3, [r3, #21]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <communicationTask+0xe0>)
 8001e1e:	701a      	strb	r2, [r3, #0]
		w.u8[0] &= unerbusESP01.tx.maxIndexRingBuf;
 8001e20:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <communicationTask+0xe0>)
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <communicationTask+0xdc>)
 8001e26:	7d1b      	ldrb	r3, [r3, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <communicationTask+0xe0>)
 8001e2e:	701a      	strb	r2, [r3, #0]
		if(ESP01_Send(unerbusESP01.tx.buf, unerbusESP01.tx.iRead, w.u8[0], unerbusESP01.tx.maxIndexRingBuf+1) == ESP01_SEND_READY)
 8001e30:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <communicationTask+0xdc>)
 8001e32:	6918      	ldr	r0, [r3, #16]
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <communicationTask+0xdc>)
 8001e36:	7d5b      	ldrb	r3, [r3, #21]
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <communicationTask+0xe0>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <communicationTask+0xdc>)
 8001e42:	7d1b      	ldrb	r3, [r3, #20]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f7fe fa4b 	bl	80002e4 <ESP01_Send>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b09      	cmp	r3, #9
 8001e52:	d103      	bne.n	8001e5c <communicationTask+0x5c>
			unerbusESP01.tx.iRead = unerbusESP01.tx.iWrite;
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <communicationTask+0xdc>)
 8001e56:	7d9a      	ldrb	r2, [r3, #22]
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <communicationTask+0xdc>)
 8001e5a:	755a      	strb	r2, [r3, #21]
	}

	if(unerbusPC.tx.iRead != unerbusPC.tx.iWrite){
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <communicationTask+0xe4>)
 8001e5e:	7d5a      	ldrb	r2, [r3, #21]
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <communicationTask+0xe4>)
 8001e62:	7d9b      	ldrb	r3, [r3, #22]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d037      	beq.n	8001ed8 <communicationTask+0xd8>
		if(unerbusPC.tx.iRead < unerbusPC.tx.iWrite)
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <communicationTask+0xe4>)
 8001e6a:	7d5a      	ldrb	r2, [r3, #21]
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <communicationTask+0xe4>)
 8001e6e:	7d9b      	ldrb	r3, [r3, #22]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d208      	bcs.n	8001e86 <communicationTask+0x86>
			w.u8[0] = unerbusPC.tx.iWrite - unerbusPC.tx.iRead;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <communicationTask+0xe4>)
 8001e76:	7d9a      	ldrb	r2, [r3, #22]
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <communicationTask+0xe4>)
 8001e7a:	7d5b      	ldrb	r3, [r3, #21]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <communicationTask+0xe0>)
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e009      	b.n	8001e9a <communicationTask+0x9a>
		else
			w.u8[0] = unerbusPC.tx.maxIndexRingBuf+1 - unerbusPC.tx.iRead;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <communicationTask+0xe4>)
 8001e88:	7d1a      	ldrb	r2, [r3, #20]
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <communicationTask+0xe4>)
 8001e8c:	7d5b      	ldrb	r3, [r3, #21]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <communicationTask+0xe0>)
 8001e98:	701a      	strb	r2, [r3, #0]

		if(CDC_Transmit_FS(&unerbusPC.tx.buf[unerbusPC.tx.iRead], w.u8[0]) == USBD_OK){
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <communicationTask+0xe4>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4a11      	ldr	r2, [pc, #68]	; (8001ee4 <communicationTask+0xe4>)
 8001ea0:	7d52      	ldrb	r2, [r2, #21]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <communicationTask+0xe0>)
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00a ff8b 	bl	800cdc8 <CDC_Transmit_FS>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10f      	bne.n	8001ed8 <communicationTask+0xd8>
			unerbusPC.tx.iRead += w.u8[0];
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <communicationTask+0xe4>)
 8001eba:	7d5a      	ldrb	r2, [r3, #21]
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <communicationTask+0xe0>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <communicationTask+0xe4>)
 8001ec6:	755a      	strb	r2, [r3, #21]
			unerbusPC.tx.iRead &= unerbusPC.tx.maxIndexRingBuf;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <communicationTask+0xe4>)
 8001eca:	7d5a      	ldrb	r2, [r3, #21]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <communicationTask+0xe4>)
 8001ece:	7d1b      	ldrb	r3, [r3, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <communicationTask+0xe4>)
 8001ed6:	755a      	strb	r2, [r3, #21]
		}
	}
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000060c 	.word	0x2000060c
 8001ee0:	200005d8 	.word	0x200005d8
 8001ee4:	200005e8 	.word	0x200005e8

08001ee8 <inicializarIRs>:

void inicializarIRs(){
 8001ee8:	b4b0      	push	{r4, r5, r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
	uint8_t initialValues[20] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <inicializarIRs+0x44>)
 8001ef0:	463c      	mov	r4, r7
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef8:	682b      	ldr	r3, [r5, #0]
 8001efa:	6023      	str	r3, [r4, #0]
	for (uint8_t i=0;i<20;i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	75fb      	strb	r3, [r7, #23]
 8001f00:	e00a      	b.n	8001f18 <inicializarIRs+0x30>
	{
		myTCRT5000[0].distanceValues[i] = initialValues[i];
 8001f02:	7dfa      	ldrb	r2, [r7, #23]
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	3218      	adds	r2, #24
 8001f08:	443a      	add	r2, r7
 8001f0a:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <inicializarIRs+0x48>)
 8001f10:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0;i<20;i++)
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	3301      	adds	r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b13      	cmp	r3, #19
 8001f1c:	d9f1      	bls.n	8001f02 <inicializarIRs+0x1a>
	}
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bcb0      	pop	{r4, r5, r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	0800d840 	.word	0x0800d840
 8001f30:	20000a78 	.word	0x20000a78

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f38:	f000 fede 	bl	8002cf8 <HAL_Init>
  //myADC.indexRead = 0;

  /**
   * INITIALIZE ESP01 HANDLE DATA
   */
  esp01.DoCHPD = ESP01DoCHPD;
 8001f3c:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <main+0x140>)
 8001f3e:	4a4e      	ldr	r2, [pc, #312]	; (8002078 <main+0x144>)
 8001f40:	601a      	str	r2, [r3, #0]
  esp01.WriteByteToBufRX = ESP01WriteByteToBufRX;
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <main+0x140>)
 8001f44:	4a4d      	ldr	r2, [pc, #308]	; (800207c <main+0x148>)
 8001f46:	609a      	str	r2, [r3, #8]
  esp01.WriteUSARTByte = ESP01WriteUSARTByte;
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <main+0x140>)
 8001f4a:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <main+0x14c>)
 8001f4c:	605a      	str	r2, [r3, #4]
  ESP01_Init(&esp01);
 8001f4e:	4849      	ldr	r0, [pc, #292]	; (8002074 <main+0x140>)
 8001f50:	f7fe fa76 	bl	8000440 <ESP01_Init>
  ESP01_AttachChangeState(ESP01ChangeState);
 8001f54:	484b      	ldr	r0, [pc, #300]	; (8002084 <main+0x150>)
 8001f56:	f7fe faf9 	bl	800054c <ESP01_AttachChangeState>
  ESP01_SetWIFI(WIFI_SSID, WIFI_PASSWORD);
 8001f5a:	494b      	ldr	r1, [pc, #300]	; (8002088 <main+0x154>)
 8001f5c:	484b      	ldr	r0, [pc, #300]	; (800208c <main+0x158>)
 8001f5e:	f7fe f8fd 	bl	800015c <ESP01_SetWIFI>
  ESP01_StartUDP(WIFI_UDP_REMOTE_IP, WIFI_UDP_REMOTE_PORT, WIFI_UDP_LOCAL_PORT);
 8001f62:	f247 5230 	movw	r2, #30000	; 0x7530
 8001f66:	f247 5130 	movw	r1, #30000	; 0x7530
 8001f6a:	4849      	ldr	r0, [pc, #292]	; (8002090 <main+0x15c>)
 8001f6c:	f7fe f92c 	bl	80001c8 <ESP01_StartUDP>

  /**
   * INITIALIZE UNERBUS ESP01
   */
  unerbusESP01.MyDataReady = DecodeCMD;
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <main+0x160>)
 8001f72:	4a49      	ldr	r2, [pc, #292]	; (8002098 <main+0x164>)
 8001f74:	619a      	str	r2, [r3, #24]
  unerbusESP01.WriteUSARTByte = NULL;
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <main+0x160>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61da      	str	r2, [r3, #28]
  unerbusESP01.rx.buf = bufRXESP01;
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <main+0x160>)
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <main+0x168>)
 8001f80:	601a      	str	r2, [r3, #0]
  unerbusESP01.rx.maxIndexRingBuf = (SIZEBUFRXESP01 - 1);
 8001f82:	4b44      	ldr	r3, [pc, #272]	; (8002094 <main+0x160>)
 8001f84:	227f      	movs	r2, #127	; 0x7f
 8001f86:	711a      	strb	r2, [r3, #4]
  unerbusESP01.tx.buf = bufTXESP01;
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <main+0x160>)
 8001f8a:	4a45      	ldr	r2, [pc, #276]	; (80020a0 <main+0x16c>)
 8001f8c:	611a      	str	r2, [r3, #16]
  unerbusESP01.tx.maxIndexRingBuf = (SIZEBUFTXESP01 - 1);
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <main+0x160>)
 8001f90:	227f      	movs	r2, #127	; 0x7f
 8001f92:	751a      	strb	r2, [r3, #20]
  UNERBUS_Init(&unerbusESP01);
 8001f94:	483f      	ldr	r0, [pc, #252]	; (8002094 <main+0x160>)
 8001f96:	f7ff fa41 	bl	800141c <UNERBUS_Init>

  /**
   * INITIALIZE UNERBUS PC
   */
  unerbusPC.MyDataReady = DecodeCMD;
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <main+0x170>)
 8001f9c:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <main+0x164>)
 8001f9e:	619a      	str	r2, [r3, #24]
  unerbusPC.WriteUSARTByte = NULL;
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <main+0x170>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  unerbusPC.rx.buf = bufRXPC;
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <main+0x170>)
 8001fa8:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <main+0x174>)
 8001faa:	601a      	str	r2, [r3, #0]
  unerbusPC.rx.maxIndexRingBuf = (SIZEBUFRXPC - 1);
 8001fac:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <main+0x170>)
 8001fae:	227f      	movs	r2, #127	; 0x7f
 8001fb0:	711a      	strb	r2, [r3, #4]
  unerbusPC.tx.buf = bufTXPC;
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <main+0x170>)
 8001fb4:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <main+0x178>)
 8001fb6:	611a      	str	r2, [r3, #16]
  unerbusPC.tx.maxIndexRingBuf = (SIZEBUFTXPC - 1);
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <main+0x170>)
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	751a      	strb	r2, [r3, #20]
  UNERBUS_Init(&unerbusPC);
 8001fbe:	4839      	ldr	r0, [pc, #228]	; (80020a4 <main+0x170>)
 8001fc0:	f7ff fa2c 	bl	800141c <UNERBUS_Init>

  /**
   * INITIALIZATION OF OTHER FUNCTIONS
   */
  inicializarBoton(&myButton);
 8001fc4:	483a      	ldr	r0, [pc, #232]	; (80020b0 <main+0x17c>)
 8001fc6:	f7ff fbdb 	bl	8001780 <inicializarBoton>
  inicializarIRs();
 8001fca:	f7ff ff8d 	bl	8001ee8 <inicializarIRs>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fce:	f000 f883 	bl	80020d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd2:	f000 faff 	bl	80025d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd6:	f000 fadf 	bl	8002598 <MX_DMA_Init>
  MX_TIM1_Init();
 8001fda:	f000 f9e9 	bl	80023b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001fde:	f000 fab1 	bl	8002544 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001fe2:	f00a fdcb 	bl	800cb7c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001fe6:	f000 f8d5 	bl	8002194 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001fea:	f000 f975 	bl	80022d8 <MX_ADC2_Init>
  MX_TIM4_Init();
 8001fee:	f000 fa2f 	bl	8002450 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001ff2:	f000 f9af 	bl	8002354 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachRxData(USBReceive);
 8001ff6:	482f      	ldr	r0, [pc, #188]	; (80020b4 <main+0x180>)
 8001ff8:	f00a ff0c 	bl	800ce14 <CDC_AttachRxData>

  HAL_UART_Receive_IT(&huart1, &dataRXESP01, 1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	492e      	ldr	r1, [pc, #184]	; (80020b8 <main+0x184>)
 8002000:	482e      	ldr	r0, [pc, #184]	; (80020bc <main+0x188>)
 8002002:	f006 f977 	bl	80082f4 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim1);
 8002006:	482e      	ldr	r0, [pc, #184]	; (80020c0 <main+0x18c>)
 8002008:	f005 fadc 	bl	80075c4 <HAL_TIM_Base_Start_IT>

  MPU6050_Init(&hi2c2);
 800200c:	482d      	ldr	r0, [pc, #180]	; (80020c4 <main+0x190>)
 800200e:	f000 fb84 	bl	800271a <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!timeOutAlive){
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <main+0x194>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <main+0xfe>
		  UNERBUS_WriteByte(&unerbusESP01, ACKNOWLEDGE);
 800201a:	210d      	movs	r1, #13
 800201c:	481d      	ldr	r0, [pc, #116]	; (8002094 <main+0x160>)
 800201e:	f7ff fa4d 	bl	80014bc <UNERBUS_WriteByte>
		  UNERBUS_Send(&unerbusESP01, ALIVE, 2);
 8002022:	2202      	movs	r2, #2
 8002024:	21f0      	movs	r1, #240	; 0xf0
 8002026:	481b      	ldr	r0, [pc, #108]	; (8002094 <main+0x160>)
 8002028:	f7ff fa6a 	bl	8001500 <UNERBUS_Send>
		  timeOutAlive = TIMEOUT_ALIVE;
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <main+0x194>)
 800202e:	2232      	movs	r2, #50	; 0x32
 8002030:	701a      	strb	r2, [r3, #0]
	  }

	  if (!timeOutButton)
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <main+0x198>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <main+0x10c>
		  buttonTask(&myButton);
 800203a:	481d      	ldr	r0, [pc, #116]	; (80020b0 <main+0x17c>)
 800203c:	f7ff fea2 	bl	8001d84 <buttonTask>

	  if (!time100ms)
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <main+0x19c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <main+0x118>
		  Do100ms();
 8002048:	f7ff fe38 	bl	8001cbc <Do100ms>

	  if (ON10MS)
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <main+0x1a0>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <main+0x12a>
		  Do10ms();
 800205a:	f7ff fe0b 	bl	8001c74 <Do10ms>

	  communicationTask();
 800205e:	f7ff fecf 	bl	8001e00 <communicationTask>

	  ESP01_Task();
 8002062:	f7fe fa59 	bl	8000518 <ESP01_Task>

	  UNERBUS_Task(&unerbusESP01);
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <main+0x160>)
 8002068:	f7ff fb3a 	bl	80016e0 <UNERBUS_Task>

	  UNERBUS_Task(&unerbusPC);
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <main+0x170>)
 800206e:	f7ff fb37 	bl	80016e0 <UNERBUS_Task>
	  if (!timeOutAlive){
 8002072:	e7ce      	b.n	8002012 <main+0xde>
 8002074:	200005dc 	.word	0x200005dc
 8002078:	080019e1 	.word	0x080019e1
 800207c:	08001a3d 	.word	0x08001a3d
 8002080:	08001a05 	.word	0x08001a05
 8002084:	08001a5d 	.word	0x08001a5d
 8002088:	0800d854 	.word	0x0800d854
 800208c:	0800d864 	.word	0x0800d864
 8002090:	0800d87c 	.word	0x0800d87c
 8002094:	2000060c 	.word	0x2000060c
 8002098:	08001ad1 	.word	0x08001ad1
 800209c:	20000cd0 	.word	0x20000cd0
 80020a0:	20000d50 	.word	0x20000d50
 80020a4:	200005e8 	.word	0x200005e8
 80020a8:	20000b50 	.word	0x20000b50
 80020ac:	20000bd0 	.word	0x20000bd0
 80020b0:	20000b38 	.word	0x20000b38
 80020b4:	08001d5d 	.word	0x08001d5d
 80020b8:	20000dd0 	.word	0x20000dd0
 80020bc:	2000058c 	.word	0x2000058c
 80020c0:	200004fc 	.word	0x200004fc
 80020c4:	200004a8 	.word	0x200004a8
 80020c8:	2000000e 	.word	0x2000000e
 80020cc:	2000000d 	.word	0x2000000d
 80020d0:	2000000c 	.word	0x2000000c
 80020d4:	200005d4 	.word	0x200005d4

080020d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b094      	sub	sp, #80	; 0x50
 80020dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	2228      	movs	r2, #40	; 0x28
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00b fab6 	bl	800d658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002108:	2301      	movs	r3, #1
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800210c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002116:	2301      	movs	r3, #1
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211a:	2302      	movs	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800211e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002124:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002128:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fd32 	bl	8006b98 <HAL_RCC_OscConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800213a:	f000 fae9 	bl	8002710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213e:	230f      	movs	r3, #15
 8002140:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800214a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800214e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2102      	movs	r1, #2
 800215a:	4618      	mov	r0, r3
 800215c:	f004 ff9e 	bl	800709c <HAL_RCC_ClockConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002166:	f000 fad3 	bl	8002710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800216a:	2312      	movs	r3, #18
 800216c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800216e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002172:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4618      	mov	r0, r3
 800217c:	f005 f91c 	bl	80073b8 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002186:	f000 fac3 	bl	8002710 <Error_Handler>
  }
}
 800218a:	bf00      	nop
 800218c:	3750      	adds	r7, #80	; 0x50
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021a6:	4a4b      	ldr	r2, [pc, #300]	; (80022d4 <MX_ADC1_Init+0x140>)
 80021a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021b8:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021c0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80021c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021c6:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80021cc:	4b40      	ldr	r3, [pc, #256]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021ce:	2208      	movs	r2, #8
 80021d0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021d2:	483f      	ldr	r0, [pc, #252]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021d4:	f000 fdf2 	bl	8002dbc <HAL_ADC_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80021de:	f000 fa97 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80021ea:	2302      	movs	r3, #2
 80021ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4837      	ldr	r0, [pc, #220]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80021f4:	f000 ffaa 	bl	800314c <HAL_ADC_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021fe:	f000 fa87 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002202:	2301      	movs	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002206:	2302      	movs	r3, #2
 8002208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4830      	ldr	r0, [pc, #192]	; (80022d0 <MX_ADC1_Init+0x13c>)
 8002210:	f000 ff9c 	bl	800314c <HAL_ADC_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800221a:	f000 fa79 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800221e:	2302      	movs	r3, #2
 8002220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002222:	2303      	movs	r3, #3
 8002224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4829      	ldr	r0, [pc, #164]	; (80022d0 <MX_ADC1_Init+0x13c>)
 800222c:	f000 ff8e 	bl	800314c <HAL_ADC_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002236:	f000 fa6b 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800223a:	2303      	movs	r3, #3
 800223c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800223e:	2304      	movs	r3, #4
 8002240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4822      	ldr	r0, [pc, #136]	; (80022d0 <MX_ADC1_Init+0x13c>)
 8002248:	f000 ff80 	bl	800314c <HAL_ADC_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002252:	f000 fa5d 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002256:	2304      	movs	r3, #4
 8002258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800225a:	2305      	movs	r3, #5
 800225c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4619      	mov	r1, r3
 8002262:	481b      	ldr	r0, [pc, #108]	; (80022d0 <MX_ADC1_Init+0x13c>)
 8002264:	f000 ff72 	bl	800314c <HAL_ADC_ConfigChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800226e:	f000 fa4f 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002272:	2305      	movs	r3, #5
 8002274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002276:	2306      	movs	r3, #6
 8002278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4814      	ldr	r0, [pc, #80]	; (80022d0 <MX_ADC1_Init+0x13c>)
 8002280:	f000 ff64 	bl	800314c <HAL_ADC_ConfigChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800228a:	f000 fa41 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800228e:	2306      	movs	r3, #6
 8002290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002292:	2307      	movs	r3, #7
 8002294:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4619      	mov	r1, r3
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_ADC1_Init+0x13c>)
 800229c:	f000 ff56 	bl	800314c <HAL_ADC_ConfigChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80022a6:	f000 fa33 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80022aa:	2307      	movs	r3, #7
 80022ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80022ae:	2308      	movs	r3, #8
 80022b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <MX_ADC1_Init+0x13c>)
 80022b8:	f000 ff48 	bl	800314c <HAL_ADC_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80022c2:	f000 fa25 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000404 	.word	0x20000404
 80022d4:	40012400 	.word	0x40012400

080022d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_ADC2_Init+0x74>)
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <MX_ADC2_Init+0x78>)
 80022ec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_ADC2_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_ADC2_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_ADC2_Init+0x74>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_ADC2_Init+0x74>)
 8002302:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002306:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_ADC2_Init+0x74>)
 800230a:	2200      	movs	r2, #0
 800230c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_ADC2_Init+0x74>)
 8002310:	2201      	movs	r2, #1
 8002312:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002314:	480d      	ldr	r0, [pc, #52]	; (800234c <MX_ADC2_Init+0x74>)
 8002316:	f000 fd51 	bl	8002dbc <HAL_ADC_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002320:	f000 f9f6 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002324:	2302      	movs	r3, #2
 8002326:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002328:	2301      	movs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_ADC2_Init+0x74>)
 8002336:	f000 ff09 	bl	800314c <HAL_ADC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002340:	f000 f9e6 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000434 	.word	0x20000434
 8002350:	40012800 	.word	0x40012800

08002354 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <MX_I2C2_Init+0x50>)
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <MX_I2C2_Init+0x54>)
 800235c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MX_I2C2_Init+0x58>)
 8002362:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_I2C2_Init+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002376:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <MX_I2C2_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_I2C2_Init+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002392:	f001 fe39 	bl	8004008 <HAL_I2C_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800239c:	f000 f9b8 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200004a8 	.word	0x200004a8
 80023a8:	40005800 	.word	0x40005800
 80023ac:	000186a0 	.word	0x000186a0

080023b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b6:	f107 0308 	add.w	r3, r7, #8
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c4:	463b      	mov	r3, r7
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <MX_TIM1_Init+0x98>)
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <MX_TIM1_Init+0x9c>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <MX_TIM1_Init+0x98>)
 80023d4:	2247      	movs	r2, #71	; 0x47
 80023d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <MX_TIM1_Init+0x98>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <MX_TIM1_Init+0x98>)
 80023e0:	22fa      	movs	r2, #250	; 0xfa
 80023e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <MX_TIM1_Init+0x98>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <MX_TIM1_Init+0x98>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <MX_TIM1_Init+0x98>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023f6:	4814      	ldr	r0, [pc, #80]	; (8002448 <MX_TIM1_Init+0x98>)
 80023f8:	f005 f894 	bl	8007524 <HAL_TIM_Base_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8002402:	f000 f985 	bl	8002710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800240c:	f107 0308 	add.w	r3, r7, #8
 8002410:	4619      	mov	r1, r3
 8002412:	480d      	ldr	r0, [pc, #52]	; (8002448 <MX_TIM1_Init+0x98>)
 8002414:	f005 fb42 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800241e:	f000 f977 	bl	8002710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800242a:	463b      	mov	r3, r7
 800242c:	4619      	mov	r1, r3
 800242e:	4806      	ldr	r0, [pc, #24]	; (8002448 <MX_TIM1_Init+0x98>)
 8002430:	f005 fea0 	bl	8008174 <HAL_TIMEx_MasterConfigSynchronization>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800243a:	f000 f969 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200004fc 	.word	0x200004fc
 800244c:	40012c00 	.word	0x40012c00

08002450 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	615a      	str	r2, [r3, #20]
 8002470:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002472:	4b32      	ldr	r3, [pc, #200]	; (800253c <MX_TIM4_Init+0xec>)
 8002474:	4a32      	ldr	r2, [pc, #200]	; (8002540 <MX_TIM4_Init+0xf0>)
 8002476:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002478:	4b30      	ldr	r3, [pc, #192]	; (800253c <MX_TIM4_Init+0xec>)
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <MX_TIM4_Init+0xec>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <MX_TIM4_Init+0xec>)
 8002486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <MX_TIM4_Init+0xec>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b2a      	ldr	r3, [pc, #168]	; (800253c <MX_TIM4_Init+0xec>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002498:	4828      	ldr	r0, [pc, #160]	; (800253c <MX_TIM4_Init+0xec>)
 800249a:	f005 f8e5 	bl	8007668 <HAL_TIM_PWM_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80024a4:	f000 f934 	bl	8002710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024b0:	f107 0320 	add.w	r3, r7, #32
 80024b4:	4619      	mov	r1, r3
 80024b6:	4821      	ldr	r0, [pc, #132]	; (800253c <MX_TIM4_Init+0xec>)
 80024b8:	f005 fe5c 	bl	8008174 <HAL_TIMEx_MasterConfigSynchronization>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80024c2:	f000 f925 	bl	8002710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c6:	2360      	movs	r3, #96	; 0x60
 80024c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2200      	movs	r2, #0
 80024da:	4619      	mov	r1, r3
 80024dc:	4817      	ldr	r0, [pc, #92]	; (800253c <MX_TIM4_Init+0xec>)
 80024de:	f005 fa1b 	bl	8007918 <HAL_TIM_PWM_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80024e8:	f000 f912 	bl	8002710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2204      	movs	r2, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4812      	ldr	r0, [pc, #72]	; (800253c <MX_TIM4_Init+0xec>)
 80024f4:	f005 fa10 	bl	8007918 <HAL_TIM_PWM_ConfigChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80024fe:	f000 f907 	bl	8002710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	2208      	movs	r2, #8
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <MX_TIM4_Init+0xec>)
 800250a:	f005 fa05 	bl	8007918 <HAL_TIM_PWM_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002514:	f000 f8fc 	bl	8002710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	220c      	movs	r2, #12
 800251c:	4619      	mov	r1, r3
 800251e:	4807      	ldr	r0, [pc, #28]	; (800253c <MX_TIM4_Init+0xec>)
 8002520:	f005 f9fa 	bl	8007918 <HAL_TIM_PWM_ConfigChannel>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800252a:	f000 f8f1 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <MX_TIM4_Init+0xec>)
 8002530:	f000 fade 	bl	8002af0 <HAL_TIM_MspPostInit>

}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	; 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000544 	.word	0x20000544
 8002540:	40000800 	.word	0x40000800

08002544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <MX_USART1_UART_Init+0x50>)
 800254c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800257c:	f005 fe6a 	bl	8008254 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002586:	f000 f8c3 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000058c 	.word	0x2000058c
 8002594:	40013800 	.word	0x40013800

08002598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_DMA_Init+0x38>)
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <MX_DMA_Init+0x38>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6153      	str	r3, [r2, #20]
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_DMA_Init+0x38>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	200b      	movs	r0, #11
 80025bc:	f001 f897 	bl	80036ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025c0:	200b      	movs	r0, #11
 80025c2:	f001 f8b0 	bl	8003726 <HAL_NVIC_EnableIRQ>

}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <MX_GPIO_Init+0x128>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a43      	ldr	r2, [pc, #268]	; (80026fc <MX_GPIO_Init+0x128>)
 80025ee:	f043 0310 	orr.w	r3, r3, #16
 80025f2:	6193      	str	r3, [r2, #24]
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <MX_GPIO_Init+0x128>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002600:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <MX_GPIO_Init+0x128>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4a3d      	ldr	r2, [pc, #244]	; (80026fc <MX_GPIO_Init+0x128>)
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	6193      	str	r3, [r2, #24]
 800260c:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <MX_GPIO_Init+0x128>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <MX_GPIO_Init+0x128>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a37      	ldr	r2, [pc, #220]	; (80026fc <MX_GPIO_Init+0x128>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <MX_GPIO_Init+0x128>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002630:	4b32      	ldr	r3, [pc, #200]	; (80026fc <MX_GPIO_Init+0x128>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a31      	ldr	r2, [pc, #196]	; (80026fc <MX_GPIO_Init+0x128>)
 8002636:	f043 0308 	orr.w	r3, r3, #8
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <MX_GPIO_Init+0x128>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800264e:	482c      	ldr	r0, [pc, #176]	; (8002700 <MX_GPIO_Init+0x12c>)
 8002650:	f001 fcc1 	bl	8003fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_EN_GPIO_Port, CH_EN_Pin, GPIO_PIN_RESET);
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265a:	482a      	ldr	r0, [pc, #168]	; (8002704 <MX_GPIO_Init+0x130>)
 800265c:	f001 fcbb 	bl	8003fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002666:	2301      	movs	r3, #1
 8002668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2302      	movs	r3, #2
 8002670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4821      	ldr	r0, [pc, #132]	; (8002700 <MX_GPIO_Init+0x12c>)
 800267a:	f001 fb11 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 800267e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002688:	2301      	movs	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	481d      	ldr	r0, [pc, #116]	; (8002708 <MX_GPIO_Init+0x134>)
 8002694:	f001 fb04 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_EN_Pin */
  GPIO_InitStruct.Pin = CH_EN_Pin;
 8002698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2302      	movs	r3, #2
 80026a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH_EN_GPIO_Port, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4814      	ldr	r0, [pc, #80]	; (8002704 <MX_GPIO_Init+0x130>)
 80026b2:	f001 faf5 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026b6:	2330      	movs	r3, #48	; 0x30
 80026b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2302      	movs	r3, #2
 80026c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	480f      	ldr	r0, [pc, #60]	; (8002708 <MX_GPIO_Init+0x134>)
 80026ca:	f001 fae9 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <MX_GPIO_Init+0x138>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <MX_GPIO_Init+0x138>)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40011000 	.word	0x40011000
 8002704:	40010800 	.word	0x40010800
 8002708:	40010c00 	.word	0x40010c00
 800270c:	40010000 	.word	0x40010000

08002710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002714:	b672      	cpsid	i
}
 8002716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002718:	e7fe      	b.n	8002718 <Error_Handler+0x8>

0800271a <MPU6050_Init>:
// Setup MPU6050
#define MPU6050_ADDR 0xD0
const uint16_t i2c_timeout = 100;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af04      	add	r7, sp, #16
 8002720:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002722:	2364      	movs	r3, #100	; 0x64
 8002724:	9302      	str	r3, [sp, #8]
 8002726:	2301      	movs	r3, #1
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	f107 030f 	add.w	r3, r7, #15
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2301      	movs	r3, #1
 8002732:	2275      	movs	r2, #117	; 0x75
 8002734:	21d0      	movs	r1, #208	; 0xd0
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f001 fea4 	bl	8004484 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b68      	cmp	r3, #104	; 0x68
 8002740:	d13d      	bne.n	80027be <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002746:	2364      	movs	r3, #100	; 0x64
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	2301      	movs	r3, #1
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	f107 030e 	add.w	r3, r7, #14
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2301      	movs	r3, #1
 8002756:	226b      	movs	r2, #107	; 0x6b
 8002758:	21d0      	movs	r1, #208	; 0xd0
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f001 fd98 	bl	8004290 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002760:	2307      	movs	r3, #7
 8002762:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002764:	2364      	movs	r3, #100	; 0x64
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	2301      	movs	r3, #1
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	f107 030e 	add.w	r3, r7, #14
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	2219      	movs	r2, #25
 8002776:	21d0      	movs	r1, #208	; 0xd0
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f001 fd89 	bl	8004290 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002782:	2364      	movs	r3, #100	; 0x64
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	2301      	movs	r3, #1
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	f107 030e 	add.w	r3, r7, #14
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	221c      	movs	r2, #28
 8002794:	21d0      	movs	r1, #208	; 0xd0
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f001 fd7a 	bl	8004290 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800279c:	2300      	movs	r3, #0
 800279e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80027a0:	2364      	movs	r3, #100	; 0x64
 80027a2:	9302      	str	r3, [sp, #8]
 80027a4:	2301      	movs	r3, #1
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	f107 030e 	add.w	r3, r7, #14
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	221b      	movs	r2, #27
 80027b2:	21d0      	movs	r1, #208	; 0xd0
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f001 fd6b 	bl	8004290 <HAL_I2C_Mem_Write>
        return 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <MPU6050_Init+0xa6>
    }
    return 1;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, _sMPUData *DataStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af04      	add	r7, sp, #16
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80027d2:	2364      	movs	r3, #100	; 0x64
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	230e      	movs	r3, #14
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	223b      	movs	r2, #59	; 0x3b
 80027e4:	21d0      	movs	r1, #208	; 0xd0
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f001 fe4c 	bl	8004484 <HAL_I2C_Mem_Read>

    DataStruct->Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80027ec:	7a3b      	ldrb	r3, [r7, #8]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	7a7b      	ldrb	r3, [r7, #9]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b21a      	sxth	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	801a      	strh	r2, [r3, #0]
    DataStruct->Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80027fe:	7abb      	ldrb	r3, [r7, #10]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b21a      	sxth	r2, r3
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	b21b      	sxth	r3, r3
 8002808:	4313      	orrs	r3, r2
 800280a:	b21a      	sxth	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	805a      	strh	r2, [r3, #2]
    DataStruct->Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002810:	7b3b      	ldrb	r3, [r7, #12]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	7b7b      	ldrb	r3, [r7, #13]
 8002818:	b21b      	sxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b21a      	sxth	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	809a      	strh	r2, [r3, #4]
    DataStruct->Gx = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002822:	7c3b      	ldrb	r3, [r7, #16]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b21a      	sxth	r2, r3
 8002828:	7c7b      	ldrb	r3, [r7, #17]
 800282a:	b21b      	sxth	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b21a      	sxth	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	80da      	strh	r2, [r3, #6]
    DataStruct->Gy = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002834:	7cbb      	ldrb	r3, [r7, #18]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21a      	sxth	r2, r3
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b21a      	sxth	r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	811a      	strh	r2, [r3, #8]
    DataStruct->Gz = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002846:	7d3b      	ldrb	r3, [r7, #20]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7d7b      	ldrb	r3, [r7, #21]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21a      	sxth	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	815a      	strh	r2, [r3, #10]
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_MspInit+0x5c>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_MspInit+0x5c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6193      	str	r3, [r2, #24]
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_MspInit+0x5c>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_MspInit+0x5c>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_MspInit+0x5c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_MspInit+0x5c>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_MspInit+0x60>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_MspInit+0x60>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010000 	.word	0x40010000

080028c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0318 	add.w	r3, r7, #24
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <HAL_ADC_MspInit+0x10c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d14a      	bne.n	800297a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	4a3a      	ldr	r2, [pc, #232]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ee:	6193      	str	r3, [r2, #24]
 80028f0:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002914:	23ff      	movs	r3, #255	; 0xff
 8002916:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002918:	2303      	movs	r3, #3
 800291a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	4619      	mov	r1, r3
 8002922:	482d      	ldr	r0, [pc, #180]	; (80029d8 <HAL_ADC_MspInit+0x114>)
 8002924:	f001 f9bc 	bl	8003ca0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_ADC_MspInit+0x118>)
 800292a:	4a2d      	ldr	r2, [pc, #180]	; (80029e0 <HAL_ADC_MspInit+0x11c>)
 800292c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_ADC_MspInit+0x118>)
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_ADC_MspInit+0x118>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_ADC_MspInit+0x118>)
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002940:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_ADC_MspInit+0x118>)
 8002942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002946:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_ADC_MspInit+0x118>)
 800294a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_ADC_MspInit+0x118>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_ADC_MspInit+0x118>)
 8002958:	2200      	movs	r2, #0
 800295a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800295c:	481f      	ldr	r0, [pc, #124]	; (80029dc <HAL_ADC_MspInit+0x118>)
 800295e:	f000 fefd 	bl	800375c <HAL_DMA_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002968:	f7ff fed2 	bl	8002710 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_ADC_MspInit+0x118>)
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <HAL_ADC_MspInit+0x118>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002978:	e026      	b.n	80029c8 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_ADC_MspInit+0x120>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d121      	bne.n	80029c8 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6193      	str	r3, [r2, #24]
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_ADC_MspInit+0x110>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029b4:	2304      	movs	r3, #4
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b8:	2303      	movs	r3, #3
 80029ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 0318 	add.w	r3, r7, #24
 80029c0:	4619      	mov	r1, r3
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <HAL_ADC_MspInit+0x114>)
 80029c4:	f001 f96c 	bl	8003ca0 <HAL_GPIO_Init>
}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40012400 	.word	0x40012400
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010800 	.word	0x40010800
 80029dc:	20000464 	.word	0x20000464
 80029e0:	40020008 	.word	0x40020008
 80029e4:	40012800 	.word	0x40012800

080029e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_I2C_MspInit+0x74>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d124      	bne.n	8002a52 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_I2C_MspInit+0x78>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <HAL_I2C_MspInit+0x78>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_I2C_MspInit+0x78>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a26:	2312      	movs	r3, #18
 8002a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	4619      	mov	r1, r3
 8002a34:	480b      	ldr	r0, [pc, #44]	; (8002a64 <HAL_I2C_MspInit+0x7c>)
 8002a36:	f001 f933 	bl	8003ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_I2C_MspInit+0x78>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_I2C_MspInit+0x78>)
 8002a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_I2C_MspInit+0x78>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a52:	bf00      	nop
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40005800 	.word	0x40005800
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010c00 	.word	0x40010c00

08002a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <HAL_TIM_Base_MspInit+0x44>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_TIM_Base_MspInit+0x48>)
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <HAL_TIM_Base_MspInit+0x48>)
 8002a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a84:	6193      	str	r3, [r2, #24]
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_TIM_Base_MspInit+0x48>)
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2019      	movs	r0, #25
 8002a98:	f000 fe29 	bl	80036ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a9c:	2019      	movs	r0, #25
 8002a9e:	f000 fe42 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_TIM_PWM_MspInit+0x34>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10b      	bne.n	8002ade <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_TIM_PWM_MspInit+0x38>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_TIM_PWM_MspInit+0x38>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	61d3      	str	r3, [r2, #28]
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_TIM_PWM_MspInit+0x38>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_TIM_MspPostInit+0x5c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d118      	bne.n	8002b42 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_TIM_MspPostInit+0x60>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_TIM_MspPostInit+0x60>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_TIM_MspPostInit+0x60>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b28:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2302      	movs	r3, #2
 8002b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <HAL_TIM_MspPostInit+0x64>)
 8002b3e:	f001 f8af 	bl	8003ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40010c00 	.word	0x40010c00

08002b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_UART_MspInit+0x9c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d139      	bne.n	8002bec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <HAL_UART_MspInit+0xa0>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	; (8002bf8 <HAL_UART_MspInit+0xa0>)
 8002b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <HAL_UART_MspInit+0xa0>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_UART_MspInit+0xa0>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_UART_MspInit+0xa0>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <HAL_UART_MspInit+0xa0>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480f      	ldr	r0, [pc, #60]	; (8002bfc <HAL_UART_MspInit+0xa4>)
 8002bbe:	f001 f86f 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4809      	ldr	r0, [pc, #36]	; (8002bfc <HAL_UART_MspInit+0xa4>)
 8002bd8:	f001 f862 	bl	8003ca0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2025      	movs	r0, #37	; 0x25
 8002be2:	f000 fd84 	bl	80036ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002be6:	2025      	movs	r0, #37	; 0x25
 8002be8:	f000 fd9d 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bec:	bf00      	nop
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010800 	.word	0x40010800

08002c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c04:	e7fe      	b.n	8002c04 <NMI_Handler+0x4>

08002c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <HardFault_Handler+0x4>

08002c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <MemManage_Handler+0x4>

08002c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c46:	f000 f89d 	bl	8002d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <DMA1_Channel1_IRQHandler+0x10>)
 8002c56:	f000 feef 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000464 	.word	0x20000464

08002c64 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c6a:	f002 fb4b 	bl	8005304 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200014ac 	.word	0x200014ac

08002c78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <TIM1_UP_IRQHandler+0x10>)
 8002c7e:	f004 fd42 	bl	8007706 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200004fc 	.word	0x200004fc

08002c8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <USART1_IRQHandler+0x10>)
 8002c92:	f005 fb55 	bl	8008340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000058c 	.word	0x2000058c

08002ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cac:	f7ff fff8 	bl	8002ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cb2:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cc8:	4c09      	ldr	r4, [pc, #36]	; (8002cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f00a fcdb 	bl	800d690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cda:	f7ff f92b 	bl	8001f34 <main>
  bx lr
 8002cde:	4770      	bx	lr
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce4:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002ce8:	0800daf8 	.word	0x0800daf8
  ldr r2, =_sbss
 8002cec:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002cf0:	200019bc 	.word	0x200019bc

08002cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC1_2_IRQHandler>
	...

08002cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_Init+0x28>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <HAL_Init+0x28>)
 8002d02:	f043 0310 	orr.w	r3, r3, #16
 8002d06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d08:	2003      	movs	r0, #3
 8002d0a:	f000 fce5 	bl	80036d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d0e:	200f      	movs	r0, #15
 8002d10:	f000 f808 	bl	8002d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d14:	f7ff fda4 	bl	8002860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40022000 	.word	0x40022000

08002d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_InitTick+0x54>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_InitTick+0x58>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fcfd 	bl	8003742 <HAL_SYSTICK_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00e      	b.n	8002d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b0f      	cmp	r3, #15
 8002d56:	d80a      	bhi.n	8002d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	f000 fcc5 	bl	80036ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d64:	4a06      	ldr	r2, [pc, #24]	; (8002d80 <HAL_InitTick+0x5c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000018 	.word	0x20000018
 8002d7c:	20000020 	.word	0x20000020
 8002d80:	2000001c 	.word	0x2000001c

08002d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x20>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	4a03      	ldr	r2, [pc, #12]	; (8002da4 <HAL_IncTick+0x20>)
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000020 	.word	0x20000020
 8002da4:	20000dd4 	.word	0x20000dd4

08002da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_GetTick+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000dd4 	.word	0x20000dd4

08002dbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0be      	b.n	8002f5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fd62 	bl	80028c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 faf5 	bl	80033f0 <ADC_ConversionStop_Disable>
 8002e06:	4603      	mov	r3, r0
 8002e08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8099 	bne.w	8002f4a <HAL_ADC_Init+0x18e>
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8095 	bne.w	8002f4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e28:	f023 0302 	bic.w	r3, r3, #2
 8002e2c:	f043 0202 	orr.w	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7b1b      	ldrb	r3, [r3, #12]
 8002e42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d003      	beq.n	8002e5e <HAL_ADC_Init+0xa2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_ADC_Init+0xa8>
 8002e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e62:	e000      	b.n	8002e66 <HAL_ADC_Init+0xaa>
 8002e64:	2300      	movs	r3, #0
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7d1b      	ldrb	r3, [r3, #20]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d119      	bne.n	8002ea8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7b1b      	ldrb	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	035a      	lsls	r2, r3, #13
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_ADC_Init+0x1a8>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed8:	d003      	beq.n	8002ee2 <HAL_ADC_Init+0x126>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d104      	bne.n	8002eec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	051b      	lsls	r3, r3, #20
 8002eea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <HAL_ADC_Init+0x1ac>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f26:	e018      	b.n	8002f5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f023 0312 	bic.w	r3, r3, #18
 8002f30:	f043 0210 	orr.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f48:	e007      	b.n	8002f5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	ffe1f7fd 	.word	0xffe1f7fd
 8002f68:	ff1f0efe 	.word	0xff1f0efe

08002f6c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a64      	ldr	r2, [pc, #400]	; (8003114 <HAL_ADC_Start_DMA+0x1a8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_ADC_Start_DMA+0x24>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a63      	ldr	r2, [pc, #396]	; (8003118 <HAL_ADC_Start_DMA+0x1ac>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d106      	bne.n	8002f9e <HAL_ADC_Start_DMA+0x32>
 8002f90:	4b60      	ldr	r3, [pc, #384]	; (8003114 <HAL_ADC_Start_DMA+0x1a8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 80b3 	bne.w	8003104 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_Start_DMA+0x40>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0ae      	b.n	800310a <HAL_ADC_Start_DMA+0x19e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f9c1 	bl	800333c <ADC_Enable>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 809a 	bne.w	80030fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4e      	ldr	r2, [pc, #312]	; (8003118 <HAL_ADC_Start_DMA+0x1ac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d105      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x84>
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_ADC_Start_DMA+0x1a8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	2b00      	cmp	r3, #0
 8003008:	d026      	beq.n	8003058 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800301a:	e01d      	b.n	8003058 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a39      	ldr	r2, [pc, #228]	; (8003114 <HAL_ADC_Start_DMA+0x1a8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_ADC_Start_DMA+0xd0>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a38      	ldr	r2, [pc, #224]	; (8003118 <HAL_ADC_Start_DMA+0x1ac>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10d      	bne.n	8003058 <HAL_ADC_Start_DMA+0xec>
 800303c:	4b35      	ldr	r3, [pc, #212]	; (8003114 <HAL_ADC_Start_DMA+0x1a8>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003050:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f023 0206 	bic.w	r2, r3, #6
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003070:	e002      	b.n	8003078 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a25      	ldr	r2, [pc, #148]	; (800311c <HAL_ADC_Start_DMA+0x1b0>)
 8003086:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a24      	ldr	r2, [pc, #144]	; (8003120 <HAL_ADC_Start_DMA+0x1b4>)
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <HAL_ADC_Start_DMA+0x1b8>)
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0202 	mvn.w	r2, #2
 80030a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a18      	ldr	r0, [r3, #32]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	334c      	adds	r3, #76	; 0x4c
 80030bc:	4619      	mov	r1, r3
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f000 fba5 	bl	8003810 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030d4:	d108      	bne.n	80030e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80030e6:	e00f      	b.n	8003108 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80030f8:	e006      	b.n	8003108 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003102:	e001      	b.n	8003108 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003108:	7dfb      	ldrb	r3, [r7, #23]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40012400 	.word	0x40012400
 8003118:	40012800 	.word	0x40012800
 800311c:	08003473 	.word	0x08003473
 8003120:	080034ef 	.word	0x080034ef
 8003124:	0800350b 	.word	0x0800350b

08003128 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x20>
 8003168:	2302      	movs	r3, #2
 800316a:	e0dc      	b.n	8003326 <HAL_ADC_ConfigChannel+0x1da>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d81c      	bhi.n	80031b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	3b05      	subs	r3, #5
 800318e:	221f      	movs	r2, #31
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4019      	ands	r1, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3b05      	subs	r3, #5
 80031a8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34
 80031b4:	e03c      	b.n	8003230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d81c      	bhi.n	80031f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b23      	subs	r3, #35	; 0x23
 80031d0:	221f      	movs	r2, #31
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	4019      	ands	r1, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	3b23      	subs	r3, #35	; 0x23
 80031ea:	fa00 f203 	lsl.w	r2, r0, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
 80031f6:	e01b      	b.n	8003230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b41      	subs	r3, #65	; 0x41
 800320a:	221f      	movs	r2, #31
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4019      	ands	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3b41      	subs	r3, #65	; 0x41
 8003224:	fa00 f203 	lsl.w	r2, r0, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b09      	cmp	r3, #9
 8003236:	d91c      	bls.n	8003272 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68d9      	ldr	r1, [r3, #12]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	3b1e      	subs	r3, #30
 800324a:	2207      	movs	r2, #7
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	4019      	ands	r1, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6898      	ldr	r0, [r3, #8]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	3b1e      	subs	r3, #30
 8003264:	fa00 f203 	lsl.w	r2, r0, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	e019      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6919      	ldr	r1, [r3, #16]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	2207      	movs	r2, #7
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	4019      	ands	r1, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6898      	ldr	r0, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	fa00 f203 	lsl.w	r2, r0, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d003      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032b2:	2b11      	cmp	r3, #17
 80032b4:	d132      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_ADC_ConfigChannel+0x1e4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d125      	bne.n	800330c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d126      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d11a      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_ADC_ConfigChannel+0x1e8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_ADC_ConfigChannel+0x1ec>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9a      	lsrs	r2, r3, #18
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032fc:	e002      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3b01      	subs	r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f9      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x1b2>
 800330a:	e007      	b.n	800331c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012400 	.word	0x40012400
 8003334:	20000018 	.word	0x20000018
 8003338:	431bde83 	.word	0x431bde83

0800333c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d040      	beq.n	80033dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <ADC_Enable+0xac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <ADC_Enable+0xb0>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0c9b      	lsrs	r3, r3, #18
 8003376:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003378:	e002      	b.n	8003380 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3b01      	subs	r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f9      	bne.n	800337a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003386:	f7ff fd0f 	bl	8002da8 <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800338c:	e01f      	b.n	80033ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800338e:	f7ff fd0b 	bl	8002da8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d918      	bls.n	80033ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d011      	beq.n	80033ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e007      	b.n	80033de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d1d8      	bne.n	800338e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000018 	.word	0x20000018
 80033ec:	431bde83 	.word	0x431bde83

080033f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d12e      	bne.n	8003468 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800341a:	f7ff fcc5 	bl	8002da8 <HAL_GetTick>
 800341e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003420:	e01b      	b.n	800345a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003422:	f7ff fcc1 	bl	8002da8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d914      	bls.n	800345a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10d      	bne.n	800345a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e007      	b.n	800346a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d0dc      	beq.n	8003422 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003488:	2b00      	cmp	r3, #0
 800348a:	d127      	bne.n	80034dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034a6:	d115      	bne.n	80034d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d111      	bne.n	80034d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7fe f9f7 	bl	80018c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80034da:	e004      	b.n	80034e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff fe13 	bl	8003128 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f043 0204 	orr.w	r2, r3, #4
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fe02 	bl	800313a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db0b      	blt.n	80035ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4906      	ldr	r1, [pc, #24]	; (80035d8 <__NVIC_EnableIRQ+0x34>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100

080035dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	db0a      	blt.n	8003606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	490c      	ldr	r1, [pc, #48]	; (8003628 <__NVIC_SetPriority+0x4c>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	440b      	add	r3, r1
 8003600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003604:	e00a      	b.n	800361c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <__NVIC_SetPriority+0x50>)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3b04      	subs	r3, #4
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	440b      	add	r3, r1
 800361a:	761a      	strb	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f1c3 0307 	rsb	r3, r3, #7
 800364a:	2b04      	cmp	r3, #4
 800364c:	bf28      	it	cs
 800364e:	2304      	movcs	r3, #4
 8003650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3304      	adds	r3, #4
 8003656:	2b06      	cmp	r3, #6
 8003658:	d902      	bls.n	8003660 <NVIC_EncodePriority+0x30>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3b03      	subs	r3, #3
 800365e:	e000      	b.n	8003662 <NVIC_EncodePriority+0x32>
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	401a      	ands	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003678:	f04f 31ff 	mov.w	r1, #4294967295
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43d9      	mvns	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	4313      	orrs	r3, r2
         );
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a4:	d301      	bcc.n	80036aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00f      	b.n	80036ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <SysTick_Config+0x40>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b2:	210f      	movs	r1, #15
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f7ff ff90 	bl	80035dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <SysTick_Config+0x40>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <SysTick_Config+0x40>)
 80036c4:	2207      	movs	r2, #7
 80036c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	e000e010 	.word	0xe000e010

080036d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ff2d 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003700:	f7ff ff42 	bl	8003588 <__NVIC_GetPriorityGrouping>
 8003704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f7ff ff90 	bl	8003630 <NVIC_EncodePriority>
 8003710:	4602      	mov	r2, r0
 8003712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff5f 	bl	80035dc <__NVIC_SetPriority>
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff35 	bl	80035a4 <__NVIC_EnableIRQ>
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ffa2 	bl	8003694 <SysTick_Config>
 8003750:	4603      	mov	r3, r0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e043      	b.n	80037fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_DMA_Init+0xa8>)
 800377a:	4413      	add	r3, r2
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_DMA_Init+0xac>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_DMA_Init+0xb0>)
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	bffdfff8 	.word	0xbffdfff8
 8003808:	cccccccd 	.word	0xcccccccd
 800380c:	40020000 	.word	0x40020000

08003810 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Start_IT+0x20>
 800382c:	2302      	movs	r3, #2
 800382e:	e04b      	b.n	80038c8 <HAL_DMA_Start_IT+0xb8>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d13a      	bne.n	80038ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f9eb 	bl	8003c44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 020e 	orr.w	r2, r2, #14
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e00f      	b.n	80038a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 020a 	orr.w	r2, r2, #10
 80038a6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e005      	b.n	80038c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
 80038c4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d008      	beq.n	80038fa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2204      	movs	r2, #4
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e020      	b.n	800393c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 020e 	bic.w	r2, r2, #14
 8003908:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
	...

08003948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d005      	beq.n	800396c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e051      	b.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020e 	bic.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <HAL_DMA_Abort_IT+0xd4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d029      	beq.n	80039ea <HAL_DMA_Abort_IT+0xa2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <HAL_DMA_Abort_IT+0xd8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x9e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_DMA_Abort_IT+0xdc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01a      	beq.n	80039e0 <HAL_DMA_Abort_IT+0x98>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <HAL_DMA_Abort_IT+0xe0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d012      	beq.n	80039da <HAL_DMA_Abort_IT+0x92>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_DMA_Abort_IT+0xe4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00a      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x8c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_DMA_Abort_IT+0xe8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d102      	bne.n	80039ce <HAL_DMA_Abort_IT+0x86>
 80039c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039cc:	e00e      	b.n	80039ec <HAL_DMA_Abort_IT+0xa4>
 80039ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039d2:	e00b      	b.n	80039ec <HAL_DMA_Abort_IT+0xa4>
 80039d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d8:	e008      	b.n	80039ec <HAL_DMA_Abort_IT+0xa4>
 80039da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039de:	e005      	b.n	80039ec <HAL_DMA_Abort_IT+0xa4>
 80039e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e4:	e002      	b.n	80039ec <HAL_DMA_Abort_IT+0xa4>
 80039e6:	2310      	movs	r3, #16
 80039e8:	e000      	b.n	80039ec <HAL_DMA_Abort_IT+0xa4>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <HAL_DMA_Abort_IT+0xec>)
 80039ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
    } 
  }
  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40020008 	.word	0x40020008
 8003a20:	4002001c 	.word	0x4002001c
 8003a24:	40020030 	.word	0x40020030
 8003a28:	40020044 	.word	0x40020044
 8003a2c:	40020058 	.word	0x40020058
 8003a30:	4002006c 	.word	0x4002006c
 8003a34:	40020000 	.word	0x40020000

08003a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2204      	movs	r2, #4
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d04f      	beq.n	8003b00 <HAL_DMA_IRQHandler+0xc8>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d04a      	beq.n	8003b00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a66      	ldr	r2, [pc, #408]	; (8003c28 <HAL_DMA_IRQHandler+0x1f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d029      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xae>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a65      	ldr	r2, [pc, #404]	; (8003c2c <HAL_DMA_IRQHandler+0x1f4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xaa>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a63      	ldr	r2, [pc, #396]	; (8003c30 <HAL_DMA_IRQHandler+0x1f8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01a      	beq.n	8003adc <HAL_DMA_IRQHandler+0xa4>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a62      	ldr	r2, [pc, #392]	; (8003c34 <HAL_DMA_IRQHandler+0x1fc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d012      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x9e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a60      	ldr	r2, [pc, #384]	; (8003c38 <HAL_DMA_IRQHandler+0x200>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x98>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a5f      	ldr	r2, [pc, #380]	; (8003c3c <HAL_DMA_IRQHandler+0x204>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d102      	bne.n	8003aca <HAL_DMA_IRQHandler+0x92>
 8003ac4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ac8:	e00e      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xb0>
 8003aca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ace:	e00b      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xb0>
 8003ad0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ad4:	e008      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xb0>
 8003ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ada:	e005      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xb0>
 8003adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae0:	e002      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xb0>
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	e000      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xb0>
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	4a55      	ldr	r2, [pc, #340]	; (8003c40 <HAL_DMA_IRQHandler+0x208>)
 8003aea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8094 	beq.w	8003c1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003afe:	e08e      	b.n	8003c1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2202      	movs	r2, #2
 8003b06:	409a      	lsls	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d056      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x186>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d051      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 020a 	bic.w	r2, r2, #10
 8003b36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a38      	ldr	r2, [pc, #224]	; (8003c28 <HAL_DMA_IRQHandler+0x1f0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d029      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x166>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a37      	ldr	r2, [pc, #220]	; (8003c2c <HAL_DMA_IRQHandler+0x1f4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x162>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a35      	ldr	r2, [pc, #212]	; (8003c30 <HAL_DMA_IRQHandler+0x1f8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01a      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x15c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <HAL_DMA_IRQHandler+0x1fc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d012      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x156>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <HAL_DMA_IRQHandler+0x200>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00a      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x150>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a31      	ldr	r2, [pc, #196]	; (8003c3c <HAL_DMA_IRQHandler+0x204>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d102      	bne.n	8003b82 <HAL_DMA_IRQHandler+0x14a>
 8003b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b80:	e00e      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x168>
 8003b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b86:	e00b      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x168>
 8003b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8c:	e008      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x168>
 8003b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b92:	e005      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x168>
 8003b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b98:	e002      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x168>
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	e000      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x168>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	4a27      	ldr	r2, [pc, #156]	; (8003c40 <HAL_DMA_IRQHandler+0x208>)
 8003ba2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d034      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bbc:	e02f      	b.n	8003c1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d028      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x1e8>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d023      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 020e 	bic.w	r2, r2, #14
 8003be6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
    }
  }
  return;
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
}
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40020008 	.word	0x40020008
 8003c2c:	4002001c 	.word	0x4002001c
 8003c30:	40020030 	.word	0x40020030
 8003c34:	40020044 	.word	0x40020044
 8003c38:	40020058 	.word	0x40020058
 8003c3c:	4002006c 	.word	0x4002006c
 8003c40:	40020000 	.word	0x40020000

08003c44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d108      	bne.n	8003c84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c82:	e007      	b.n	8003c94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b08b      	sub	sp, #44	; 0x2c
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	e169      	b.n	8003f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	f040 8158 	bne.w	8003f82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a9a      	ldr	r2, [pc, #616]	; (8003f40 <HAL_GPIO_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d05e      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003cdc:	4a98      	ldr	r2, [pc, #608]	; (8003f40 <HAL_GPIO_Init+0x2a0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d875      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003ce2:	4a98      	ldr	r2, [pc, #608]	; (8003f44 <HAL_GPIO_Init+0x2a4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d058      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003ce8:	4a96      	ldr	r2, [pc, #600]	; (8003f44 <HAL_GPIO_Init+0x2a4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d86f      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003cee:	4a96      	ldr	r2, [pc, #600]	; (8003f48 <HAL_GPIO_Init+0x2a8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d052      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003cf4:	4a94      	ldr	r2, [pc, #592]	; (8003f48 <HAL_GPIO_Init+0x2a8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d869      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003cfa:	4a94      	ldr	r2, [pc, #592]	; (8003f4c <HAL_GPIO_Init+0x2ac>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04c      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003d00:	4a92      	ldr	r2, [pc, #584]	; (8003f4c <HAL_GPIO_Init+0x2ac>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d863      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003d06:	4a92      	ldr	r2, [pc, #584]	; (8003f50 <HAL_GPIO_Init+0x2b0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d046      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003d0c:	4a90      	ldr	r2, [pc, #576]	; (8003f50 <HAL_GPIO_Init+0x2b0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d85d      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003d12:	2b12      	cmp	r3, #18
 8003d14:	d82a      	bhi.n	8003d6c <HAL_GPIO_Init+0xcc>
 8003d16:	2b12      	cmp	r3, #18
 8003d18:	d859      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <HAL_GPIO_Init+0x80>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d9b 	.word	0x08003d9b
 8003d24:	08003d75 	.word	0x08003d75
 8003d28:	08003d87 	.word	0x08003d87
 8003d2c:	08003dc9 	.word	0x08003dc9
 8003d30:	08003dcf 	.word	0x08003dcf
 8003d34:	08003dcf 	.word	0x08003dcf
 8003d38:	08003dcf 	.word	0x08003dcf
 8003d3c:	08003dcf 	.word	0x08003dcf
 8003d40:	08003dcf 	.word	0x08003dcf
 8003d44:	08003dcf 	.word	0x08003dcf
 8003d48:	08003dcf 	.word	0x08003dcf
 8003d4c:	08003dcf 	.word	0x08003dcf
 8003d50:	08003dcf 	.word	0x08003dcf
 8003d54:	08003dcf 	.word	0x08003dcf
 8003d58:	08003dcf 	.word	0x08003dcf
 8003d5c:	08003dcf 	.word	0x08003dcf
 8003d60:	08003dcf 	.word	0x08003dcf
 8003d64:	08003d7d 	.word	0x08003d7d
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	4a79      	ldr	r2, [pc, #484]	; (8003f54 <HAL_GPIO_Init+0x2b4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d72:	e02c      	b.n	8003dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	623b      	str	r3, [r7, #32]
          break;
 8003d7a:	e029      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	3304      	adds	r3, #4
 8003d82:	623b      	str	r3, [r7, #32]
          break;
 8003d84:	e024      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	623b      	str	r3, [r7, #32]
          break;
 8003d8e:	e01f      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	330c      	adds	r3, #12
 8003d96:	623b      	str	r3, [r7, #32]
          break;
 8003d98:	e01a      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003da2:	2304      	movs	r3, #4
 8003da4:	623b      	str	r3, [r7, #32]
          break;
 8003da6:	e013      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db0:	2308      	movs	r3, #8
 8003db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	611a      	str	r2, [r3, #16]
          break;
 8003dba:	e009      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	615a      	str	r2, [r3, #20]
          break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	623b      	str	r3, [r7, #32]
          break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          break;
 8003dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2bff      	cmp	r3, #255	; 0xff
 8003dd4:	d801      	bhi.n	8003dda <HAL_GPIO_Init+0x13a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	e001      	b.n	8003dde <HAL_GPIO_Init+0x13e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2bff      	cmp	r3, #255	; 0xff
 8003de4:	d802      	bhi.n	8003dec <HAL_GPIO_Init+0x14c>
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	e002      	b.n	8003df2 <HAL_GPIO_Init+0x152>
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	3b08      	subs	r3, #8
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	210f      	movs	r1, #15
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	401a      	ands	r2, r3
 8003e04:	6a39      	ldr	r1, [r7, #32]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80b1 	beq.w	8003f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e20:	4b4d      	ldr	r3, [pc, #308]	; (8003f58 <HAL_GPIO_Init+0x2b8>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	4a4c      	ldr	r2, [pc, #304]	; (8003f58 <HAL_GPIO_Init+0x2b8>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6193      	str	r3, [r2, #24]
 8003e2c:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_GPIO_Init+0x2b8>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e38:	4a48      	ldr	r2, [pc, #288]	; (8003f5c <HAL_GPIO_Init+0x2bc>)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a40      	ldr	r2, [pc, #256]	; (8003f60 <HAL_GPIO_Init+0x2c0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_GPIO_Init+0x1ec>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3f      	ldr	r2, [pc, #252]	; (8003f64 <HAL_GPIO_Init+0x2c4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00d      	beq.n	8003e88 <HAL_GPIO_Init+0x1e8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3e      	ldr	r2, [pc, #248]	; (8003f68 <HAL_GPIO_Init+0x2c8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <HAL_GPIO_Init+0x1e4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3d      	ldr	r2, [pc, #244]	; (8003f6c <HAL_GPIO_Init+0x2cc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_GPIO_Init+0x1e0>
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e004      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e002      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	f002 0203 	and.w	r2, r2, #3
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	4093      	lsls	r3, r2
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e9e:	492f      	ldr	r1, [pc, #188]	; (8003f5c <HAL_GPIO_Init+0x2bc>)
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	492c      	ldr	r1, [pc, #176]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
 8003ec4:	e006      	b.n	8003ed4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4928      	ldr	r1, [pc, #160]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	4922      	ldr	r1, [pc, #136]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
 8003eec:	e006      	b.n	8003efc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	491e      	ldr	r1, [pc, #120]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4918      	ldr	r1, [pc, #96]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	4914      	ldr	r1, [pc, #80]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d021      	beq.n	8003f74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
 8003f3c:	e021      	b.n	8003f82 <HAL_GPIO_Init+0x2e2>
 8003f3e:	bf00      	nop
 8003f40:	10320000 	.word	0x10320000
 8003f44:	10310000 	.word	0x10310000
 8003f48:	10220000 	.word	0x10220000
 8003f4c:	10210000 	.word	0x10210000
 8003f50:	10120000 	.word	0x10120000
 8003f54:	10110000 	.word	0x10110000
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40010800 	.word	0x40010800
 8003f64:	40010c00 	.word	0x40010c00
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40011400 	.word	0x40011400
 8003f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_GPIO_Init+0x304>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4909      	ldr	r1, [pc, #36]	; (8003fa4 <HAL_GPIO_Init+0x304>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	3301      	adds	r3, #1
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f47f ae8e 	bne.w	8003cb4 <HAL_GPIO_Init+0x14>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	372c      	adds	r7, #44	; 0x2c
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	e001      	b.n	8003fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	807b      	strh	r3, [r7, #2]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fe6:	787b      	ldrb	r3, [r7, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fec:	887a      	ldrh	r2, [r7, #2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ff2:	e003      	b.n	8003ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	041a      	lsls	r2, r3, #16
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	611a      	str	r2, [r3, #16]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
	...

08004008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e12b      	b.n	8004272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe fcda 	bl	80029e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800406c:	f003 f95e 	bl	800732c <HAL_RCC_GetPCLK1Freq>
 8004070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a81      	ldr	r2, [pc, #516]	; (800427c <HAL_I2C_Init+0x274>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d807      	bhi.n	800408c <HAL_I2C_Init+0x84>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a80      	ldr	r2, [pc, #512]	; (8004280 <HAL_I2C_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e006      	b.n	800409a <HAL_I2C_Init+0x92>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a7d      	ldr	r2, [pc, #500]	; (8004284 <HAL_I2C_Init+0x27c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0e7      	b.n	8004272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a78      	ldr	r2, [pc, #480]	; (8004288 <HAL_I2C_Init+0x280>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a6a      	ldr	r2, [pc, #424]	; (800427c <HAL_I2C_Init+0x274>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d802      	bhi.n	80040dc <HAL_I2C_Init+0xd4>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	e009      	b.n	80040f0 <HAL_I2C_Init+0xe8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	4a69      	ldr	r2, [pc, #420]	; (800428c <HAL_I2C_Init+0x284>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	3301      	adds	r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	495c      	ldr	r1, [pc, #368]	; (800427c <HAL_I2C_Init+0x274>)
 800410c:	428b      	cmp	r3, r1
 800410e:	d819      	bhi.n	8004144 <HAL_I2C_Init+0x13c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e59      	subs	r1, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fbb1 f3f3 	udiv	r3, r1, r3
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004124:	400b      	ands	r3, r1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_I2C_Init+0x138>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e59      	subs	r1, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb1 f3f3 	udiv	r3, r1, r3
 8004138:	3301      	adds	r3, #1
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413e:	e051      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004140:	2304      	movs	r3, #4
 8004142:	e04f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <HAL_I2C_Init+0x168>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e012      	b.n	8004196 <HAL_I2C_Init+0x18e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	0099      	lsls	r1, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	fbb0 f3f3 	udiv	r3, r0, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x196>
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10e      	bne.n	80041c4 <HAL_I2C_Init+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e58      	subs	r0, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	440b      	add	r3, r1
 80041b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	6809      	ldr	r1, [r1, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6911      	ldr	r1, [r2, #16]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	000186a0 	.word	0x000186a0
 8004280:	001e847f 	.word	0x001e847f
 8004284:	003d08ff 	.word	0x003d08ff
 8004288:	431bde83 	.word	0x431bde83
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	817b      	strh	r3, [r7, #10]
 80042a2:	460b      	mov	r3, r1
 80042a4:	813b      	strh	r3, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042aa:	f7fe fd7d 	bl	8002da8 <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	f040 80d9 	bne.w	8004470 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	2319      	movs	r3, #25
 80042c4:	2201      	movs	r2, #1
 80042c6:	496d      	ldr	r1, [pc, #436]	; (800447c <HAL_I2C_Mem_Write+0x1ec>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fcc1 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
 80042d6:	e0cc      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_I2C_Mem_Write+0x56>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e0c5      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d007      	beq.n	800430c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	; 0x21
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2240      	movs	r2, #64	; 0x40
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800433c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a4d      	ldr	r2, [pc, #308]	; (8004480 <HAL_I2C_Mem_Write+0x1f0>)
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800434e:	88f8      	ldrh	r0, [r7, #6]
 8004350:	893a      	ldrh	r2, [r7, #8]
 8004352:	8979      	ldrh	r1, [r7, #10]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4603      	mov	r3, r0
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 faf8 	bl	8004954 <I2C_RequestMemoryWrite>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d052      	beq.n	8004410 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e081      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fd86 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b04      	cmp	r3, #4
 8004384:	d107      	bne.n	8004396 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06b      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d11b      	bne.n	8004410 <HAL_I2C_Mem_Write+0x180>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d017      	beq.n	8004410 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1aa      	bne.n	800436e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fd79 	bl	8004f14 <I2C_WaitOnBTFFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b04      	cmp	r3, #4
 800442e:	d107      	bne.n	8004440 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e016      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000

08004484 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044a2:	f7fe fc81 	bl	8002da8 <HAL_GetTick>
 80044a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	f040 8244 	bne.w	800493e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2319      	movs	r3, #25
 80044bc:	2201      	movs	r2, #1
 80044be:	4982      	ldr	r1, [pc, #520]	; (80046c8 <HAL_I2C_Mem_Read+0x244>)
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fbc5 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
 80044ce:	e237      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_I2C_Mem_Read+0x5a>
 80044da:	2302      	movs	r3, #2
 80044dc:	e230      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d007      	beq.n	8004504 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2222      	movs	r2, #34	; 0x22
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2240      	movs	r2, #64	; 0x40
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a62      	ldr	r2, [pc, #392]	; (80046cc <HAL_I2C_Mem_Read+0x248>)
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004546:	88f8      	ldrh	r0, [r7, #6]
 8004548:	893a      	ldrh	r2, [r7, #8]
 800454a:	8979      	ldrh	r1, [r7, #10]
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4603      	mov	r3, r0
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa92 	bl	8004a80 <I2C_RequestMemoryRead>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e1ec      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d113      	bne.n	8004596 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e1c0      	b.n	8004918 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	2b01      	cmp	r3, #1
 800459c:	d11e      	bne.n	80045dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045ae:	b672      	cpsid	i
}
 80045b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045d8:	b662      	cpsie	i
}
 80045da:	e035      	b.n	8004648 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d11e      	bne.n	8004622 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045f4:	b672      	cpsid	i
}
 80045f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800461e:	b662      	cpsie	i
}
 8004620:	e012      	b.n	8004648 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004630:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004648:	e166      	b.n	8004918 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	2b03      	cmp	r3, #3
 8004650:	f200 811f 	bhi.w	8004892 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	2b01      	cmp	r3, #1
 800465a:	d123      	bne.n	80046a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fc9f 	bl	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e167      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a2:	e139      	b.n	8004918 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d152      	bne.n	8004752 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	2200      	movs	r2, #0
 80046b4:	4906      	ldr	r1, [pc, #24]	; (80046d0 <HAL_I2C_Mem_Read+0x24c>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 faca 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e13c      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
 80046c6:	bf00      	nop
 80046c8:	00100002 	.word	0x00100002
 80046cc:	ffff0000 	.word	0xffff0000
 80046d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046d4:	b672      	cpsid	i
}
 80046d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800471a:	b662      	cpsie	i
}
 800471c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004750:	e0e2      	b.n	8004918 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	2200      	movs	r2, #0
 800475a:	497b      	ldr	r1, [pc, #492]	; (8004948 <HAL_I2C_Mem_Read+0x4c4>)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fa77 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0e9      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800477c:	b672      	cpsid	i
}
 800477e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047b2:	4b66      	ldr	r3, [pc, #408]	; (800494c <HAL_I2C_Mem_Read+0x4c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	4a65      	ldr	r2, [pc, #404]	; (8004950 <HAL_I2C_Mem_Read+0x4cc>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0a1a      	lsrs	r2, r3, #8
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	00da      	lsls	r2, r3, #3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d118      	bne.n	800480a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80047fa:	b662      	cpsie	i
}
 80047fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e09a      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d1d9      	bne.n	80047cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800485a:	b662      	cpsie	i
}
 800485c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004890:	e042      	b.n	8004918 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fb84 	bl	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e04c      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d118      	bne.n	8004918 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	f47f ae94 	bne.w	800464a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	; 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	00010004 	.word	0x00010004
 800494c:	20000018 	.word	0x20000018
 8004950:	14f8b589 	.word	0x14f8b589

08004954 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	461a      	mov	r2, r3
 8004962:	4603      	mov	r3, r0
 8004964:	817b      	strh	r3, [r7, #10]
 8004966:	460b      	mov	r3, r1
 8004968:	813b      	strh	r3, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800497c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2200      	movs	r2, #0
 8004986:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f960 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a4:	d103      	bne.n	80049ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e05f      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	6a3a      	ldr	r2, [r7, #32]
 80049c6:	492d      	ldr	r1, [pc, #180]	; (8004a7c <I2C_RequestMemoryWrite+0x128>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f9bb 	bl	8004d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e04c      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	6a39      	ldr	r1, [r7, #32]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa46 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e02b      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a20:	893b      	ldrh	r3, [r7, #8]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]
 8004a2a:	e021      	b.n	8004a70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a2c:	893b      	ldrh	r3, [r7, #8]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	6a39      	ldr	r1, [r7, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fa20 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d107      	bne.n	8004a62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e005      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	00010002 	.word	0x00010002

08004a80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	817b      	strh	r3, [r7, #10]
 8004a92:	460b      	mov	r3, r1
 8004a94:	813b      	strh	r3, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f8c2 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae0:	d103      	bne.n	8004aea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0aa      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aee:	897b      	ldrh	r3, [r7, #10]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	6a3a      	ldr	r2, [r7, #32]
 8004b02:	4952      	ldr	r1, [pc, #328]	; (8004c4c <I2C_RequestMemoryRead+0x1cc>)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f91d 	bl	8004d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e097      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	6a39      	ldr	r1, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f9a8 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d107      	bne.n	8004b52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e076      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	e021      	b.n	8004bac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b68:	893b      	ldrh	r3, [r7, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	6a39      	ldr	r1, [r7, #32]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f982 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00d      	beq.n	8004ba2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d107      	bne.n	8004b9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e050      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba2:	893b      	ldrh	r3, [r7, #8]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	6a39      	ldr	r1, [r7, #32]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f967 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d107      	bne.n	8004bd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e035      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f82b 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00d      	beq.n	8004c1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0e:	d103      	bne.n	8004c18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e013      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c1c:	897b      	ldrh	r3, [r7, #10]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	4906      	ldr	r1, [pc, #24]	; (8004c4c <I2C_RequestMemoryRead+0x1cc>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f886 	bl	8004d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	00010002 	.word	0x00010002

08004c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c60:	e048      	b.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d044      	beq.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fe f89d 	bl	8002da8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d139      	bne.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10d      	bne.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	43da      	mvns	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	e00c      	b.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	43da      	mvns	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d116      	bne.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f043 0220 	orr.w	r2, r3, #32
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e023      	b.n	8004d3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	0c1b      	lsrs	r3, r3, #16
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d10d      	bne.n	8004d1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	43da      	mvns	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	e00c      	b.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	43da      	mvns	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d093      	beq.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d52:	e071      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d62:	d123      	bne.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f043 0204 	orr.w	r2, r3, #4
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e067      	b.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d041      	beq.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db4:	f7fd fff8 	bl	8002da8 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d302      	bcc.n	8004dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d136      	bne.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d10c      	bne.n	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	e00b      	b.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	43da      	mvns	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e021      	b.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10c      	bne.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e00b      	b.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	43da      	mvns	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f af6d 	bne.w	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e90:	e034      	b.n	8004efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f8e3 	bl	800505e <I2C_IsAcknowledgeFailed>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e034      	b.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d028      	beq.n	8004efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fd ff7d 	bl	8002da8 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11d      	bne.n	8004efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	2b80      	cmp	r3, #128	; 0x80
 8004ecc:	d016      	beq.n	8004efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e007      	b.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d1c3      	bne.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f20:	e034      	b.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f89b 	bl	800505e <I2C_IsAcknowledgeFailed>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e034      	b.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d028      	beq.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fd ff35 	bl	8002da8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d11d      	bne.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d016      	beq.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e007      	b.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d1c3      	bne.n	8004f22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fb0:	e049      	b.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d119      	bne.n	8004ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0210 	mvn.w	r2, #16
 8004fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e030      	b.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff4:	f7fd fed8 	bl	8002da8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	429a      	cmp	r2, r3
 8005002:	d302      	bcc.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d11d      	bne.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d016      	beq.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e007      	b.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d1ae      	bne.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005074:	d11b      	bne.n	80050ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800507e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr

080050ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050bc:	b08b      	sub	sp, #44	; 0x2c
 80050be:	af06      	add	r7, sp, #24
 80050c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0f1      	b.n	80052b0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f007 ffb3 	bl	800d04c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2203      	movs	r2, #3
 80050ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f003 fe5c 	bl	8008db0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	687e      	ldr	r6, [r7, #4]
 8005100:	466d      	mov	r5, sp
 8005102:	f106 0410 	add.w	r4, r6, #16
 8005106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	1d33      	adds	r3, r6, #4
 8005110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005112:	6838      	ldr	r0, [r7, #0]
 8005114:	f003 fe26 	bl	8008d64 <USB_CoreInit>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0c2      	b.n	80052b0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f003 fe57 	bl	8008de4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
 800513a:	e040      	b.n	80051be <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	440b      	add	r3, r1
 800514c:	3301      	adds	r3, #1
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	440b      	add	r3, r1
 8005162:	7bfa      	ldrb	r2, [r7, #15]
 8005164:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	3303      	adds	r3, #3
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	440b      	add	r3, r1
 800518a:	3338      	adds	r3, #56	; 0x38
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	440b      	add	r3, r1
 800519e:	333c      	adds	r3, #60	; 0x3c
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	3340      	adds	r3, #64	; 0x40
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	3301      	adds	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3b9      	bcc.n	800513c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
 80051cc:	e044      	b.n	8005258 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051e4:	7bfa      	ldrb	r2, [r7, #15]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	440b      	add	r3, r1
 80051f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	440b      	add	r3, r1
 8005208:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	440b      	add	r3, r1
 800521e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005226:	7bfa      	ldrb	r2, [r7, #15]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	440b      	add	r3, r1
 800524a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	3301      	adds	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3b5      	bcc.n	80051ce <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	687e      	ldr	r6, [r7, #4]
 800526a:	466d      	mov	r5, sp
 800526c:	f106 0410 	add.w	r4, r6, #16
 8005270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	1d33      	adds	r3, r6, #4
 800527a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800527c:	6838      	ldr	r0, [r7, #0]
 800527e:	f003 fdbd 	bl	8008dfc <USB_DevInit>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e00d      	b.n	80052b0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f006 f83e 	bl	800b32a <USB_DevDisconnect>

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_PCD_Start+0x16>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e016      	b.n	80052fc <HAL_PCD_Start+0x44>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f003 fd52 	bl	8008d84 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80052e0:	2101      	movs	r1, #1
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f008 f925 	bl	800d532 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f006 f812 	bl	800b316 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f006 f814 	bl	800b33e <USB_ReadInterrupts>
 8005316:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fb1b 	bl	800595e <PCD_EP_ISR_Handler>

    return;
 8005328:	e119      	b.n	800555e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005346:	b292      	uxth	r2, r2
 8005348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f007 fef8 	bl	800d142 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005352:	2100      	movs	r1, #0
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f905 	bl	8005564 <HAL_PCD_SetAddress>

    return;
 800535a:	e100      	b.n	800555e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005378:	b292      	uxth	r2, r2
 800537a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800537e:	e0ee      	b.n	800555e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800539c:	b292      	uxth	r2, r2
 800539e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053a2:	e0dc      	b.n	800555e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d027      	beq.n	80053fe <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0204 	bic.w	r2, r2, #4
 80053c0:	b292      	uxth	r2, r2
 80053c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0208 	bic.w	r2, r2, #8
 80053d8:	b292      	uxth	r2, r2
 80053da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f007 fee8 	bl	800d1b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053f6:	b292      	uxth	r2, r2
 80053f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053fc:	e0af      	b.n	800555e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8083 	beq.w	8005510 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	77fb      	strb	r3, [r7, #31]
 800540e:	e010      	b.n	8005432 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	7ffb      	ldrb	r3, [r7, #31]
 800541e:	8812      	ldrh	r2, [r2, #0]
 8005420:	b292      	uxth	r2, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	3320      	adds	r3, #32
 8005426:	443b      	add	r3, r7
 8005428:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800542c:	7ffb      	ldrb	r3, [r7, #31]
 800542e:	3301      	adds	r3, #1
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	7ffb      	ldrb	r3, [r7, #31]
 8005434:	2b07      	cmp	r3, #7
 8005436:	d9eb      	bls.n	8005410 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	b292      	uxth	r2, r2
 800544c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	b292      	uxth	r2, r2
 8005464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005468:	bf00      	nop
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005472:	b29b      	uxth	r3, r3
 8005474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f6      	beq.n	800546a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548e:	b292      	uxth	r2, r2
 8005490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e00f      	b.n	80054ba <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800549a:	7ffb      	ldrb	r3, [r7, #31]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	4611      	mov	r1, r2
 80054a2:	7ffa      	ldrb	r2, [r7, #31]
 80054a4:	0092      	lsls	r2, r2, #2
 80054a6:	440a      	add	r2, r1
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	3320      	adds	r3, #32
 80054ac:	443b      	add	r3, r7
 80054ae:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80054b2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80054b4:	7ffb      	ldrb	r3, [r7, #31]
 80054b6:	3301      	adds	r3, #1
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
 80054bc:	2b07      	cmp	r3, #7
 80054be:	d9ec      	bls.n	800549a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	b292      	uxth	r2, r2
 80054d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ea:	b292      	uxth	r2, r2
 80054ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0204 	orr.w	r2, r2, #4
 8005502:	b292      	uxth	r2, r2
 8005504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f007 fe39 	bl	800d180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800550e:	e026      	b.n	800555e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00f      	beq.n	800553a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800552c:	b292      	uxth	r2, r2
 800552e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f007 fdf7 	bl	800d126 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005538:	e011      	b.n	800555e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800554c:	b29a      	uxth	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005556:	b292      	uxth	r2, r2
 8005558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800555c:	bf00      	nop
  }
}
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_PCD_SetAddress+0x1a>
 800557a:	2302      	movs	r3, #2
 800557c:	e013      	b.n	80055a6 <HAL_PCD_SetAddress+0x42>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	78fa      	ldrb	r2, [r7, #3]
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f005 feaa 	bl	800b2f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	4608      	mov	r0, r1
 80055b8:	4611      	mov	r1, r2
 80055ba:	461a      	mov	r2, r3
 80055bc:	4603      	mov	r3, r0
 80055be:	70fb      	strb	r3, [r7, #3]
 80055c0:	460b      	mov	r3, r1
 80055c2:	803b      	strh	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da0e      	bge.n	80055f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	4413      	add	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	705a      	strb	r2, [r3, #1]
 80055f0:	e00e      	b.n	8005610 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0207 	and.w	r2, r3, #7
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800561c:	883a      	ldrh	r2, [r7, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	78ba      	ldrb	r2, [r7, #2]
 8005626:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005628:	78bb      	ldrb	r3, [r7, #2]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d102      	bne.n	8005634 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_PCD_EP_Open+0x94>
 800563e:	2302      	movs	r3, #2
 8005640:	e00e      	b.n	8005660 <HAL_PCD_EP_Open+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	4618      	mov	r0, r3
 8005652:	f003 fbf3 	bl	8008e3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800565e:	7afb      	ldrb	r3, [r7, #11]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	da0e      	bge.n	800569a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	705a      	strb	r2, [r3, #1]
 8005698:	e00e      	b.n	80056b8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	f003 0207 	and.w	r2, r3, #7
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_PCD_EP_Close+0x6a>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e00e      	b.n	80056f0 <HAL_PCD_EP_Close+0x88>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f003 ff6b 	bl	80095bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	f003 0207 	and.w	r2, r3, #7
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005738:	7afb      	ldrb	r3, [r7, #11]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	b2da      	uxtb	r2, r3
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6979      	ldr	r1, [r7, #20]
 800574a:	4618      	mov	r0, r3
 800574c:	f004 f922 	bl	8009994 <USB_EPStartXfer>

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	f003 0207 	and.w	r2, r3, #7
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	440b      	add	r3, r1
 8005778:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800577c:	681b      	ldr	r3, [r3, #0]
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	460b      	mov	r3, r1
 8005796:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2201      	movs	r2, #1
 80057d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6979      	ldr	r1, [r7, #20]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f004 f8d4 	bl	8009994 <USB_EPStartXfer>

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	f003 0207 	and.w	r2, r3, #7
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d901      	bls.n	8005814 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e04c      	b.n	80058ae <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da0e      	bge.n	800583a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	705a      	strb	r2, [r3, #1]
 8005838:	e00c      	b.n	8005854 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_PCD_EP_SetStall+0x7e>
 8005870:	2302      	movs	r3, #2
 8005872:	e01c      	b.n	80058ae <HAL_PCD_EP_SetStall+0xb8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68f9      	ldr	r1, [r7, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f005 fc37 	bl	800b0f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	2b00      	cmp	r3, #0
 8005890:	d108      	bne.n	80058a4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f005 fd5c 	bl	800b35c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	f003 020f 	and.w	r2, r3, #15
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d901      	bls.n	80058d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e040      	b.n	8005956 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	da0e      	bge.n	80058fa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4413      	add	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	705a      	strb	r2, [r3, #1]
 80058f8:	e00e      	b.n	8005918 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	f003 0207 	and.w	r2, r3, #7
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_PCD_EP_ClrStall+0x82>
 8005934:	2302      	movs	r3, #2
 8005936:	e00e      	b.n	8005956 <HAL_PCD_EP_ClrStall+0xa0>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	4618      	mov	r0, r3
 8005948:	f005 fc25 	bl	800b196 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b096      	sub	sp, #88	; 0x58
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005966:	e3bf      	b.n	80060e8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005970:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005982:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 8179 	bne.w	8005c7e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800598c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d152      	bne.n	8005a3e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80059a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a8:	81fb      	strh	r3, [r7, #14]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	89fb      	ldrh	r3, [r7, #14]
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3328      	adds	r3, #40	; 0x28
 80059c0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	3302      	adds	r3, #2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80059ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	441a      	add	r2, r3
 80059f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80059fc:	2100      	movs	r1, #0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f007 fb77 	bl	800d0f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 836b 	beq.w	80060e8 <PCD_EP_ISR_Handler+0x78a>
 8005a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 8366 	bne.w	80060e8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a3c:	e354      	b.n	80060e8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a44:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d034      	beq.n	8005ac6 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	3306      	adds	r3, #6
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a86:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a98:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f005 fcae 	bl	800b3fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005aac:	4013      	ands	r3, r2
 8005aae:	823b      	strh	r3, [r7, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	8a3a      	ldrh	r2, [r7, #16]
 8005ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aba:	b292      	uxth	r2, r2
 8005abc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f007 faea 	bl	800d098 <HAL_PCD_SetupStageCallback>
 8005ac4:	e310      	b.n	80060e8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ac6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f280 830c 	bge.w	80060e8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005adc:	4013      	ands	r3, r2
 8005ade:	83fb      	strh	r3, [r7, #30]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	8bfa      	ldrh	r2, [r7, #30]
 8005ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aea:	b292      	uxth	r2, r2
 8005aec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4413      	add	r3, r2
 8005b02:	3306      	adds	r3, #6
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d019      	beq.n	8005b56 <PCD_EP_ISR_Handler+0x1f8>
 8005b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d015      	beq.n	8005b56 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b30:	6959      	ldr	r1, [r3, #20]
 8005b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f005 fc5e 	bl	800b3fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	441a      	add	r2, r3
 8005b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f007 fab3 	bl	800d0bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 82bd 	bne.w	80060e8 <PCD_EP_ISR_Handler+0x78a>
 8005b6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b7a:	f000 82b5 	beq.w	80060e8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	4413      	add	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb4:	d91d      	bls.n	8005bf2 <PCD_EP_ISR_Handler+0x294>
 8005bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <PCD_EP_ISR_Handler+0x272>
 8005bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e026      	b.n	8005c40 <PCD_EP_ISR_Handler+0x2e2>
 8005bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <PCD_EP_ISR_Handler+0x2b2>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e017      	b.n	8005c40 <PCD_EP_ISR_Handler+0x2e2>
 8005c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	647b      	str	r3, [r7, #68]	; 0x44
 8005c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <PCD_EP_ISR_Handler+0x2cc>
 8005c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c26:	3301      	adds	r3, #1
 8005c28:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	827b      	strh	r3, [r7, #18]
 8005c52:	8a7b      	ldrh	r3, [r7, #18]
 8005c54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c58:	827b      	strh	r3, [r7, #18]
 8005c5a:	8a7b      	ldrh	r3, [r7, #18]
 8005c5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c60:	827b      	strh	r3, [r7, #18]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	8a7b      	ldrh	r3, [r7, #18]
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]
 8005c7c:	e234      	b.n	80060e8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c92:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f280 80fc 	bge.w	8005e94 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cce:	b292      	uxth	r2, r2
 8005cd0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005cd2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cea:	7b1b      	ldrb	r3, [r3, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d125      	bne.n	8005d3c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	3306      	adds	r3, #6
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d18:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005d1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8092 	beq.w	8005e4a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2c:	6959      	ldr	r1, [r3, #20]
 8005d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d30:	88da      	ldrh	r2, [r3, #6]
 8005d32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d36:	f005 fb61 	bl	800b3fc <USB_ReadPMA>
 8005d3a:	e086      	b.n	8005e4a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d10a      	bne.n	8005d5a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f9d9 	bl	8006104 <HAL_PCD_EP_DB_Receive>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005d58:	e077      	b.n	8005e4a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d024      	beq.n	8005e02 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4413      	add	r3, r2
 8005dcc:	3302      	adds	r3, #2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005de0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005de4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02e      	beq.n	8005e4a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df2:	6959      	ldr	r1, [r3, #20]
 8005df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df6:	891a      	ldrh	r2, [r3, #8]
 8005df8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005dfc:	f005 fafe 	bl	800b3fc <USB_ReadPMA>
 8005e00:	e023      	b.n	8005e4a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	3306      	adds	r3, #6
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e40:	895a      	ldrh	r2, [r3, #10]
 8005e42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e46:	f005 fad9 	bl	800b3fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e52:	441a      	add	r2, r3
 8005e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e60:	441a      	add	r2, r3
 8005e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e64:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <PCD_EP_ISR_Handler+0x51c>
 8005e6e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d206      	bcs.n	8005e88 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f007 f91b 	bl	800d0bc <HAL_PCD_DataOutStageCallback>
 8005e86:	e005      	b.n	8005e94 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f003 fd80 	bl	8009994 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8123 	beq.w	80060e8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8005ea2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	441a      	add	r2, r3
 8005ee2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	f040 80a2 	bne.w	8006040 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8005efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efe:	2200      	movs	r2, #0
 8005f00:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f04:	7b1b      	ldrb	r3, [r3, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8093 	beq.w	8006032 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d046      	beq.n	8005fa6 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d126      	bne.n	8005f6e <PCD_EP_ISR_Handler+0x610>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	4413      	add	r3, r2
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
 8005f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	011a      	lsls	r2, r3, #4
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	4413      	add	r3, r2
 8005f42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f46:	623b      	str	r3, [r7, #32]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	e061      	b.n	8006032 <PCD_EP_ISR_Handler+0x6d4>
 8005f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d15d      	bne.n	8006032 <PCD_EP_ISR_Handler+0x6d4>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	4413      	add	r3, r2
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	011a      	lsls	r2, r3, #4
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	4413      	add	r3, r2
 8005f98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e045      	b.n	8006032 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d126      	bne.n	8006002 <PCD_EP_ISR_Handler+0x6a4>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc8:	4413      	add	r3, r2
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
 8005fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	011a      	lsls	r2, r3, #4
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e017      	b.n	8006032 <PCD_EP_ISR_Handler+0x6d4>
 8006002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d113      	bne.n	8006032 <PCD_EP_ISR_Handler+0x6d4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006018:	4413      	add	r3, r2
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	011a      	lsls	r2, r3, #4
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	4413      	add	r3, r2
 8006026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800602a:	63bb      	str	r3, [r7, #56]	; 0x38
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	2200      	movs	r2, #0
 8006030:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f007 f85a 	bl	800d0f2 <HAL_PCD_DataInStageCallback>
 800603e:	e053      	b.n	80060e8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006040:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d146      	bne.n	80060da <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	4413      	add	r3, r2
 8006060:	3302      	adds	r3, #2
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006074:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006080:	429a      	cmp	r2, r3
 8006082:	d907      	bls.n	8006094 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8006084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800608c:	1ad2      	subs	r2, r2, r3
 800608e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006090:	619a      	str	r2, [r3, #24]
 8006092:	e002      	b.n	800609a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8006094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006096:	2200      	movs	r2, #0
 8006098:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800609a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f007 f822 	bl	800d0f2 <HAL_PCD_DataInStageCallback>
 80060ae:	e01b      	b.n	80060e8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80060b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060b8:	441a      	add	r2, r3
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80060be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c0:	69da      	ldr	r2, [r3, #28]
 80060c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060c6:	441a      	add	r2, r3
 80060c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060d2:	4618      	mov	r0, r3
 80060d4:	f003 fc5e 	bl	8009994 <USB_EPStartXfer>
 80060d8:	e006      	b.n	80060e8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80060da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060de:	461a      	mov	r2, r3
 80060e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f91b 	bl	800631e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b21b      	sxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f6ff ac37 	blt.w	8005968 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3758      	adds	r7, #88	; 0x58
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d07e      	beq.n	800621a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	3302      	adds	r3, #2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006144:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	8b7b      	ldrh	r3, [r7, #26]
 800614c:	429a      	cmp	r2, r3
 800614e:	d306      	bcc.n	800615e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	8b7b      	ldrh	r3, [r7, #26]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	619a      	str	r2, [r3, #24]
 800615c:	e002      	b.n	8006164 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2200      	movs	r2, #0
 8006162:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d123      	bne.n	80061b4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	833b      	strh	r3, [r7, #24]
 8006188:	8b3b      	ldrh	r3, [r7, #24]
 800618a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800618e:	833b      	strh	r3, [r7, #24]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	8b3b      	ldrh	r3, [r7, #24]
 80061a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01f      	beq.n	80061fe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	82fb      	strh	r3, [r7, #22]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	8afb      	ldrh	r3, [r7, #22]
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80061fe:	8b7b      	ldrh	r3, [r7, #26]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8087 	beq.w	8006314 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6959      	ldr	r1, [r3, #20]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	891a      	ldrh	r2, [r3, #8]
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	f005 f8f2 	bl	800b3fc <USB_ReadPMA>
 8006218:	e07c      	b.n	8006314 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006222:	b29b      	uxth	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	3306      	adds	r3, #6
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006242:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	8b7b      	ldrh	r3, [r7, #26]
 800624a:	429a      	cmp	r2, r3
 800624c:	d306      	bcc.n	800625c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	8b7b      	ldrh	r3, [r7, #26]
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	619a      	str	r2, [r3, #24]
 800625a:	e002      	b.n	8006262 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d123      	bne.n	80062b2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	83fb      	strh	r3, [r7, #30]
 8006286:	8bfb      	ldrh	r3, [r7, #30]
 8006288:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800628c:	83fb      	strh	r3, [r7, #30]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	8bfb      	ldrh	r3, [r7, #30]
 800629e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11f      	bne.n	80062fc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	83bb      	strh	r3, [r7, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	8bbb      	ldrh	r3, [r7, #28]
 80062e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80062fc:	8b7b      	ldrh	r3, [r7, #26]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6959      	ldr	r1, [r3, #20]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	895a      	ldrh	r2, [r3, #10]
 800630e:	8b7b      	ldrh	r3, [r7, #26]
 8006310:	f005 f874 	bl	800b3fc <USB_ReadPMA>
    }
  }

  return count;
 8006314:	8b7b      	ldrh	r3, [r7, #26]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b0a4      	sub	sp, #144	; 0x90
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	4613      	mov	r3, r2
 800632a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 81dd 	beq.w	80066f2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006340:	b29b      	uxth	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	4413      	add	r3, r2
 800634c:	3302      	adds	r3, #2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006360:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800636c:	429a      	cmp	r2, r3
 800636e:	d907      	bls.n	8006380 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	699a      	ldr	r2, [r3, #24]
 8006374:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006378:	1ad2      	subs	r2, r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	619a      	str	r2, [r3, #24]
 800637e:	e002      	b.n	8006386 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 80b9 	bne.w	8006502 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d126      	bne.n	80063e6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	4413      	add	r3, r2
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	011a      	lsls	r2, r3, #4
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063de:	b29a      	uxth	r2, r3
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	e01a      	b.n	800641c <HAL_PCD_EP_DB_Transmit+0xfe>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d116      	bne.n	800641c <HAL_PCD_EP_DB_Transmit+0xfe>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	637b      	str	r3, [r7, #52]	; 0x34
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	4413      	add	r3, r2
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	011a      	lsls	r2, r3, #4
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	4413      	add	r3, r2
 8006410:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006414:	633b      	str	r3, [r7, #48]	; 0x30
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	2200      	movs	r2, #0
 800641a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d126      	bne.n	8006478 <HAL_PCD_EP_DB_Transmit+0x15a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	011a      	lsls	r2, r3, #4
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800645c:	b29a      	uxth	r2, r3
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006470:	b29a      	uxth	r2, r3
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e017      	b.n	80064a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d113      	bne.n	80064a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	4413      	add	r3, r2
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	011a      	lsls	r2, r3, #4
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	4413      	add	r3, r2
 800649c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2200      	movs	r2, #0
 80064a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	4619      	mov	r1, r3
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f006 fe1f 	bl	800d0f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 82fc 	beq.w	8006ab8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	82fb      	strh	r3, [r7, #22]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	8afb      	ldrh	r3, [r7, #22]
 80064ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8013      	strh	r3, [r2, #0]
 8006500:	e2da      	b.n	8006ab8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d021      	beq.n	8006550 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	441a      	add	r2, r3
 8006538:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800653c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006556:	2b01      	cmp	r3, #1
 8006558:	f040 82ae 	bne.w	8006ab8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	695a      	ldr	r2, [r3, #20]
 8006560:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006564:	441a      	add	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006572:	441a      	add	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6a1a      	ldr	r2, [r3, #32]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	429a      	cmp	r2, r3
 8006582:	d30b      	bcc.n	800659c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	621a      	str	r2, [r3, #32]
 800659a:	e017      	b.n	80065cc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80065a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065b4:	e00a      	b.n	80065cc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d165      	bne.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x382>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	4413      	add	r3, r2
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	011a      	lsls	r2, r3, #4
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006606:	b29a      	uxth	r2, r3
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006610:	2b3e      	cmp	r3, #62	; 0x3e
 8006612:	d91d      	bls.n	8006650 <HAL_PCD_EP_DB_Transmit+0x332>
 8006614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	64bb      	str	r3, [r7, #72]	; 0x48
 800661c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <HAL_PCD_EP_DB_Transmit+0x310>
 8006628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662a:	3b01      	subs	r3, #1
 800662c:	64bb      	str	r3, [r7, #72]	; 0x48
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29a      	uxth	r2, r3
 8006634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006636:	b29b      	uxth	r3, r3
 8006638:	029b      	lsls	r3, r3, #10
 800663a:	b29b      	uxth	r3, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006648:	b29a      	uxth	r2, r3
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e044      	b.n	80066da <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <HAL_PCD_EP_DB_Transmit+0x350>
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006666:	b29a      	uxth	r2, r3
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	e035      	b.n	80066da <HAL_PCD_EP_DB_Transmit+0x3bc>
 800666e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
 8006676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006684:	3301      	adds	r3, #1
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29a      	uxth	r2, r3
 800668e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006690:	b29b      	uxth	r3, r3
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	b29b      	uxth	r3, r3
 8006696:	4313      	orrs	r3, r2
 8006698:	b29a      	uxth	r2, r3
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	e01c      	b.n	80066da <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d118      	bne.n	80066da <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	647b      	str	r3, [r7, #68]	; 0x44
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066bc:	4413      	add	r3, r2
 80066be:	647b      	str	r3, [r7, #68]	; 0x44
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	011a      	lsls	r2, r3, #4
 80066c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066ce:	643b      	str	r3, [r7, #64]	; 0x40
 80066d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6959      	ldr	r1, [r3, #20]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	891a      	ldrh	r2, [r3, #8]
 80066e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f004 fe41 	bl	800b372 <USB_WritePMA>
 80066f0:	e1e2      	b.n	8006ab8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	3306      	adds	r3, #6
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800671a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006726:	429a      	cmp	r2, r3
 8006728:	d307      	bcc.n	800673a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	619a      	str	r2, [r3, #24]
 8006738:	e002      	b.n	8006740 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 80c0 	bne.w	80068ca <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d126      	bne.n	80067a0 <HAL_PCD_EP_DB_Transmit+0x482>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006766:	4413      	add	r3, r2
 8006768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	011a      	lsls	r2, r3, #4
 8006770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006772:	4413      	add	r3, r2
 8006774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006778:	67bb      	str	r3, [r7, #120]	; 0x78
 800677a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006784:	b29a      	uxth	r2, r3
 8006786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006798:	b29a      	uxth	r2, r3
 800679a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e01a      	b.n	80067d6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d116      	bne.n	80067d6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	667b      	str	r3, [r7, #100]	; 0x64
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067bc:	4413      	add	r3, r2
 80067be:	667b      	str	r3, [r7, #100]	; 0x64
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	011a      	lsls	r2, r3, #4
 80067c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c8:	4413      	add	r3, r2
 80067ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ce:	663b      	str	r3, [r7, #96]	; 0x60
 80067d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d2:	2200      	movs	r2, #0
 80067d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	677b      	str	r3, [r7, #116]	; 0x74
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d12b      	bne.n	800683c <HAL_PCD_EP_DB_Transmit+0x51e>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f8:	4413      	add	r3, r2
 80067fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	011a      	lsls	r2, r3, #4
 8006802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006804:	4413      	add	r3, r2
 8006806:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800680a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800680e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681a:	b29a      	uxth	r2, r3
 800681c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e017      	b.n	800686c <HAL_PCD_EP_DB_Transmit+0x54e>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d113      	bne.n	800686c <HAL_PCD_EP_DB_Transmit+0x54e>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684c:	b29b      	uxth	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006852:	4413      	add	r3, r2
 8006854:	677b      	str	r3, [r7, #116]	; 0x74
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	011a      	lsls	r2, r3, #4
 800685c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685e:	4413      	add	r3, r2
 8006860:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006864:	673b      	str	r3, [r7, #112]	; 0x70
 8006866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006868:	2200      	movs	r2, #0
 800686a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	4619      	mov	r1, r3
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f006 fc3d 	bl	800d0f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 811a 	bne.w	8006ab8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	441a      	add	r2, r3
 80068b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]
 80068c8:	e0f6      	b.n	8006ab8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d121      	bne.n	8006918 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006914:	b29b      	uxth	r3, r3
 8006916:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800691e:	2b01      	cmp	r3, #1
 8006920:	f040 80ca 	bne.w	8006ab8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800692c:	441a      	add	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	69da      	ldr	r2, [r3, #28]
 8006936:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800693a:	441a      	add	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	429a      	cmp	r2, r3
 800694a:	d30b      	bcc.n	8006964 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6a1a      	ldr	r2, [r3, #32]
 8006958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	621a      	str	r2, [r3, #32]
 8006962:	e017      	b.n	8006994 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d108      	bne.n	800697e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800696c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800697c:	e00a      	b.n	8006994 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	657b      	str	r3, [r7, #84]	; 0x54
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d165      	bne.n	8006a6e <HAL_PCD_EP_DB_Transmit+0x750>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b6:	4413      	add	r3, r2
 80069b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	011a      	lsls	r2, r3, #4
 80069c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069de:	2b3e      	cmp	r3, #62	; 0x3e
 80069e0:	d91d      	bls.n	8006a1e <HAL_PCD_EP_DB_Transmit+0x700>
 80069e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <HAL_PCD_EP_DB_Transmit+0x6de>
 80069f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069f8:	3b01      	subs	r3, #1
 80069fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80069fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	e041      	b.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <HAL_PCD_EP_DB_Transmit+0x71e>
 8006a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e032      	b.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_PCD_EP_DB_Transmit+0x738>
 8006a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a52:	3301      	adds	r3, #1
 8006a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	029b      	lsls	r3, r3, #10
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e019      	b.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d115      	bne.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a84:	4413      	add	r3, r2
 8006a86:	657b      	str	r3, [r7, #84]	; 0x54
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	011a      	lsls	r2, r3, #4
 8006a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a96:	653b      	str	r3, [r7, #80]	; 0x50
 8006a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6959      	ldr	r1, [r3, #20]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	895a      	ldrh	r2, [r3, #10]
 8006aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f004 fc5d 	bl	800b372 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad2:	82bb      	strh	r3, [r7, #20]
 8006ad4:	8abb      	ldrh	r3, [r7, #20]
 8006ad6:	f083 0310 	eor.w	r3, r3, #16
 8006ada:	82bb      	strh	r3, [r7, #20]
 8006adc:	8abb      	ldrh	r3, [r7, #20]
 8006ade:	f083 0320 	eor.w	r3, r3, #32
 8006ae2:	82bb      	strh	r3, [r7, #20]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	8abb      	ldrh	r3, [r7, #20]
 8006af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3790      	adds	r7, #144	; 0x90
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b087      	sub	sp, #28
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	607b      	str	r3, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	817b      	strh	r3, [r7, #10]
 8006b20:	4613      	mov	r3, r2
 8006b22:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b24:	897b      	ldrh	r3, [r7, #10]
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b30:	897b      	ldrh	r3, [r7, #10]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	e009      	b.n	8006b5c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b48:	897a      	ldrh	r2, [r7, #10]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b5c:	893b      	ldrh	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2200      	movs	r2, #0
 8006b66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	80da      	strh	r2, [r3, #6]
 8006b70:	e00b      	b.n	8006b8a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2201      	movs	r2, #1
 8006b76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0c1b      	lsrs	r3, r3, #16
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr
	...

08006b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e272      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 8087 	beq.w	8006cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bb8:	4b92      	ldr	r3, [pc, #584]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f003 030c 	and.w	r3, r3, #12
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	d00c      	beq.n	8006bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bc4:	4b8f      	ldr	r3, [pc, #572]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f003 030c 	and.w	r3, r3, #12
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d112      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x5e>
 8006bd0:	4b8c      	ldr	r3, [pc, #560]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bdc:	d10b      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bde:	4b89      	ldr	r3, [pc, #548]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d06c      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x12c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d168      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e24c      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfe:	d106      	bne.n	8006c0e <HAL_RCC_OscConfig+0x76>
 8006c00:	4b80      	ldr	r3, [pc, #512]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a7f      	ldr	r2, [pc, #508]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	e02e      	b.n	8006c6c <HAL_RCC_OscConfig+0xd4>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10c      	bne.n	8006c30 <HAL_RCC_OscConfig+0x98>
 8006c16:	4b7b      	ldr	r3, [pc, #492]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a7a      	ldr	r2, [pc, #488]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b78      	ldr	r3, [pc, #480]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a77      	ldr	r2, [pc, #476]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e01d      	b.n	8006c6c <HAL_RCC_OscConfig+0xd4>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCC_OscConfig+0xbc>
 8006c3a:	4b72      	ldr	r3, [pc, #456]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a71      	ldr	r2, [pc, #452]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6e      	ldr	r2, [pc, #440]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e00b      	b.n	8006c6c <HAL_RCC_OscConfig+0xd4>
 8006c54:	4b6b      	ldr	r3, [pc, #428]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a6a      	ldr	r2, [pc, #424]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	4b68      	ldr	r3, [pc, #416]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a67      	ldr	r2, [pc, #412]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d013      	beq.n	8006c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c74:	f7fc f898 	bl	8002da8 <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c7c:	f7fc f894 	bl	8002da8 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b64      	cmp	r3, #100	; 0x64
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e200      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8e:	4b5d      	ldr	r3, [pc, #372]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f0      	beq.n	8006c7c <HAL_RCC_OscConfig+0xe4>
 8006c9a:	e014      	b.n	8006cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9c:	f7fc f884 	bl	8002da8 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ca4:	f7fc f880 	bl	8002da8 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b64      	cmp	r3, #100	; 0x64
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e1ec      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cb6:	4b53      	ldr	r3, [pc, #332]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f0      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x10c>
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d063      	beq.n	8006d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cd2:	4b4c      	ldr	r3, [pc, #304]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f003 030c 	and.w	r3, r3, #12
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00b      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006cde:	4b49      	ldr	r3, [pc, #292]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f003 030c 	and.w	r3, r3, #12
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d11c      	bne.n	8006d24 <HAL_RCC_OscConfig+0x18c>
 8006cea:	4b46      	ldr	r3, [pc, #280]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d116      	bne.n	8006d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf6:	4b43      	ldr	r3, [pc, #268]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <HAL_RCC_OscConfig+0x176>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d001      	beq.n	8006d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e1c0      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d0e:	4b3d      	ldr	r3, [pc, #244]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	4939      	ldr	r1, [pc, #228]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d22:	e03a      	b.n	8006d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d020      	beq.n	8006d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d2c:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <HAL_RCC_OscConfig+0x270>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d32:	f7fc f839 	bl	8002da8 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d3a:	f7fc f835 	bl	8002da8 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e1a1      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4c:	4b2d      	ldr	r3, [pc, #180]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0f0      	beq.n	8006d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d58:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	4927      	ldr	r1, [pc, #156]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	600b      	str	r3, [r1, #0]
 8006d6c:	e015      	b.n	8006d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d6e:	4b26      	ldr	r3, [pc, #152]	; (8006e08 <HAL_RCC_OscConfig+0x270>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d74:	f7fc f818 	bl	8002da8 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d7c:	f7fc f814 	bl	8002da8 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e180      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d8e:	4b1d      	ldr	r3, [pc, #116]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f0      	bne.n	8006d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0308 	and.w	r3, r3, #8
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d03a      	beq.n	8006e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d019      	beq.n	8006de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dae:	4b17      	ldr	r3, [pc, #92]	; (8006e0c <HAL_RCC_OscConfig+0x274>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db4:	f7fb fff8 	bl	8002da8 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dbc:	f7fb fff4 	bl	8002da8 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e160      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <HAL_RCC_OscConfig+0x26c>)
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f0      	beq.n	8006dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006dda:	2001      	movs	r0, #1
 8006ddc:	f000 face 	bl	800737c <RCC_Delay>
 8006de0:	e01c      	b.n	8006e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006de2:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <HAL_RCC_OscConfig+0x274>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de8:	f7fb ffde 	bl	8002da8 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dee:	e00f      	b.n	8006e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006df0:	f7fb ffda 	bl	8002da8 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d908      	bls.n	8006e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e146      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
 8006e02:	bf00      	nop
 8006e04:	40021000 	.word	0x40021000
 8006e08:	42420000 	.word	0x42420000
 8006e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e10:	4b92      	ldr	r3, [pc, #584]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e9      	bne.n	8006df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80a6 	beq.w	8006f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e2e:	4b8b      	ldr	r3, [pc, #556]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10d      	bne.n	8006e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e3a:	4b88      	ldr	r3, [pc, #544]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	4a87      	ldr	r2, [pc, #540]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e44:	61d3      	str	r3, [r2, #28]
 8006e46:	4b85      	ldr	r3, [pc, #532]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e56:	4b82      	ldr	r3, [pc, #520]	; (8007060 <HAL_RCC_OscConfig+0x4c8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d118      	bne.n	8006e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e62:	4b7f      	ldr	r3, [pc, #508]	; (8007060 <HAL_RCC_OscConfig+0x4c8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a7e      	ldr	r2, [pc, #504]	; (8007060 <HAL_RCC_OscConfig+0x4c8>)
 8006e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e6e:	f7fb ff9b 	bl	8002da8 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e76:	f7fb ff97 	bl	8002da8 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b64      	cmp	r3, #100	; 0x64
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e103      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e88:	4b75      	ldr	r3, [pc, #468]	; (8007060 <HAL_RCC_OscConfig+0x4c8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0f0      	beq.n	8006e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <HAL_RCC_OscConfig+0x312>
 8006e9c:	4b6f      	ldr	r3, [pc, #444]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	4a6e      	ldr	r2, [pc, #440]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	6213      	str	r3, [r2, #32]
 8006ea8:	e02d      	b.n	8006f06 <HAL_RCC_OscConfig+0x36e>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCC_OscConfig+0x334>
 8006eb2:	4b6a      	ldr	r3, [pc, #424]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	4a69      	ldr	r2, [pc, #420]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	6213      	str	r3, [r2, #32]
 8006ebe:	4b67      	ldr	r3, [pc, #412]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	4a66      	ldr	r2, [pc, #408]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ec4:	f023 0304 	bic.w	r3, r3, #4
 8006ec8:	6213      	str	r3, [r2, #32]
 8006eca:	e01c      	b.n	8006f06 <HAL_RCC_OscConfig+0x36e>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b05      	cmp	r3, #5
 8006ed2:	d10c      	bne.n	8006eee <HAL_RCC_OscConfig+0x356>
 8006ed4:	4b61      	ldr	r3, [pc, #388]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	4a60      	ldr	r2, [pc, #384]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006eda:	f043 0304 	orr.w	r3, r3, #4
 8006ede:	6213      	str	r3, [r2, #32]
 8006ee0:	4b5e      	ldr	r3, [pc, #376]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	4a5d      	ldr	r2, [pc, #372]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ee6:	f043 0301 	orr.w	r3, r3, #1
 8006eea:	6213      	str	r3, [r2, #32]
 8006eec:	e00b      	b.n	8006f06 <HAL_RCC_OscConfig+0x36e>
 8006eee:	4b5b      	ldr	r3, [pc, #364]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	4a5a      	ldr	r2, [pc, #360]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	6213      	str	r3, [r2, #32]
 8006efa:	4b58      	ldr	r3, [pc, #352]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	4a57      	ldr	r2, [pc, #348]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d015      	beq.n	8006f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f0e:	f7fb ff4b 	bl	8002da8 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f14:	e00a      	b.n	8006f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f16:	f7fb ff47 	bl	8002da8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e0b1      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2c:	4b4b      	ldr	r3, [pc, #300]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0ee      	beq.n	8006f16 <HAL_RCC_OscConfig+0x37e>
 8006f38:	e014      	b.n	8006f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f3a:	f7fb ff35 	bl	8002da8 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f40:	e00a      	b.n	8006f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f42:	f7fb ff31 	bl	8002da8 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e09b      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f58:	4b40      	ldr	r3, [pc, #256]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1ee      	bne.n	8006f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d105      	bne.n	8006f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f6a:	4b3c      	ldr	r3, [pc, #240]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	4a3b      	ldr	r2, [pc, #236]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8087 	beq.w	800708e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f80:	4b36      	ldr	r3, [pc, #216]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f003 030c 	and.w	r3, r3, #12
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d061      	beq.n	8007050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d146      	bne.n	8007022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f94:	4b33      	ldr	r3, [pc, #204]	; (8007064 <HAL_RCC_OscConfig+0x4cc>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9a:	f7fb ff05 	bl	8002da8 <HAL_GetTick>
 8006f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa2:	f7fb ff01 	bl	8002da8 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e06d      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fb4:	4b29      	ldr	r3, [pc, #164]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f0      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc8:	d108      	bne.n	8006fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006fca:	4b24      	ldr	r3, [pc, #144]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	4921      	ldr	r1, [pc, #132]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fdc:	4b1f      	ldr	r3, [pc, #124]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a19      	ldr	r1, [r3, #32]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	430b      	orrs	r3, r1
 8006fee:	491b      	ldr	r1, [pc, #108]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ff4:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <HAL_RCC_OscConfig+0x4cc>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ffa:	f7fb fed5 	bl	8002da8 <HAL_GetTick>
 8006ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007002:	f7fb fed1 	bl	8002da8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e03d      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCC_OscConfig+0x46a>
 8007020:	e035      	b.n	800708e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007022:	4b10      	ldr	r3, [pc, #64]	; (8007064 <HAL_RCC_OscConfig+0x4cc>)
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007028:	f7fb febe 	bl	8002da8 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007030:	f7fb feba 	bl	8002da8 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e026      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007042:	4b06      	ldr	r3, [pc, #24]	; (800705c <HAL_RCC_OscConfig+0x4c4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1f0      	bne.n	8007030 <HAL_RCC_OscConfig+0x498>
 800704e:	e01e      	b.n	800708e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e019      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
 800705c:	40021000 	.word	0x40021000
 8007060:	40007000 	.word	0x40007000
 8007064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007068:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <HAL_RCC_OscConfig+0x500>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	429a      	cmp	r2, r3
 800707a:	d106      	bne.n	800708a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007086:	429a      	cmp	r2, r3
 8007088:	d001      	beq.n	800708e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40021000 	.word	0x40021000

0800709c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e0d0      	b.n	8007252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070b0:	4b6a      	ldr	r3, [pc, #424]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d910      	bls.n	80070e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070be:	4b67      	ldr	r3, [pc, #412]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f023 0207 	bic.w	r2, r3, #7
 80070c6:	4965      	ldr	r1, [pc, #404]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b63      	ldr	r3, [pc, #396]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0b8      	b.n	8007252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d020      	beq.n	800712e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070f8:	4b59      	ldr	r3, [pc, #356]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4a58      	ldr	r2, [pc, #352]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 80070fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007110:	4b53      	ldr	r3, [pc, #332]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	4a52      	ldr	r2, [pc, #328]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800711a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800711c:	4b50      	ldr	r3, [pc, #320]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	494d      	ldr	r1, [pc, #308]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 800712a:	4313      	orrs	r3, r2
 800712c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d040      	beq.n	80071bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d107      	bne.n	8007152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007142:	4b47      	ldr	r3, [pc, #284]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d115      	bne.n	800717a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e07f      	b.n	8007252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d107      	bne.n	800716a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800715a:	4b41      	ldr	r3, [pc, #260]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e073      	b.n	8007252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800716a:	4b3d      	ldr	r3, [pc, #244]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e06b      	b.n	8007252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f023 0203 	bic.w	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4936      	ldr	r1, [pc, #216]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007188:	4313      	orrs	r3, r2
 800718a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800718c:	f7fb fe0c 	bl	8002da8 <HAL_GetTick>
 8007190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007192:	e00a      	b.n	80071aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007194:	f7fb fe08 	bl	8002da8 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e053      	b.n	8007252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071aa:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f003 020c 	and.w	r2, r3, #12
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d1eb      	bne.n	8007194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d210      	bcs.n	80071ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ca:	4b24      	ldr	r3, [pc, #144]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 0207 	bic.w	r2, r3, #7
 80071d2:	4922      	ldr	r1, [pc, #136]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071da:	4b20      	ldr	r3, [pc, #128]	; (800725c <HAL_RCC_ClockConfig+0x1c0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e032      	b.n	8007252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071f8:	4b19      	ldr	r3, [pc, #100]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4916      	ldr	r1, [pc, #88]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007206:	4313      	orrs	r3, r2
 8007208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007216:	4b12      	ldr	r3, [pc, #72]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	490e      	ldr	r1, [pc, #56]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007226:	4313      	orrs	r3, r2
 8007228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800722a:	f000 f821 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 800722e:	4602      	mov	r2, r0
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_RCC_ClockConfig+0x1c4>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	490a      	ldr	r1, [pc, #40]	; (8007264 <HAL_RCC_ClockConfig+0x1c8>)
 800723c:	5ccb      	ldrb	r3, [r1, r3]
 800723e:	fa22 f303 	lsr.w	r3, r2, r3
 8007242:	4a09      	ldr	r2, [pc, #36]	; (8007268 <HAL_RCC_ClockConfig+0x1cc>)
 8007244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <HAL_RCC_ClockConfig+0x1d0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f7fb fd6a 	bl	8002d24 <HAL_InitTick>

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40022000 	.word	0x40022000
 8007260:	40021000 	.word	0x40021000
 8007264:	0800daa0 	.word	0x0800daa0
 8007268:	20000018 	.word	0x20000018
 800726c:	2000001c 	.word	0x2000001c

08007270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	2300      	movs	r3, #0
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800728a:	4b1e      	ldr	r3, [pc, #120]	; (8007304 <HAL_RCC_GetSysClockFreq+0x94>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 030c 	and.w	r3, r3, #12
 8007296:	2b04      	cmp	r3, #4
 8007298:	d002      	beq.n	80072a0 <HAL_RCC_GetSysClockFreq+0x30>
 800729a:	2b08      	cmp	r3, #8
 800729c:	d003      	beq.n	80072a6 <HAL_RCC_GetSysClockFreq+0x36>
 800729e:	e027      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072a0:	4b19      	ldr	r3, [pc, #100]	; (8007308 <HAL_RCC_GetSysClockFreq+0x98>)
 80072a2:	613b      	str	r3, [r7, #16]
      break;
 80072a4:	e027      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	0c9b      	lsrs	r3, r3, #18
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	4a17      	ldr	r2, [pc, #92]	; (800730c <HAL_RCC_GetSysClockFreq+0x9c>)
 80072b0:	5cd3      	ldrb	r3, [r2, r3]
 80072b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d010      	beq.n	80072e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072be:	4b11      	ldr	r3, [pc, #68]	; (8007304 <HAL_RCC_GetSysClockFreq+0x94>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	0c5b      	lsrs	r3, r3, #17
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	4a11      	ldr	r2, [pc, #68]	; (8007310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80072ca:	5cd3      	ldrb	r3, [r2, r3]
 80072cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <HAL_RCC_GetSysClockFreq+0x98>)
 80072d2:	fb03 f202 	mul.w	r2, r3, r2
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e004      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80072e4:	fb02 f303 	mul.w	r3, r2, r3
 80072e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	613b      	str	r3, [r7, #16]
      break;
 80072ee:	e002      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <HAL_RCC_GetSysClockFreq+0x98>)
 80072f2:	613b      	str	r3, [r7, #16]
      break;
 80072f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072f6:	693b      	ldr	r3, [r7, #16]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40021000 	.word	0x40021000
 8007308:	007a1200 	.word	0x007a1200
 800730c:	0800dab8 	.word	0x0800dab8
 8007310:	0800dac8 	.word	0x0800dac8
 8007314:	003d0900 	.word	0x003d0900

08007318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <HAL_RCC_GetHCLKFreq+0x10>)
 800731e:	681b      	ldr	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	20000018 	.word	0x20000018

0800732c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007330:	f7ff fff2 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007334:	4602      	mov	r2, r0
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	0a1b      	lsrs	r3, r3, #8
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	4903      	ldr	r1, [pc, #12]	; (8007350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007342:	5ccb      	ldrb	r3, [r1, r3]
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007348:	4618      	mov	r0, r3
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40021000 	.word	0x40021000
 8007350:	0800dab0 	.word	0x0800dab0

08007354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007358:	f7ff ffde 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 800735c:	4602      	mov	r2, r0
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	0adb      	lsrs	r3, r3, #11
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	4903      	ldr	r1, [pc, #12]	; (8007378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800736a:	5ccb      	ldrb	r3, [r1, r3]
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40021000 	.word	0x40021000
 8007378:	0800dab0 	.word	0x0800dab0

0800737c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007384:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <RCC_Delay+0x34>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <RCC_Delay+0x38>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	0a5b      	lsrs	r3, r3, #9
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	fb02 f303 	mul.w	r3, r2, r3
 8007396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007398:	bf00      	nop
  }
  while (Delay --);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1e5a      	subs	r2, r3, #1
 800739e:	60fa      	str	r2, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f9      	bne.n	8007398 <RCC_Delay+0x1c>
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr
 80073b0:	20000018 	.word	0x20000018
 80073b4:	10624dd3 	.word	0x10624dd3

080073b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d07d      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073d8:	4b4f      	ldr	r3, [pc, #316]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10d      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073e4:	4b4c      	ldr	r3, [pc, #304]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	4a4b      	ldr	r2, [pc, #300]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ee:	61d3      	str	r3, [r2, #28]
 80073f0:	4b49      	ldr	r3, [pc, #292]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073fc:	2301      	movs	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007400:	4b46      	ldr	r3, [pc, #280]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007408:	2b00      	cmp	r3, #0
 800740a:	d118      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800740c:	4b43      	ldr	r3, [pc, #268]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a42      	ldr	r2, [pc, #264]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007416:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007418:	f7fb fcc6 	bl	8002da8 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800741e:	e008      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007420:	f7fb fcc2 	bl	8002da8 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b64      	cmp	r3, #100	; 0x64
 800742c:	d901      	bls.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e06d      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007432:	4b3a      	ldr	r3, [pc, #232]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800743e:	4b36      	ldr	r3, [pc, #216]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007446:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d02e      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	429a      	cmp	r2, r3
 800745a:	d027      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800745c:	4b2e      	ldr	r3, [pc, #184]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007464:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007466:	4b2e      	ldr	r3, [pc, #184]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007468:	2201      	movs	r2, #1
 800746a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800746c:	4b2c      	ldr	r3, [pc, #176]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007472:	4a29      	ldr	r2, [pc, #164]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d014      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007482:	f7fb fc91 	bl	8002da8 <HAL_GetTick>
 8007486:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007488:	e00a      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748a:	f7fb fc8d 	bl	8002da8 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	f241 3288 	movw	r2, #5000	; 0x1388
 8007498:	4293      	cmp	r3, r2
 800749a:	d901      	bls.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e036      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a0:	4b1d      	ldr	r3, [pc, #116]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0ee      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4917      	ldr	r1, [pc, #92]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d105      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c4:	4b14      	ldr	r3, [pc, #80]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	4a13      	ldr	r2, [pc, #76]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	490b      	ldr	r1, [pc, #44]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074fa:	4b07      	ldr	r3, [pc, #28]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	4904      	ldr	r1, [pc, #16]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007508:	4313      	orrs	r3, r2
 800750a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40021000 	.word	0x40021000
 800751c:	40007000 	.word	0x40007000
 8007520:	42420440 	.word	0x42420440

08007524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e041      	b.n	80075ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d106      	bne.n	8007550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7fb fa8c 	bl	8002a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3304      	adds	r3, #4
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f000 fb86 	bl	8007c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d001      	beq.n	80075dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e03a      	b.n	8007652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a18      	ldr	r2, [pc, #96]	; (800765c <HAL_TIM_Base_Start_IT+0x98>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00e      	beq.n	800761c <HAL_TIM_Base_Start_IT+0x58>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007606:	d009      	beq.n	800761c <HAL_TIM_Base_Start_IT+0x58>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a14      	ldr	r2, [pc, #80]	; (8007660 <HAL_TIM_Base_Start_IT+0x9c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_TIM_Base_Start_IT+0x58>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a13      	ldr	r2, [pc, #76]	; (8007664 <HAL_TIM_Base_Start_IT+0xa0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d111      	bne.n	8007640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b06      	cmp	r3, #6
 800762c:	d010      	beq.n	8007650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0201 	orr.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763e:	e007      	b.n	8007650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800

08007668 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e041      	b.n	80076fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fb fa10 	bl	8002ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f000 fae4 	bl	8007c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d122      	bne.n	8007762 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d11b      	bne.n	8007762 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f06f 0202 	mvn.w	r2, #2
 8007732:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa77 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 800774e:	e005      	b.n	800775c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa6a 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa79 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b04      	cmp	r3, #4
 800776e:	d122      	bne.n	80077b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b04      	cmp	r3, #4
 800777c:	d11b      	bne.n	80077b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f06f 0204 	mvn.w	r2, #4
 8007786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fa4d 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 80077a2:	e005      	b.n	80077b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fa40 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa4f 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d122      	bne.n	800780a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d11b      	bne.n	800780a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f06f 0208 	mvn.w	r2, #8
 80077da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2204      	movs	r2, #4
 80077e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa23 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 80077f6:	e005      	b.n	8007804 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fa16 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa25 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b10      	cmp	r3, #16
 8007816:	d122      	bne.n	800785e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b10      	cmp	r3, #16
 8007824:	d11b      	bne.n	800785e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0210 	mvn.w	r2, #16
 800782e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2208      	movs	r2, #8
 8007834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f9f9 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 800784a:	e005      	b.n	8007858 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f9ec 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9fb 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10e      	bne.n	800788a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f06f 0201 	mvn.w	r2, #1
 8007882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7f9 fff1 	bl	800186c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d10e      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d107      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fcc6 	bl	8008242 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d10e      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d107      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f9bf 	bl	8007c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d10e      	bne.n	800790e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d107      	bne.n	800790e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f06f 0220 	mvn.w	r2, #32
 8007906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc91 	bl	8008230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007932:	2302      	movs	r3, #2
 8007934:	e0ae      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b0c      	cmp	r3, #12
 8007942:	f200 809f 	bhi.w	8007a84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007981 	.word	0x08007981
 8007950:	08007a85 	.word	0x08007a85
 8007954:	08007a85 	.word	0x08007a85
 8007958:	08007a85 	.word	0x08007a85
 800795c:	080079c1 	.word	0x080079c1
 8007960:	08007a85 	.word	0x08007a85
 8007964:	08007a85 	.word	0x08007a85
 8007968:	08007a85 	.word	0x08007a85
 800796c:	08007a03 	.word	0x08007a03
 8007970:	08007a85 	.word	0x08007a85
 8007974:	08007a85 	.word	0x08007a85
 8007978:	08007a85 	.word	0x08007a85
 800797c:	08007a43 	.word	0x08007a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f9d6 	bl	8007d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0208 	orr.w	r2, r2, #8
 800799a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0204 	bic.w	r2, r2, #4
 80079aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6999      	ldr	r1, [r3, #24]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	691a      	ldr	r2, [r3, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	619a      	str	r2, [r3, #24]
      break;
 80079be:	e064      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fa1c 	bl	8007e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6999      	ldr	r1, [r3, #24]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	021a      	lsls	r2, r3, #8
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	619a      	str	r2, [r3, #24]
      break;
 8007a00:	e043      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fa65 	bl	8007ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0208 	orr.w	r2, r2, #8
 8007a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0204 	bic.w	r2, r2, #4
 8007a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69d9      	ldr	r1, [r3, #28]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	61da      	str	r2, [r3, #28]
      break;
 8007a40:	e023      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 faaf 	bl	8007fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69d9      	ldr	r1, [r3, #28]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	021a      	lsls	r2, r3, #8
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	61da      	str	r2, [r3, #28]
      break;
 8007a82:	e002      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	75fb      	strb	r3, [r7, #23]
      break;
 8007a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e0b4      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x186>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af0:	d03e      	beq.n	8007b70 <HAL_TIM_ConfigClockSource+0xd4>
 8007af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af6:	f200 8087 	bhi.w	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afe:	f000 8086 	beq.w	8007c0e <HAL_TIM_ConfigClockSource+0x172>
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b06:	d87f      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007b08:	2b70      	cmp	r3, #112	; 0x70
 8007b0a:	d01a      	beq.n	8007b42 <HAL_TIM_ConfigClockSource+0xa6>
 8007b0c:	2b70      	cmp	r3, #112	; 0x70
 8007b0e:	d87b      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007b10:	2b60      	cmp	r3, #96	; 0x60
 8007b12:	d050      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8007b14:	2b60      	cmp	r3, #96	; 0x60
 8007b16:	d877      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007b18:	2b50      	cmp	r3, #80	; 0x50
 8007b1a:	d03c      	beq.n	8007b96 <HAL_TIM_ConfigClockSource+0xfa>
 8007b1c:	2b50      	cmp	r3, #80	; 0x50
 8007b1e:	d873      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d058      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d86f      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007b28:	2b30      	cmp	r3, #48	; 0x30
 8007b2a:	d064      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b2c:	2b30      	cmp	r3, #48	; 0x30
 8007b2e:	d86b      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d060      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	d867      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d05c      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b3c:	2b10      	cmp	r3, #16
 8007b3e:	d05a      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b40:	e062      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b52:	f000 faf0 	bl	8008136 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	609a      	str	r2, [r3, #8]
      break;
 8007b6e:	e04f      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b80:	f000 fad9 	bl	8008136 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b92:	609a      	str	r2, [r3, #8]
      break;
 8007b94:	e03c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f000 fa50 	bl	8008048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2150      	movs	r1, #80	; 0x50
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 faa7 	bl	8008102 <TIM_ITRx_SetConfig>
      break;
 8007bb4:	e02c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f000 fa6e 	bl	80080a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2160      	movs	r1, #96	; 0x60
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fa97 	bl	8008102 <TIM_ITRx_SetConfig>
      break;
 8007bd4:	e01c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be2:	461a      	mov	r2, r3
 8007be4:	f000 fa30 	bl	8008048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2140      	movs	r1, #64	; 0x40
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fa87 	bl	8008102 <TIM_ITRx_SetConfig>
      break;
 8007bf4:	e00c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f000 fa7e 	bl	8008102 <TIM_ITRx_SetConfig>
      break;
 8007c06:	e003      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0c:	e000      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr

08007c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr
	...

08007c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a29      	ldr	r2, [pc, #164]	; (8007d2c <TIM_Base_SetConfig+0xb8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00b      	beq.n	8007ca4 <TIM_Base_SetConfig+0x30>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c92:	d007      	beq.n	8007ca4 <TIM_Base_SetConfig+0x30>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a26      	ldr	r2, [pc, #152]	; (8007d30 <TIM_Base_SetConfig+0xbc>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_Base_SetConfig+0x30>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a25      	ldr	r2, [pc, #148]	; (8007d34 <TIM_Base_SetConfig+0xc0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	; (8007d2c <TIM_Base_SetConfig+0xb8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00b      	beq.n	8007cd6 <TIM_Base_SetConfig+0x62>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d007      	beq.n	8007cd6 <TIM_Base_SetConfig+0x62>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <TIM_Base_SetConfig+0xbc>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d003      	beq.n	8007cd6 <TIM_Base_SetConfig+0x62>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <TIM_Base_SetConfig+0xc0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d108      	bne.n	8007ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a07      	ldr	r2, [pc, #28]	; (8007d2c <TIM_Base_SetConfig+0xb8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d103      	bne.n	8007d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	615a      	str	r2, [r3, #20]
}
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40000400 	.word	0x40000400
 8007d34:	40000800 	.word	0x40000800

08007d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f023 0201 	bic.w	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 0302 	bic.w	r3, r3, #2
 8007d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	; (8007e00 <TIM_OC1_SetConfig+0xc8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d10c      	bne.n	8007dae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f023 0308 	bic.w	r3, r3, #8
 8007d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f023 0304 	bic.w	r3, r3, #4
 8007dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <TIM_OC1_SetConfig+0xc8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d111      	bne.n	8007dda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	621a      	str	r2, [r3, #32]
}
 8007df4:	bf00      	nop
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40012c00 	.word	0x40012c00

08007e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	f023 0210 	bic.w	r2, r3, #16
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 0320 	bic.w	r3, r3, #32
 8007e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <TIM_OC2_SetConfig+0xd0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d10d      	bne.n	8007e80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <TIM_OC2_SetConfig+0xd0>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d113      	bne.n	8007eb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	40012c00 	.word	0x40012c00

08007ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <TIM_OC3_SetConfig+0xd0>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d10d      	bne.n	8007f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <TIM_OC3_SetConfig+0xd0>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d113      	bne.n	8007f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	621a      	str	r2, [r3, #32]
}
 8007f9c:	bf00      	nop
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40012c00 	.word	0x40012c00

08007fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a0f      	ldr	r2, [pc, #60]	; (8008044 <TIM_OC4_SetConfig+0x98>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d109      	bne.n	8008020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	019b      	lsls	r3, r3, #6
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	621a      	str	r2, [r3, #32]
}
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr
 8008044:	40012c00 	.word	0x40012c00

08008048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	f023 0201 	bic.w	r2, r3, #1
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f023 030a 	bic.w	r3, r3, #10
 8008084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr

080080a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f023 0210 	bic.w	r2, r3, #16
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	031b      	lsls	r3, r3, #12
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	621a      	str	r2, [r3, #32]
}
 80080f8:	bf00      	nop
 80080fa:	371c      	adds	r7, #28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr

08008102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	f043 0307 	orr.w	r3, r3, #7
 8008124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	609a      	str	r2, [r3, #8]
}
 800812c:	bf00      	nop
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr

08008136 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008136:	b480      	push	{r7}
 8008138:	b087      	sub	sp, #28
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008150:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	021a      	lsls	r2, r3, #8
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	431a      	orrs	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4313      	orrs	r3, r2
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	609a      	str	r2, [r3, #8]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008188:	2302      	movs	r3, #2
 800818a:	e046      	b.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a16      	ldr	r2, [pc, #88]	; (8008224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00e      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d8:	d009      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a12      	ldr	r2, [pc, #72]	; (8008228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d004      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a10      	ldr	r2, [pc, #64]	; (800822c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d10c      	bne.n	8008208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	4770      	bx	lr
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800

08008230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr

08008242 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e042      	b.n	80082ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fa fc6c 	bl	8002b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2224      	movs	r2, #36	; 0x24
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fcd5 	bl	8008c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695a      	ldr	r2, [r3, #20]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b20      	cmp	r3, #32
 800830c:	d112      	bne.n	8008334 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_UART_Receive_IT+0x26>
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e00b      	b.n	8008336 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	461a      	mov	r2, r3
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fab7 	bl	800889e <UART_Start_Receive_IT>
 8008330:	4603      	mov	r3, r0
 8008332:	e000      	b.n	8008336 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008334:	2302      	movs	r3, #2
  }
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b0ba      	sub	sp, #232	; 0xe8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800836c:	2300      	movs	r3, #0
 800836e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800837e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10f      	bne.n	80083a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <HAL_UART_IRQHandler+0x66>
 8008392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fb93 	bl	8008aca <UART_Receive_IT>
      return;
 80083a4:	e25b      	b.n	800885e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 80de 	beq.w	800856c <HAL_UART_IRQHandler+0x22c>
 80083b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80d1 	beq.w	800856c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00b      	beq.n	80083ee <HAL_UART_IRQHandler+0xae>
 80083d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d005      	beq.n	80083ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	f043 0201 	orr.w	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <HAL_UART_IRQHandler+0xd2>
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840a:	f043 0202 	orr.w	r2, r3, #2
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <HAL_UART_IRQHandler+0xf6>
 800841e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	f043 0204 	orr.w	r2, r3, #4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d011      	beq.n	8008466 <HAL_UART_IRQHandler+0x126>
 8008442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800844e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845e:	f043 0208 	orr.w	r2, r3, #8
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 81f2 	beq.w	8008854 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <HAL_UART_IRQHandler+0x14e>
 800847c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fb1e 	bl	8008aca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	bf14      	ite	ne
 800849c:	2301      	movne	r3, #1
 800849e:	2300      	moveq	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d103      	bne.n	80084ba <HAL_UART_IRQHandler+0x17a>
 80084b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d04f      	beq.n	800855a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa28 	bl	8008910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d041      	beq.n	8008552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3314      	adds	r3, #20
 80084d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3314      	adds	r3, #20
 80084f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1d9      	bne.n	80084ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d013      	beq.n	800854a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008526:	4a7e      	ldr	r2, [pc, #504]	; (8008720 <HAL_UART_IRQHandler+0x3e0>)
 8008528:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852e:	4618      	mov	r0, r3
 8008530:	f7fb fa0a 	bl	8003948 <HAL_DMA_Abort_IT>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d016      	beq.n	8008568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	e00e      	b.n	8008568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f993 	bl	8008876 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008550:	e00a      	b.n	8008568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f98f 	bl	8008876 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008558:	e006      	b.n	8008568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f98b 	bl	8008876 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008566:	e175      	b.n	8008854 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	bf00      	nop
    return;
 800856a:	e173      	b.n	8008854 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	2b01      	cmp	r3, #1
 8008572:	f040 814f 	bne.w	8008814 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 8148 	beq.w	8008814 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 8141 	beq.w	8008814 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80b6 	beq.w	8008724 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8145 	beq.w	8008858 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085d6:	429a      	cmp	r2, r3
 80085d8:	f080 813e 	bcs.w	8008858 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	f000 8088 	beq.w	8008700 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	330c      	adds	r3, #12
 80085f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800860a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800860e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800861c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008628:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1d9      	bne.n	80085f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3314      	adds	r3, #20
 8008642:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800864c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3314      	adds	r3, #20
 800865c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008660:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008664:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008668:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e1      	bne.n	800863c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800868a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3314      	adds	r3, #20
 8008698:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800869c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800869e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086a4:	e841 2300 	strex	r3, r2, [r1]
 80086a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e3      	bne.n	8008678 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d0:	f023 0310 	bic.w	r3, r3, #16
 80086d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	330c      	adds	r3, #12
 80086de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80086e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80086e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e3      	bne.n	80086be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fb f8e8 	bl	80038d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800870e:	b29b      	uxth	r3, r3
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	b29b      	uxth	r3, r3
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f8b6 	bl	8008888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800871c:	e09c      	b.n	8008858 <HAL_UART_IRQHandler+0x518>
 800871e:	bf00      	nop
 8008720:	080089d5 	.word	0x080089d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800872c:	b29b      	uxth	r3, r3
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 808e 	beq.w	800885c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8089 	beq.w	800885c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	330c      	adds	r3, #12
 8008750:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	330c      	adds	r3, #12
 800876a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800876e:	647a      	str	r2, [r7, #68]	; 0x44
 8008770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800877c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e3      	bne.n	800874a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3314      	adds	r3, #20
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	623b      	str	r3, [r7, #32]
   return(result);
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3314      	adds	r3, #20
 80087a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087a6:	633a      	str	r2, [r7, #48]	; 0x30
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e3      	bne.n	8008782 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	330c      	adds	r3, #12
 80087ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0310 	bic.w	r3, r3, #16
 80087de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	330c      	adds	r3, #12
 80087e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80087ec:	61fa      	str	r2, [r7, #28]
 80087ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	69b9      	ldr	r1, [r7, #24]
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	617b      	str	r3, [r7, #20]
   return(result);
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e3      	bne.n	80087c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f83b 	bl	8008888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008812:	e023      	b.n	800885c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881c:	2b00      	cmp	r3, #0
 800881e:	d009      	beq.n	8008834 <HAL_UART_IRQHandler+0x4f4>
 8008820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f8e5 	bl	80089fc <UART_Transmit_IT>
    return;
 8008832:	e014      	b.n	800885e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00e      	beq.n	800885e <HAL_UART_IRQHandler+0x51e>
 8008840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d008      	beq.n	800885e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f924 	bl	8008a9a <UART_EndTransmit_IT>
    return;
 8008852:	e004      	b.n	800885e <HAL_UART_IRQHandler+0x51e>
    return;
 8008854:	bf00      	nop
 8008856:	e002      	b.n	800885e <HAL_UART_IRQHandler+0x51e>
      return;
 8008858:	bf00      	nop
 800885a:	e000      	b.n	800885e <HAL_UART_IRQHandler+0x51e>
      return;
 800885c:	bf00      	nop
  }
}
 800885e:	37e8      	adds	r7, #232	; 0xe8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr

08008876 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr

08008888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr

0800889e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	4613      	mov	r3, r2
 80088aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	88fa      	ldrh	r2, [r7, #6]
 80088b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	88fa      	ldrh	r2, [r7, #6]
 80088bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2222      	movs	r2, #34	; 0x22
 80088c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695a      	ldr	r2, [r3, #20]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0201 	orr.w	r2, r2, #1
 80088f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0220 	orr.w	r2, r2, #32
 8008902:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b095      	sub	sp, #84	; 0x54
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	330c      	adds	r3, #12
 8008936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008938:	643a      	str	r2, [r7, #64]	; 0x40
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800893e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e5      	bne.n	8008918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3314      	adds	r3, #20
 8008952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	61fb      	str	r3, [r7, #28]
   return(result);
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	64bb      	str	r3, [r7, #72]	; 0x48
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3314      	adds	r3, #20
 800896a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800896c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e5      	bne.n	800894c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008984:	2b01      	cmp	r3, #1
 8008986:	d119      	bne.n	80089bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	330c      	adds	r3, #12
 800898e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	60bb      	str	r3, [r7, #8]
   return(result);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f023 0310 	bic.w	r3, r3, #16
 800899e:	647b      	str	r3, [r7, #68]	; 0x44
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089a8:	61ba      	str	r2, [r7, #24]
 80089aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6979      	ldr	r1, [r7, #20]
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	613b      	str	r3, [r7, #16]
   return(result);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e5      	bne.n	8008988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089ca:	bf00      	nop
 80089cc:	3754      	adds	r7, #84	; 0x54
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr

080089d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7ff ff41 	bl	8008876 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f4:	bf00      	nop
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b21      	cmp	r3, #33	; 0x21
 8008a0e:	d13e      	bne.n	8008a8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a18:	d114      	bne.n	8008a44 <UART_Transmit_IT+0x48>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d110      	bne.n	8008a44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	1c9a      	adds	r2, r3, #2
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	621a      	str	r2, [r3, #32]
 8008a42:	e008      	b.n	8008a56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	1c59      	adds	r1, r3, #1
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6211      	str	r1, [r2, #32]
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	4619      	mov	r1, r3
 8008a64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10f      	bne.n	8008a8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e000      	b.n	8008a90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
  }
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bc80      	pop	{r7}
 8008a98:	4770      	bx	lr

08008a9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fed2 	bl	8008864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b08c      	sub	sp, #48	; 0x30
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b22      	cmp	r3, #34	; 0x22
 8008adc:	f040 80ae 	bne.w	8008c3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae8:	d117      	bne.n	8008b1a <UART_Receive_IT+0x50>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d113      	bne.n	8008b1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	1c9a      	adds	r2, r3, #2
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	629a      	str	r2, [r3, #40]	; 0x28
 8008b18:	e026      	b.n	8008b68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2c:	d007      	beq.n	8008b3e <UART_Receive_IT+0x74>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10a      	bne.n	8008b4c <UART_Receive_IT+0x82>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	e008      	b.n	8008b5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	4619      	mov	r1, r3
 8008b76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d15d      	bne.n	8008c38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0220 	bic.w	r2, r2, #32
 8008b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695a      	ldr	r2, [r3, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d135      	bne.n	8008c2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f023 0310 	bic.w	r3, r3, #16
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	330c      	adds	r3, #12
 8008be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be8:	623a      	str	r2, [r7, #32]
 8008bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	69f9      	ldr	r1, [r7, #28]
 8008bee:	6a3a      	ldr	r2, [r7, #32]
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e5      	bne.n	8008bc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b10      	cmp	r3, #16
 8008c08:	d10a      	bne.n	8008c20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fe2e 	bl	8008888 <HAL_UARTEx_RxEventCallback>
 8008c2c:	e002      	b.n	8008c34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7f8 feb8 	bl	80019a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	e002      	b.n	8008c3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e000      	b.n	8008c3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008c3c:	2302      	movs	r3, #2
  }
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3730      	adds	r7, #48	; 0x30
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008c82:	f023 030c 	bic.w	r3, r3, #12
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	430b      	orrs	r3, r1
 8008c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a2c      	ldr	r2, [pc, #176]	; (8008d5c <UART_SetConfig+0x114>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d103      	bne.n	8008cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008cb0:	f7fe fb50 	bl	8007354 <HAL_RCC_GetPCLK2Freq>
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	e002      	b.n	8008cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008cb8:	f7fe fb38 	bl	800732c <HAL_RCC_GetPCLK1Freq>
 8008cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009a      	lsls	r2, r3, #2
 8008cc8:	441a      	add	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd4:	4a22      	ldr	r2, [pc, #136]	; (8008d60 <UART_SetConfig+0x118>)
 8008cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	0119      	lsls	r1, r3, #4
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009a      	lsls	r2, r3, #2
 8008ce8:	441a      	add	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <UART_SetConfig+0x118>)
 8008cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8008cfa:	095b      	lsrs	r3, r3, #5
 8008cfc:	2064      	movs	r0, #100	; 0x64
 8008cfe:	fb00 f303 	mul.w	r3, r0, r3
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	3332      	adds	r3, #50	; 0x32
 8008d08:	4a15      	ldr	r2, [pc, #84]	; (8008d60 <UART_SetConfig+0x118>)
 8008d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0e:	095b      	lsrs	r3, r3, #5
 8008d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d14:	4419      	add	r1, r3
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009a      	lsls	r2, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <UART_SetConfig+0x118>)
 8008d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8008d32:	095b      	lsrs	r3, r3, #5
 8008d34:	2064      	movs	r0, #100	; 0x64
 8008d36:	fb00 f303 	mul.w	r3, r0, r3
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	3332      	adds	r3, #50	; 0x32
 8008d40:	4a07      	ldr	r2, [pc, #28]	; (8008d60 <UART_SetConfig+0x118>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	095b      	lsrs	r3, r3, #5
 8008d48:	f003 020f 	and.w	r2, r3, #15
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	440a      	add	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40013800 	.word	0x40013800
 8008d60:	51eb851f 	.word	0x51eb851f

08008d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d64:	b084      	sub	sp, #16
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	f107 0014 	add.w	r0, r7, #20
 8008d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bc80      	pop	{r7}
 8008d80:	b004      	add	sp, #16
 8008d82:	4770      	bx	lr

08008d84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008d98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008db8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008dbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4013      	ands	r3, r2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bc80      	pop	{r7}
 8008de2:	4770      	bx	lr

08008de4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr

08008dfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	f107 0014 	add.w	r0, r7, #20
 8008e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	b004      	add	sp, #16
 8008e3a:	4770      	bx	lr

08008e3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b09d      	sub	sp, #116	; 0x74
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	78db      	ldrb	r3, [r3, #3]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d81f      	bhi.n	8008eae <USB_ActivateEndpoint+0x72>
 8008e6e:	a201      	add	r2, pc, #4	; (adr r2, 8008e74 <USB_ActivateEndpoint+0x38>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008e85 	.word	0x08008e85
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	08008eb7 	.word	0x08008eb7
 8008e80:	08008e93 	.word	0x08008e93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008e84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e90:	e012      	b.n	8008eb8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008e92:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008e9a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e9e:	e00b      	b.n	8008eb8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008ea0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ea8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008eac:	e004      	b.n	8008eb8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008eb4:	e000      	b.n	8008eb8 <USB_ActivateEndpoint+0x7c>
      break;
 8008eb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	441a      	add	r2, r3
 8008ec2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	881b      	ldrh	r3, [r3, #0]
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	441a      	add	r2, r3
 8008f08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	7b1b      	ldrb	r3, [r3, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 8178 	bne.w	800921a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 8084 	beq.w	800903c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	61bb      	str	r3, [r7, #24]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	4413      	add	r3, r2
 8008f46:	61bb      	str	r3, [r7, #24]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	011a      	lsls	r2, r3, #4
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	88db      	ldrh	r3, [r3, #6]
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	827b      	strh	r3, [r7, #18]
 8008f76:	8a7b      	ldrh	r3, [r7, #18]
 8008f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01b      	beq.n	8008fb8 <USB_ActivateEndpoint+0x17c>
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f96:	823b      	strh	r3, [r7, #16]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	441a      	add	r2, r3
 8008fa2:	8a3b      	ldrh	r3, [r7, #16]
 8008fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	78db      	ldrb	r3, [r3, #3]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d020      	beq.n	8009002 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd6:	81bb      	strh	r3, [r7, #12]
 8008fd8:	89bb      	ldrh	r3, [r7, #12]
 8008fda:	f083 0320 	eor.w	r3, r3, #32
 8008fde:	81bb      	strh	r3, [r7, #12]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	441a      	add	r2, r3
 8008fea:	89bb      	ldrh	r3, [r7, #12]
 8008fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	8013      	strh	r3, [r2, #0]
 8009000:	e2d5      	b.n	80095ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009018:	81fb      	strh	r3, [r7, #14]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	441a      	add	r2, r3
 8009024:	89fb      	ldrh	r3, [r7, #14]
 8009026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800902a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800902e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009036:	b29b      	uxth	r3, r3
 8009038:	8013      	strh	r3, [r2, #0]
 800903a:	e2b8      	b.n	80095ae <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	633b      	str	r3, [r7, #48]	; 0x30
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009046:	b29b      	uxth	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	4413      	add	r3, r2
 800904e:	633b      	str	r3, [r7, #48]	; 0x30
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	011a      	lsls	r2, r3, #4
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	4413      	add	r3, r2
 800905a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	88db      	ldrh	r3, [r3, #6]
 8009064:	085b      	lsrs	r3, r3, #1
 8009066:	b29b      	uxth	r3, r3
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800907a:	b29b      	uxth	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	4413      	add	r3, r2
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	011a      	lsls	r2, r3, #4
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	4413      	add	r3, r2
 800908e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800909e:	b29a      	uxth	r2, r3
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	801a      	strh	r2, [r3, #0]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	2b3e      	cmp	r3, #62	; 0x3e
 80090aa:	d91d      	bls.n	80090e8 <USB_ActivateEndpoint+0x2ac>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	095b      	lsrs	r3, r3, #5
 80090b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d102      	bne.n	80090c6 <USB_ActivateEndpoint+0x28a>
 80090c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090c2:	3b01      	subs	r3, #1
 80090c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	029b      	lsls	r3, r3, #10
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	4313      	orrs	r3, r2
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	e026      	b.n	8009136 <USB_ActivateEndpoint+0x2fa>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <USB_ActivateEndpoint+0x2ca>
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fe:	b29a      	uxth	r2, r3
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	801a      	strh	r2, [r3, #0]
 8009104:	e017      	b.n	8009136 <USB_ActivateEndpoint+0x2fa>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	085b      	lsrs	r3, r3, #1
 800910c:	66bb      	str	r3, [r7, #104]	; 0x68
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <USB_ActivateEndpoint+0x2e4>
 800911a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800911c:	3301      	adds	r3, #1
 800911e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29a      	uxth	r2, r3
 8009126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009128:	b29b      	uxth	r3, r3
 800912a:	029b      	lsls	r3, r3, #10
 800912c:	b29b      	uxth	r3, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	b29a      	uxth	r2, r3
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	847b      	strh	r3, [r7, #34]	; 0x22
 8009144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d01b      	beq.n	8009186 <USB_ActivateEndpoint+0x34a>
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009164:	843b      	strh	r3, [r7, #32]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	441a      	add	r2, r3
 8009170:	8c3b      	ldrh	r3, [r7, #32]
 8009172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800917a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800917e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009182:	b29b      	uxth	r3, r3
 8009184:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d124      	bne.n	80091d8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a4:	83bb      	strh	r3, [r7, #28]
 80091a6:	8bbb      	ldrh	r3, [r7, #28]
 80091a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80091ac:	83bb      	strh	r3, [r7, #28]
 80091ae:	8bbb      	ldrh	r3, [r7, #28]
 80091b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091b4:	83bb      	strh	r3, [r7, #28]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	8bbb      	ldrh	r3, [r7, #28]
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
 80091d6:	e1ea      	b.n	80095ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	83fb      	strh	r3, [r7, #30]
 80091f0:	8bfb      	ldrh	r3, [r7, #30]
 80091f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091f6:	83fb      	strh	r3, [r7, #30]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	441a      	add	r2, r3
 8009202:	8bfb      	ldrh	r3, [r7, #30]
 8009204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800920c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009214:	b29b      	uxth	r3, r3
 8009216:	8013      	strh	r3, [r2, #0]
 8009218:	e1c9      	b.n	80095ae <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	78db      	ldrb	r3, [r3, #3]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d11e      	bne.n	8009260 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	b29b      	uxth	r3, r3
 8009230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009238:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	441a      	add	r2, r3
 8009246:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800924a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800924e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009252:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925a:	b29b      	uxth	r3, r3
 800925c:	8013      	strh	r3, [r2, #0]
 800925e:	e01d      	b.n	800929c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009276:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	441a      	add	r2, r3
 8009284:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800928c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009298:	b29b      	uxth	r3, r3
 800929a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ac:	4413      	add	r3, r2
 80092ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	011a      	lsls	r2, r3, #4
 80092b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092be:	65bb      	str	r3, [r7, #88]	; 0x58
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	891b      	ldrh	r3, [r3, #8]
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092ce:	801a      	strh	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	657b      	str	r3, [r7, #84]	; 0x54
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092da:	b29b      	uxth	r3, r3
 80092dc:	461a      	mov	r2, r3
 80092de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e0:	4413      	add	r3, r2
 80092e2:	657b      	str	r3, [r7, #84]	; 0x54
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	011a      	lsls	r2, r3, #4
 80092ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80092f2:	653b      	str	r3, [r7, #80]	; 0x50
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	895b      	ldrh	r3, [r3, #10]
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	005b      	lsls	r3, r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009302:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f040 8093 	bne.w	8009434 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800931e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d01b      	beq.n	8009362 <USB_ActivateEndpoint+0x526>
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800933c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009340:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	441a      	add	r2, r3
 800934c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800934e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935e:	b29b      	uxth	r3, r3
 8009360:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009370:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009376:	2b00      	cmp	r3, #0
 8009378:	d01b      	beq.n	80093b2 <USB_ActivateEndpoint+0x576>
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	b29b      	uxth	r3, r3
 8009388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800938c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009390:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	441a      	add	r2, r3
 800939c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800939e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80093ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80093d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	441a      	add	r2, r3
 80093e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009410:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800941e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800942a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942e:	b29b      	uxth	r3, r3
 8009430:	8013      	strh	r3, [r2, #0]
 8009432:	e0bc      	b.n	80095ae <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009444:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01d      	beq.n	800948c <USB_ActivateEndpoint+0x650>
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	b29b      	uxth	r3, r3
 800945e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009466:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	441a      	add	r2, r3
 8009474:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800947c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009488:	b29b      	uxth	r3, r3
 800948a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800949c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80094a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01d      	beq.n	80094e4 <USB_ActivateEndpoint+0x6a8>
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	441a      	add	r2, r3
 80094cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80094d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	78db      	ldrb	r3, [r3, #3]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d024      	beq.n	8009536 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009502:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009506:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800950a:	f083 0320 	eor.w	r3, r3, #32
 800950e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	441a      	add	r2, r3
 800951c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800952c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009530:	b29b      	uxth	r3, r3
 8009532:	8013      	strh	r3, [r2, #0]
 8009534:	e01d      	b.n	8009572 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	b29b      	uxth	r3, r3
 8009544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800954c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	441a      	add	r2, r3
 800955a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800955e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800956e:	b29b      	uxth	r3, r3
 8009570:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29b      	uxth	r3, r3
 8009580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009588:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	441a      	add	r2, r3
 8009596:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800959a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800959e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80095ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3774      	adds	r7, #116	; 0x74
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bc80      	pop	{r7}
 80095ba:	4770      	bx	lr

080095bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095bc:	b480      	push	{r7}
 80095be:	b08d      	sub	sp, #52	; 0x34
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	7b1b      	ldrb	r3, [r3, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 808e 	bne.w	80096ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	785b      	ldrb	r3, [r3, #1]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d044      	beq.n	8009662 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	81bb      	strh	r3, [r7, #12]
 80095e6:	89bb      	ldrh	r3, [r7, #12]
 80095e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01b      	beq.n	8009628 <USB_DeactivateEndpoint+0x6c>
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	817b      	strh	r3, [r7, #10]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	441a      	add	r2, r3
 8009612:	897b      	ldrh	r3, [r7, #10]
 8009614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800961c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009624:	b29b      	uxth	r3, r3
 8009626:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800963e:	813b      	strh	r3, [r7, #8]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	441a      	add	r2, r3
 800964a:	893b      	ldrh	r3, [r7, #8]
 800964c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800965c:	b29b      	uxth	r3, r3
 800965e:	8013      	strh	r3, [r2, #0]
 8009660:	e192      	b.n	8009988 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	827b      	strh	r3, [r7, #18]
 8009670:	8a7b      	ldrh	r3, [r7, #18]
 8009672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01b      	beq.n	80096b2 <USB_DeactivateEndpoint+0xf6>
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	b29b      	uxth	r3, r3
 8009688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800968c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009690:	823b      	strh	r3, [r7, #16]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	441a      	add	r2, r3
 800969c:	8a3b      	ldrh	r3, [r7, #16]
 800969e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c8:	81fb      	strh	r3, [r7, #14]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	441a      	add	r2, r3
 80096d4:	89fb      	ldrh	r3, [r7, #14]
 80096d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	8013      	strh	r3, [r2, #0]
 80096ea:	e14d      	b.n	8009988 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f040 80a5 	bne.w	8009840 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	843b      	strh	r3, [r7, #32]
 8009704:	8c3b      	ldrh	r3, [r7, #32]
 8009706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d01b      	beq.n	8009746 <USB_DeactivateEndpoint+0x18a>
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009724:	83fb      	strh	r3, [r7, #30]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	441a      	add	r2, r3
 8009730:	8bfb      	ldrh	r3, [r7, #30]
 8009732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800973a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800973e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009742:	b29b      	uxth	r3, r3
 8009744:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	83bb      	strh	r3, [r7, #28]
 8009754:	8bbb      	ldrh	r3, [r7, #28]
 8009756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01b      	beq.n	8009796 <USB_DeactivateEndpoint+0x1da>
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009774:	837b      	strh	r3, [r7, #26]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	441a      	add	r2, r3
 8009780:	8b7b      	ldrh	r3, [r7, #26]
 8009782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800978a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800978e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009792:	b29b      	uxth	r3, r3
 8009794:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ac:	833b      	strh	r3, [r7, #24]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	441a      	add	r2, r3
 80097b8:	8b3b      	ldrh	r3, [r7, #24]
 80097ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e4:	82fb      	strh	r3, [r7, #22]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	441a      	add	r2, r3
 80097f0:	8afb      	ldrh	r3, [r7, #22]
 80097f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009802:	b29b      	uxth	r3, r3
 8009804:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800981c:	82bb      	strh	r3, [r7, #20]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	441a      	add	r2, r3
 8009828:	8abb      	ldrh	r3, [r7, #20]
 800982a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983a:	b29b      	uxth	r3, r3
 800983c:	8013      	strh	r3, [r2, #0]
 800983e:	e0a3      	b.n	8009988 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800984e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01b      	beq.n	8009890 <USB_DeactivateEndpoint+0x2d4>
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800986a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	441a      	add	r2, r3
 800987a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800987c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800988c:	b29b      	uxth	r3, r3
 800988e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800989e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80098a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01b      	beq.n	80098e0 <USB_DeactivateEndpoint+0x324>
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098be:	853b      	strh	r3, [r7, #40]	; 0x28
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	441a      	add	r2, r3
 80098ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098dc:	b29b      	uxth	r3, r3
 80098de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	441a      	add	r2, r3
 8009902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800990c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009914:	b29b      	uxth	r3, r3
 8009916:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800992a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800992e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	441a      	add	r2, r3
 800993a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800993c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994c:	b29b      	uxth	r3, r3
 800994e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009966:	847b      	strh	r3, [r7, #34]	; 0x22
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	441a      	add	r2, r3
 8009972:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3734      	adds	r7, #52	; 0x34
 800998e:	46bd      	mov	sp, r7
 8009990:	bc80      	pop	{r7}
 8009992:	4770      	bx	lr

08009994 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b0c2      	sub	sp, #264	; 0x108
 8009998:	af00      	add	r7, sp, #0
 800999a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099a2:	6018      	str	r0, [r3, #0]
 80099a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ac:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	785b      	ldrb	r3, [r3, #1]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	f040 86b7 	bne.w	800a72e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80099c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	699a      	ldr	r2, [r3, #24]
 80099cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d908      	bls.n	80099ee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80099dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099ec:	e007      	b.n	80099fe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80099ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80099fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	7b1b      	ldrb	r3, [r3, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d13a      	bne.n	8009a84 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6959      	ldr	r1, [r3, #20]
 8009a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	88da      	ldrh	r2, [r3, #6]
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a34:	6800      	ldr	r0, [r0, #0]
 8009a36:	f001 fc9c 	bl	800b372 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	613b      	str	r3, [r7, #16]
 8009a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	461a      	mov	r2, r3
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	011a      	lsls	r2, r3, #4
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	801a      	strh	r2, [r3, #0]
 8009a80:	f000 be1f 	b.w	800a6c2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	78db      	ldrb	r3, [r3, #3]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	f040 8462 	bne.w	800a35a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6a1a      	ldr	r2, [r3, #32]
 8009aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	f240 83df 	bls.w	800a272 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ada:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	441a      	add	r2, r3
 8009af8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6a1a      	ldr	r2, [r3, #32]
 8009b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b20:	1ad2      	subs	r2, r2, r3
 8009b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 81c7 	beq.w	8009ee4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30
 8009b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	785b      	ldrb	r3, [r3, #1]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d177      	bne.n	8009c62 <USB_EPStartXfer+0x2ce>
 8009b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	4413      	add	r3, r2
 8009b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	011a      	lsls	r2, r3, #4
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	801a      	strh	r2, [r3, #0]
 8009bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8009bc4:	d921      	bls.n	8009c0a <USB_EPStartXfer+0x276>
 8009bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bca:	095b      	lsrs	r3, r3, #5
 8009bcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd4:	f003 031f 	and.w	r3, r3, #31
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <USB_EPStartXfer+0x252>
 8009bdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009be0:	3b01      	subs	r3, #1
 8009be2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	029b      	lsls	r3, r3, #10
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	801a      	strh	r2, [r3, #0]
 8009c08:	e050      	b.n	8009cac <USB_EPStartXfer+0x318>
 8009c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <USB_EPStartXfer+0x294>
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	e041      	b.n	8009cac <USB_EPStartXfer+0x318>
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2c:	085b      	lsrs	r3, r3, #1
 8009c2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <USB_EPStartXfer+0x2b4>
 8009c3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c42:	3301      	adds	r3, #1
 8009c44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	029b      	lsls	r3, r3, #10
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	e024      	b.n	8009cac <USB_EPStartXfer+0x318>
 8009c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d11c      	bne.n	8009cac <USB_EPStartXfer+0x318>
 8009c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	461a      	mov	r2, r3
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	4413      	add	r3, r2
 8009c88:	633b      	str	r3, [r7, #48]	; 0x30
 8009c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	011a      	lsls	r2, r3, #4
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	895b      	ldrh	r3, [r3, #10]
 8009cb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6959      	ldr	r1, [r3, #20]
 8009cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009cd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009cd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009cda:	6800      	ldr	r0, [r0, #0]
 8009cdc:	f001 fb49 	bl	800b372 <USB_WritePMA>
            ep->xfer_buff += len;
 8009ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	695a      	ldr	r2, [r3, #20]
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf0:	441a      	add	r2, r3
 8009cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6a1a      	ldr	r2, [r3, #32]
 8009d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d90f      	bls.n	8009d3a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6a1a      	ldr	r2, [r3, #32]
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	621a      	str	r2, [r3, #32]
 8009d38:	e00e      	b.n	8009d58 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2200      	movs	r2, #0
 8009d56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	785b      	ldrb	r3, [r3, #1]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d177      	bne.n	8009e58 <USB_EPStartXfer+0x4c4>
 8009d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	61bb      	str	r3, [r7, #24]
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	461a      	mov	r2, r3
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	4413      	add	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
 8009d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	011a      	lsls	r2, r3, #4
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009da2:	617b      	str	r3, [r7, #20]
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	801a      	strh	r2, [r3, #0]
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db8:	2b3e      	cmp	r3, #62	; 0x3e
 8009dba:	d921      	bls.n	8009e00 <USB_EPStartXfer+0x46c>
 8009dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc0:	095b      	lsrs	r3, r3, #5
 8009dc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dca:	f003 031f 	and.w	r3, r3, #31
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d104      	bne.n	8009ddc <USB_EPStartXfer+0x448>
 8009dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	029b      	lsls	r3, r3, #10
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	e056      	b.n	8009eae <USB_EPStartXfer+0x51a>
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <USB_EPStartXfer+0x48a>
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	801a      	strh	r2, [r3, #0]
 8009e1c:	e047      	b.n	8009eae <USB_EPStartXfer+0x51a>
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e22:	085b      	lsrs	r3, r3, #1
 8009e24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d004      	beq.n	8009e3e <USB_EPStartXfer+0x4aa>
 8009e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e38:	3301      	adds	r3, #1
 8009e3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	029b      	lsls	r3, r3, #10
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	801a      	strh	r2, [r3, #0]
 8009e56:	e02a      	b.n	8009eae <USB_EPStartXfer+0x51a>
 8009e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	785b      	ldrb	r3, [r3, #1]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d122      	bne.n	8009eae <USB_EPStartXfer+0x51a>
 8009e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	623b      	str	r3, [r7, #32]
 8009e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	461a      	mov	r2, r3
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	4413      	add	r3, r2
 8009e8a:	623b      	str	r3, [r7, #32]
 8009e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	011a      	lsls	r2, r3, #4
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	891b      	ldrh	r3, [r3, #8]
 8009eba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6959      	ldr	r1, [r3, #20]
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ed4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ed8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009edc:	6800      	ldr	r0, [r0, #0]
 8009ede:	f001 fa48 	bl	800b372 <USB_WritePMA>
 8009ee2:	e3ee      	b.n	800a6c2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	785b      	ldrb	r3, [r3, #1]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d177      	bne.n	8009fe4 <USB_EPStartXfer+0x650>
 8009ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f14:	4413      	add	r3, r2
 8009f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	011a      	lsls	r2, r3, #4
 8009f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f28:	4413      	add	r3, r2
 8009f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f3e:	801a      	strh	r2, [r3, #0]
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f44:	2b3e      	cmp	r3, #62	; 0x3e
 8009f46:	d921      	bls.n	8009f8c <USB_EPStartXfer+0x5f8>
 8009f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4c:	095b      	lsrs	r3, r3, #5
 8009f4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f56:	f003 031f 	and.w	r3, r3, #31
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d104      	bne.n	8009f68 <USB_EPStartXfer+0x5d4>
 8009f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f62:	3b01      	subs	r3, #1
 8009f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	029b      	lsls	r3, r3, #10
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e056      	b.n	800a03a <USB_EPStartXfer+0x6a6>
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <USB_EPStartXfer+0x616>
 8009f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa6:	801a      	strh	r2, [r3, #0]
 8009fa8:	e047      	b.n	800a03a <USB_EPStartXfer+0x6a6>
 8009faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fae:	085b      	lsrs	r3, r3, #1
 8009fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <USB_EPStartXfer+0x636>
 8009fc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	029b      	lsls	r3, r3, #10
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	e02a      	b.n	800a03a <USB_EPStartXfer+0x6a6>
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d122      	bne.n	800a03a <USB_EPStartXfer+0x6a6>
 8009ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	653b      	str	r3, [r7, #80]	; 0x50
 800a000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a00e:	b29b      	uxth	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a014:	4413      	add	r3, r2
 800a016:	653b      	str	r3, [r7, #80]	; 0x50
 800a018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	011a      	lsls	r2, r3, #4
 800a026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a028:	4413      	add	r3, r2
 800a02a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a02e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a034:	b29a      	uxth	r2, r3
 800a036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a038:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	891b      	ldrh	r3, [r3, #8]
 800a046:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6959      	ldr	r1, [r3, #20]
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a060:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a064:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a068:	6800      	ldr	r0, [r0, #0]
 800a06a:	f001 f982 	bl	800b372 <USB_WritePMA>
            ep->xfer_buff += len;
 800a06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	695a      	ldr	r2, [r3, #20]
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a07e:	441a      	add	r2, r3
 800a080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6a1a      	ldr	r2, [r3, #32]
 800a098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d90f      	bls.n	800a0c8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6a1a      	ldr	r2, [r3, #32]
 800a0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b8:	1ad2      	subs	r2, r2, r3
 800a0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	621a      	str	r2, [r3, #32]
 800a0c6:	e00e      	b.n	800a0e6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a0f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d177      	bne.n	800a1f2 <USB_EPStartXfer+0x85e>
 800a102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	461a      	mov	r2, r3
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	4413      	add	r3, r2
 800a124:	63bb      	str	r3, [r7, #56]	; 0x38
 800a126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	011a      	lsls	r2, r3, #4
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	4413      	add	r3, r2
 800a138:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a148:	b29a      	uxth	r2, r3
 800a14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a152:	2b3e      	cmp	r3, #62	; 0x3e
 800a154:	d921      	bls.n	800a19a <USB_EPStartXfer+0x806>
 800a156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a164:	f003 031f 	and.w	r3, r3, #31
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d104      	bne.n	800a176 <USB_EPStartXfer+0x7e2>
 800a16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a170:	3b01      	subs	r3, #1
 800a172:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a180:	b29b      	uxth	r3, r3
 800a182:	029b      	lsls	r3, r3, #10
 800a184:	b29b      	uxth	r3, r3
 800a186:	4313      	orrs	r3, r2
 800a188:	b29b      	uxth	r3, r3
 800a18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a192:	b29a      	uxth	r2, r3
 800a194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a196:	801a      	strh	r2, [r3, #0]
 800a198:	e050      	b.n	800a23c <USB_EPStartXfer+0x8a8>
 800a19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <USB_EPStartXfer+0x824>
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b4:	801a      	strh	r2, [r3, #0]
 800a1b6:	e041      	b.n	800a23c <USB_EPStartXfer+0x8a8>
 800a1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1bc:	085b      	lsrs	r3, r3, #1
 800a1be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d004      	beq.n	800a1d8 <USB_EPStartXfer+0x844>
 800a1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	029b      	lsls	r3, r3, #10
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ee:	801a      	strh	r2, [r3, #0]
 800a1f0:	e024      	b.n	800a23c <USB_EPStartXfer+0x8a8>
 800a1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d11c      	bne.n	800a23c <USB_EPStartXfer+0x8a8>
 800a202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a210:	b29b      	uxth	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a216:	4413      	add	r3, r2
 800a218:	643b      	str	r3, [r7, #64]	; 0x40
 800a21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	011a      	lsls	r2, r3, #4
 800a228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a22a:	4413      	add	r3, r2
 800a22c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a230:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a236:	b29a      	uxth	r2, r3
 800a238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	895b      	ldrh	r3, [r3, #10]
 800a248:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6959      	ldr	r1, [r3, #20]
 800a258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a262:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a266:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a26a:	6800      	ldr	r0, [r0, #0]
 800a26c:	f001 f881 	bl	800b372 <USB_WritePMA>
 800a270:	e227      	b.n	800a6c2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a2a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	441a      	add	r2, r3
 800a2c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2fe:	4413      	add	r3, r2
 800a300:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	011a      	lsls	r2, r3, #4
 800a310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a312:	4413      	add	r3, r2
 800a314:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a318:	65bb      	str	r3, [r7, #88]	; 0x58
 800a31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a322:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	891b      	ldrh	r3, [r3, #8]
 800a330:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6959      	ldr	r1, [r3, #20]
 800a340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a344:	b29b      	uxth	r3, r3
 800a346:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a34a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a34e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a352:	6800      	ldr	r0, [r0, #0]
 800a354:	f001 f80d 	bl	800b372 <USB_WritePMA>
 800a358:	e1b3      	b.n	800a6c2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6a1a      	ldr	r2, [r3, #32]
 800a366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36a:	1ad2      	subs	r2, r2, r3
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80c6 	beq.w	800a52c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	673b      	str	r3, [r7, #112]	; 0x70
 800a3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d177      	bne.n	800a4ac <USB_EPStartXfer+0xb18>
 800a3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	461a      	mov	r2, r3
 800a3da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3dc:	4413      	add	r3, r2
 800a3de:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	011a      	lsls	r2, r3, #4
 800a3ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3f6:	667b      	str	r3, [r7, #100]	; 0x64
 800a3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a402:	b29a      	uxth	r2, r3
 800a404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a406:	801a      	strh	r2, [r3, #0]
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a40c:	2b3e      	cmp	r3, #62	; 0x3e
 800a40e:	d921      	bls.n	800a454 <USB_EPStartXfer+0xac0>
 800a410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a414:	095b      	lsrs	r3, r3, #5
 800a416:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41e:	f003 031f 	and.w	r3, r3, #31
 800a422:	2b00      	cmp	r3, #0
 800a424:	d104      	bne.n	800a430 <USB_EPStartXfer+0xa9c>
 800a426:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a42a:	3b01      	subs	r3, #1
 800a42c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	b29a      	uxth	r2, r3
 800a436:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	029b      	lsls	r3, r3, #10
 800a43e:	b29b      	uxth	r3, r3
 800a440:	4313      	orrs	r3, r2
 800a442:	b29b      	uxth	r3, r3
 800a444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a450:	801a      	strh	r2, [r3, #0]
 800a452:	e050      	b.n	800a4f6 <USB_EPStartXfer+0xb62>
 800a454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <USB_EPStartXfer+0xade>
 800a45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a46e:	801a      	strh	r2, [r3, #0]
 800a470:	e041      	b.n	800a4f6 <USB_EPStartXfer+0xb62>
 800a472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a476:	085b      	lsrs	r3, r3, #1
 800a478:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <USB_EPStartXfer+0xafe>
 800a488:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a48c:	3301      	adds	r3, #1
 800a48e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	b29a      	uxth	r2, r3
 800a498:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	029b      	lsls	r3, r3, #10
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a8:	801a      	strh	r2, [r3, #0]
 800a4aa:	e024      	b.n	800a4f6 <USB_EPStartXfer+0xb62>
 800a4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d11c      	bne.n	800a4f6 <USB_EPStartXfer+0xb62>
 800a4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d0:	4413      	add	r3, r2
 800a4d2:	673b      	str	r3, [r7, #112]	; 0x70
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	011a      	lsls	r2, r3, #4
 800a4e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	895b      	ldrh	r3, [r3, #10]
 800a502:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6959      	ldr	r1, [r3, #20]
 800a512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a516:	b29b      	uxth	r3, r3
 800a518:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a51c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a520:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a524:	6800      	ldr	r0, [r0, #0]
 800a526:	f000 ff24 	bl	800b372 <USB_WritePMA>
 800a52a:	e0ca      	b.n	800a6c2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	785b      	ldrb	r3, [r3, #1]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d177      	bne.n	800a62c <USB_EPStartXfer+0xc98>
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a556:	b29b      	uxth	r3, r3
 800a558:	461a      	mov	r2, r3
 800a55a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a55c:	4413      	add	r3, r2
 800a55e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	011a      	lsls	r2, r3, #4
 800a56e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a570:	4413      	add	r3, r2
 800a572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a576:	67bb      	str	r3, [r7, #120]	; 0x78
 800a578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a582:	b29a      	uxth	r2, r3
 800a584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a586:	801a      	strh	r2, [r3, #0]
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58c:	2b3e      	cmp	r3, #62	; 0x3e
 800a58e:	d921      	bls.n	800a5d4 <USB_EPStartXfer+0xc40>
 800a590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a594:	095b      	lsrs	r3, r3, #5
 800a596:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59e:	f003 031f 	and.w	r3, r3, #31
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d104      	bne.n	800a5b0 <USB_EPStartXfer+0xc1c>
 800a5a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	029b      	lsls	r3, r3, #10
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5d0:	801a      	strh	r2, [r3, #0]
 800a5d2:	e05c      	b.n	800a68e <USB_EPStartXfer+0xcfa>
 800a5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <USB_EPStartXfer+0xc5e>
 800a5dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5ee:	801a      	strh	r2, [r3, #0]
 800a5f0:	e04d      	b.n	800a68e <USB_EPStartXfer+0xcfa>
 800a5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f6:	085b      	lsrs	r3, r3, #1
 800a5f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <USB_EPStartXfer+0xc7e>
 800a608:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a60c:	3301      	adds	r3, #1
 800a60e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b29a      	uxth	r2, r3
 800a618:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	029b      	lsls	r3, r3, #10
 800a620:	b29b      	uxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	e030      	b.n	800a68e <USB_EPStartXfer+0xcfa>
 800a62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	785b      	ldrb	r3, [r3, #1]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d128      	bne.n	800a68e <USB_EPStartXfer+0xcfa>
 800a63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a658:	b29b      	uxth	r3, r3
 800a65a:	461a      	mov	r2, r3
 800a65c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a660:	4413      	add	r3, r2
 800a662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	011a      	lsls	r2, r3, #4
 800a674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a678:	4413      	add	r3, r2
 800a67a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a67e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a686:	b29a      	uxth	r2, r3
 800a688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a68c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	891b      	ldrh	r3, [r3, #8]
 800a69a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6959      	ldr	r1, [r3, #20]
 800a6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a6b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f000 fe58 	bl	800b372 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e8:	817b      	strh	r3, [r7, #10]
 800a6ea:	897b      	ldrh	r3, [r7, #10]
 800a6ec:	f083 0310 	eor.w	r3, r3, #16
 800a6f0:	817b      	strh	r3, [r7, #10]
 800a6f2:	897b      	ldrh	r3, [r7, #10]
 800a6f4:	f083 0320 	eor.w	r3, r3, #32
 800a6f8:	817b      	strh	r3, [r7, #10]
 800a6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	441a      	add	r2, r3
 800a714:	897b      	ldrh	r3, [r7, #10]
 800a716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a71a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a71e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a726:	b29b      	uxth	r3, r3
 800a728:	8013      	strh	r3, [r2, #0]
 800a72a:	f000 bcde 	b.w	800b0ea <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	7b1b      	ldrb	r3, [r3, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f040 80bb 	bne.w	800a8b6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d917      	bls.n	800a78c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	699a      	ldr	r2, [r3, #24]
 800a778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a77c:	1ad2      	subs	r2, r2, r3
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	619a      	str	r2, [r3, #24]
 800a78a:	e00e      	b.n	800a7aa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	011a      	lsls	r2, r3, #4
 800a7e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a802:	801a      	strh	r2, [r3, #0]
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a808:	2b3e      	cmp	r3, #62	; 0x3e
 800a80a:	d924      	bls.n	800a856 <USB_EPStartXfer+0xec2>
 800a80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a810:	095b      	lsrs	r3, r3, #5
 800a812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81a:	f003 031f 	and.w	r3, r3, #31
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <USB_EPStartXfer+0xe98>
 800a822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a826:	3b01      	subs	r3, #1
 800a828:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a82c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a838:	b29b      	uxth	r3, r3
 800a83a:	029b      	lsls	r3, r3, #10
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	4313      	orrs	r3, r2
 800a840:	b29b      	uxth	r3, r3
 800a842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a850:	801a      	strh	r2, [r3, #0]
 800a852:	f000 bc10 	b.w	800b076 <USB_EPStartXfer+0x16e2>
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <USB_EPStartXfer+0xee4>
 800a85e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a86e:	b29a      	uxth	r2, r3
 800a870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a874:	801a      	strh	r2, [r3, #0]
 800a876:	e3fe      	b.n	800b076 <USB_EPStartXfer+0x16e2>
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87c:	085b      	lsrs	r3, r3, #1
 800a87e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d004      	beq.n	800a898 <USB_EPStartXfer+0xf04>
 800a88e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a892:	3301      	adds	r3, #1
 800a894:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	029b      	lsls	r3, r3, #10
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8b2:	801a      	strh	r2, [r3, #0]
 800a8b4:	e3df      	b.n	800b076 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	78db      	ldrb	r3, [r3, #3]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	f040 8218 	bne.w	800acf8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	785b      	ldrb	r3, [r3, #1]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f040 809d 	bne.w	800aa14 <USB_EPStartXfer+0x1080>
 800a8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8fe:	4413      	add	r3, r2
 800a900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	011a      	lsls	r2, r3, #4
 800a912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a916:	4413      	add	r3, r2
 800a918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a91c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	b29b      	uxth	r3, r3
 800a928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a932:	801a      	strh	r2, [r3, #0]
 800a934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	2b3e      	cmp	r3, #62	; 0x3e
 800a942:	d92b      	bls.n	800a99c <USB_EPStartXfer+0x1008>
 800a944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	095b      	lsrs	r3, r3, #5
 800a952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	f003 031f 	and.w	r3, r3, #31
 800a966:	2b00      	cmp	r3, #0
 800a968:	d104      	bne.n	800a974 <USB_EPStartXfer+0xfe0>
 800a96a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96e:	3b01      	subs	r3, #1
 800a970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a980:	b29b      	uxth	r3, r3
 800a982:	029b      	lsls	r3, r3, #10
 800a984:	b29b      	uxth	r3, r3
 800a986:	4313      	orrs	r3, r2
 800a988:	b29b      	uxth	r3, r3
 800a98a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a98e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a992:	b29a      	uxth	r2, r3
 800a994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a998:	801a      	strh	r2, [r3, #0]
 800a99a:	e070      	b.n	800aa7e <USB_EPStartXfer+0x10ea>
 800a99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10c      	bne.n	800a9c6 <USB_EPStartXfer+0x1032>
 800a9ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9c2:	801a      	strh	r2, [r3, #0]
 800a9c4:	e05b      	b.n	800aa7e <USB_EPStartXfer+0x10ea>
 800a9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d004      	beq.n	800a9f6 <USB_EPStartXfer+0x1062>
 800a9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	029b      	lsls	r3, r3, #10
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa10:	801a      	strh	r2, [r3, #0]
 800aa12:	e034      	b.n	800aa7e <USB_EPStartXfer+0x10ea>
 800aa14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	785b      	ldrb	r3, [r3, #1]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d12c      	bne.n	800aa7e <USB_EPStartXfer+0x10ea>
 800aa24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	461a      	mov	r2, r3
 800aa44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa48:	4413      	add	r3, r2
 800aa4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	011a      	lsls	r2, r3, #4
 800aa5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa60:	4413      	add	r3, r2
 800aa62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	785b      	ldrb	r3, [r3, #1]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f040 809d 	bne.w	800abd8 <USB_EPStartXfer+0x1244>
 800aa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aaac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	461a      	mov	r2, r3
 800aabe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aac2:	4413      	add	r3, r2
 800aac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	011a      	lsls	r2, r3, #4
 800aad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aada:	4413      	add	r3, r2
 800aadc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aaf6:	801a      	strh	r2, [r3, #0]
 800aaf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aafc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	2b3e      	cmp	r3, #62	; 0x3e
 800ab06:	d92b      	bls.n	800ab60 <USB_EPStartXfer+0x11cc>
 800ab08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	f003 031f 	and.w	r3, r3, #31
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d104      	bne.n	800ab38 <USB_EPStartXfer+0x11a4>
 800ab2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab32:	3b01      	subs	r3, #1
 800ab34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	029b      	lsls	r3, r3, #10
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab5c:	801a      	strh	r2, [r3, #0]
 800ab5e:	e069      	b.n	800ac34 <USB_EPStartXfer+0x12a0>
 800ab60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10c      	bne.n	800ab8a <USB_EPStartXfer+0x11f6>
 800ab70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab86:	801a      	strh	r2, [r3, #0]
 800ab88:	e054      	b.n	800ac34 <USB_EPStartXfer+0x12a0>
 800ab8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	085b      	lsrs	r3, r3, #1
 800ab98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b00      	cmp	r3, #0
 800abae:	d004      	beq.n	800abba <USB_EPStartXfer+0x1226>
 800abb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abb4:	3301      	adds	r3, #1
 800abb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	029b      	lsls	r3, r3, #10
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	b29a      	uxth	r2, r3
 800abd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abd4:	801a      	strh	r2, [r3, #0]
 800abd6:	e02d      	b.n	800ac34 <USB_EPStartXfer+0x12a0>
 800abd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d125      	bne.n	800ac34 <USB_EPStartXfer+0x12a0>
 800abe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	461a      	mov	r2, r3
 800abfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800abfe:	4413      	add	r3, r2
 800ac00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ac04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	011a      	lsls	r2, r3, #4
 800ac12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac16:	4413      	add	r3, r2
 800ac18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac32:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ac34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 8218 	beq.w	800b076 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ac46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d005      	beq.n	800ac7e <USB_EPStartXfer+0x12ea>
 800ac72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10d      	bne.n	800ac9a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f040 81f5 	bne.w	800b076 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 81ee 	bne.w	800b076 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ac9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	881b      	ldrh	r3, [r3, #0]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acc0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800acc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	441a      	add	r2, r3
 800acde:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ace2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	8013      	strh	r3, [r2, #0]
 800acf6:	e1be      	b.n	800b076 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800acf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	78db      	ldrb	r3, [r3, #3]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	f040 81b4 	bne.w	800b072 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ad0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	699a      	ldr	r2, [r3, #24]
 800ad16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d917      	bls.n	800ad56 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ad26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ad36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	699a      	ldr	r2, [r3, #24]
 800ad42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad46:	1ad2      	subs	r2, r2, r3
 800ad48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	619a      	str	r2, [r3, #24]
 800ad54:	e00e      	b.n	800ad74 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ad66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2200      	movs	r2, #0
 800ad72:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	785b      	ldrb	r3, [r3, #1]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f040 8085 	bne.w	800ae90 <USB_EPStartXfer+0x14fc>
 800ad86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	461a      	mov	r2, r3
 800ada6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adaa:	4413      	add	r3, r2
 800adac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800adb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	011a      	lsls	r2, r3, #4
 800adbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adc2:	4413      	add	r3, r2
 800adc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800add8:	b29a      	uxth	r2, r3
 800adda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	2b3e      	cmp	r3, #62	; 0x3e
 800ade6:	d923      	bls.n	800ae30 <USB_EPStartXfer+0x149c>
 800ade8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adec:	095b      	lsrs	r3, r3, #5
 800adee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf6:	f003 031f 	and.w	r3, r3, #31
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d104      	bne.n	800ae08 <USB_EPStartXfer+0x1474>
 800adfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae02:	3b01      	subs	r3, #1
 800ae04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	029b      	lsls	r3, r3, #10
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae2c:	801a      	strh	r2, [r3, #0]
 800ae2e:	e060      	b.n	800aef2 <USB_EPStartXfer+0x155e>
 800ae30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10c      	bne.n	800ae52 <USB_EPStartXfer+0x14be>
 800ae38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae4e:	801a      	strh	r2, [r3, #0]
 800ae50:	e04f      	b.n	800aef2 <USB_EPStartXfer+0x155e>
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae56:	085b      	lsrs	r3, r3, #1
 800ae58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d004      	beq.n	800ae72 <USB_EPStartXfer+0x14de>
 800ae68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae76:	881b      	ldrh	r3, [r3, #0]
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	029b      	lsls	r3, r3, #10
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	4313      	orrs	r3, r2
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae8c:	801a      	strh	r2, [r3, #0]
 800ae8e:	e030      	b.n	800aef2 <USB_EPStartXfer+0x155e>
 800ae90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d128      	bne.n	800aef2 <USB_EPStartXfer+0x155e>
 800aea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	461a      	mov	r2, r3
 800aec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aec4:	4413      	add	r3, r2
 800aec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	011a      	lsls	r2, r3, #4
 800aed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aedc:	4413      	add	r3, r2
 800aede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aee2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aef0:	801a      	strh	r2, [r3, #0]
 800aef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f040 8085 	bne.w	800b01c <USB_EPStartXfer+0x1688>
 800af12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af2e:	b29b      	uxth	r3, r3
 800af30:	461a      	mov	r2, r3
 800af32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af36:	4413      	add	r3, r2
 800af38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	011a      	lsls	r2, r3, #4
 800af4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af4e:	4413      	add	r3, r2
 800af50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af64:	b29a      	uxth	r2, r3
 800af66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af6a:	801a      	strh	r2, [r3, #0]
 800af6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af70:	2b3e      	cmp	r3, #62	; 0x3e
 800af72:	d923      	bls.n	800afbc <USB_EPStartXfer+0x1628>
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af78:	095b      	lsrs	r3, r3, #5
 800af7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af82:	f003 031f 	and.w	r3, r3, #31
 800af86:	2b00      	cmp	r3, #0
 800af88:	d104      	bne.n	800af94 <USB_EPStartXfer+0x1600>
 800af8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af8e:	3b01      	subs	r3, #1
 800af90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	029b      	lsls	r3, r3, #10
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	4313      	orrs	r3, r2
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afb8:	801a      	strh	r2, [r3, #0]
 800afba:	e05c      	b.n	800b076 <USB_EPStartXfer+0x16e2>
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10c      	bne.n	800afde <USB_EPStartXfer+0x164a>
 800afc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	b29b      	uxth	r3, r3
 800afcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afda:	801a      	strh	r2, [r3, #0]
 800afdc:	e04b      	b.n	800b076 <USB_EPStartXfer+0x16e2>
 800afde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe2:	085b      	lsrs	r3, r3, #1
 800afe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d004      	beq.n	800affe <USB_EPStartXfer+0x166a>
 800aff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aff8:	3301      	adds	r3, #1
 800affa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800affe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	b29a      	uxth	r2, r3
 800b006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	029b      	lsls	r3, r3, #10
 800b00e:	b29b      	uxth	r3, r3
 800b010:	4313      	orrs	r3, r2
 800b012:	b29a      	uxth	r2, r3
 800b014:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b018:	801a      	strh	r2, [r3, #0]
 800b01a:	e02c      	b.n	800b076 <USB_EPStartXfer+0x16e2>
 800b01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d124      	bne.n	800b076 <USB_EPStartXfer+0x16e2>
 800b02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b042:	4413      	add	r3, r2
 800b044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	011a      	lsls	r2, r3, #4
 800b056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b05a:	4413      	add	r3, r2
 800b05c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b068:	b29a      	uxth	r2, r3
 800b06a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b06e:	801a      	strh	r2, [r3, #0]
 800b070:	e001      	b.n	800b076 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	e03a      	b.n	800b0ec <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	b29b      	uxth	r3, r3
 800b094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b0a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b0b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	441a      	add	r2, r3
 800b0d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	785b      	ldrb	r3, [r3, #1]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d020      	beq.n	800b14a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	b29b      	uxth	r3, r3
 800b116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b11a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b11e:	81bb      	strh	r3, [r7, #12]
 800b120:	89bb      	ldrh	r3, [r7, #12]
 800b122:	f083 0310 	eor.w	r3, r3, #16
 800b126:	81bb      	strh	r3, [r7, #12]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	441a      	add	r2, r3
 800b132:	89bb      	ldrh	r3, [r7, #12]
 800b134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b13c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b144:	b29b      	uxth	r3, r3
 800b146:	8013      	strh	r3, [r2, #0]
 800b148:	e01f      	b.n	800b18a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	b29b      	uxth	r3, r3
 800b158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b15c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b160:	81fb      	strh	r3, [r7, #14]
 800b162:	89fb      	ldrh	r3, [r7, #14]
 800b164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b168:	81fb      	strh	r3, [r7, #14]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	441a      	add	r2, r3
 800b174:	89fb      	ldrh	r3, [r7, #14]
 800b176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b186:	b29b      	uxth	r3, r3
 800b188:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	bc80      	pop	{r7}
 800b194:	4770      	bx	lr

0800b196 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b196:	b480      	push	{r7}
 800b198:	b087      	sub	sp, #28
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	7b1b      	ldrb	r3, [r3, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f040 809d 	bne.w	800b2e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	785b      	ldrb	r3, [r3, #1]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d04c      	beq.n	800b24c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	823b      	strh	r3, [r7, #16]
 800b1c0:	8a3b      	ldrh	r3, [r7, #16]
 800b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d01b      	beq.n	800b202 <USB_EPClearStall+0x6c>
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e0:	81fb      	strh	r3, [r7, #14]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	441a      	add	r2, r3
 800b1ec:	89fb      	ldrh	r3, [r7, #14]
 800b1ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	78db      	ldrb	r3, [r3, #3]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d06c      	beq.n	800b2e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	b29b      	uxth	r3, r3
 800b218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b21c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b220:	81bb      	strh	r3, [r7, #12]
 800b222:	89bb      	ldrh	r3, [r7, #12]
 800b224:	f083 0320 	eor.w	r3, r3, #32
 800b228:	81bb      	strh	r3, [r7, #12]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	441a      	add	r2, r3
 800b234:	89bb      	ldrh	r3, [r7, #12]
 800b236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b246:	b29b      	uxth	r3, r3
 800b248:	8013      	strh	r3, [r2, #0]
 800b24a:	e04b      	b.n	800b2e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	82fb      	strh	r3, [r7, #22]
 800b25a:	8afb      	ldrh	r3, [r7, #22]
 800b25c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d01b      	beq.n	800b29c <USB_EPClearStall+0x106>
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	881b      	ldrh	r3, [r3, #0]
 800b270:	b29b      	uxth	r3, r3
 800b272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b27a:	82bb      	strh	r3, [r7, #20]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	441a      	add	r2, r3
 800b286:	8abb      	ldrh	r3, [r7, #20]
 800b288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b28c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b298:	b29b      	uxth	r3, r3
 800b29a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b2:	827b      	strh	r3, [r7, #18]
 800b2b4:	8a7b      	ldrh	r3, [r7, #18]
 800b2b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b2ba:	827b      	strh	r3, [r7, #18]
 800b2bc:	8a7b      	ldrh	r3, [r7, #18]
 800b2be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2c2:	827b      	strh	r3, [r7, #18]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	441a      	add	r2, r3
 800b2ce:	8a7b      	ldrh	r3, [r7, #18]
 800b2d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr

0800b2f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d103      	bne.n	800b30a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2280      	movs	r2, #128	; 0x80
 800b306:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	bc80      	pop	{r7}
 800b314:	4770      	bx	lr

0800b316 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b316:	b480      	push	{r7}
 800b318:	b083      	sub	sp, #12
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr

0800b32a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	bc80      	pop	{r7}
 800b33c:	4770      	bx	lr

0800b33e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b33e:	b480      	push	{r7}
 800b340:	b085      	sub	sp, #20
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b350:	68fb      	ldr	r3, [r7, #12]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	bc80      	pop	{r7}
 800b35a:	4770      	bx	lr

0800b35c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr

0800b372 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b372:	b480      	push	{r7}
 800b374:	b08b      	sub	sp, #44	; 0x2c
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	4611      	mov	r1, r2
 800b37e:	461a      	mov	r2, r3
 800b380:	460b      	mov	r3, r1
 800b382:	80fb      	strh	r3, [r7, #6]
 800b384:	4613      	mov	r3, r2
 800b386:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b388:	88bb      	ldrh	r3, [r7, #4]
 800b38a:	3301      	adds	r3, #1
 800b38c:	085b      	lsrs	r3, r3, #1
 800b38e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b398:	88fb      	ldrh	r3, [r7, #6]
 800b39a:	005a      	lsls	r2, r3, #1
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3aa:	e01e      	b.n	800b3ea <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	021b      	lsls	r3, r3, #8
 800b3ba:	b21a      	sxth	r2, r3
 800b3bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	b21b      	sxth	r3, r3
 800b3c4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	8a7a      	ldrh	r2, [r7, #18]
 800b3ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	3302      	adds	r3, #2
 800b3d0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	3302      	adds	r3, #2
 800b3d6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1dd      	bne.n	800b3ac <USB_WritePMA+0x3a>
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	372c      	adds	r7, #44	; 0x2c
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bc80      	pop	{r7}
 800b3fa:	4770      	bx	lr

0800b3fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b08b      	sub	sp, #44	; 0x2c
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4611      	mov	r1, r2
 800b408:	461a      	mov	r2, r3
 800b40a:	460b      	mov	r3, r1
 800b40c:	80fb      	strh	r3, [r7, #6]
 800b40e:	4613      	mov	r3, r2
 800b410:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b412:	88bb      	ldrh	r3, [r7, #4]
 800b414:	085b      	lsrs	r3, r3, #1
 800b416:	b29b      	uxth	r3, r3
 800b418:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b422:	88fb      	ldrh	r3, [r7, #6]
 800b424:	005a      	lsls	r2, r3, #1
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b42e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
 800b434:	e01b      	b.n	800b46e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b43e:	6a3b      	ldr	r3, [r7, #32]
 800b440:	3302      	adds	r3, #2
 800b442:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	b2da      	uxtb	r2, r3
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	3301      	adds	r3, #1
 800b450:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	0a1b      	lsrs	r3, r3, #8
 800b456:	b2da      	uxtb	r2, r3
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	3301      	adds	r3, #1
 800b460:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	3302      	adds	r3, #2
 800b466:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	3b01      	subs	r3, #1
 800b46c:	627b      	str	r3, [r7, #36]	; 0x24
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e0      	bne.n	800b436 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b474:	88bb      	ldrh	r3, [r7, #4]
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d007      	beq.n	800b490 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	b29b      	uxth	r3, r3
 800b486:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	701a      	strb	r2, [r3, #0]
  }
}
 800b490:	bf00      	nop
 800b492:	372c      	adds	r7, #44	; 0x2c
 800b494:	46bd      	mov	sp, r7
 800b496:	bc80      	pop	{r7}
 800b498:	4770      	bx	lr

0800b49a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b084      	sub	sp, #16
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	7c1b      	ldrb	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d115      	bne.n	800b4de <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	2181      	movs	r1, #129	; 0x81
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f001 fefd 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 fef3 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b4dc:	e012      	b.n	800b504 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4de:	2340      	movs	r3, #64	; 0x40
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	2181      	movs	r1, #129	; 0x81
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f001 fee8 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4f0:	2340      	movs	r3, #64	; 0x40
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	2101      	movs	r1, #1
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fedf 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b504:	2308      	movs	r3, #8
 800b506:	2203      	movs	r2, #3
 800b508:	2182      	movs	r1, #130	; 0x82
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 fed5 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b516:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b51a:	f001 fff5 	bl	800d508 <USBD_static_malloc>
 800b51e:	4602      	mov	r2, r0
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d102      	bne.n	800b536 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
 800b534:	e026      	b.n	800b584 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2200      	movs	r2, #0
 800b554:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	7c1b      	ldrb	r3, [r3, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d109      	bne.n	800b574 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b56a:	2101      	movs	r1, #1
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 ff95 	bl	800d49c <USBD_LL_PrepareReceive>
 800b572:	e007      	b.n	800b584 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b57a:	2340      	movs	r3, #64	; 0x40
 800b57c:	2101      	movs	r1, #1
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 ff8c 	bl	800d49c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b59e:	2181      	movs	r1, #129	; 0x81
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 feb0 	bl	800d306 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 fea9 	bl	800d306 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b5bc:	2182      	movs	r1, #130	; 0x82
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f001 fea1 	bl	800d306 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f001 ff9b 	bl	800d520 <USBD_static_free>
    pdev->pClassData = NULL;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b60c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b622:	2b00      	cmp	r3, #0
 800b624:	d039      	beq.n	800b69a <USBD_CDC_Setup+0x9e>
 800b626:	2b20      	cmp	r3, #32
 800b628:	d17f      	bne.n	800b72a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	88db      	ldrh	r3, [r3, #6]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d029      	beq.n	800b686 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	b25b      	sxtb	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	da11      	bge.n	800b660 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b648:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	88d2      	ldrh	r2, [r2, #6]
 800b64e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b650:	6939      	ldr	r1, [r7, #16]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	88db      	ldrh	r3, [r3, #6]
 800b656:	461a      	mov	r2, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 fa0a 	bl	800ca72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b65e:	e06b      	b.n	800b738 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	785a      	ldrb	r2, [r3, #1]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	88db      	ldrh	r3, [r3, #6]
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b676:	6939      	ldr	r1, [r7, #16]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	88db      	ldrh	r3, [r3, #6]
 800b67c:	461a      	mov	r2, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 fa25 	bl	800cace <USBD_CtlPrepareRx>
      break;
 800b684:	e058      	b.n	800b738 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	7850      	ldrb	r0, [r2, #1]
 800b692:	2200      	movs	r2, #0
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	4798      	blx	r3
      break;
 800b698:	e04e      	b.n	800b738 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	785b      	ldrb	r3, [r3, #1]
 800b69e:	2b0b      	cmp	r3, #11
 800b6a0:	d02e      	beq.n	800b700 <USBD_CDC_Setup+0x104>
 800b6a2:	2b0b      	cmp	r3, #11
 800b6a4:	dc38      	bgt.n	800b718 <USBD_CDC_Setup+0x11c>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <USBD_CDC_Setup+0xb4>
 800b6aa:	2b0a      	cmp	r3, #10
 800b6ac:	d014      	beq.n	800b6d8 <USBD_CDC_Setup+0xdc>
 800b6ae:	e033      	b.n	800b718 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d107      	bne.n	800b6ca <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b6ba:	f107 030c 	add.w	r3, r7, #12
 800b6be:	2202      	movs	r2, #2
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 f9d5 	bl	800ca72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6c8:	e02e      	b.n	800b728 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 f966 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800b6d6:	e027      	b.n	800b728 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d107      	bne.n	800b6f2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b6e2:	f107 030f 	add.w	r3, r7, #15
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f001 f9c1 	bl	800ca72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6f0:	e01a      	b.n	800b728 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f001 f952 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	75fb      	strb	r3, [r7, #23]
          break;
 800b6fe:	e013      	b.n	800b728 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b706:	2b03      	cmp	r3, #3
 800b708:	d00d      	beq.n	800b726 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f001 f946 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800b712:	2302      	movs	r3, #2
 800b714:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b716:	e006      	b.n	800b726 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 f93f 	bl	800c99e <USBD_CtlError>
          ret = USBD_FAIL;
 800b720:	2302      	movs	r3, #2
 800b722:	75fb      	strb	r3, [r7, #23]
          break;
 800b724:	e000      	b.n	800b728 <USBD_CDC_Setup+0x12c>
          break;
 800b726:	bf00      	nop
      }
      break;
 800b728:	e006      	b.n	800b738 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 f936 	bl	800c99e <USBD_CtlError>
      ret = USBD_FAIL;
 800b732:	2302      	movs	r3, #2
 800b734:	75fb      	strb	r3, [r7, #23]
      break;
 800b736:	bf00      	nop
  }

  return ret;
 800b738:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3718      	adds	r7, #24
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b754:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b75c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b764:	2b00      	cmp	r3, #0
 800b766:	d03a      	beq.n	800b7de <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	331c      	adds	r3, #28
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d029      	beq.n	800b7d2 <USBD_CDC_DataIn+0x90>
 800b77e:	78fa      	ldrb	r2, [r7, #3]
 800b780:	6879      	ldr	r1, [r7, #4]
 800b782:	4613      	mov	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	440b      	add	r3, r1
 800b78c:	331c      	adds	r3, #28
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	78f9      	ldrb	r1, [r7, #3]
 800b792:	68b8      	ldr	r0, [r7, #8]
 800b794:	460b      	mov	r3, r1
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	440b      	add	r3, r1
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	4403      	add	r3, r0
 800b79e:	3338      	adds	r3, #56	; 0x38
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	fbb2 f1f3 	udiv	r1, r2, r3
 800b7a6:	fb01 f303 	mul.w	r3, r1, r3
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d110      	bne.n	800b7d2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b7b0:	78fa      	ldrb	r2, [r7, #3]
 800b7b2:	6879      	ldr	r1, [r7, #4]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	440b      	add	r3, r1
 800b7be:	331c      	adds	r3, #28
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b7c4:	78f9      	ldrb	r1, [r7, #3]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f001 fe43 	bl	800d456 <USBD_LL_Transmit>
 800b7d0:	e003      	b.n	800b7da <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e000      	b.n	800b7e0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b7de:	2302      	movs	r3, #2
  }
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7fc:	78fb      	ldrb	r3, [r7, #3]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f001 fe6e 	bl	800d4e2 <USBD_LL_GetRxDataSize>
 800b806:	4602      	mov	r2, r0
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00d      	beq.n	800b834 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b82c:	4611      	mov	r1, r2
 800b82e:	4798      	blx	r3

    return USBD_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	e000      	b.n	800b836 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b834:	2302      	movs	r3, #2
  }
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b854:	2b00      	cmp	r3, #0
 800b856:	d015      	beq.n	800b884 <USBD_CDC_EP0_RxReady+0x46>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b85e:	2bff      	cmp	r3, #255	; 0xff
 800b860:	d010      	beq.n	800b884 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b870:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b878:	b292      	uxth	r2, r2
 800b87a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	22ff      	movs	r2, #255	; 0xff
 800b880:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
	...

0800b890 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2243      	movs	r2, #67	; 0x43
 800b89c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b89e:	4b03      	ldr	r3, [pc, #12]	; (800b8ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bc80      	pop	{r7}
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	200000ac 	.word	0x200000ac

0800b8b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2243      	movs	r2, #67	; 0x43
 800b8bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b8be:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bc80      	pop	{r7}
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	20000068 	.word	0x20000068

0800b8d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2243      	movs	r2, #67	; 0x43
 800b8dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b8de:	4b03      	ldr	r3, [pc, #12]	; (800b8ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bc80      	pop	{r7}
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	200000f0 	.word	0x200000f0

0800b8f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	220a      	movs	r2, #10
 800b8fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b8fe:	4b03      	ldr	r3, [pc, #12]	; (800b90c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	bc80      	pop	{r7}
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	20000024 	.word	0x20000024

0800b910 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b91a:	2302      	movs	r3, #2
 800b91c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	bc80      	pop	{r7}
 800b93a:	4770      	bx	lr

0800b93c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	4613      	mov	r3, r2
 800b948:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b950:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b95a:	88fa      	ldrh	r2, [r7, #6]
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	371c      	adds	r7, #28
 800b968:	46bd      	mov	sp, r7
 800b96a:	bc80      	pop	{r7}
 800b96c:	4770      	bx	lr

0800b96e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b96e:	b480      	push	{r7}
 800b970:	b085      	sub	sp, #20
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	bc80      	pop	{r7}
 800b992:	4770      	bx	lr

0800b994 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d01c      	beq.n	800b9e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d115      	bne.n	800b9e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	2181      	movs	r1, #129	; 0x81
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f001 fd3b 	bl	800d456 <USBD_LL_Transmit>

      return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	e002      	b.n	800b9ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e000      	b.n	800b9ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b9e8:	2302      	movs	r3, #2
  }
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba00:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d017      	beq.n	800ba3c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	7c1b      	ldrb	r3, [r3, #16]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d109      	bne.n	800ba28 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba1e:	2101      	movs	r1, #1
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f001 fd3b 	bl	800d49c <USBD_LL_PrepareReceive>
 800ba26:	e007      	b.n	800ba38 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba2e:	2340      	movs	r3, #64	; 0x40
 800ba30:	2101      	movs	r1, #1
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f001 fd32 	bl	800d49c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e000      	b.n	800ba3e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ba3c:	2302      	movs	r3, #2
  }
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	60f8      	str	r0, [r7, #12]
 800ba4e:	60b9      	str	r1, [r7, #8]
 800ba50:	4613      	mov	r3, r2
 800ba52:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	e01a      	b.n	800ba94 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	79fa      	ldrb	r2, [r7, #7]
 800ba8a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f001 fb9f 	bl	800d1d0 <USBD_LL_Init>

  return USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d006      	beq.n	800babe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	73fb      	strb	r3, [r7, #15]
 800babc:	e001      	b.n	800bac2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800babe:	2302      	movs	r3, #2
 800bac0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	bc80      	pop	{r7}
 800bacc:	4770      	bx	lr

0800bace <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b082      	sub	sp, #8
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 fbd4 	bl	800d284 <USBD_LL_Start>

  return USBD_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bc80      	pop	{r7}
 800baf8:	4770      	bx	lr

0800bafa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bb06:	2302      	movs	r3, #2
 800bb08:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00c      	beq.n	800bb2e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	78fa      	ldrb	r2, [r7, #3]
 800bb1e:	4611      	mov	r1, r2
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	4798      	blx	r3
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	78fa      	ldrb	r2, [r7, #3]
 800bb4e:	4611      	mov	r1, r2
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	4798      	blx	r3

  return USBD_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 fed8 	bl	800c926 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bb84:	461a      	mov	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bb92:	f003 031f 	and.w	r3, r3, #31
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d016      	beq.n	800bbc8 <USBD_LL_SetupStage+0x6a>
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d81c      	bhi.n	800bbd8 <USBD_LL_SetupStage+0x7a>
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <USBD_LL_SetupStage+0x4a>
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d008      	beq.n	800bbb8 <USBD_LL_SetupStage+0x5a>
 800bba6:	e017      	b.n	800bbd8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f9cb 	bl	800bf4c <USBD_StdDevReq>
      break;
 800bbb6:	e01a      	b.n	800bbee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa2d 	bl	800c020 <USBD_StdItfReq>
      break;
 800bbc6:	e012      	b.n	800bbee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fa6d 	bl	800c0b0 <USBD_StdEPReq>
      break;
 800bbd6:	e00a      	b.n	800bbee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bbde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fbac 	bl	800d344 <USBD_LL_StallEP>
      break;
 800bbec:	bf00      	nop
  }

  return USBD_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	460b      	mov	r3, r1
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d14b      	bne.n	800bca4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bc12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d134      	bne.n	800bc88 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	68da      	ldr	r2, [r3, #12]
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d919      	bls.n	800bc5e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	68da      	ldr	r2, [r3, #12]
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	1ad2      	subs	r2, r2, r3
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	68da      	ldr	r2, [r3, #12]
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d203      	bcs.n	800bc4c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	e002      	b.n	800bc52 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	6879      	ldr	r1, [r7, #4]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 ff57 	bl	800cb0a <USBD_CtlContinueRx>
 800bc5c:	e038      	b.n	800bcd0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00a      	beq.n	800bc80 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d105      	bne.n	800bc80 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f000 ff54 	bl	800cb2e <USBD_CtlSendStatus>
 800bc86:	e023      	b.n	800bcd0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc8e:	2b05      	cmp	r3, #5
 800bc90:	d11e      	bne.n	800bcd0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f001 fb51 	bl	800d344 <USBD_LL_StallEP>
 800bca2:	e015      	b.n	800bcd0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00d      	beq.n	800bccc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d108      	bne.n	800bccc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	7afa      	ldrb	r2, [r7, #11]
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	4798      	blx	r3
 800bcca:	e001      	b.n	800bcd0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bccc:	2302      	movs	r3, #2
 800bcce:	e000      	b.n	800bcd2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b086      	sub	sp, #24
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	460b      	mov	r3, r1
 800bce4:	607a      	str	r2, [r7, #4]
 800bce6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d17f      	bne.n	800bdee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3314      	adds	r3, #20
 800bcf2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d15c      	bne.n	800bdb8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	68da      	ldr	r2, [r3, #12]
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d915      	bls.n	800bd36 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	68da      	ldr	r2, [r3, #12]
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	1ad2      	subs	r2, r2, r3
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	461a      	mov	r2, r3
 800bd20:	6879      	ldr	r1, [r7, #4]
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 fec1 	bl	800caaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f001 fbb4 	bl	800d49c <USBD_LL_PrepareReceive>
 800bd34:	e04e      	b.n	800bdd4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	6912      	ldr	r2, [r2, #16]
 800bd3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd42:	fb01 f202 	mul.w	r2, r1, r2
 800bd46:	1a9b      	subs	r3, r3, r2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d11c      	bne.n	800bd86 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	689a      	ldr	r2, [r3, #8]
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d316      	bcc.n	800bd86 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	689a      	ldr	r2, [r3, #8]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d20f      	bcs.n	800bd86 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd66:	2200      	movs	r2, #0
 800bd68:	2100      	movs	r1, #0
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 fe9d 	bl	800caaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd78:	2300      	movs	r3, #0
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f001 fb8c 	bl	800d49c <USBD_LL_PrepareReceive>
 800bd84:	e026      	b.n	800bdd4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00a      	beq.n	800bda8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d105      	bne.n	800bda8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bda8:	2180      	movs	r1, #128	; 0x80
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f001 faca 	bl	800d344 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 fecf 	bl	800cb54 <USBD_CtlReceiveStatus>
 800bdb6:	e00d      	b.n	800bdd4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdbe:	2b04      	cmp	r3, #4
 800bdc0:	d004      	beq.n	800bdcc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d103      	bne.n	800bdd4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bdcc:	2180      	movs	r1, #128	; 0x80
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f001 fab8 	bl	800d344 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d11d      	bne.n	800be1a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f7ff fe81 	bl	800bae6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bdec:	e015      	b.n	800be1a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00d      	beq.n	800be16 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800be00:	2b03      	cmp	r3, #3
 800be02:	d108      	bne.n	800be16 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	7afa      	ldrb	r2, [r7, #11]
 800be0e:	4611      	mov	r1, r2
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	4798      	blx	r3
 800be14:	e001      	b.n	800be1a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be16:	2302      	movs	r3, #2
 800be18:	e000      	b.n	800be1c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be2c:	2340      	movs	r3, #64	; 0x40
 800be2e:	2200      	movs	r2, #0
 800be30:	2100      	movs	r1, #0
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f001 fa41 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2240      	movs	r2, #64	; 0x40
 800be44:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be48:	2340      	movs	r3, #64	; 0x40
 800be4a:	2200      	movs	r2, #0
 800be4c:	2180      	movs	r1, #128	; 0x80
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fa33 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2240      	movs	r2, #64	; 0x40
 800be5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	6852      	ldr	r2, [r2, #4]
 800be94:	b2d2      	uxtb	r2, r2
 800be96:	4611      	mov	r1, r2
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	4798      	blx	r3
  }

  return USBD_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	460b      	mov	r3, r1
 800beb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	78fa      	ldrb	r2, [r7, #3]
 800beb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bc80      	pop	{r7}
 800bec2:	4770      	bx	lr

0800bec4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2204      	movs	r2, #4
 800bedc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bc80      	pop	{r7}
 800beea:	4770      	bx	lr

0800beec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befa:	2b04      	cmp	r3, #4
 800befc:	d105      	bne.n	800bf0a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bc80      	pop	{r7}
 800bf14:	4770      	bx	lr

0800bf16 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b082      	sub	sp, #8
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d10b      	bne.n	800bf40 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
	...

0800bf4c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf62:	2b40      	cmp	r3, #64	; 0x40
 800bf64:	d005      	beq.n	800bf72 <USBD_StdDevReq+0x26>
 800bf66:	2b40      	cmp	r3, #64	; 0x40
 800bf68:	d84f      	bhi.n	800c00a <USBD_StdDevReq+0xbe>
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <USBD_StdDevReq+0x36>
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	d14b      	bne.n	800c00a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	4798      	blx	r3
      break;
 800bf80:	e048      	b.n	800c014 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	2b09      	cmp	r3, #9
 800bf88:	d839      	bhi.n	800bffe <USBD_StdDevReq+0xb2>
 800bf8a:	a201      	add	r2, pc, #4	; (adr r2, 800bf90 <USBD_StdDevReq+0x44>)
 800bf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf90:	0800bfe1 	.word	0x0800bfe1
 800bf94:	0800bff5 	.word	0x0800bff5
 800bf98:	0800bfff 	.word	0x0800bfff
 800bf9c:	0800bfeb 	.word	0x0800bfeb
 800bfa0:	0800bfff 	.word	0x0800bfff
 800bfa4:	0800bfc3 	.word	0x0800bfc3
 800bfa8:	0800bfb9 	.word	0x0800bfb9
 800bfac:	0800bfff 	.word	0x0800bfff
 800bfb0:	0800bfd7 	.word	0x0800bfd7
 800bfb4:	0800bfcd 	.word	0x0800bfcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f9dc 	bl	800c378 <USBD_GetDescriptor>
          break;
 800bfc0:	e022      	b.n	800c008 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fb3f 	bl	800c648 <USBD_SetAddress>
          break;
 800bfca:	e01d      	b.n	800c008 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fb7e 	bl	800c6d0 <USBD_SetConfig>
          break;
 800bfd4:	e018      	b.n	800c008 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fc07 	bl	800c7ec <USBD_GetConfig>
          break;
 800bfde:	e013      	b.n	800c008 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fc37 	bl	800c856 <USBD_GetStatus>
          break;
 800bfe8:	e00e      	b.n	800c008 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fc65 	bl	800c8bc <USBD_SetFeature>
          break;
 800bff2:	e009      	b.n	800c008 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fc74 	bl	800c8e4 <USBD_ClrFeature>
          break;
 800bffc:	e004      	b.n	800c008 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fccc 	bl	800c99e <USBD_CtlError>
          break;
 800c006:	bf00      	nop
      }
      break;
 800c008:	e004      	b.n	800c014 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fcc6 	bl	800c99e <USBD_CtlError>
      break;
 800c012:	bf00      	nop
  }

  return ret;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop

0800c020 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c036:	2b40      	cmp	r3, #64	; 0x40
 800c038:	d005      	beq.n	800c046 <USBD_StdItfReq+0x26>
 800c03a:	2b40      	cmp	r3, #64	; 0x40
 800c03c:	d82e      	bhi.n	800c09c <USBD_StdItfReq+0x7c>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <USBD_StdItfReq+0x26>
 800c042:	2b20      	cmp	r3, #32
 800c044:	d12a      	bne.n	800c09c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c04c:	3b01      	subs	r3, #1
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d81d      	bhi.n	800c08e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	889b      	ldrh	r3, [r3, #4]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d813      	bhi.n	800c084 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	4798      	blx	r3
 800c06a:	4603      	mov	r3, r0
 800c06c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	88db      	ldrh	r3, [r3, #6]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d110      	bne.n	800c098 <USBD_StdItfReq+0x78>
 800c076:	7bfb      	ldrb	r3, [r7, #15]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10d      	bne.n	800c098 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fd56 	bl	800cb2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c082:	e009      	b.n	800c098 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fc89 	bl	800c99e <USBD_CtlError>
          break;
 800c08c:	e004      	b.n	800c098 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fc84 	bl	800c99e <USBD_CtlError>
          break;
 800c096:	e000      	b.n	800c09a <USBD_StdItfReq+0x7a>
          break;
 800c098:	bf00      	nop
      }
      break;
 800c09a:	e004      	b.n	800c0a6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fc7d 	bl	800c99e <USBD_CtlError>
      break;
 800c0a4:	bf00      	nop
  }

  return USBD_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	889b      	ldrh	r3, [r3, #4]
 800c0c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0cc:	2b40      	cmp	r3, #64	; 0x40
 800c0ce:	d007      	beq.n	800c0e0 <USBD_StdEPReq+0x30>
 800c0d0:	2b40      	cmp	r3, #64	; 0x40
 800c0d2:	f200 8146 	bhi.w	800c362 <USBD_StdEPReq+0x2b2>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <USBD_StdEPReq+0x40>
 800c0da:	2b20      	cmp	r3, #32
 800c0dc:	f040 8141 	bne.w	800c362 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	4798      	blx	r3
      break;
 800c0ee:	e13d      	b.n	800c36c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	d10a      	bne.n	800c112 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	4798      	blx	r3
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
 800c110:	e12d      	b.n	800c36e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	785b      	ldrb	r3, [r3, #1]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d007      	beq.n	800c12a <USBD_StdEPReq+0x7a>
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	f300 811b 	bgt.w	800c356 <USBD_StdEPReq+0x2a6>
 800c120:	2b00      	cmp	r3, #0
 800c122:	d072      	beq.n	800c20a <USBD_StdEPReq+0x15a>
 800c124:	2b01      	cmp	r3, #1
 800c126:	d03a      	beq.n	800c19e <USBD_StdEPReq+0xee>
 800c128:	e115      	b.n	800c356 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c130:	2b02      	cmp	r3, #2
 800c132:	d002      	beq.n	800c13a <USBD_StdEPReq+0x8a>
 800c134:	2b03      	cmp	r3, #3
 800c136:	d015      	beq.n	800c164 <USBD_StdEPReq+0xb4>
 800c138:	e02b      	b.n	800c192 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00c      	beq.n	800c15a <USBD_StdEPReq+0xaa>
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	2b80      	cmp	r3, #128	; 0x80
 800c144:	d009      	beq.n	800c15a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c146:	7bbb      	ldrb	r3, [r7, #14]
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f001 f8fa 	bl	800d344 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c150:	2180      	movs	r1, #128	; 0x80
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f001 f8f6 	bl	800d344 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c158:	e020      	b.n	800c19c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fc1e 	bl	800c99e <USBD_CtlError>
              break;
 800c162:	e01b      	b.n	800c19c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	885b      	ldrh	r3, [r3, #2]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10e      	bne.n	800c18a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00b      	beq.n	800c18a <USBD_StdEPReq+0xda>
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b80      	cmp	r3, #128	; 0x80
 800c176:	d008      	beq.n	800c18a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	88db      	ldrh	r3, [r3, #6]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d104      	bne.n	800c18a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 f8dd 	bl	800d344 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fccf 	bl	800cb2e <USBD_CtlSendStatus>

              break;
 800c190:	e004      	b.n	800c19c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fc02 	bl	800c99e <USBD_CtlError>
              break;
 800c19a:	bf00      	nop
          }
          break;
 800c19c:	e0e0      	b.n	800c360 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d002      	beq.n	800c1ae <USBD_StdEPReq+0xfe>
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d015      	beq.n	800c1d8 <USBD_StdEPReq+0x128>
 800c1ac:	e026      	b.n	800c1fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1ae:	7bbb      	ldrb	r3, [r7, #14]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00c      	beq.n	800c1ce <USBD_StdEPReq+0x11e>
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b80      	cmp	r3, #128	; 0x80
 800c1b8:	d009      	beq.n	800c1ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 f8c0 	bl	800d344 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c1c4:	2180      	movs	r1, #128	; 0x80
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f001 f8bc 	bl	800d344 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1cc:	e01c      	b.n	800c208 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 fbe4 	bl	800c99e <USBD_CtlError>
              break;
 800c1d6:	e017      	b.n	800c208 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	885b      	ldrh	r3, [r3, #2]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d112      	bne.n	800c206 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 f8c7 	bl	800d382 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 fc9a 	bl	800cb2e <USBD_CtlSendStatus>
              }
              break;
 800c1fa:	e004      	b.n	800c206 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fbcd 	bl	800c99e <USBD_CtlError>
              break;
 800c204:	e000      	b.n	800c208 <USBD_StdEPReq+0x158>
              break;
 800c206:	bf00      	nop
          }
          break;
 800c208:	e0aa      	b.n	800c360 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c210:	2b02      	cmp	r3, #2
 800c212:	d002      	beq.n	800c21a <USBD_StdEPReq+0x16a>
 800c214:	2b03      	cmp	r3, #3
 800c216:	d032      	beq.n	800c27e <USBD_StdEPReq+0x1ce>
 800c218:	e097      	b.n	800c34a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d007      	beq.n	800c230 <USBD_StdEPReq+0x180>
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d004      	beq.n	800c230 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fbb8 	bl	800c99e <USBD_CtlError>
                break;
 800c22e:	e091      	b.n	800c354 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c234:	2b00      	cmp	r3, #0
 800c236:	da0b      	bge.n	800c250 <USBD_StdEPReq+0x1a0>
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c23e:	4613      	mov	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	3310      	adds	r3, #16
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	4413      	add	r3, r2
 800c24c:	3304      	adds	r3, #4
 800c24e:	e00b      	b.n	800c268 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c256:	4613      	mov	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4413      	add	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	4413      	add	r3, r2
 800c266:	3304      	adds	r3, #4
 800c268:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2202      	movs	r2, #2
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fbfb 	bl	800ca72 <USBD_CtlSendData>
              break;
 800c27c:	e06a      	b.n	800c354 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c27e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c282:	2b00      	cmp	r3, #0
 800c284:	da11      	bge.n	800c2aa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c286:	7bbb      	ldrb	r3, [r7, #14]
 800c288:	f003 020f 	and.w	r2, r3, #15
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	440b      	add	r3, r1
 800c298:	3318      	adds	r3, #24
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d117      	bne.n	800c2d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fb7b 	bl	800c99e <USBD_CtlError>
                  break;
 800c2a8:	e054      	b.n	800c354 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	f003 020f 	and.w	r2, r3, #15
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	440b      	add	r3, r1
 800c2bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fb68 	bl	800c99e <USBD_CtlError>
                  break;
 800c2ce:	e041      	b.n	800c354 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	da0b      	bge.n	800c2f0 <USBD_StdEPReq+0x240>
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	3310      	adds	r3, #16
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	e00b      	b.n	800c308 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
 800c2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	4413      	add	r3, r2
 800c306:	3304      	adds	r3, #4
 800c308:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <USBD_StdEPReq+0x266>
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	2b80      	cmp	r3, #128	; 0x80
 800c314:	d103      	bne.n	800c31e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2200      	movs	r2, #0
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	e00e      	b.n	800c33c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f001 f84c 	bl	800d3c0 <USBD_LL_IsStallEP>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2201      	movs	r2, #1
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	e002      	b.n	800c33c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2202      	movs	r2, #2
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fb95 	bl	800ca72 <USBD_CtlSendData>
              break;
 800c348:	e004      	b.n	800c354 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fb26 	bl	800c99e <USBD_CtlError>
              break;
 800c352:	bf00      	nop
          }
          break;
 800c354:	e004      	b.n	800c360 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fb20 	bl	800c99e <USBD_CtlError>
          break;
 800c35e:	bf00      	nop
      }
      break;
 800c360:	e004      	b.n	800c36c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fb1a 	bl	800c99e <USBD_CtlError>
      break;
 800c36a:	bf00      	nop
  }

  return ret;
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c382:	2300      	movs	r3, #0
 800c384:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	885b      	ldrh	r3, [r3, #2]
 800c392:	0a1b      	lsrs	r3, r3, #8
 800c394:	b29b      	uxth	r3, r3
 800c396:	3b01      	subs	r3, #1
 800c398:	2b06      	cmp	r3, #6
 800c39a:	f200 8128 	bhi.w	800c5ee <USBD_GetDescriptor+0x276>
 800c39e:	a201      	add	r2, pc, #4	; (adr r2, 800c3a4 <USBD_GetDescriptor+0x2c>)
 800c3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a4:	0800c3c1 	.word	0x0800c3c1
 800c3a8:	0800c3d9 	.word	0x0800c3d9
 800c3ac:	0800c419 	.word	0x0800c419
 800c3b0:	0800c5ef 	.word	0x0800c5ef
 800c3b4:	0800c5ef 	.word	0x0800c5ef
 800c3b8:	0800c58f 	.word	0x0800c58f
 800c3bc:	0800c5bb 	.word	0x0800c5bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	7c12      	ldrb	r2, [r2, #16]
 800c3cc:	f107 0108 	add.w	r1, r7, #8
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4798      	blx	r3
 800c3d4:	60f8      	str	r0, [r7, #12]
      break;
 800c3d6:	e112      	b.n	800c5fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	7c1b      	ldrb	r3, [r3, #16]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10d      	bne.n	800c3fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	f107 0208 	add.w	r2, r7, #8
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	4798      	blx	r3
 800c3f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3fa:	e100      	b.n	800c5fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	f107 0208 	add.w	r2, r7, #8
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3301      	adds	r3, #1
 800c412:	2202      	movs	r2, #2
 800c414:	701a      	strb	r2, [r3, #0]
      break;
 800c416:	e0f2      	b.n	800c5fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	885b      	ldrh	r3, [r3, #2]
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b05      	cmp	r3, #5
 800c420:	f200 80ac 	bhi.w	800c57c <USBD_GetDescriptor+0x204>
 800c424:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <USBD_GetDescriptor+0xb4>)
 800c426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42a:	bf00      	nop
 800c42c:	0800c445 	.word	0x0800c445
 800c430:	0800c479 	.word	0x0800c479
 800c434:	0800c4ad 	.word	0x0800c4ad
 800c438:	0800c4e1 	.word	0x0800c4e1
 800c43c:	0800c515 	.word	0x0800c515
 800c440:	0800c549 	.word	0x0800c549
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00b      	beq.n	800c468 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	7c12      	ldrb	r2, [r2, #16]
 800c45c:	f107 0108 	add.w	r1, r7, #8
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c466:	e091      	b.n	800c58c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fa97 	bl	800c99e <USBD_CtlError>
            err++;
 800c470:	7afb      	ldrb	r3, [r7, #11]
 800c472:	3301      	adds	r3, #1
 800c474:	72fb      	strb	r3, [r7, #11]
          break;
 800c476:	e089      	b.n	800c58c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	7c12      	ldrb	r2, [r2, #16]
 800c490:	f107 0108 	add.w	r1, r7, #8
 800c494:	4610      	mov	r0, r2
 800c496:	4798      	blx	r3
 800c498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49a:	e077      	b.n	800c58c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa7d 	bl	800c99e <USBD_CtlError>
            err++;
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4aa:	e06f      	b.n	800c58c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	7c12      	ldrb	r2, [r2, #16]
 800c4c4:	f107 0108 	add.w	r1, r7, #8
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
 800c4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ce:	e05d      	b.n	800c58c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa63 	bl	800c99e <USBD_CtlError>
            err++;
 800c4d8:	7afb      	ldrb	r3, [r7, #11]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4de:	e055      	b.n	800c58c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00b      	beq.n	800c504 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	7c12      	ldrb	r2, [r2, #16]
 800c4f8:	f107 0108 	add.w	r1, r7, #8
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4798      	blx	r3
 800c500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c502:	e043      	b.n	800c58c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa49 	bl	800c99e <USBD_CtlError>
            err++;
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	3301      	adds	r3, #1
 800c510:	72fb      	strb	r3, [r7, #11]
          break;
 800c512:	e03b      	b.n	800c58c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00b      	beq.n	800c538 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	7c12      	ldrb	r2, [r2, #16]
 800c52c:	f107 0108 	add.w	r1, r7, #8
 800c530:	4610      	mov	r0, r2
 800c532:	4798      	blx	r3
 800c534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c536:	e029      	b.n	800c58c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fa2f 	bl	800c99e <USBD_CtlError>
            err++;
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	3301      	adds	r3, #1
 800c544:	72fb      	strb	r3, [r7, #11]
          break;
 800c546:	e021      	b.n	800c58c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00b      	beq.n	800c56c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	7c12      	ldrb	r2, [r2, #16]
 800c560:	f107 0108 	add.w	r1, r7, #8
 800c564:	4610      	mov	r0, r2
 800c566:	4798      	blx	r3
 800c568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c56a:	e00f      	b.n	800c58c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fa15 	bl	800c99e <USBD_CtlError>
            err++;
 800c574:	7afb      	ldrb	r3, [r7, #11]
 800c576:	3301      	adds	r3, #1
 800c578:	72fb      	strb	r3, [r7, #11]
          break;
 800c57a:	e007      	b.n	800c58c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fa0d 	bl	800c99e <USBD_CtlError>
          err++;
 800c584:	7afb      	ldrb	r3, [r7, #11]
 800c586:	3301      	adds	r3, #1
 800c588:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c58a:	e038      	b.n	800c5fe <USBD_GetDescriptor+0x286>
 800c58c:	e037      	b.n	800c5fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	7c1b      	ldrb	r3, [r3, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d109      	bne.n	800c5aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59e:	f107 0208 	add.w	r2, r7, #8
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	4798      	blx	r3
 800c5a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a8:	e029      	b.n	800c5fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f9f6 	bl	800c99e <USBD_CtlError>
        err++;
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b8:	e021      	b.n	800c5fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	7c1b      	ldrb	r3, [r3, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10d      	bne.n	800c5de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ca:	f107 0208 	add.w	r2, r7, #8
 800c5ce:	4610      	mov	r0, r2
 800c5d0:	4798      	blx	r3
 800c5d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	2207      	movs	r2, #7
 800c5da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5dc:	e00f      	b.n	800c5fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f9dc 	bl	800c99e <USBD_CtlError>
        err++;
 800c5e6:	7afb      	ldrb	r3, [r7, #11]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ec:	e007      	b.n	800c5fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f9d4 	bl	800c99e <USBD_CtlError>
      err++;
 800c5f6:	7afb      	ldrb	r3, [r7, #11]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	72fb      	strb	r3, [r7, #11]
      break;
 800c5fc:	bf00      	nop
  }

  if (err != 0U)
 800c5fe:	7afb      	ldrb	r3, [r7, #11]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d11c      	bne.n	800c63e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c604:	893b      	ldrh	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d011      	beq.n	800c62e <USBD_GetDescriptor+0x2b6>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	88db      	ldrh	r3, [r3, #6]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00d      	beq.n	800c62e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88da      	ldrh	r2, [r3, #6]
 800c616:	893b      	ldrh	r3, [r7, #8]
 800c618:	4293      	cmp	r3, r2
 800c61a:	bf28      	it	cs
 800c61c:	4613      	movcs	r3, r2
 800c61e:	b29b      	uxth	r3, r3
 800c620:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c622:	893b      	ldrh	r3, [r7, #8]
 800c624:	461a      	mov	r2, r3
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa22 	bl	800ca72 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	88db      	ldrh	r3, [r3, #6]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d104      	bne.n	800c640 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fa79 	bl	800cb2e <USBD_CtlSendStatus>
 800c63c:	e000      	b.n	800c640 <USBD_GetDescriptor+0x2c8>
    return;
 800c63e:	bf00      	nop
    }
  }
}
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop

0800c648 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d130      	bne.n	800c6bc <USBD_SetAddress+0x74>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d12c      	bne.n	800c6bc <USBD_SetAddress+0x74>
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	885b      	ldrh	r3, [r3, #2]
 800c666:	2b7f      	cmp	r3, #127	; 0x7f
 800c668:	d828      	bhi.n	800c6bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	885b      	ldrh	r3, [r3, #2]
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d104      	bne.n	800c68a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f98b 	bl	800c99e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c688:	e01d      	b.n	800c6c6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7bfa      	ldrb	r2, [r7, #15]
 800c68e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 febe 	bl	800d418 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fa46 	bl	800cb2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d004      	beq.n	800c6b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b0:	e009      	b.n	800c6c6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ba:	e004      	b.n	800c6c6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f96d 	bl	800c99e <USBD_CtlError>
  }
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	885b      	ldrh	r3, [r3, #2]
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	4b41      	ldr	r3, [pc, #260]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c6e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6e4:	4b40      	ldr	r3, [pc, #256]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d904      	bls.n	800c6f6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f955 	bl	800c99e <USBD_CtlError>
 800c6f4:	e075      	b.n	800c7e2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d002      	beq.n	800c706 <USBD_SetConfig+0x36>
 800c700:	2b03      	cmp	r3, #3
 800c702:	d023      	beq.n	800c74c <USBD_SetConfig+0x7c>
 800c704:	e062      	b.n	800c7cc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c706:	4b38      	ldr	r3, [pc, #224]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d01a      	beq.n	800c744 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c70e:	4b36      	ldr	r3, [pc, #216]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2203      	movs	r2, #3
 800c71c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c720:	4b31      	ldr	r3, [pc, #196]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7ff f9e7 	bl	800bafa <USBD_SetClassConfig>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d104      	bne.n	800c73c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f932 	bl	800c99e <USBD_CtlError>
            return;
 800c73a:	e052      	b.n	800c7e2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f9f6 	bl	800cb2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c742:	e04e      	b.n	800c7e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f9f2 	bl	800cb2e <USBD_CtlSendStatus>
        break;
 800c74a:	e04a      	b.n	800c7e2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c74c:	4b26      	ldr	r3, [pc, #152]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d112      	bne.n	800c77a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c75c:	4b22      	ldr	r3, [pc, #136]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	461a      	mov	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c766:	4b20      	ldr	r3, [pc, #128]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	4619      	mov	r1, r3
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff f9e3 	bl	800bb38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f9db 	bl	800cb2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c778:	e033      	b.n	800c7e2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c77a:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	429a      	cmp	r2, r3
 800c786:	d01d      	beq.n	800c7c4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff f9d1 	bl	800bb38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c796:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c7a0:	4b11      	ldr	r3, [pc, #68]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff f9a7 	bl	800bafa <USBD_SetClassConfig>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d104      	bne.n	800c7bc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f8f2 	bl	800c99e <USBD_CtlError>
            return;
 800c7ba:	e012      	b.n	800c7e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f9b6 	bl	800cb2e <USBD_CtlSendStatus>
        break;
 800c7c2:	e00e      	b.n	800c7e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f9b2 	bl	800cb2e <USBD_CtlSendStatus>
        break;
 800c7ca:	e00a      	b.n	800c7e2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f8e5 	bl	800c99e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c7d4:	4b04      	ldr	r3, [pc, #16]	; (800c7e8 <USBD_SetConfig+0x118>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff f9ac 	bl	800bb38 <USBD_ClrClassConfig>
        break;
 800c7e0:	bf00      	nop
    }
  }
}
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20000dd8 	.word	0x20000dd8

0800c7ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	88db      	ldrh	r3, [r3, #6]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d004      	beq.n	800c808 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f8cc 	bl	800c99e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c806:	e022      	b.n	800c84e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c80e:	2b02      	cmp	r3, #2
 800c810:	dc02      	bgt.n	800c818 <USBD_GetConfig+0x2c>
 800c812:	2b00      	cmp	r3, #0
 800c814:	dc03      	bgt.n	800c81e <USBD_GetConfig+0x32>
 800c816:	e015      	b.n	800c844 <USBD_GetConfig+0x58>
 800c818:	2b03      	cmp	r3, #3
 800c81a:	d00b      	beq.n	800c834 <USBD_GetConfig+0x48>
 800c81c:	e012      	b.n	800c844 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	3308      	adds	r3, #8
 800c828:	2201      	movs	r2, #1
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f920 	bl	800ca72 <USBD_CtlSendData>
        break;
 800c832:	e00c      	b.n	800c84e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3304      	adds	r3, #4
 800c838:	2201      	movs	r2, #1
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f918 	bl	800ca72 <USBD_CtlSendData>
        break;
 800c842:	e004      	b.n	800c84e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f8a9 	bl	800c99e <USBD_CtlError>
        break;
 800c84c:	bf00      	nop
}
 800c84e:	bf00      	nop
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b082      	sub	sp, #8
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c866:	3b01      	subs	r3, #1
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d81e      	bhi.n	800c8aa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	88db      	ldrh	r3, [r3, #6]
 800c870:	2b02      	cmp	r3, #2
 800c872:	d004      	beq.n	800c87e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f891 	bl	800c99e <USBD_CtlError>
        break;
 800c87c:	e01a      	b.n	800c8b4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f043 0202 	orr.w	r2, r3, #2
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	330c      	adds	r3, #12
 800c89e:	2202      	movs	r2, #2
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f8e5 	bl	800ca72 <USBD_CtlSendData>
      break;
 800c8a8:	e004      	b.n	800c8b4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f876 	bl	800c99e <USBD_CtlError>
      break;
 800c8b2:	bf00      	nop
  }
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	885b      	ldrh	r3, [r3, #2]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d106      	bne.n	800c8dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f929 	bl	800cb2e <USBD_CtlSendStatus>
  }
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d80b      	bhi.n	800c912 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	885b      	ldrh	r3, [r3, #2]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d10c      	bne.n	800c91c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f90f 	bl	800cb2e <USBD_CtlSendStatus>
      }
      break;
 800c910:	e004      	b.n	800c91c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f842 	bl	800c99e <USBD_CtlError>
      break;
 800c91a:	e000      	b.n	800c91e <USBD_ClrFeature+0x3a>
      break;
 800c91c:	bf00      	nop
  }
}
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	785a      	ldrb	r2, [r3, #1]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	3302      	adds	r3, #2
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	b29a      	uxth	r2, r3
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	3303      	adds	r3, #3
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	b29b      	uxth	r3, r3
 800c950:	021b      	lsls	r3, r3, #8
 800c952:	b29b      	uxth	r3, r3
 800c954:	4413      	add	r3, r2
 800c956:	b29a      	uxth	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	3304      	adds	r3, #4
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b29a      	uxth	r2, r3
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	3305      	adds	r3, #5
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	021b      	lsls	r3, r3, #8
 800c96e:	b29b      	uxth	r3, r3
 800c970:	4413      	add	r3, r2
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	3306      	adds	r3, #6
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	b29a      	uxth	r2, r3
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	3307      	adds	r3, #7
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	021b      	lsls	r3, r3, #8
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	4413      	add	r3, r2
 800c98e:	b29a      	uxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	80da      	strh	r2, [r3, #6]

}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	bc80      	pop	{r7}
 800c99c:	4770      	bx	lr

0800c99e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c9a8:	2180      	movs	r1, #128	; 0x80
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fcca 	bl	800d344 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fcc6 	bl	800d344 <USBD_LL_StallEP>
}
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d032      	beq.n	800ca3c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f000 f834 	bl	800ca44 <USBD_GetLen>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	3301      	adds	r3, #1
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	005b      	lsls	r3, r3, #1
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	75fa      	strb	r2, [r7, #23]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	7812      	ldrb	r2, [r2, #0]
 800c9fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	75fa      	strb	r2, [r7, #23]
 800ca02:	461a      	mov	r2, r3
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	4413      	add	r3, r2
 800ca08:	2203      	movs	r2, #3
 800ca0a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ca0c:	e012      	b.n	800ca34 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	60fa      	str	r2, [r7, #12]
 800ca14:	7dfa      	ldrb	r2, [r7, #23]
 800ca16:	1c51      	adds	r1, r2, #1
 800ca18:	75f9      	strb	r1, [r7, #23]
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	440a      	add	r2, r1
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	75fa      	strb	r2, [r7, #23]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4413      	add	r3, r2
 800ca30:	2200      	movs	r2, #0
 800ca32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1e8      	bne.n	800ca0e <USBD_GetString+0x4e>
    }
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ca50:	e005      	b.n	800ca5e <USBD_GetLen+0x1a>
  {
    len++;
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	3301      	adds	r3, #1
 800ca56:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1f5      	bne.n	800ca52 <USBD_GetLen+0xe>
  }

  return len;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bc80      	pop	{r7}
 800ca70:	4770      	bx	lr

0800ca72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	60f8      	str	r0, [r7, #12]
 800ca7a:	60b9      	str	r1, [r7, #8]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2202      	movs	r2, #2
 800ca84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca88:	88fa      	ldrh	r2, [r7, #6]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ca8e:	88fa      	ldrh	r2, [r7, #6]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca94:	88fb      	ldrh	r3, [r7, #6]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	2100      	movs	r1, #0
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 fcdb 	bl	800d456 <USBD_LL_Transmit>

  return USBD_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	60b9      	str	r1, [r7, #8]
 800cab4:	4613      	mov	r3, r2
 800cab6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cab8:	88fb      	ldrh	r3, [r7, #6]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	2100      	movs	r1, #0
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f000 fcc9 	bl	800d456 <USBD_LL_Transmit>

  return USBD_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	60f8      	str	r0, [r7, #12]
 800cad6:	60b9      	str	r1, [r7, #8]
 800cad8:	4613      	mov	r3, r2
 800cada:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2203      	movs	r2, #3
 800cae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cae4:	88fa      	ldrh	r2, [r7, #6]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800caec:	88fa      	ldrh	r2, [r7, #6]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caf4:	88fb      	ldrh	r3, [r7, #6]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	2100      	movs	r1, #0
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	f000 fcce 	bl	800d49c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	60f8      	str	r0, [r7, #12]
 800cb12:	60b9      	str	r1, [r7, #8]
 800cb14:	4613      	mov	r3, r2
 800cb16:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb18:	88fb      	ldrh	r3, [r7, #6]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f000 fcbc 	bl	800d49c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b082      	sub	sp, #8
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2204      	movs	r2, #4
 800cb3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb3e:	2300      	movs	r3, #0
 800cb40:	2200      	movs	r2, #0
 800cb42:	2100      	movs	r1, #0
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fc86 	bl	800d456 <USBD_LL_Transmit>

  return USBD_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2205      	movs	r2, #5
 800cb60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb64:	2300      	movs	r3, #0
 800cb66:	2200      	movs	r2, #0
 800cb68:	2100      	movs	r1, #0
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fc96 	bl	800d49c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
	...

0800cb7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb80:	2200      	movs	r2, #0
 800cb82:	4912      	ldr	r1, [pc, #72]	; (800cbcc <MX_USB_DEVICE_Init+0x50>)
 800cb84:	4812      	ldr	r0, [pc, #72]	; (800cbd0 <MX_USB_DEVICE_Init+0x54>)
 800cb86:	f7fe ff5e 	bl	800ba46 <USBD_Init>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb90:	f7f5 fdbe 	bl	8002710 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb94:	490f      	ldr	r1, [pc, #60]	; (800cbd4 <MX_USB_DEVICE_Init+0x58>)
 800cb96:	480e      	ldr	r0, [pc, #56]	; (800cbd0 <MX_USB_DEVICE_Init+0x54>)
 800cb98:	f7fe ff80 	bl	800ba9c <USBD_RegisterClass>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d001      	beq.n	800cba6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cba2:	f7f5 fdb5 	bl	8002710 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cba6:	490c      	ldr	r1, [pc, #48]	; (800cbd8 <MX_USB_DEVICE_Init+0x5c>)
 800cba8:	4809      	ldr	r0, [pc, #36]	; (800cbd0 <MX_USB_DEVICE_Init+0x54>)
 800cbaa:	f7fe feb1 	bl	800b910 <USBD_CDC_RegisterInterface>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d001      	beq.n	800cbb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbb4:	f7f5 fdac 	bl	8002710 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbb8:	4805      	ldr	r0, [pc, #20]	; (800cbd0 <MX_USB_DEVICE_Init+0x54>)
 800cbba:	f7fe ff88 	bl	800bace <USBD_Start>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbc4:	f7f5 fda4 	bl	8002710 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbc8:	bf00      	nop
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	20000144 	.word	0x20000144
 800cbd0:	20000ddc 	.word	0x20000ddc
 800cbd4:	20000030 	.word	0x20000030
 800cbd8:	20000134 	.word	0x20000134

0800cbdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4905      	ldr	r1, [pc, #20]	; (800cbf8 <CDC_Init_FS+0x1c>)
 800cbe4:	4805      	ldr	r0, [pc, #20]	; (800cbfc <CDC_Init_FS+0x20>)
 800cbe6:	f7fe fea9 	bl	800b93c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbea:	4905      	ldr	r1, [pc, #20]	; (800cc00 <CDC_Init_FS+0x24>)
 800cbec:	4803      	ldr	r0, [pc, #12]	; (800cbfc <CDC_Init_FS+0x20>)
 800cbee:	f7fe febe 	bl	800b96e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	200011a0 	.word	0x200011a0
 800cbfc:	20000ddc 	.word	0x20000ddc
 800cc00:	200010a0 	.word	0x200010a0

0800cc04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc04:	b480      	push	{r7}
 800cc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bc80      	pop	{r7}
 800cc10:	4770      	bx	lr
	...

0800cc14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	6039      	str	r1, [r7, #0]
 800cc1e:	71fb      	strb	r3, [r7, #7]
 800cc20:	4613      	mov	r3, r2
 800cc22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc24:	79fb      	ldrb	r3, [r7, #7]
 800cc26:	2b23      	cmp	r3, #35	; 0x23
 800cc28:	f200 808c 	bhi.w	800cd44 <CDC_Control_FS+0x130>
 800cc2c:	a201      	add	r2, pc, #4	; (adr r2, 800cc34 <CDC_Control_FS+0x20>)
 800cc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc32:	bf00      	nop
 800cc34:	0800cd45 	.word	0x0800cd45
 800cc38:	0800cd45 	.word	0x0800cd45
 800cc3c:	0800cd45 	.word	0x0800cd45
 800cc40:	0800cd45 	.word	0x0800cd45
 800cc44:	0800cd45 	.word	0x0800cd45
 800cc48:	0800cd45 	.word	0x0800cd45
 800cc4c:	0800cd45 	.word	0x0800cd45
 800cc50:	0800cd45 	.word	0x0800cd45
 800cc54:	0800cd45 	.word	0x0800cd45
 800cc58:	0800cd45 	.word	0x0800cd45
 800cc5c:	0800cd45 	.word	0x0800cd45
 800cc60:	0800cd45 	.word	0x0800cd45
 800cc64:	0800cd45 	.word	0x0800cd45
 800cc68:	0800cd45 	.word	0x0800cd45
 800cc6c:	0800cd45 	.word	0x0800cd45
 800cc70:	0800cd45 	.word	0x0800cd45
 800cc74:	0800cd45 	.word	0x0800cd45
 800cc78:	0800cd45 	.word	0x0800cd45
 800cc7c:	0800cd45 	.word	0x0800cd45
 800cc80:	0800cd45 	.word	0x0800cd45
 800cc84:	0800cd45 	.word	0x0800cd45
 800cc88:	0800cd45 	.word	0x0800cd45
 800cc8c:	0800cd45 	.word	0x0800cd45
 800cc90:	0800cd45 	.word	0x0800cd45
 800cc94:	0800cd45 	.word	0x0800cd45
 800cc98:	0800cd45 	.word	0x0800cd45
 800cc9c:	0800cd45 	.word	0x0800cd45
 800cca0:	0800cd45 	.word	0x0800cd45
 800cca4:	0800cd45 	.word	0x0800cd45
 800cca8:	0800cd45 	.word	0x0800cd45
 800ccac:	0800cd45 	.word	0x0800cd45
 800ccb0:	0800cd45 	.word	0x0800cd45
 800ccb4:	0800ccc5 	.word	0x0800ccc5
 800ccb8:	0800ccff 	.word	0x0800ccff
 800ccbc:	0800cd45 	.word	0x0800cd45
 800ccc0:	0800cd45 	.word	0x0800cd45
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	myLineCodeBuf[0] = pbuf[0];
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781a      	ldrb	r2, [r3, #0]
 800ccc8:	4b22      	ldr	r3, [pc, #136]	; (800cd54 <CDC_Control_FS+0x140>)
 800ccca:	701a      	strb	r2, [r3, #0]
    	myLineCodeBuf[1] = pbuf[1];
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	785a      	ldrb	r2, [r3, #1]
 800ccd0:	4b20      	ldr	r3, [pc, #128]	; (800cd54 <CDC_Control_FS+0x140>)
 800ccd2:	705a      	strb	r2, [r3, #1]
    	myLineCodeBuf[2] = pbuf[2];
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	789a      	ldrb	r2, [r3, #2]
 800ccd8:	4b1e      	ldr	r3, [pc, #120]	; (800cd54 <CDC_Control_FS+0x140>)
 800ccda:	709a      	strb	r2, [r3, #2]
    	myLineCodeBuf[3] = pbuf[3];
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	78da      	ldrb	r2, [r3, #3]
 800cce0:	4b1c      	ldr	r3, [pc, #112]	; (800cd54 <CDC_Control_FS+0x140>)
 800cce2:	70da      	strb	r2, [r3, #3]
    	myLineCodeBuf[4] = pbuf[4];
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	791a      	ldrb	r2, [r3, #4]
 800cce8:	4b1a      	ldr	r3, [pc, #104]	; (800cd54 <CDC_Control_FS+0x140>)
 800ccea:	711a      	strb	r2, [r3, #4]
    	myLineCodeBuf[5] = pbuf[5];
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	795a      	ldrb	r2, [r3, #5]
 800ccf0:	4b18      	ldr	r3, [pc, #96]	; (800cd54 <CDC_Control_FS+0x140>)
 800ccf2:	715a      	strb	r2, [r3, #5]
    	myLineCodeBuf[6] = pbuf[6];
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	799a      	ldrb	r2, [r3, #6]
 800ccf8:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <CDC_Control_FS+0x140>)
 800ccfa:	719a      	strb	r2, [r3, #6]
    break;
 800ccfc:	e023      	b.n	800cd46 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = myLineCodeBuf[0];
 800ccfe:	4b15      	ldr	r3, [pc, #84]	; (800cd54 <CDC_Control_FS+0x140>)
 800cd00:	781a      	ldrb	r2, [r3, #0]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = myLineCodeBuf[1];
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	4a12      	ldr	r2, [pc, #72]	; (800cd54 <CDC_Control_FS+0x140>)
 800cd0c:	7852      	ldrb	r2, [r2, #1]
 800cd0e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = myLineCodeBuf[2];
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	3302      	adds	r3, #2
 800cd14:	4a0f      	ldr	r2, [pc, #60]	; (800cd54 <CDC_Control_FS+0x140>)
 800cd16:	7892      	ldrb	r2, [r2, #2]
 800cd18:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = myLineCodeBuf[3];
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	3303      	adds	r3, #3
 800cd1e:	4a0d      	ldr	r2, [pc, #52]	; (800cd54 <CDC_Control_FS+0x140>)
 800cd20:	78d2      	ldrb	r2, [r2, #3]
 800cd22:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = myLineCodeBuf[4];
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	3304      	adds	r3, #4
 800cd28:	4a0a      	ldr	r2, [pc, #40]	; (800cd54 <CDC_Control_FS+0x140>)
 800cd2a:	7912      	ldrb	r2, [r2, #4]
 800cd2c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = myLineCodeBuf[5];
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	3305      	adds	r3, #5
 800cd32:	4a08      	ldr	r2, [pc, #32]	; (800cd54 <CDC_Control_FS+0x140>)
 800cd34:	7952      	ldrb	r2, [r2, #5]
 800cd36:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = myLineCodeBuf[6];
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	3306      	adds	r3, #6
 800cd3c:	4a05      	ldr	r2, [pc, #20]	; (800cd54 <CDC_Control_FS+0x140>)
 800cd3e:	7992      	ldrb	r2, [r2, #6]
 800cd40:	701a      	strb	r2, [r3, #0]
    break;
 800cd42:	e000      	b.n	800cd46 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd44:	bf00      	nop
  }

  return (USBD_OK);
 800cd46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bc80      	pop	{r7}
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	200012a0 	.word	0x200012a0

0800cd58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800cd62:	4b16      	ldr	r3, [pc, #88]	; (800cdbc <CDC_Receive_FS+0x64>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d007      	beq.n	800cd7a <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800cd6a:	4b14      	ldr	r3, [pc, #80]	; (800cdbc <CDC_Receive_FS+0x64>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	6812      	ldr	r2, [r2, #0]
 800cd72:	b292      	uxth	r2, r2
 800cd74:	4611      	mov	r1, r2
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	4798      	blx	r3

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd7a:	6879      	ldr	r1, [r7, #4]
 800cd7c:	4810      	ldr	r0, [pc, #64]	; (800cdc0 <CDC_Receive_FS+0x68>)
 800cd7e:	f7fe fdf6 	bl	800b96e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd82:	480f      	ldr	r0, [pc, #60]	; (800cdc0 <CDC_Receive_FS+0x68>)
 800cd84:	f7fe fe35 	bl	800b9f2 <USBD_CDC_ReceivePacket>

	memset (rxUSBData, '\0', 256);  // clear the buffer
 800cd88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	480d      	ldr	r0, [pc, #52]	; (800cdc4 <CDC_Receive_FS+0x6c>)
 800cd90:	f000 fc62 	bl	800d658 <memset>
	uint8_t len = (uint8_t)*Len;
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	73fb      	strb	r3, [r7, #15]
	memcpy(rxUSBData, Buf, len);  // copy the data to the buffer
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	4808      	ldr	r0, [pc, #32]	; (800cdc4 <CDC_Receive_FS+0x6c>)
 800cda2:	f000 fc99 	bl	800d6d8 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	2100      	movs	r1, #0
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fc53 	bl	800d658 <memset>

	return (USBD_OK);
 800cdb2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	200012a8 	.word	0x200012a8
 800cdc0:	20000ddc 	.word	0x20000ddc
 800cdc4:	20000dd1 	.word	0x20000dd1

0800cdc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cdd8:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <CDC_Transmit_FS+0x48>)
 800cdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e00b      	b.n	800ce06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cdee:	887b      	ldrh	r3, [r7, #2]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	6879      	ldr	r1, [r7, #4]
 800cdf4:	4806      	ldr	r0, [pc, #24]	; (800ce10 <CDC_Transmit_FS+0x48>)
 800cdf6:	f7fe fda1 	bl	800b93c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cdfa:	4805      	ldr	r0, [pc, #20]	; (800ce10 <CDC_Transmit_FS+0x48>)
 800cdfc:	f7fe fdca 	bl	800b994 <USBD_CDC_TransmitPacket>
 800ce00:	4603      	mov	r3, r0
 800ce02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	20000ddc 	.word	0x20000ddc

0800ce14 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800ce1c:	4a03      	ldr	r2, [pc, #12]	; (800ce2c <CDC_AttachRxData+0x18>)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6013      	str	r3, [r2, #0]
}
 800ce22:	bf00      	nop
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bc80      	pop	{r7}
 800ce2a:	4770      	bx	lr
 800ce2c:	200012a8 	.word	0x200012a8

0800ce30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4603      	mov	r3, r0
 800ce38:	6039      	str	r1, [r7, #0]
 800ce3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2212      	movs	r2, #18
 800ce40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce42:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bc80      	pop	{r7}
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	20000160 	.word	0x20000160

0800ce54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	6039      	str	r1, [r7, #0]
 800ce5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	2204      	movs	r2, #4
 800ce64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce66:	4b03      	ldr	r3, [pc, #12]	; (800ce74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bc80      	pop	{r7}
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	20000174 	.word	0x20000174

0800ce78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	6039      	str	r1, [r7, #0]
 800ce82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d105      	bne.n	800ce96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	4907      	ldr	r1, [pc, #28]	; (800ceac <USBD_FS_ProductStrDescriptor+0x34>)
 800ce8e:	4808      	ldr	r0, [pc, #32]	; (800ceb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce90:	f7ff fd96 	bl	800c9c0 <USBD_GetString>
 800ce94:	e004      	b.n	800cea0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	4904      	ldr	r1, [pc, #16]	; (800ceac <USBD_FS_ProductStrDescriptor+0x34>)
 800ce9a:	4805      	ldr	r0, [pc, #20]	; (800ceb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce9c:	f7ff fd90 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea0:	4b02      	ldr	r3, [pc, #8]	; (800ceac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	200012ac 	.word	0x200012ac
 800ceb0:	0800d888 	.word	0x0800d888

0800ceb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	6039      	str	r1, [r7, #0]
 800cebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	4904      	ldr	r1, [pc, #16]	; (800ced4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cec4:	4804      	ldr	r0, [pc, #16]	; (800ced8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cec6:	f7ff fd7b 	bl	800c9c0 <USBD_GetString>
  return USBD_StrDesc;
 800ceca:	4b02      	ldr	r3, [pc, #8]	; (800ced4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	200012ac 	.word	0x200012ac
 800ced8:	0800d8a0 	.word	0x0800d8a0

0800cedc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	6039      	str	r1, [r7, #0]
 800cee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	221a      	movs	r2, #26
 800ceec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ceee:	f000 f843 	bl	800cf78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cef2:	4b02      	ldr	r3, [pc, #8]	; (800cefc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	20000178 	.word	0x20000178

0800cf00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	6039      	str	r1, [r7, #0]
 800cf0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d105      	bne.n	800cf1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	4907      	ldr	r1, [pc, #28]	; (800cf34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf16:	4808      	ldr	r0, [pc, #32]	; (800cf38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf18:	f7ff fd52 	bl	800c9c0 <USBD_GetString>
 800cf1c:	e004      	b.n	800cf28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf1e:	683a      	ldr	r2, [r7, #0]
 800cf20:	4904      	ldr	r1, [pc, #16]	; (800cf34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf22:	4805      	ldr	r0, [pc, #20]	; (800cf38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf24:	f7ff fd4c 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	200012ac 	.word	0x200012ac
 800cf38:	0800d8b4 	.word	0x0800d8b4

0800cf3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	6039      	str	r1, [r7, #0]
 800cf46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf48:	79fb      	ldrb	r3, [r7, #7]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d105      	bne.n	800cf5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	4907      	ldr	r1, [pc, #28]	; (800cf70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf52:	4808      	ldr	r0, [pc, #32]	; (800cf74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf54:	f7ff fd34 	bl	800c9c0 <USBD_GetString>
 800cf58:	e004      	b.n	800cf64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	4904      	ldr	r1, [pc, #16]	; (800cf70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf5e:	4805      	ldr	r0, [pc, #20]	; (800cf74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf60:	f7ff fd2e 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	200012ac 	.word	0x200012ac
 800cf74:	0800d8c0 	.word	0x0800d8c0

0800cf78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf7e:	4b0f      	ldr	r3, [pc, #60]	; (800cfbc <Get_SerialNum+0x44>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf84:	4b0e      	ldr	r3, [pc, #56]	; (800cfc0 <Get_SerialNum+0x48>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf8a:	4b0e      	ldr	r3, [pc, #56]	; (800cfc4 <Get_SerialNum+0x4c>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4413      	add	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d009      	beq.n	800cfb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf9e:	2208      	movs	r2, #8
 800cfa0:	4909      	ldr	r1, [pc, #36]	; (800cfc8 <Get_SerialNum+0x50>)
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f000 f814 	bl	800cfd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cfa8:	2204      	movs	r2, #4
 800cfaa:	4908      	ldr	r1, [pc, #32]	; (800cfcc <Get_SerialNum+0x54>)
 800cfac:	68b8      	ldr	r0, [r7, #8]
 800cfae:	f000 f80f 	bl	800cfd0 <IntToUnicode>
  }
}
 800cfb2:	bf00      	nop
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	1ffff7e8 	.word	0x1ffff7e8
 800cfc0:	1ffff7ec 	.word	0x1ffff7ec
 800cfc4:	1ffff7f0 	.word	0x1ffff7f0
 800cfc8:	2000017a 	.word	0x2000017a
 800cfcc:	2000018a 	.word	0x2000018a

0800cfd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b087      	sub	sp, #28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	75fb      	strb	r3, [r7, #23]
 800cfe6:	e027      	b.n	800d038 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	0f1b      	lsrs	r3, r3, #28
 800cfec:	2b09      	cmp	r3, #9
 800cfee:	d80b      	bhi.n	800d008 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	0f1b      	lsrs	r3, r3, #28
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	7dfb      	ldrb	r3, [r7, #23]
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4619      	mov	r1, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	440b      	add	r3, r1
 800d000:	3230      	adds	r2, #48	; 0x30
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	701a      	strb	r2, [r3, #0]
 800d006:	e00a      	b.n	800d01e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	0f1b      	lsrs	r3, r3, #28
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	4619      	mov	r1, r3
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	440b      	add	r3, r1
 800d018:	3237      	adds	r2, #55	; 0x37
 800d01a:	b2d2      	uxtb	r2, r2
 800d01c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	011b      	lsls	r3, r3, #4
 800d022:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	3301      	adds	r3, #1
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	4413      	add	r3, r2
 800d02e:	2200      	movs	r2, #0
 800d030:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d032:	7dfb      	ldrb	r3, [r7, #23]
 800d034:	3301      	adds	r3, #1
 800d036:	75fb      	strb	r3, [r7, #23]
 800d038:	7dfa      	ldrb	r2, [r7, #23]
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d3d3      	bcc.n	800cfe8 <IntToUnicode+0x18>
  }
}
 800d040:	bf00      	nop
 800d042:	bf00      	nop
 800d044:	371c      	adds	r7, #28
 800d046:	46bd      	mov	sp, r7
 800d048:	bc80      	pop	{r7}
 800d04a:	4770      	bx	lr

0800d04c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a0d      	ldr	r2, [pc, #52]	; (800d090 <HAL_PCD_MspInit+0x44>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d113      	bne.n	800d086 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d05e:	4b0d      	ldr	r3, [pc, #52]	; (800d094 <HAL_PCD_MspInit+0x48>)
 800d060:	69db      	ldr	r3, [r3, #28]
 800d062:	4a0c      	ldr	r2, [pc, #48]	; (800d094 <HAL_PCD_MspInit+0x48>)
 800d064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d068:	61d3      	str	r3, [r2, #28]
 800d06a:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <HAL_PCD_MspInit+0x48>)
 800d06c:	69db      	ldr	r3, [r3, #28]
 800d06e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d072:	60fb      	str	r3, [r7, #12]
 800d074:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800d076:	2200      	movs	r2, #0
 800d078:	2100      	movs	r1, #0
 800d07a:	2014      	movs	r0, #20
 800d07c:	f7f6 fb37 	bl	80036ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d080:	2014      	movs	r0, #20
 800d082:	f7f6 fb50 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d086:	bf00      	nop
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	40005c00 	.word	0x40005c00
 800d094:	40021000 	.word	0x40021000

0800d098 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	f7fe fd55 	bl	800bb5e <USBD_LL_SetupStage>
}
 800d0b4:	bf00      	nop
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800d0ce:	78fa      	ldrb	r2, [r7, #3]
 800d0d0:	6879      	ldr	r1, [r7, #4]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	440b      	add	r3, r1
 800d0dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	78fb      	ldrb	r3, [r7, #3]
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	f7fe fd87 	bl	800bbf8 <USBD_LL_DataOutStage>
}
 800d0ea:	bf00      	nop
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800d104:	78fa      	ldrb	r2, [r7, #3]
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	4613      	mov	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	440b      	add	r3, r1
 800d112:	333c      	adds	r3, #60	; 0x3c
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	78fb      	ldrb	r3, [r7, #3]
 800d118:	4619      	mov	r1, r3
 800d11a:	f7fe fdde 	bl	800bcda <USBD_LL_DataInStage>
}
 800d11e:	bf00      	nop
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe feee 	bl	800bf16 <USBD_LL_SOF>
}
 800d13a:	bf00      	nop
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b084      	sub	sp, #16
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d14a:	2301      	movs	r3, #1
 800d14c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	2b02      	cmp	r3, #2
 800d154:	d001      	beq.n	800d15a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d156:	f7f5 fadb 	bl	8002710 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d160:	7bfa      	ldrb	r2, [r7, #15]
 800d162:	4611      	mov	r1, r2
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe fe9e 	bl	800bea6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe fe57 	bl	800be24 <USBD_LL_Reset>
}
 800d176:	bf00      	nop
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
	...

0800d180 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe fe98 	bl	800bec4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	699b      	ldr	r3, [r3, #24]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d005      	beq.n	800d1a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d19c:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <HAL_PCD_SuspendCallback+0x30>)
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	4a03      	ldr	r2, [pc, #12]	; (800d1b0 <HAL_PCD_SuspendCallback+0x30>)
 800d1a2:	f043 0306 	orr.w	r3, r3, #6
 800d1a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1a8:	bf00      	nop
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	e000ed00 	.word	0xe000ed00

0800d1b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fe92 	bl	800beec <USBD_LL_Resume>
}
 800d1c8:	bf00      	nop
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d1d8:	4a28      	ldr	r2, [pc, #160]	; (800d27c <USBD_LL_Init+0xac>)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a26      	ldr	r2, [pc, #152]	; (800d27c <USBD_LL_Init+0xac>)
 800d1e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d1e8:	4b24      	ldr	r3, [pc, #144]	; (800d27c <USBD_LL_Init+0xac>)
 800d1ea:	4a25      	ldr	r2, [pc, #148]	; (800d280 <USBD_LL_Init+0xb0>)
 800d1ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d1ee:	4b23      	ldr	r3, [pc, #140]	; (800d27c <USBD_LL_Init+0xac>)
 800d1f0:	2208      	movs	r2, #8
 800d1f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d1f4:	4b21      	ldr	r3, [pc, #132]	; (800d27c <USBD_LL_Init+0xac>)
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d1fa:	4b20      	ldr	r3, [pc, #128]	; (800d27c <USBD_LL_Init+0xac>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d200:	4b1e      	ldr	r3, [pc, #120]	; (800d27c <USBD_LL_Init+0xac>)
 800d202:	2200      	movs	r2, #0
 800d204:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d206:	4b1d      	ldr	r3, [pc, #116]	; (800d27c <USBD_LL_Init+0xac>)
 800d208:	2200      	movs	r2, #0
 800d20a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d20c:	481b      	ldr	r0, [pc, #108]	; (800d27c <USBD_LL_Init+0xac>)
 800d20e:	f7f7 ff54 	bl	80050ba <HAL_PCD_Init>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d218:	f7f5 fa7a 	bl	8002710 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d222:	2318      	movs	r3, #24
 800d224:	2200      	movs	r2, #0
 800d226:	2100      	movs	r1, #0
 800d228:	f7f9 fc73 	bl	8006b12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d232:	2358      	movs	r3, #88	; 0x58
 800d234:	2200      	movs	r2, #0
 800d236:	2180      	movs	r1, #128	; 0x80
 800d238:	f7f9 fc6b 	bl	8006b12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d242:	23c0      	movs	r3, #192	; 0xc0
 800d244:	2200      	movs	r2, #0
 800d246:	2181      	movs	r1, #129	; 0x81
 800d248:	f7f9 fc63 	bl	8006b12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d252:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d256:	2200      	movs	r2, #0
 800d258:	2101      	movs	r1, #1
 800d25a:	f7f9 fc5a 	bl	8006b12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d264:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d268:	2200      	movs	r2, #0
 800d26a:	2182      	movs	r1, #130	; 0x82
 800d26c:	f7f9 fc51 	bl	8006b12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	200014ac 	.word	0x200014ac
 800d280:	40005c00 	.word	0x40005c00

0800d284 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f8 f80c 	bl	80052b8 <HAL_PCD_Start>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 f94e 	bl	800d548 <USBD_Get_USB_Status>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b084      	sub	sp, #16
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	4608      	mov	r0, r1
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	70fb      	strb	r3, [r7, #3]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	70bb      	strb	r3, [r7, #2]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2e2:	78bb      	ldrb	r3, [r7, #2]
 800d2e4:	883a      	ldrh	r2, [r7, #0]
 800d2e6:	78f9      	ldrb	r1, [r7, #3]
 800d2e8:	f7f8 f961 	bl	80055ae <HAL_PCD_EP_Open>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 f928 	bl	800d548 <USBD_Get_USB_Status>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d320:	78fa      	ldrb	r2, [r7, #3]
 800d322:	4611      	mov	r1, r2
 800d324:	4618      	mov	r0, r3
 800d326:	f7f8 f99f 	bl	8005668 <HAL_PCD_EP_Close>
 800d32a:	4603      	mov	r3, r0
 800d32c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
 800d330:	4618      	mov	r0, r3
 800d332:	f000 f909 	bl	800d548 <USBD_Get_USB_Status>
 800d336:	4603      	mov	r3, r0
 800d338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d35e:	78fa      	ldrb	r2, [r7, #3]
 800d360:	4611      	mov	r1, r2
 800d362:	4618      	mov	r0, r3
 800d364:	f7f8 fa47 	bl	80057f6 <HAL_PCD_EP_SetStall>
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f8ea 	bl	800d548 <USBD_Get_USB_Status>
 800d374:	4603      	mov	r3, r0
 800d376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d378:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b084      	sub	sp, #16
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	460b      	mov	r3, r1
 800d38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d39c:	78fa      	ldrb	r2, [r7, #3]
 800d39e:	4611      	mov	r1, r2
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7f8 fa88 	bl	80058b6 <HAL_PCD_EP_ClrStall>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 f8cb 	bl	800d548 <USBD_Get_USB_Status>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	da0c      	bge.n	800d3f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e2:	68f9      	ldr	r1, [r7, #12]
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	4413      	add	r3, r2
 800d3ec:	00db      	lsls	r3, r3, #3
 800d3ee:	440b      	add	r3, r1
 800d3f0:	3302      	adds	r3, #2
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	e00b      	b.n	800d40e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3f6:	78fb      	ldrb	r3, [r7, #3]
 800d3f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3fc:	68f9      	ldr	r1, [r7, #12]
 800d3fe:	4613      	mov	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	440b      	add	r3, r1
 800d408:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d40c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	bc80      	pop	{r7}
 800d416:	4770      	bx	lr

0800d418 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d432:	78fa      	ldrb	r2, [r7, #3]
 800d434:	4611      	mov	r1, r2
 800d436:	4618      	mov	r0, r3
 800d438:	f7f8 f894 	bl	8005564 <HAL_PCD_SetAddress>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f880 	bl	800d548 <USBD_Get_USB_Status>
 800d448:	4603      	mov	r3, r0
 800d44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b086      	sub	sp, #24
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	461a      	mov	r2, r3
 800d462:	460b      	mov	r3, r1
 800d464:	72fb      	strb	r3, [r7, #11]
 800d466:	4613      	mov	r3, r2
 800d468:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d46a:	2300      	movs	r3, #0
 800d46c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d478:	893b      	ldrh	r3, [r7, #8]
 800d47a:	7af9      	ldrb	r1, [r7, #11]
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	f7f8 f983 	bl	8005788 <HAL_PCD_EP_Transmit>
 800d482:	4603      	mov	r3, r0
 800d484:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	4618      	mov	r0, r3
 800d48a:	f000 f85d 	bl	800d548 <USBD_Get_USB_Status>
 800d48e:	4603      	mov	r3, r0
 800d490:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d492:	7dbb      	ldrb	r3, [r7, #22]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	607a      	str	r2, [r7, #4]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	72fb      	strb	r3, [r7, #11]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d4be:	893b      	ldrh	r3, [r7, #8]
 800d4c0:	7af9      	ldrb	r1, [r7, #11]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	f7f8 f918 	bl	80056f8 <HAL_PCD_EP_Receive>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f000 f83a 	bl	800d548 <USBD_Get_USB_Status>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b082      	sub	sp, #8
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4f4:	78fa      	ldrb	r2, [r7, #3]
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f8 f92e 	bl	800575a <HAL_PCD_EP_GetRxCount>
 800d4fe:	4603      	mov	r3, r0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d510:	4b02      	ldr	r3, [pc, #8]	; (800d51c <USBD_static_malloc+0x14>)
}
 800d512:	4618      	mov	r0, r3
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	bc80      	pop	{r7}
 800d51a:	4770      	bx	lr
 800d51c:	2000179c 	.word	0x2000179c

0800d520 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]

}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bc80      	pop	{r7}
 800d530:	4770      	bx	lr

0800d532 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d532:	b480      	push	{r7}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	460b      	mov	r3, r1
 800d53c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d53e:	bf00      	nop
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	bc80      	pop	{r7}
 800d546:	4770      	bx	lr

0800d548 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d817      	bhi.n	800d58c <USBD_Get_USB_Status+0x44>
 800d55c:	a201      	add	r2, pc, #4	; (adr r2, 800d564 <USBD_Get_USB_Status+0x1c>)
 800d55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d562:	bf00      	nop
 800d564:	0800d575 	.word	0x0800d575
 800d568:	0800d57b 	.word	0x0800d57b
 800d56c:	0800d581 	.word	0x0800d581
 800d570:	0800d587 	.word	0x0800d587
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]
    break;
 800d578:	e00b      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d57a:	2302      	movs	r3, #2
 800d57c:	73fb      	strb	r3, [r7, #15]
    break;
 800d57e:	e008      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d580:	2301      	movs	r3, #1
 800d582:	73fb      	strb	r3, [r7, #15]
    break;
 800d584:	e005      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d586:	2302      	movs	r3, #2
 800d588:	73fb      	strb	r3, [r7, #15]
    break;
 800d58a:	e002      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d58c:	2302      	movs	r3, #2
 800d58e:	73fb      	strb	r3, [r7, #15]
    break;
 800d590:	bf00      	nop
  }
  return usb_status;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	bc80      	pop	{r7}
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop

0800d5a0 <__itoa>:
 800d5a0:	1e93      	subs	r3, r2, #2
 800d5a2:	2b22      	cmp	r3, #34	; 0x22
 800d5a4:	b510      	push	{r4, lr}
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	d904      	bls.n	800d5b4 <__itoa+0x14>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	461c      	mov	r4, r3
 800d5ae:	700b      	strb	r3, [r1, #0]
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	bd10      	pop	{r4, pc}
 800d5b4:	2a0a      	cmp	r2, #10
 800d5b6:	d109      	bne.n	800d5cc <__itoa+0x2c>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	da07      	bge.n	800d5cc <__itoa+0x2c>
 800d5bc:	232d      	movs	r3, #45	; 0x2d
 800d5be:	700b      	strb	r3, [r1, #0]
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	4240      	negs	r0, r0
 800d5c4:	4421      	add	r1, r4
 800d5c6:	f000 f805 	bl	800d5d4 <__utoa>
 800d5ca:	e7f1      	b.n	800d5b0 <__itoa+0x10>
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	e7f9      	b.n	800d5c4 <__itoa+0x24>

0800d5d0 <itoa>:
 800d5d0:	f7ff bfe6 	b.w	800d5a0 <__itoa>

0800d5d4 <__utoa>:
 800d5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5d6:	b08b      	sub	sp, #44	; 0x2c
 800d5d8:	4605      	mov	r5, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	466e      	mov	r6, sp
 800d5de:	4c1d      	ldr	r4, [pc, #116]	; (800d654 <__utoa+0x80>)
 800d5e0:	f104 0c20 	add.w	ip, r4, #32
 800d5e4:	4637      	mov	r7, r6
 800d5e6:	6820      	ldr	r0, [r4, #0]
 800d5e8:	6861      	ldr	r1, [r4, #4]
 800d5ea:	3408      	adds	r4, #8
 800d5ec:	c703      	stmia	r7!, {r0, r1}
 800d5ee:	4564      	cmp	r4, ip
 800d5f0:	463e      	mov	r6, r7
 800d5f2:	d1f7      	bne.n	800d5e4 <__utoa+0x10>
 800d5f4:	7921      	ldrb	r1, [r4, #4]
 800d5f6:	6820      	ldr	r0, [r4, #0]
 800d5f8:	7139      	strb	r1, [r7, #4]
 800d5fa:	1e91      	subs	r1, r2, #2
 800d5fc:	2922      	cmp	r1, #34	; 0x22
 800d5fe:	6038      	str	r0, [r7, #0]
 800d600:	f04f 0100 	mov.w	r1, #0
 800d604:	d904      	bls.n	800d610 <__utoa+0x3c>
 800d606:	7019      	strb	r1, [r3, #0]
 800d608:	460b      	mov	r3, r1
 800d60a:	4618      	mov	r0, r3
 800d60c:	b00b      	add	sp, #44	; 0x2c
 800d60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d610:	1e58      	subs	r0, r3, #1
 800d612:	4684      	mov	ip, r0
 800d614:	fbb5 f7f2 	udiv	r7, r5, r2
 800d618:	fb02 5617 	mls	r6, r2, r7, r5
 800d61c:	3628      	adds	r6, #40	; 0x28
 800d61e:	446e      	add	r6, sp
 800d620:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d624:	460c      	mov	r4, r1
 800d626:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d62a:	462e      	mov	r6, r5
 800d62c:	42b2      	cmp	r2, r6
 800d62e:	463d      	mov	r5, r7
 800d630:	f101 0101 	add.w	r1, r1, #1
 800d634:	d9ee      	bls.n	800d614 <__utoa+0x40>
 800d636:	2200      	movs	r2, #0
 800d638:	545a      	strb	r2, [r3, r1]
 800d63a:	1919      	adds	r1, r3, r4
 800d63c:	1aa5      	subs	r5, r4, r2
 800d63e:	42aa      	cmp	r2, r5
 800d640:	dae3      	bge.n	800d60a <__utoa+0x36>
 800d642:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d646:	780e      	ldrb	r6, [r1, #0]
 800d648:	3201      	adds	r2, #1
 800d64a:	7006      	strb	r6, [r0, #0]
 800d64c:	f801 5901 	strb.w	r5, [r1], #-1
 800d650:	e7f4      	b.n	800d63c <__utoa+0x68>
 800d652:	bf00      	nop
 800d654:	0800daca 	.word	0x0800daca

0800d658 <memset>:
 800d658:	4603      	mov	r3, r0
 800d65a:	4402      	add	r2, r0
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d100      	bne.n	800d662 <memset+0xa>
 800d660:	4770      	bx	lr
 800d662:	f803 1b01 	strb.w	r1, [r3], #1
 800d666:	e7f9      	b.n	800d65c <memset+0x4>

0800d668 <strncpy>:
 800d668:	4603      	mov	r3, r0
 800d66a:	b510      	push	{r4, lr}
 800d66c:	3901      	subs	r1, #1
 800d66e:	b132      	cbz	r2, 800d67e <strncpy+0x16>
 800d670:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d674:	3a01      	subs	r2, #1
 800d676:	f803 4b01 	strb.w	r4, [r3], #1
 800d67a:	2c00      	cmp	r4, #0
 800d67c:	d1f7      	bne.n	800d66e <strncpy+0x6>
 800d67e:	2100      	movs	r1, #0
 800d680:	441a      	add	r2, r3
 800d682:	4293      	cmp	r3, r2
 800d684:	d100      	bne.n	800d688 <strncpy+0x20>
 800d686:	bd10      	pop	{r4, pc}
 800d688:	f803 1b01 	strb.w	r1, [r3], #1
 800d68c:	e7f9      	b.n	800d682 <strncpy+0x1a>
	...

0800d690 <__libc_init_array>:
 800d690:	b570      	push	{r4, r5, r6, lr}
 800d692:	2600      	movs	r6, #0
 800d694:	4d0c      	ldr	r5, [pc, #48]	; (800d6c8 <__libc_init_array+0x38>)
 800d696:	4c0d      	ldr	r4, [pc, #52]	; (800d6cc <__libc_init_array+0x3c>)
 800d698:	1b64      	subs	r4, r4, r5
 800d69a:	10a4      	asrs	r4, r4, #2
 800d69c:	42a6      	cmp	r6, r4
 800d69e:	d109      	bne.n	800d6b4 <__libc_init_array+0x24>
 800d6a0:	f000 f828 	bl	800d6f4 <_init>
 800d6a4:	2600      	movs	r6, #0
 800d6a6:	4d0a      	ldr	r5, [pc, #40]	; (800d6d0 <__libc_init_array+0x40>)
 800d6a8:	4c0a      	ldr	r4, [pc, #40]	; (800d6d4 <__libc_init_array+0x44>)
 800d6aa:	1b64      	subs	r4, r4, r5
 800d6ac:	10a4      	asrs	r4, r4, #2
 800d6ae:	42a6      	cmp	r6, r4
 800d6b0:	d105      	bne.n	800d6be <__libc_init_array+0x2e>
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6b8:	4798      	blx	r3
 800d6ba:	3601      	adds	r6, #1
 800d6bc:	e7ee      	b.n	800d69c <__libc_init_array+0xc>
 800d6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6c2:	4798      	blx	r3
 800d6c4:	3601      	adds	r6, #1
 800d6c6:	e7f2      	b.n	800d6ae <__libc_init_array+0x1e>
 800d6c8:	0800daf0 	.word	0x0800daf0
 800d6cc:	0800daf0 	.word	0x0800daf0
 800d6d0:	0800daf0 	.word	0x0800daf0
 800d6d4:	0800daf4 	.word	0x0800daf4

0800d6d8 <memcpy>:
 800d6d8:	440a      	add	r2, r1
 800d6da:	4291      	cmp	r1, r2
 800d6dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6e0:	d100      	bne.n	800d6e4 <memcpy+0xc>
 800d6e2:	4770      	bx	lr
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ea:	4291      	cmp	r1, r2
 800d6ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6f0:	d1f9      	bne.n	800d6e6 <memcpy+0xe>
 800d6f2:	bd10      	pop	{r4, pc}

0800d6f4 <_init>:
 800d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f6:	bf00      	nop
 800d6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6fa:	bc08      	pop	{r3}
 800d6fc:	469e      	mov	lr, r3
 800d6fe:	4770      	bx	lr

0800d700 <_fini>:
 800d700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d702:	bf00      	nop
 800d704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d706:	bc08      	pop	{r3}
 800d708:	469e      	mov	lr, r3
 800d70a:	4770      	bx	lr
