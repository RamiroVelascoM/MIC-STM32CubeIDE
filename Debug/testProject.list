
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800ac30  0800ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca4  0800aca4  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800aca4  0800aca4  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aca4  0800aca4  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800acac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a8  20000188  0800ae34  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  0800ae34  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016eae  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a09  00000000  00000000  000370a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9d  00000000  00000000  0003bf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ac5  00000000  00000000  0003ce9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019359  00000000  00000000  00056962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094443  00000000  00000000  0006fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005428  00000000  00000000  00104100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00109528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ac18 	.word	0x0800ac18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	0800ac18 	.word	0x0800ac18

0800014c <inicializarBoton>:
#include <stdlib.h>

uint8_t PRESSED = 0;

void inicializarBoton(_sButton *button)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button->value = 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	701a      	strb	r2, [r3, #0]
	button->estado = UP;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	705a      	strb	r2, [r3, #1]
	button->event = EV_NONE;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2202      	movs	r2, #2
 8000164:	709a      	strb	r2, [r3, #2]
	button->timePush = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	605a      	str	r2, [r3, #4]
	button->timeDiff = 0;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	609a      	str	r2, [r3, #8]
}
 8000172:	bf00      	nop
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <checkMEF>:

void checkMEF(_sButton *button)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	switch (button->estado)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	785b      	ldrb	r3, [r3, #1]
 8000188:	2b03      	cmp	r3, #3
 800018a:	d847      	bhi.n	800021c <checkMEF+0xa0>
 800018c:	a201      	add	r2, pc, #4	; (adr r2, 8000194 <checkMEF+0x18>)
 800018e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000192:	bf00      	nop
 8000194:	080001a5 	.word	0x080001a5
 8000198:	080001d5 	.word	0x080001d5
 800019c:	080001b9 	.word	0x080001b9
 80001a0:	080001f5 	.word	0x080001f5
	{
		case UP:
			if (button->value == PRESSED)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	781a      	ldrb	r2, [r3, #0]
 80001a8:	4b22      	ldr	r3, [pc, #136]	; (8000234 <checkMEF+0xb8>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d139      	bne.n	8000224 <checkMEF+0xa8>
			{
				button->estado = FALLING;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2202      	movs	r2, #2
 80001b4:	705a      	strb	r2, [r3, #1]
			}
			break;
 80001b6:	e035      	b.n	8000224 <checkMEF+0xa8>
		case FALLING:
			if (button->value == PRESSED)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	781a      	ldrb	r2, [r3, #0]
 80001bc:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <checkMEF+0xb8>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d103      	bne.n	80001cc <checkMEF+0x50>
			{
				button->estado = DOWN;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2201      	movs	r2, #1
 80001c8:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = UP;
			}
			break;
 80001ca:	e02e      	b.n	800022a <checkMEF+0xae>
				button->estado = UP;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2200      	movs	r2, #0
 80001d0:	705a      	strb	r2, [r3, #1]
			break;
 80001d2:	e02a      	b.n	800022a <checkMEF+0xae>
		case DOWN:
			if (button->value == !PRESSED)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	461a      	mov	r2, r3
 80001da:	4b16      	ldr	r3, [pc, #88]	; (8000234 <checkMEF+0xb8>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	bf0c      	ite	eq
 80001e2:	2301      	moveq	r3, #1
 80001e4:	2300      	movne	r3, #0
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d11d      	bne.n	8000228 <checkMEF+0xac>
			{
				button->estado = RISING;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2203      	movs	r2, #3
 80001f0:	705a      	strb	r2, [r3, #1]
			}
			break;
 80001f2:	e019      	b.n	8000228 <checkMEF+0xac>
		case RISING:
			if (button->value == !PRESSED)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <checkMEF+0xb8>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	bf0c      	ite	eq
 8000202:	2301      	moveq	r3, #1
 8000204:	2300      	movne	r3, #0
 8000206:	b2db      	uxtb	r3, r3
 8000208:	429a      	cmp	r2, r3
 800020a:	d103      	bne.n	8000214 <checkMEF+0x98>
			{
				button->estado = UP;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2200      	movs	r2, #0
 8000210:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				button->estado = DOWN;
			}
			break;
 8000212:	e00a      	b.n	800022a <checkMEF+0xae>
				button->estado = DOWN;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2201      	movs	r2, #1
 8000218:	705a      	strb	r2, [r3, #1]
			break;
 800021a:	e006      	b.n	800022a <checkMEF+0xae>
		default:
			button->estado = UP;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	705a      	strb	r2, [r3, #1]
			break;
 8000222:	e002      	b.n	800022a <checkMEF+0xae>
			break;
 8000224:	bf00      	nop
 8000226:	e000      	b.n	800022a <checkMEF+0xae>
			break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	200001a4 	.word	0x200001a4

08000238 <HAL_TIM_PeriodElapsedCallback>:
void stateTask();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d113      	bne.n	8000272 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (time10ms)
 800024a:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d005      	beq.n	800025e <HAL_TIM_PeriodElapsedCallback+0x26>
			time10ms--;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800025c:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&bufADC[iwBufADC], 8);
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	4a08      	ldr	r2, [pc, #32]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000266:	4413      	add	r3, r2
 8000268:	2208      	movs	r2, #8
 800026a:	4619      	mov	r1, r3
 800026c:	4807      	ldr	r0, [pc, #28]	; (800028c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800026e:	f001 f9d9 	bl	8001624 <HAL_ADC_Start_DMA>
	}
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40012c00 	.word	0x40012c00
 8000280:	20000000 	.word	0x20000000
 8000284:	20000a44 	.word	0x20000a44
 8000288:	20000744 	.word	0x20000744
 800028c:	200001a8 	.word	0x200001a8

08000290 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	iwBufADC++;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <HAL_ADC_ConvCpltCallback+0x2c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80002a2:	701a      	strb	r2, [r3, #0]
	iwBufADC &= (SIZEBUFADC-1);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b03      	ldr	r3, [pc, #12]	; (80002bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80002b0:	701a      	strb	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000a44 	.word	0x20000a44

080002c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <HAL_UART_RxCpltCallback+0x3c>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d110      	bne.n	80002f4 <HAL_UART_RxCpltCallback+0x34>
		datosComSerie.indexWriteRx++;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HAL_UART_RxCpltCallback+0x40>)
 80002d4:	78db      	ldrb	r3, [r3, #3]
 80002d6:	3301      	adds	r3, #1
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <HAL_UART_RxCpltCallback+0x40>)
 80002dc:	70da      	strb	r2, [r3, #3]
		HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_UART_RxCpltCallback+0x40>)
 80002e0:	78db      	ldrb	r3, [r3, #3]
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <HAL_UART_RxCpltCallback+0x40>)
 80002e6:	4413      	add	r3, r2
 80002e8:	3307      	adds	r3, #7
 80002ea:	2201      	movs	r2, #1
 80002ec:	4619      	mov	r1, r3
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <HAL_UART_RxCpltCallback+0x44>)
 80002f0:	f005 fb02 	bl	80058f8 <HAL_UART_Receive_IT>
	}
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40013800 	.word	0x40013800
 8000300:	20000334 	.word	0x20000334
 8000304:	200002dc 	.word	0x200002dc

08000308 <USB_Receive>:

void USB_Receive(uint8_t *buf, uint16_t len){
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	807b      	strh	r3, [r7, #2]
	memcpy(&datosComUSB.bufferRx[datosComUSB.indexWriteRx], buf, len);
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <USB_Receive+0x40>)
 8000316:	78db      	ldrb	r3, [r3, #3]
 8000318:	461a      	mov	r2, r3
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <USB_Receive+0x40>)
 800031c:	4413      	add	r3, r2
 800031e:	3307      	adds	r3, #7
 8000320:	887a      	ldrh	r2, [r7, #2]
 8000322:	6879      	ldr	r1, [r7, #4]
 8000324:	4618      	mov	r0, r3
 8000326:	f00a fc69 	bl	800abfc <memcpy>
	datosComUSB.indexWriteRx += len;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <USB_Receive+0x40>)
 800032c:	78da      	ldrb	r2, [r3, #3]
 800032e:	887b      	ldrh	r3, [r7, #2]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4413      	add	r3, r2
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <USB_Receive+0x40>)
 8000338:	70da      	strb	r2, [r3, #3]
	datosComUSB.newData = true;
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <USB_Receive+0x40>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	2000053c 	.word	0x2000053c

0800034c <heartbeatTask>:

void heartbeatTask(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	if (myHB & mask)
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <heartbeatTask+0x4c>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <heartbeatTask+0x50>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4013      	ands	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	d006      	beq.n	800036c <heartbeatTask+0x20>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	// ON
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <heartbeatTask+0x54>)
 8000366:	f002 f992 	bl	800268e <HAL_GPIO_WritePin>
 800036a:	e005      	b.n	8000378 <heartbeatTask+0x2c>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);	// OFF
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <heartbeatTask+0x54>)
 8000374:	f002 f98b 	bl	800268e <HAL_GPIO_WritePin>

	mask >>= 1;									// Displace hbMask one place to the right
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <heartbeatTask+0x50>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	085b      	lsrs	r3, r3, #1
 800037e:	4a07      	ldr	r2, [pc, #28]	; (800039c <heartbeatTask+0x50>)
 8000380:	6013      	str	r3, [r2, #0]
	if (!mask)
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <heartbeatTask+0x50>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d103      	bne.n	8000392 <heartbeatTask+0x46>
		mask = 0x80000000;						// If there's a 0 in that place, changes the actual positions to compare the right way
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <heartbeatTask+0x50>)
 800038c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000390:	601a      	str	r2, [r3, #0]

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000008 	.word	0x20000008
 800039c:	20000004 	.word	0x20000004
 80003a0:	40011000 	.word	0x40011000

080003a4 <do10ms>:

void do10ms(){
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	// do something
	time10ms = 40;
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <do10ms+0x14>)
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	701a      	strb	r2, [r3, #0]
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000

080003bc <do40ms>:

void do40ms(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	if (!time40ms){
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <do40ms+0x44>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d112      	bne.n	80003ee <do40ms+0x32>
		myButton.value = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 80003c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <do40ms+0x48>)
 80003ce:	f002 f947 	bl	8002660 <HAL_GPIO_ReadPin>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <do40ms+0x4c>)
 80003d8:	701a      	strb	r2, [r3, #0]
		checkMEF(&myButton);
 80003da:	480b      	ldr	r0, [pc, #44]	; (8000408 <do40ms+0x4c>)
 80003dc:	f7ff fece 	bl	800017c <checkMEF>
		buttonTask(&myButton);
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <do40ms+0x4c>)
 80003e2:	f000 fa67 	bl	80008b4 <buttonTask>
		time40ms = 4;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <do40ms+0x44>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		time40ms--;
	}
}
 80003ec:	e005      	b.n	80003fa <do40ms+0x3e>
		time40ms--;
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <do40ms+0x44>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4b02      	ldr	r3, [pc, #8]	; (8000400 <do40ms+0x44>)
 80003f8:	701a      	strb	r2, [r3, #0]
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000001 	.word	0x20000001
 8000404:	40010c00 	.word	0x40010c00
 8000408:	20000324 	.word	0x20000324

0800040c <do100ms>:

void do100ms(){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	if (!time100ms){
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <do100ms+0x28>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d105      	bne.n	8000424 <do100ms+0x18>
		heartbeatTask();
 8000418:	f7ff ff98 	bl	800034c <heartbeatTask>
		time100ms = 10;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <do100ms+0x28>)
 800041e:	220a      	movs	r2, #10
 8000420:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		time100ms--;
	}
}
 8000422:	e005      	b.n	8000430 <do100ms+0x24>
		time100ms--;
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <do100ms+0x28>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b01      	ldr	r3, [pc, #4]	; (8000434 <do100ms+0x28>)
 800042e:	701a      	strb	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000002 	.word	0x20000002

08000438 <do500ms>:

void do500ms(){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	if (!time500ms){
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <do500ms+0x40>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <do500ms+0x30>
		datosComSerie.bufferRx[datosComSerie.indexWriteRx+NBYTES]=ALIVE;
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <do500ms+0x44>)
 8000446:	78db      	ldrb	r3, [r3, #3]
 8000448:	3304      	adds	r3, #4
 800044a:	4a0c      	ldr	r2, [pc, #48]	; (800047c <do500ms+0x44>)
 800044c:	4413      	add	r3, r2
 800044e:	22f0      	movs	r2, #240	; 0xf0
 8000450:	71da      	strb	r2, [r3, #7]
		datosComSerie.indexStart=datosComSerie.indexWriteRx;
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <do500ms+0x44>)
 8000454:	78da      	ldrb	r2, [r3, #3]
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <do500ms+0x44>)
 8000458:	705a      	strb	r2, [r3, #1]
		decodeData(&datosComSerie);
 800045a:	4808      	ldr	r0, [pc, #32]	; (800047c <do500ms+0x44>)
 800045c:	f000 f908 	bl	8000670 <decodeData>
		time500ms = 50;
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <do500ms+0x40>)
 8000462:	2232      	movs	r2, #50	; 0x32
 8000464:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		time500ms--;
	}
}
 8000466:	e005      	b.n	8000474 <do500ms+0x3c>
		time500ms--;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <do500ms+0x40>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	3b01      	subs	r3, #1
 800046e:	b2da      	uxtb	r2, r3
 8000470:	4b01      	ldr	r3, [pc, #4]	; (8000478 <do500ms+0x40>)
 8000472:	701a      	strb	r2, [r3, #0]
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000003 	.word	0x20000003
 800047c:	20000334 	.word	0x20000334

08000480 <decodeProtocol>:

void decodeProtocol(_sDato *datosCom){
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
    static uint8_t nBytes=0;
    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	78db      	ldrb	r3, [r3, #3]
 800048c:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800048e:	e0df      	b.n	8000650 <decodeProtocol+0x1d0>
    {
        switch (estadoProtocolo) {
 8000490:	4b75      	ldr	r3, [pc, #468]	; (8000668 <decodeProtocol+0x1e8>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b06      	cmp	r3, #6
 8000496:	f200 80d7 	bhi.w	8000648 <decodeProtocol+0x1c8>
 800049a:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <decodeProtocol+0x20>)
 800049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a0:	080004bd 	.word	0x080004bd
 80004a4:	080004e5 	.word	0x080004e5
 80004a8:	08000519 	.word	0x08000519
 80004ac:	0800054d 	.word	0x0800054d
 80004b0:	08000581 	.word	0x08000581
 80004b4:	080005a9 	.word	0x080005a9
 80004b8:	080005eb 	.word	0x080005eb
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	1c5a      	adds	r2, r3, #1
 80004c2:	b2d1      	uxtb	r1, r2
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7111      	strb	r1, [r2, #4]
 80004c8:	461a      	mov	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	79db      	ldrb	r3, [r3, #7]
 80004d0:	2b55      	cmp	r3, #85	; 0x55
 80004d2:	f040 80bd 	bne.w	8000650 <decodeProtocol+0x1d0>
                    estadoProtocolo=HEADER_1;
 80004d6:	4b64      	ldr	r3, [pc, #400]	; (8000668 <decodeProtocol+0x1e8>)
 80004d8:	2201      	movs	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80004e2:	e0b5      	b.n	8000650 <decodeProtocol+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	b2d1      	uxtb	r1, r2
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	7111      	strb	r1, [r2, #4]
 80004f0:	461a      	mov	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	79db      	ldrb	r3, [r3, #7]
 80004f8:	2b4e      	cmp	r3, #78	; 0x4e
 80004fa:	d103      	bne.n	8000504 <decodeProtocol+0x84>
                   estadoProtocolo=HEADER_2;
 80004fc:	4b5a      	ldr	r3, [pc, #360]	; (8000668 <decodeProtocol+0x1e8>)
 80004fe:	2202      	movs	r2, #2
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e0a5      	b.n	8000650 <decodeProtocol+0x1d0>
                else{
                    datosCom->indexReadRx--;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	3b01      	subs	r3, #1
 800050a:	b2da      	uxtb	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000510:	4b55      	ldr	r3, [pc, #340]	; (8000668 <decodeProtocol+0x1e8>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000516:	e09b      	b.n	8000650 <decodeProtocol+0x1d0>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	b2d1      	uxtb	r1, r2
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7111      	strb	r1, [r2, #4]
 8000524:	461a      	mov	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	79db      	ldrb	r3, [r3, #7]
 800052c:	2b45      	cmp	r3, #69	; 0x45
 800052e:	d103      	bne.n	8000538 <decodeProtocol+0xb8>
                    estadoProtocolo=HEADER_3;
 8000530:	4b4d      	ldr	r3, [pc, #308]	; (8000668 <decodeProtocol+0x1e8>)
 8000532:	2203      	movs	r2, #3
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e08b      	b.n	8000650 <decodeProtocol+0x1d0>
                else{
                    datosCom->indexReadRx--;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	791b      	ldrb	r3, [r3, #4]
 800053c:	3b01      	subs	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000544:	4b48      	ldr	r3, [pc, #288]	; (8000668 <decodeProtocol+0x1e8>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
                }
                break;
 800054a:	e081      	b.n	8000650 <decodeProtocol+0x1d0>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	b2d1      	uxtb	r1, r2
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	7111      	strb	r1, [r2, #4]
 8000558:	461a      	mov	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	79db      	ldrb	r3, [r3, #7]
 8000560:	2b52      	cmp	r3, #82	; 0x52
 8000562:	d103      	bne.n	800056c <decodeProtocol+0xec>
                estadoProtocolo=NBYTES;
 8000564:	4b40      	ldr	r3, [pc, #256]	; (8000668 <decodeProtocol+0x1e8>)
 8000566:	2204      	movs	r2, #4
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	e071      	b.n	8000650 <decodeProtocol+0x1d0>
            else{
                datosCom->indexReadRx--;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	3b01      	subs	r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	711a      	strb	r2, [r3, #4]
                estadoProtocolo=START;
 8000578:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <decodeProtocol+0x1e8>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800057e:	e067      	b.n	8000650 <decodeProtocol+0x1d0>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791a      	ldrb	r2, [r3, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	1c5a      	adds	r2, r3, #1
 800058e:	b2d1      	uxtb	r1, r2
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7111      	strb	r1, [r2, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	79da      	ldrb	r2, [r3, #7]
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <decodeProtocol+0x1ec>)
 800059e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80005a0:	4b31      	ldr	r3, [pc, #196]	; (8000668 <decodeProtocol+0x1e8>)
 80005a2:	2205      	movs	r2, #5
 80005a4:	701a      	strb	r2, [r3, #0]
                break;
 80005a6:	e053      	b.n	8000650 <decodeProtocol+0x1d0>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	b2d1      	uxtb	r1, r2
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7111      	strb	r1, [r2, #4]
 80005b4:	461a      	mov	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	79db      	ldrb	r3, [r3, #7]
 80005bc:	2b3a      	cmp	r3, #58	; 0x3a
 80005be:	d10a      	bne.n	80005d6 <decodeProtocol+0x156>
                   estadoProtocolo=PAYLOAD;
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <decodeProtocol+0x1e8>)
 80005c2:	2206      	movs	r2, #6
 80005c4:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <decodeProtocol+0x1ec>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	709a      	strb	r2, [r3, #2]
 80005d4:	e03c      	b.n	8000650 <decodeProtocol+0x1d0>
                }
                else{
                    datosCom->indexReadRx--;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	3b01      	subs	r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <decodeProtocol+0x1e8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
                }
                break;
 80005e8:	e032      	b.n	8000650 <decodeProtocol+0x1d0>
            case PAYLOAD:
                if (nBytes>1){
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <decodeProtocol+0x1ec>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d90f      	bls.n	8000612 <decodeProtocol+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	b2d1      	uxtb	r1, r2
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7111      	strb	r1, [r2, #4]
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	79da      	ldrb	r2, [r3, #7]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	4053      	eors	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <decodeProtocol+0x1ec>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <decodeProtocol+0x1ec>)
 800061c:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <decodeProtocol+0x1ec>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d114      	bne.n	8000650 <decodeProtocol+0x1d0>
                    estadoProtocolo=START;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <decodeProtocol+0x1e8>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	789a      	ldrb	r2, [r3, #2]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	440b      	add	r3, r1
 800063a:	79db      	ldrb	r3, [r3, #7]
 800063c:	429a      	cmp	r2, r3
 800063e:	d107      	bne.n	8000650 <decodeProtocol+0x1d0>
                        decodeData(datosCom);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f815 	bl	8000670 <decodeData>
                    }
                }
                break;
 8000646:	e003      	b.n	8000650 <decodeProtocol+0x1d0>
            default:
                estadoProtocolo=START;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <decodeProtocol+0x1e8>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
                break;
 800064e:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	7bfa      	ldrb	r2, [r7, #15]
 8000656:	429a      	cmp	r2, r3
 8000658:	f47f af1a 	bne.w	8000490 <decodeProtocol+0x10>
        }
    }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000330 	.word	0x20000330
 800066c:	20000a45 	.word	0x20000a45

08000670 <decodeData>:

void decodeData(_sDato *datosCom){
 8000670:	b480      	push	{r7}
 8000672:	b091      	sub	sp, #68	; 0x44
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    uint8_t auxBuffTx[50], indiceAux=0, checksum;
 8000678:	2300      	movs	r3, #0
 800067a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    auxBuffTx[indiceAux++]='U';
 800067e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000688:	3340      	adds	r3, #64	; 0x40
 800068a:	443b      	add	r3, r7
 800068c:	2255      	movs	r2, #85	; 0x55
 800068e:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='N';
 8000692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800069c:	3340      	adds	r3, #64	; 0x40
 800069e:	443b      	add	r3, r7
 80006a0:	224e      	movs	r2, #78	; 0x4e
 80006a2:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='E';
 80006a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80006b0:	3340      	adds	r3, #64	; 0x40
 80006b2:	443b      	add	r3, r7
 80006b4:	2245      	movs	r2, #69	; 0x45
 80006b6:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='R';
 80006ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80006c4:	3340      	adds	r3, #64	; 0x40
 80006c6:	443b      	add	r3, r7
 80006c8:	2252      	movs	r2, #82	; 0x52
 80006ca:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]=0;
 80006ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80006d8:	3340      	adds	r3, #64	; 0x40
 80006da:	443b      	add	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]=':';
 80006e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80006ec:	3340      	adds	r3, #64	; 0x40
 80006ee:	443b      	add	r3, r7
 80006f0:	223a      	movs	r2, #58	; 0x3a
 80006f2:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='9';
 80006f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000700:	3340      	adds	r3, #64	; 0x40
 8000702:	443b      	add	r3, r7
 8000704:	2239      	movs	r2, #57	; 0x39
 8000706:	f803 2c38 	strb.w	r2, [r3, #-56]
    auxBuffTx[indiceAux++]='7';
 800070a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000714:	3340      	adds	r3, #64	; 0x40
 8000716:	443b      	add	r3, r7
 8000718:	2237      	movs	r2, #55	; 0x37
 800071a:	f803 2c38 	strb.w	r2, [r3, #-56]

    switch (datosCom->bufferRx[datosCom->indexStart+NBYTES]) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	3304      	adds	r3, #4
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	79db      	ldrb	r3, [r3, #7]
 800072a:	2bf0      	cmp	r3, #240	; 0xf0
 800072c:	d002      	beq.n	8000734 <decodeData+0xc4>
 800072e:	2bf1      	cmp	r3, #241	; 0xf1
 8000730:	d017      	beq.n	8000762 <decodeData+0xf2>
 8000732:	e023      	b.n	800077c <decodeData+0x10c>
        case ALIVE:
            auxBuffTx[indiceAux++] = ALIVE;
 8000734:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800073e:	3340      	adds	r3, #64	; 0x40
 8000740:	443b      	add	r3, r7
 8000742:	22f0      	movs	r2, #240	; 0xf0
 8000744:	f803 2c38 	strb.w	r2, [r3, #-56]
            auxBuffTx[indiceAux++] = ACKNOWLEDGE;
 8000748:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000752:	3340      	adds	r3, #64	; 0x40
 8000754:	443b      	add	r3, r7
 8000756:	220d      	movs	r2, #13
 8000758:	f803 2c38 	strb.w	r2, [r3, #-56]
            auxBuffTx[NBYTES] = 0x05;
 800075c:	2305      	movs	r3, #5
 800075e:	733b      	strb	r3, [r7, #12]
            break;
 8000760:	e019      	b.n	8000796 <decodeData+0x126>
        case FIRMWARE:
        	auxBuffTx[indiceAux++] = FIRMWARE;
 8000762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800076c:	3340      	adds	r3, #64	; 0x40
 800076e:	443b      	add	r3, r7
 8000770:	22f1      	movs	r2, #241	; 0xf1
 8000772:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES] = 0x04;
 8000776:	2304      	movs	r3, #4
 8000778:	733b      	strb	r3, [r7, #12]
        	break;
 800077a:	e00c      	b.n	8000796 <decodeData+0x126>
        default:
			auxBuffTx[indiceAux++] = UNKNOWNCOMMAND;
 800077c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000786:	3340      	adds	r3, #64	; 0x40
 8000788:	443b      	add	r3, r7
 800078a:	22ff      	movs	r2, #255	; 0xff
 800078c:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES] = 0x04;
 8000790:	2304      	movs	r3, #4
 8000792:	733b      	strb	r3, [r7, #12]
			break;
 8000794:	bf00      	nop
	}
    checksum = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(uint8_t a=0; a<indiceAux; a++)
 800079c:	2300      	movs	r3, #0
 800079e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80007a2:	e021      	b.n	80007e8 <decodeData+0x178>
	{
		checksum ^= auxBuffTx[a];
 80007a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007a8:	3340      	adds	r3, #64	; 0x40
 80007aa:	443b      	add	r3, r7
 80007ac:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80007b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007b4:	4053      	eors	r3, r2
 80007b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		datosCom->bufferTx[datosCom->indexWriteTx++] = auxBuffTx[a];
 80007ba:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	795b      	ldrb	r3, [r3, #5]
 80007c2:	1c59      	adds	r1, r3, #1
 80007c4:	b2c8      	uxtb	r0, r1
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	7148      	strb	r0, [r1, #5]
 80007ca:	4619      	mov	r1, r3
 80007cc:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80007d0:	443b      	add	r3, r7
 80007d2:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	440b      	add	r3, r1
 80007da:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	for(uint8_t a=0; a<indiceAux; a++)
 80007de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007e2:	3301      	adds	r3, #1
 80007e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80007e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80007ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3d7      	bcc.n	80007a4 <decodeData+0x134>
	}
	datosCom->bufferTx[datosCom->indexWriteTx++] = checksum;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	795b      	ldrb	r3, [r3, #5]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	b2d1      	uxtb	r1, r2
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7151      	strb	r1, [r2, #5]
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800080a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

}
 800080e:	bf00      	nop
 8000810:	3744      	adds	r7, #68	; 0x44
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <communicationTask>:

void communicationTask(_sDato *datosCom, uint8_t source){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	if (datosCom->indexReadRx != datosCom->indexWriteRx)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791a      	ldrb	r2, [r3, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	78db      	ldrb	r3, [r3, #3]
 800082c:	429a      	cmp	r2, r3
 800082e:	d002      	beq.n	8000836 <communicationTask+0x1e>
		decodeProtocol(datosCom);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff fe25 	bl	8000480 <decodeProtocol>

	if (source == viaUART){
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11a      	bne.n	8000872 <communicationTask+0x5a>
		if (datosCom->indexReadTx != datosCom->indexWriteTx){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	799a      	ldrb	r2, [r3, #6]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	795b      	ldrb	r3, [r3, #5]
 8000844:	429a      	cmp	r2, r3
 8000846:	d028      	beq.n	800089a <communicationTask+0x82>
			if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <communicationTask+0x8c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	2b80      	cmp	r3, #128	; 0x80
 8000854:	d121      	bne.n	800089a <communicationTask+0x82>
				USART1->DR = datosCom->bufferTx[datosCom->indexReadTx++];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	799b      	ldrb	r3, [r3, #6]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	b2d1      	uxtb	r1, r2
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	7191      	strb	r1, [r2, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <communicationTask+0x90>)
 800086e:	605a      	str	r2, [r3, #4]
			if ((CDC_Transmit_FS(datosComUSB.bufferRx, datosComUSB.indexWriteRx)) == USBD_OK){
				datosCom->newData = false;
			}
		}
	}
}
 8000870:	e013      	b.n	800089a <communicationTask+0x82>
	else if (source == viaUSB){
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d110      	bne.n	800089a <communicationTask+0x82>
		if (datosCom->newData == true){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10c      	bne.n	800089a <communicationTask+0x82>
			if ((CDC_Transmit_FS(datosComUSB.bufferRx, datosComUSB.indexWriteRx)) == USBD_OK){
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <communicationTask+0x94>)
 8000882:	78db      	ldrb	r3, [r3, #3]
 8000884:	b29b      	uxth	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <communicationTask+0x98>)
 800088a:	f009 fd9f 	bl	800a3cc <CDC_Transmit_FS>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <communicationTask+0x82>
				datosCom->newData = false;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200002dc 	.word	0x200002dc
 80008a8:	40013800 	.word	0x40013800
 80008ac:	2000053c 	.word	0x2000053c
 80008b0:	20000543 	.word	0x20000543

080008b4 <buttonTask>:

void buttonTask(_sButton *button){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	switch (button->estado)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10a      	bne.n	80008da <buttonTask+0x26>
	{
		case DOWN:
			if (button->value == PRESSED)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d108      	bne.n	80008de <buttonTask+0x2a>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	// ON
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <buttonTask+0x34>)
 80008d4:	f001 fedb 	bl	800268e <HAL_GPIO_WritePin>
			break;
 80008d8:	e001      	b.n	80008de <buttonTask+0x2a>
		default:
			break;
 80008da:	bf00      	nop
 80008dc:	e000      	b.n	80008e0 <buttonTask+0x2c>
			break;
 80008de:	bf00      	nop
	}
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40011000 	.word	0x40011000

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fd5e 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f850 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 fa9e 	bl	8000e38 <MX_GPIO_Init>
  MX_DMA_Init();
 80008fc:	f000 fa7e 	bl	8000dfc <MX_DMA_Init>
  MX_TIM1_Init();
 8000900:	f000 f988 	bl	8000c14 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000904:	f000 fa50 	bl	8000da8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000908:	f009 fc3a 	bl	800a180 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800090c:	f000 f8a2 	bl	8000a54 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000910:	f000 f942 	bl	8000b98 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000914:	f000 f9ce 	bl	8000cb4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  inicializarBoton(&myButton);
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <main+0x88>)
 800091a:	f7ff fc17 	bl	800014c <inicializarBoton>
  HAL_TIM_Base_Start_IT(&htim1);
 800091e:	4816      	ldr	r0, [pc, #88]	; (8000978 <main+0x8c>)
 8000920:	f004 f952 	bl	8004bc8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <main+0x90>)
 8000926:	78db      	ldrb	r3, [r3, #3]
 8000928:	461a      	mov	r2, r3
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <main+0x90>)
 800092c:	4413      	add	r3, r2
 800092e:	3307      	adds	r3, #7
 8000930:	2201      	movs	r2, #1
 8000932:	4619      	mov	r1, r3
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <main+0x94>)
 8000936:	f004 ffdf 	bl	80058f8 <HAL_UART_Receive_IT>
  CDC_AttachRxData(USB_Receive);
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <main+0x98>)
 800093c:	f009 fd6c 	bl	800a418 <CDC_AttachRxData>
  // START CONVERSION -> CALL EVERY 250 US (fs = 4kHz)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000940:	2208      	movs	r2, #8
 8000942:	4911      	ldr	r1, [pc, #68]	; (8000988 <main+0x9c>)
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <main+0xa0>)
 8000946:	f000 fe6d 	bl	8001624 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!time10ms)						// Every 10 ms
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <main+0xa4>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d107      	bne.n	8000962 <main+0x76>
	  {
		  do10ms();
 8000952:	f7ff fd27 	bl	80003a4 <do10ms>
		  do40ms();
 8000956:	f7ff fd31 	bl	80003bc <do40ms>
		  do100ms();
 800095a:	f7ff fd57 	bl	800040c <do100ms>
		  do500ms();
 800095e:	f7ff fd6b 	bl	8000438 <do500ms>
	  }
	  communicationTask(&datosComSerie, viaUART);
 8000962:	2100      	movs	r1, #0
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <main+0x90>)
 8000966:	f7ff ff57 	bl	8000818 <communicationTask>
	  communicationTask(&datosComUSB, viaUSB);
 800096a:	2102      	movs	r1, #2
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <main+0xa8>)
 800096e:	f7ff ff53 	bl	8000818 <communicationTask>
	  if (!time10ms)						// Every 10 ms
 8000972:	e7ea      	b.n	800094a <main+0x5e>
 8000974:	20000324 	.word	0x20000324
 8000978:	2000024c 	.word	0x2000024c
 800097c:	20000334 	.word	0x20000334
 8000980:	200002dc 	.word	0x200002dc
 8000984:	08000309 	.word	0x08000309
 8000988:	20000744 	.word	0x20000744
 800098c:	200001a8 	.word	0x200001a8
 8000990:	20000000 	.word	0x20000000
 8000994:	2000053c 	.word	0x2000053c

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	; 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a2:	2228      	movs	r2, #40	; 0x28
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f00a f8fc 	bl	800aba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d6:	2301      	movs	r3, #1
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fbd4 	bl	800419c <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009fa:	f000 fac7 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fe40 	bl	80046a0 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a26:	f000 fab1 	bl	8000f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a32:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 ffbe 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a46:	f000 faa1 	bl	8000f8c <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	; 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a66:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <MX_ADC1_Init+0x140>)
 8000a68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a6a:	4b49      	ldr	r3, [pc, #292]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a78:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7e:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a80:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a92:	483f      	ldr	r0, [pc, #252]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000a94:	f000 fcee 	bl	8001474 <HAL_ADC_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a9e:	f000 fa75 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4837      	ldr	r0, [pc, #220]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000ab4:	f000 fea6 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fa65 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000ad0:	f000 fe98 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000ada:	f000 fa57 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4829      	ldr	r0, [pc, #164]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000aec:	f000 fe8a 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000af6:	f000 fa49 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000afa:	2303      	movs	r3, #3
 8000afc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4822      	ldr	r0, [pc, #136]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000b08:	f000 fe7c 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000b12:	f000 fa3b 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	481b      	ldr	r0, [pc, #108]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000b24:	f000 fe6e 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b2e:	f000 fa2d 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b32:	2305      	movs	r3, #5
 8000b34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b36:	2306      	movs	r3, #6
 8000b38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4814      	ldr	r0, [pc, #80]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000b40:	f000 fe60 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b4a:	f000 fa1f 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b52:	2307      	movs	r3, #7
 8000b54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000b5c:	f000 fe52 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000b66:	f000 fa11 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_ADC1_Init+0x13c>)
 8000b78:	f000 fe44 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000b82:	f000 fa03 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200001a8 	.word	0x200001a8
 8000b94:	40012400 	.word	0x40012400

08000b98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000baa:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <MX_ADC2_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bc2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bc6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bd6:	f000 fc4d 	bl	8001474 <HAL_ADC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f9d4 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_ADC2_Init+0x74>)
 8000bf6:	f000 fe05 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000c00:	f000 f9c4 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001d8 	.word	0x200001d8
 8000c10:	40012800 	.word	0x40012800

08000c14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c32:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <MX_TIM1_Init+0x9c>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c38:	2247      	movs	r2, #71	; 0x47
 8000c3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c44:	22fa      	movs	r2, #250	; 0xfa
 8000c46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5a:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c5c:	f003 ff64 	bl	8004b28 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000c66:	f000 f991 	bl	8000f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c78:	f004 fa12 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c82:	f000 f983 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c94:	f004 fd70 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c9e:	f000 f975 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000024c 	.word	0x2000024c
 8000cb0:	40012c00 	.word	0x40012c00

08000cb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cd6:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000cd8:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <MX_TIM4_Init+0xf0>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cfc:	4828      	ldr	r0, [pc, #160]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000cfe:	f003 ffb5 	bl	8004c6c <HAL_TIM_PWM_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d08:	f000 f940 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4821      	ldr	r0, [pc, #132]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000d1c:	f004 fd2c 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000d26:	f000 f931 	bl	8000f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2a:	2360      	movs	r3, #96	; 0x60
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4817      	ldr	r0, [pc, #92]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000d42:	f004 f8eb 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d4c:	f000 f91e 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2204      	movs	r2, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4812      	ldr	r0, [pc, #72]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000d58:	f004 f8e0 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d62:	f000 f913 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2208      	movs	r2, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000d6e:	f004 f8d5 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000d78:	f000 f908 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	220c      	movs	r2, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000d84:	f004 f8ca 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000d8e:	f000 f8fd 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM4_Init+0xec>)
 8000d94:	f000 fa08 	bl	80011a8 <HAL_TIM_MspPostInit>

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000294 	.word	0x20000294
 8000da4:	40000800 	.word	0x40000800

08000da8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_USART1_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000de0:	f004 fd3a 	bl	8005858 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f000 f8cf 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200002dc 	.word	0x200002dc
 8000df8:	40013800 	.word	0x40013800

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_DMA_Init+0x38>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <MX_DMA_Init+0x38>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_DMA_Init+0x38>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	200b      	movs	r0, #11
 8000e20:	f000 ffc1 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e24:	200b      	movs	r0, #11
 8000e26:	f000 ffda 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a49      	ldr	r2, [pc, #292]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b47      	ldr	r3, [pc, #284]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e64:	4b44      	ldr	r3, [pc, #272]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a43      	ldr	r2, [pc, #268]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e6a:	f043 0320 	orr.w	r3, r3, #32
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a3d      	ldr	r2, [pc, #244]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a37      	ldr	r2, [pc, #220]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb2:	4832      	ldr	r0, [pc, #200]	; (8000f7c <MX_GPIO_Init+0x144>)
 8000eb4:	f001 fbeb 	bl	800268e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHIP_ENABLE_ESP01_GPIO_Port, CHIP_ENABLE_ESP01_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ebe:	4830      	ldr	r0, [pc, #192]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000ec0:	f001 fbe5 	bl	800268e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4827      	ldr	r0, [pc, #156]	; (8000f7c <MX_GPIO_Init+0x144>)
 8000ede:	f001 fa3b 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ee2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4823      	ldr	r0, [pc, #140]	; (8000f84 <MX_GPIO_Init+0x14c>)
 8000ef8:	f001 fa2e 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8000efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <MX_GPIO_Init+0x14c>)
 8000f12:	f001 fa21 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHIP_ENABLE_ESP01_Pin */
  GPIO_InitStruct.Pin = CHIP_ENABLE_ESP01_Pin;
 8000f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHIP_ENABLE_ESP01_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000f30:	f001 fa12 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f34:	2330      	movs	r3, #48	; 0x30
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	480f      	ldr	r0, [pc, #60]	; (8000f84 <MX_GPIO_Init+0x14c>)
 8000f48:	f001 fa06 	bl	8002358 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_GPIO_Init+0x150>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <MX_GPIO_Init+0x150>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	40010000 	.word	0x40010000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000

08000ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a3c      	ldr	r2, [pc, #240]	; (8001108 <HAL_ADC_MspInit+0x10c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d14a      	bne.n	80010b2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_ADC_MspInit+0x110>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a3a      	ldr	r2, [pc, #232]	; (800110c <HAL_ADC_MspInit+0x110>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b38      	ldr	r3, [pc, #224]	; (800110c <HAL_ADC_MspInit+0x110>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_ADC_MspInit+0x110>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a34      	ldr	r2, [pc, #208]	; (800110c <HAL_ADC_MspInit+0x110>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <HAL_ADC_MspInit+0x110>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800104c:	23ff      	movs	r3, #255	; 0xff
 800104e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001050:	2303      	movs	r3, #3
 8001052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4619      	mov	r1, r3
 800105a:	482d      	ldr	r0, [pc, #180]	; (8001110 <HAL_ADC_MspInit+0x114>)
 800105c:	f001 f97c 	bl	8002358 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <HAL_ADC_MspInit+0x118>)
 8001062:	4a2d      	ldr	r2, [pc, #180]	; (8001118 <HAL_ADC_MspInit+0x11c>)
 8001064:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_ADC_MspInit+0x118>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_ADC_MspInit+0x118>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <HAL_ADC_MspInit+0x118>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_ADC_MspInit+0x118>)
 800107a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_ADC_MspInit+0x118>)
 8001082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001086:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_ADC_MspInit+0x118>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_ADC_MspInit+0x118>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001094:	481f      	ldr	r0, [pc, #124]	; (8001114 <HAL_ADC_MspInit+0x118>)
 8001096:	f000 febd 	bl	8001e14 <HAL_DMA_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010a0:	f7ff ff74 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_ADC_MspInit+0x118>)
 80010a8:	621a      	str	r2, [r3, #32]
 80010aa:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <HAL_ADC_MspInit+0x118>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010b0:	e026      	b.n	8001100 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_ADC_MspInit+0x120>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d121      	bne.n	8001100 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_ADC_MspInit+0x110>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <HAL_ADC_MspInit+0x110>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_ADC_MspInit+0x110>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_ADC_MspInit+0x110>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_ADC_MspInit+0x110>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_ADC_MspInit+0x110>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ec:	2304      	movs	r3, #4
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f0:	2303      	movs	r3, #3
 80010f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_ADC_MspInit+0x114>)
 80010fc:	f001 f92c 	bl	8002358 <HAL_GPIO_Init>
}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40012400 	.word	0x40012400
 800110c:	40021000 	.word	0x40021000
 8001110:	40010800 	.word	0x40010800
 8001114:	20000208 	.word	0x20000208
 8001118:	40020008 	.word	0x40020008
 800111c:	40012800 	.word	0x40012800

08001120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_TIM_Base_MspInit+0x44>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d113      	bne.n	800115a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_TIM_Base_MspInit+0x48>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <HAL_TIM_Base_MspInit+0x48>)
 8001138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_TIM_Base_MspInit+0x48>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2019      	movs	r0, #25
 8001150:	f000 fe29 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001154:	2019      	movs	r0, #25
 8001156:	f000 fe42 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40012c00 	.word	0x40012c00
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <HAL_TIM_PWM_MspInit+0x34>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10b      	bne.n	8001196 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_TIM_PWM_MspInit+0x38>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_TIM_PWM_MspInit+0x38>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_TIM_PWM_MspInit+0x38>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40000800 	.word	0x40000800
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_TIM_MspPostInit+0x5c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d118      	bne.n	80011fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_TIM_MspPostInit+0x60>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_TIM_MspPostInit+0x60>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_TIM_MspPostInit+0x60>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_TIM_MspPostInit+0x64>)
 80011f6:	f001 f8af 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40000800 	.word	0x40000800
 8001208:	40021000 	.word	0x40021000
 800120c:	40010c00 	.word	0x40010c00

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a20      	ldr	r2, [pc, #128]	; (80012ac <HAL_UART_MspInit+0x9c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d139      	bne.n	80012a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <HAL_UART_MspInit+0xa0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <HAL_UART_MspInit+0xa0>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <HAL_UART_MspInit+0xa0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_UART_MspInit+0xa0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0xa0>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_UART_MspInit+0xa0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001264:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4619      	mov	r1, r3
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_UART_MspInit+0xa4>)
 8001276:	f001 f86f 	bl	8002358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_UART_MspInit+0xa4>)
 8001290:	f001 f862 	bl	8002358 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2025      	movs	r0, #37	; 0x25
 800129a:	f000 fd84 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129e:	2025      	movs	r0, #37	; 0x25
 80012a0:	f000 fd9d 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f89d 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA1_Channel1_IRQHandler+0x10>)
 800130e:	f000 feef 	bl	80020f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000208 	.word	0x20000208

0800131c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001322:	f001 faf1 	bl	8002908 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20001120 	.word	0x20001120

08001330 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM1_UP_IRQHandler+0x10>)
 8001336:	f003 fce8 	bl	8004d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000024c 	.word	0x2000024c

08001344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <USART1_IRQHandler+0x10>)
 800134a:	f004 fafb 	bl	8005944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200002dc 	.word	0x200002dc

08001358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001364:	f7ff fff8 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800136a:	490c      	ldr	r1, [pc, #48]	; (800139c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001380:	4c09      	ldr	r4, [pc, #36]	; (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f009 fc11 	bl	800abb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f7ff faab 	bl	80008ec <main>
  bx lr
 8001396:	4770      	bx	lr
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80013a0:	0800acac 	.word	0x0800acac
  ldr r2, =_sbss
 80013a4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80013a8:	20001630 	.word	0x20001630

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_Init+0x28>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x28>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 fce5 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fde4 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fcfd 	bl	8001dfa <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 fcc5 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000000c 	.word	0x2000000c
 8001434:	20000014 	.word	0x20000014
 8001438:	20000010 	.word	0x20000010

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a03      	ldr	r2, [pc, #12]	; (800145c <HAL_IncTick+0x20>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000014 	.word	0x20000014
 800145c:	20000a48 	.word	0x20000a48

08001460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000a48 	.word	0x20000a48

08001474 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0be      	b.n	8001614 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fda2 	bl	8000ffc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 faf5 	bl	8001aa8 <ADC_ConversionStop_Disable>
 80014be:	4603      	mov	r3, r0
 80014c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 8099 	bne.w	8001602 <HAL_ADC_Init+0x18e>
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 8095 	bne.w	8001602 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014e0:	f023 0302 	bic.w	r3, r3, #2
 80014e4:	f043 0202 	orr.w	r2, r3, #2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7b1b      	ldrb	r3, [r3, #12]
 80014fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4313      	orrs	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800150c:	d003      	beq.n	8001516 <HAL_ADC_Init+0xa2>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <HAL_ADC_Init+0xa8>
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	e000      	b.n	800151e <HAL_ADC_Init+0xaa>
 800151c:	2300      	movs	r3, #0
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7d1b      	ldrb	r3, [r3, #20]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d119      	bne.n	8001560 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7b1b      	ldrb	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	3b01      	subs	r3, #1
 800153a:	035a      	lsls	r2, r3, #13
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	e00b      	b.n	8001560 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	f043 0220 	orr.w	r2, r3, #32
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_ADC_Init+0x1a8>)
 800157c:	4013      	ands	r3, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	430b      	orrs	r3, r1
 8001586:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001590:	d003      	beq.n	800159a <HAL_ADC_Init+0x126>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d104      	bne.n	80015a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	3b01      	subs	r3, #1
 80015a0:	051b      	lsls	r3, r3, #20
 80015a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_ADC_Init+0x1ac>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10b      	bne.n	80015e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	f023 0303 	bic.w	r3, r3, #3
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015de:	e018      	b.n	8001612 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f023 0312 	bic.w	r3, r3, #18
 80015e8:	f043 0210 	orr.w	r2, r3, #16
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001600:	e007      	b.n	8001612 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f043 0210 	orr.w	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	ffe1f7fd 	.word	0xffe1f7fd
 8001620:	ff1f0efe 	.word	0xff1f0efe

08001624 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a64      	ldr	r2, [pc, #400]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d004      	beq.n	8001648 <HAL_ADC_Start_DMA+0x24>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a63      	ldr	r2, [pc, #396]	; (80017d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d106      	bne.n	8001656 <HAL_ADC_Start_DMA+0x32>
 8001648:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 80b3 	bne.w	80017bc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_Start_DMA+0x40>
 8001660:	2302      	movs	r3, #2
 8001662:	e0ae      	b.n	80017c2 <HAL_ADC_Start_DMA+0x19e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f9c1 	bl	80019f4 <ADC_Enable>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f040 809a 	bne.w	80017b2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_Start_DMA+0x84>
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d115      	bne.n	80016d4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d026      	beq.n	8001710 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016d2:	e01d      	b.n	8001710 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a39      	ldr	r2, [pc, #228]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Start_DMA+0xd0>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_ADC_Start_DMA+0x1ac>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d10d      	bne.n	8001710 <HAL_ADC_Start_DMA+0xec>
 80016f4:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001708:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f023 0206 	bic.w	r2, r3, #6
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
 8001728:	e002      	b.n	8001730 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <HAL_ADC_Start_DMA+0x1b0>)
 800173e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_ADC_Start_DMA+0x1b4>)
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_ADC_Start_DMA+0x1b8>)
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0202 	mvn.w	r2, #2
 8001758:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001768:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a18      	ldr	r0, [r3, #32]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	334c      	adds	r3, #76	; 0x4c
 8001774:	4619      	mov	r1, r3
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f000 fba5 	bl	8001ec8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001788:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800178c:	d108      	bne.n	80017a0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800179c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800179e:	e00f      	b.n	80017c0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017ae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017b0:	e006      	b.n	80017c0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017ba:	e001      	b.n	80017c0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40012400 	.word	0x40012400
 80017d0:	40012800 	.word	0x40012800
 80017d4:	08001b2b 	.word	0x08001b2b
 80017d8:	08001ba7 	.word	0x08001ba7
 80017dc:	08001bc3 	.word	0x08001bc3

080017e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x20>
 8001820:	2302      	movs	r3, #2
 8001822:	e0dc      	b.n	80019de <HAL_ADC_ConfigChannel+0x1da>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b06      	cmp	r3, #6
 8001832:	d81c      	bhi.n	800186e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3b05      	subs	r3, #5
 8001846:	221f      	movs	r2, #31
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4019      	ands	r1, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b05      	subs	r3, #5
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
 800186c:	e03c      	b.n	80018e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d81c      	bhi.n	80018b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b23      	subs	r3, #35	; 0x23
 8001888:	221f      	movs	r2, #31
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	4019      	ands	r1, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b23      	subs	r3, #35	; 0x23
 80018a2:	fa00 f203 	lsl.w	r2, r0, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
 80018ae:	e01b      	b.n	80018e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	3b41      	subs	r3, #65	; 0x41
 80018c2:	221f      	movs	r2, #31
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4019      	ands	r1, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b41      	subs	r3, #65	; 0x41
 80018dc:	fa00 f203 	lsl.w	r2, r0, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d91c      	bls.n	800192a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68d9      	ldr	r1, [r3, #12]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	3b1e      	subs	r3, #30
 8001902:	2207      	movs	r2, #7
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	4019      	ands	r1, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6898      	ldr	r0, [r3, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	3b1e      	subs	r3, #30
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	e019      	b.n	800195e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6919      	ldr	r1, [r3, #16]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	2207      	movs	r2, #7
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	4019      	ands	r1, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6898      	ldr	r0, [r3, #8]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b10      	cmp	r3, #16
 8001964:	d003      	beq.n	800196e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800196a:	2b11      	cmp	r3, #17
 800196c:	d132      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d125      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d126      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001994:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d11a      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_ADC_ConfigChannel+0x1e8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	0c9a      	lsrs	r2, r3, #18
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x1b2>
 80019c2:	e007      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f043 0220 	orr.w	r2, r3, #32
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40012400 	.word	0x40012400
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d040      	beq.n	8001a94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <ADC_Enable+0xac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <ADC_Enable+0xb0>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0c9b      	lsrs	r3, r3, #18
 8001a2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a30:	e002      	b.n	8001a38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f9      	bne.n	8001a32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a3e:	f7ff fd0f 	bl	8001460 <HAL_GetTick>
 8001a42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a44:	e01f      	b.n	8001a86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a46:	f7ff fd0b 	bl	8001460 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d918      	bls.n	8001a86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d011      	beq.n	8001a86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e007      	b.n	8001a96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d1d8      	bne.n	8001a46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	431bde83 	.word	0x431bde83

08001aa8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d12e      	bne.n	8001b20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ad2:	f7ff fcc5 	bl	8001460 <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ad8:	e01b      	b.n	8001b12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ada:	f7ff fcc1 	bl	8001460 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d914      	bls.n	8001b12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10d      	bne.n	8001b12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f043 0210 	orr.w	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e007      	b.n	8001b22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d0dc      	beq.n	8001ada <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d127      	bne.n	8001b94 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b5e:	d115      	bne.n	8001b8c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d111      	bne.n	8001b8c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fb7f 	bl	8000290 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b92:	e004      	b.n	8001b9e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff fe13 	bl	80017e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	f043 0204 	orr.w	r2, r3, #4
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fe02 	bl	80017f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4906      	ldr	r1, [pc, #24]	; (8001c90 <__NVIC_EnableIRQ+0x34>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff90 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff2d 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff42 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff90 	bl	8001ce8 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5f 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff35 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e043      	b.n	8001eb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_DMA_Init+0xa8>)
 8001e32:	4413      	add	r3, r2
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <HAL_DMA_Init+0xac>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	009a      	lsls	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_DMA_Init+0xb0>)
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	bffdfff8 	.word	0xbffdfff8
 8001ec0:	cccccccd 	.word	0xcccccccd
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_DMA_Start_IT+0x20>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e04b      	b.n	8001f80 <HAL_DMA_Start_IT+0xb8>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d13a      	bne.n	8001f72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f9eb 	bl	80022fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 020e 	orr.w	r2, r2, #14
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00f      	b.n	8001f60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 020a 	orr.w	r2, r2, #10
 8001f5e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e005      	b.n	8001f7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e020      	b.n	8001ff4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 020e 	bic.w	r2, r2, #14
 8001fc0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d005      	beq.n	8002024 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2204      	movs	r2, #4
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e051      	b.n	80020c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 020e 	bic.w	r2, r2, #14
 8002032:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_DMA_Abort_IT+0xd4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d029      	beq.n	80020a2 <HAL_DMA_Abort_IT+0xa2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_DMA_Abort_IT+0xd8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d022      	beq.n	800209e <HAL_DMA_Abort_IT+0x9e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_DMA_Abort_IT+0xdc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01a      	beq.n	8002098 <HAL_DMA_Abort_IT+0x98>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_DMA_Abort_IT+0xe0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d012      	beq.n	8002092 <HAL_DMA_Abort_IT+0x92>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_DMA_Abort_IT+0xe4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00a      	beq.n	800208c <HAL_DMA_Abort_IT+0x8c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_DMA_Abort_IT+0xe8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d102      	bne.n	8002086 <HAL_DMA_Abort_IT+0x86>
 8002080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002084:	e00e      	b.n	80020a4 <HAL_DMA_Abort_IT+0xa4>
 8002086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800208a:	e00b      	b.n	80020a4 <HAL_DMA_Abort_IT+0xa4>
 800208c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002090:	e008      	b.n	80020a4 <HAL_DMA_Abort_IT+0xa4>
 8002092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002096:	e005      	b.n	80020a4 <HAL_DMA_Abort_IT+0xa4>
 8002098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209c:	e002      	b.n	80020a4 <HAL_DMA_Abort_IT+0xa4>
 800209e:	2310      	movs	r3, #16
 80020a0:	e000      	b.n	80020a4 <HAL_DMA_Abort_IT+0xa4>
 80020a2:	2301      	movs	r3, #1
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_DMA_Abort_IT+0xec>)
 80020a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
    } 
  }
  return status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40020008 	.word	0x40020008
 80020d8:	4002001c 	.word	0x4002001c
 80020dc:	40020030 	.word	0x40020030
 80020e0:	40020044 	.word	0x40020044
 80020e4:	40020058 	.word	0x40020058
 80020e8:	4002006c 	.word	0x4002006c
 80020ec:	40020000 	.word	0x40020000

080020f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	2204      	movs	r2, #4
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d04f      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xc8>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d04a      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a66      	ldr	r2, [pc, #408]	; (80022e0 <HAL_DMA_IRQHandler+0x1f0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d029      	beq.n	800219e <HAL_DMA_IRQHandler+0xae>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_DMA_IRQHandler+0x1f4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d022      	beq.n	800219a <HAL_DMA_IRQHandler+0xaa>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_DMA_IRQHandler+0x1f8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01a      	beq.n	8002194 <HAL_DMA_IRQHandler+0xa4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a62      	ldr	r2, [pc, #392]	; (80022ec <HAL_DMA_IRQHandler+0x1fc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d012      	beq.n	800218e <HAL_DMA_IRQHandler+0x9e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <HAL_DMA_IRQHandler+0x200>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00a      	beq.n	8002188 <HAL_DMA_IRQHandler+0x98>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_DMA_IRQHandler+0x204>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d102      	bne.n	8002182 <HAL_DMA_IRQHandler+0x92>
 800217c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002180:	e00e      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 8002182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002186:	e00b      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 8002188:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800218c:	e008      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 800218e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002192:	e005      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 8002194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002198:	e002      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	e000      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 800219e:	2304      	movs	r3, #4
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_DMA_IRQHandler+0x208>)
 80021a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8094 	beq.w	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021b6:	e08e      	b.n	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2202      	movs	r2, #2
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d056      	beq.n	8002276 <HAL_DMA_IRQHandler+0x186>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d051      	beq.n	8002276 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 020a 	bic.w	r2, r2, #10
 80021ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_DMA_IRQHandler+0x1f0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d029      	beq.n	8002256 <HAL_DMA_IRQHandler+0x166>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <HAL_DMA_IRQHandler+0x1f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0x162>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_DMA_IRQHandler+0x1f8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01a      	beq.n	800224c <HAL_DMA_IRQHandler+0x15c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_DMA_IRQHandler+0x1fc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d012      	beq.n	8002246 <HAL_DMA_IRQHandler+0x156>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_DMA_IRQHandler+0x200>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00a      	beq.n	8002240 <HAL_DMA_IRQHandler+0x150>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_DMA_IRQHandler+0x204>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d102      	bne.n	800223a <HAL_DMA_IRQHandler+0x14a>
 8002234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002238:	e00e      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	e00b      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002244:	e008      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224a:	e005      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	e002      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002252:	2320      	movs	r3, #32
 8002254:	e000      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002256:	2302      	movs	r3, #2
 8002258:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_DMA_IRQHandler+0x208>)
 800225a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d034      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002274:	e02f      	b.n	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2208      	movs	r2, #8
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d028      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x1e8>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d023      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 020e 	bic.w	r2, r2, #14
 800229e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
    }
  }
  return;
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
}
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40020008 	.word	0x40020008
 80022e4:	4002001c 	.word	0x4002001c
 80022e8:	40020030 	.word	0x40020030
 80022ec:	40020044 	.word	0x40020044
 80022f0:	40020058 	.word	0x40020058
 80022f4:	4002006c 	.word	0x4002006c
 80022f8:	40020000 	.word	0x40020000

080022fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b10      	cmp	r3, #16
 8002328:	d108      	bne.n	800233c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800233a:	e007      	b.n	800234c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b08b      	sub	sp, #44	; 0x2c
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	e169      	b.n	8002640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800236c:	2201      	movs	r2, #1
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 8158 	bne.w	800263a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a9a      	ldr	r2, [pc, #616]	; (80025f8 <HAL_GPIO_Init+0x2a0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d05e      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 8002394:	4a98      	ldr	r2, [pc, #608]	; (80025f8 <HAL_GPIO_Init+0x2a0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d875      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 800239a:	4a98      	ldr	r2, [pc, #608]	; (80025fc <HAL_GPIO_Init+0x2a4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d058      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023a0:	4a96      	ldr	r2, [pc, #600]	; (80025fc <HAL_GPIO_Init+0x2a4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d86f      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023a6:	4a96      	ldr	r2, [pc, #600]	; (8002600 <HAL_GPIO_Init+0x2a8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d052      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023ac:	4a94      	ldr	r2, [pc, #592]	; (8002600 <HAL_GPIO_Init+0x2a8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d869      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023b2:	4a94      	ldr	r2, [pc, #592]	; (8002604 <HAL_GPIO_Init+0x2ac>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d04c      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023b8:	4a92      	ldr	r2, [pc, #584]	; (8002604 <HAL_GPIO_Init+0x2ac>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d863      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023be:	4a92      	ldr	r2, [pc, #584]	; (8002608 <HAL_GPIO_Init+0x2b0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d046      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023c4:	4a90      	ldr	r2, [pc, #576]	; (8002608 <HAL_GPIO_Init+0x2b0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d85d      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023ca:	2b12      	cmp	r3, #18
 80023cc:	d82a      	bhi.n	8002424 <HAL_GPIO_Init+0xcc>
 80023ce:	2b12      	cmp	r3, #18
 80023d0:	d859      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <HAL_GPIO_Init+0x80>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	08002453 	.word	0x08002453
 80023dc:	0800242d 	.word	0x0800242d
 80023e0:	0800243f 	.word	0x0800243f
 80023e4:	08002481 	.word	0x08002481
 80023e8:	08002487 	.word	0x08002487
 80023ec:	08002487 	.word	0x08002487
 80023f0:	08002487 	.word	0x08002487
 80023f4:	08002487 	.word	0x08002487
 80023f8:	08002487 	.word	0x08002487
 80023fc:	08002487 	.word	0x08002487
 8002400:	08002487 	.word	0x08002487
 8002404:	08002487 	.word	0x08002487
 8002408:	08002487 	.word	0x08002487
 800240c:	08002487 	.word	0x08002487
 8002410:	08002487 	.word	0x08002487
 8002414:	08002487 	.word	0x08002487
 8002418:	08002487 	.word	0x08002487
 800241c:	08002435 	.word	0x08002435
 8002420:	08002449 	.word	0x08002449
 8002424:	4a79      	ldr	r2, [pc, #484]	; (800260c <HAL_GPIO_Init+0x2b4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800242a:	e02c      	b.n	8002486 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e029      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	3304      	adds	r3, #4
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e024      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	3308      	adds	r3, #8
 8002444:	623b      	str	r3, [r7, #32]
          break;
 8002446:	e01f      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	330c      	adds	r3, #12
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	e01a      	b.n	8002488 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800245a:	2304      	movs	r3, #4
 800245c:	623b      	str	r3, [r7, #32]
          break;
 800245e:	e013      	b.n	8002488 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002468:	2308      	movs	r3, #8
 800246a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	611a      	str	r2, [r3, #16]
          break;
 8002472:	e009      	b.n	8002488 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002474:	2308      	movs	r3, #8
 8002476:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	615a      	str	r2, [r3, #20]
          break;
 800247e:	e003      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x130>
          break;
 8002486:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2bff      	cmp	r3, #255	; 0xff
 800248c:	d801      	bhi.n	8002492 <HAL_GPIO_Init+0x13a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_Init+0x13e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2bff      	cmp	r3, #255	; 0xff
 800249c:	d802      	bhi.n	80024a4 <HAL_GPIO_Init+0x14c>
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x152>
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	3b08      	subs	r3, #8
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	210f      	movs	r1, #15
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	6a39      	ldr	r1, [r7, #32]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80b1 	beq.w	800263a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024d8:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_GPIO_Init+0x2b8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <HAL_GPIO_Init+0x2b8>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_GPIO_Init+0x2b8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024f0:	4a48      	ldr	r2, [pc, #288]	; (8002614 <HAL_GPIO_Init+0x2bc>)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a40      	ldr	r2, [pc, #256]	; (8002618 <HAL_GPIO_Init+0x2c0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_GPIO_Init+0x1ec>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_GPIO_Init+0x2c4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00d      	beq.n	8002540 <HAL_GPIO_Init+0x1e8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a3e      	ldr	r2, [pc, #248]	; (8002620 <HAL_GPIO_Init+0x2c8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d007      	beq.n	800253c <HAL_GPIO_Init+0x1e4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3d      	ldr	r2, [pc, #244]	; (8002624 <HAL_GPIO_Init+0x2cc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_GPIO_Init+0x1e0>
 8002534:	2303      	movs	r3, #3
 8002536:	e006      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002538:	2304      	movs	r3, #4
 800253a:	e004      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 800253c:	2302      	movs	r3, #2
 800253e:	e002      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002544:	2300      	movs	r3, #0
 8002546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002548:	f002 0203 	and.w	r2, r2, #3
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	4093      	lsls	r3, r2
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002556:	492f      	ldr	r1, [pc, #188]	; (8002614 <HAL_GPIO_Init+0x2bc>)
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3302      	adds	r3, #2
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	492c      	ldr	r1, [pc, #176]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	43db      	mvns	r3, r3
 8002586:	4928      	ldr	r1, [pc, #160]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002588:	4013      	ands	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4922      	ldr	r1, [pc, #136]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e006      	b.n	80025b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	491e      	ldr	r1, [pc, #120]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4918      	ldr	r1, [pc, #96]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4914      	ldr	r1, [pc, #80]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d021      	beq.n	800262c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	e021      	b.n	800263a <HAL_GPIO_Init+0x2e2>
 80025f6:	bf00      	nop
 80025f8:	10320000 	.word	0x10320000
 80025fc:	10310000 	.word	0x10310000
 8002600:	10220000 	.word	0x10220000
 8002604:	10210000 	.word	0x10210000
 8002608:	10120000 	.word	0x10120000
 800260c:	10110000 	.word	0x10110000
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000
 8002618:	40010800 	.word	0x40010800
 800261c:	40010c00 	.word	0x40010c00
 8002620:	40011000 	.word	0x40011000
 8002624:	40011400 	.word	0x40011400
 8002628:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_GPIO_Init+0x304>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	43db      	mvns	r3, r3
 8002634:	4909      	ldr	r1, [pc, #36]	; (800265c <HAL_GPIO_Init+0x304>)
 8002636:	4013      	ands	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	3301      	adds	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	f47f ae8e 	bne.w	800236c <HAL_GPIO_Init+0x14>
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	372c      	adds	r7, #44	; 0x2c
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40010400 	.word	0x40010400

08002660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e001      	b.n	8002682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	807b      	strh	r3, [r7, #2]
 800269a:	4613      	mov	r3, r2
 800269c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800269e:	787b      	ldrb	r3, [r7, #1]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a4:	887a      	ldrh	r2, [r7, #2]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026aa:	e003      	b.n	80026b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	041a      	lsls	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	611a      	str	r2, [r3, #16]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c0:	b08b      	sub	sp, #44	; 0x2c
 80026c2:	af06      	add	r7, sp, #24
 80026c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0f1      	b.n	80028b4 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f007 ffb3 	bl	800a650 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2203      	movs	r2, #3
 80026ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fe5c 	bl	80063b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	687e      	ldr	r6, [r7, #4]
 8002704:	466d      	mov	r5, sp
 8002706:	f106 0410 	add.w	r4, r6, #16
 800270a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800270c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	602b      	str	r3, [r5, #0]
 8002712:	1d33      	adds	r3, r6, #4
 8002714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	f003 fe26 	bl	8006368 <USB_CoreInit>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2202      	movs	r2, #2
 8002726:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0c2      	b.n	80028b4 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f003 fe57 	bl	80063e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	e040      	b.n	80027c2 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	3301      	adds	r3, #1
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	3303      	adds	r3, #3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3338      	adds	r3, #56	; 0x38
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	333c      	adds	r3, #60	; 0x3c
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3340      	adds	r3, #64	; 0x40
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3b9      	bcc.n	8002740 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e044      	b.n	800285c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3301      	adds	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d3b5      	bcc.n	80027d2 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	687e      	ldr	r6, [r7, #4]
 800286e:	466d      	mov	r5, sp
 8002870:	f106 0410 	add.w	r4, r6, #16
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	1d33      	adds	r3, r6, #4
 800287e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f003 fdbd 	bl	8006400 <USB_DevInit>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e00d      	b.n	80028b4 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f006 f83e 	bl	800892e <USB_DevDisconnect>

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_PCD_Start+0x16>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e016      	b.n	8002900 <HAL_PCD_Start+0x44>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fd52 	bl	8006388 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028e4:	2101      	movs	r1, #1
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f008 f925 	bl	800ab36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f006 f812 	bl	800891a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f006 f814 	bl	8008942 <USB_ReadInterrupts>
 800291a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fb1b 	bl	8002f62 <PCD_EP_ISR_Handler>

    return;
 800292c:	e119      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294a:	b292      	uxth	r2, r2
 800294c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f007 fef8 	bl	800a746 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002956:	2100      	movs	r1, #0
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f905 	bl	8002b68 <HAL_PCD_SetAddress>

    return;
 800295e:	e100      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800297c:	b292      	uxth	r2, r2
 800297e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002982:	e0ee      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a0:	b292      	uxth	r2, r2
 80029a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029a6:	e0dc      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d027      	beq.n	8002a02 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0204 	bic.w	r2, r2, #4
 80029c4:	b292      	uxth	r2, r2
 80029c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	b292      	uxth	r2, r2
 80029de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f007 fee8 	bl	800a7b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029fa:	b292      	uxth	r2, r2
 80029fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a00:	e0af      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8083 	beq.w	8002b14 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	e010      	b.n	8002a36 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
 8002a22:	8812      	ldrh	r2, [r2, #0]
 8002a24:	b292      	uxth	r2, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	3320      	adds	r3, #32
 8002a2a:	443b      	add	r3, r7
 8002a2c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	3301      	adds	r3, #1
 8002a34:	77fb      	strb	r3, [r7, #31]
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	2b07      	cmp	r3, #7
 8002a3a:	d9eb      	bls.n	8002a14 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	b292      	uxth	r2, r2
 8002a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a6c:	bf00      	nop
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f6      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	7ffa      	ldrb	r2, [r7, #31]
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	440a      	add	r2, r1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	3320      	adds	r3, #32
 8002ab0:	443b      	add	r3, r7
 8002ab2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ab6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ab8:	7ffb      	ldrb	r3, [r7, #31]
 8002aba:	3301      	adds	r3, #1
 8002abc:	77fb      	strb	r3, [r7, #31]
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	d9ec      	bls.n	8002a9e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0208 	orr.w	r2, r2, #8
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0204 	orr.w	r2, r2, #4
 8002b06:	b292      	uxth	r2, r2
 8002b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f007 fe39 	bl	800a784 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b12:	e026      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b30:	b292      	uxth	r2, r2
 8002b32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f007 fdf7 	bl	800a72a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b3c:	e011      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00c      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b60:	bf00      	nop
  }
}
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_SetAddress+0x1a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e013      	b.n	8002baa <HAL_PCD_SetAddress+0x42>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 feaa 	bl	80088f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	4608      	mov	r0, r1
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	70fb      	strb	r3, [r7, #3]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	803b      	strh	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da0e      	bge.n	8002bf6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	705a      	strb	r2, [r3, #1]
 8002bf4:	e00e      	b.n	8002c14 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 0207 	and.w	r2, r3, #7
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c20:	883a      	ldrh	r2, [r7, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	78ba      	ldrb	r2, [r7, #2]
 8002c2a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c2c:	78bb      	ldrb	r3, [r7, #2]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d102      	bne.n	8002c38 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_PCD_EP_Open+0x94>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e00e      	b.n	8002c64 <HAL_PCD_EP_Open+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fbf3 	bl	8006440 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da0e      	bge.n	8002c9e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	705a      	strb	r2, [r3, #1]
 8002c9c:	e00e      	b.n	8002cbc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	f003 0207 	and.w	r2, r3, #7
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_PCD_EP_Close+0x6a>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e00e      	b.n	8002cf4 <HAL_PCD_EP_Close+0x88>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 ff6b 	bl	8006bc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
 8002d0e:	f003 0207 	and.w	r2, r3, #7
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4413      	add	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 f922 	bl	8006f98 <USB_EPStartXfer>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 0207 	and.w	r2, r3, #7
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002d80:	681b      	ldr	r3, [r3, #0]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 f8d4 	bl	8006f98 <USB_EPStartXfer>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 0207 	and.w	r2, r3, #7
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d901      	bls.n	8002e18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e04c      	b.n	8002eb2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da0e      	bge.n	8002e3e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	705a      	strb	r2, [r3, #1]
 8002e3c:	e00c      	b.n	8002e58 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_EP_SetStall+0x7e>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e01c      	b.n	8002eb2 <HAL_PCD_EP_SetStall+0xb8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f005 fc37 	bl	80086fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f005 fd5c 	bl	8008960 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d901      	bls.n	8002ed8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e040      	b.n	8002f5a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da0e      	bge.n	8002efe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	705a      	strb	r2, [r3, #1]
 8002efc:	e00e      	b.n	8002f1c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 0207 	and.w	r2, r3, #7
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_EP_ClrStall+0x82>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e00e      	b.n	8002f5a <HAL_PCD_EP_ClrStall+0xa0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 fc25 	bl	800879a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b096      	sub	sp, #88	; 0x58
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f6a:	e3bf      	b.n	80036ec <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002f86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 8179 	bne.w	8003282 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d152      	bne.n	8003042 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	81fb      	strh	r3, [r7, #14]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3328      	adds	r3, #40	; 0x28
 8002fc4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ffe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003000:	2100      	movs	r1, #0
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f007 fb77 	bl	800a6f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 836b 	beq.w	80036ec <PCD_EP_ISR_Handler+0x78a>
 8003016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 8366 	bne.w	80036ec <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800302c:	b2da      	uxtb	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b292      	uxth	r2, r2
 8003034:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003040:	e354      	b.n	80036ec <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003048:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003054:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d034      	beq.n	80030ca <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	3306      	adds	r3, #6
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003098:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800309a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f005 fcae 	bl	8008a00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030b0:	4013      	ands	r3, r2
 80030b2:	823b      	strh	r3, [r7, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	8a3a      	ldrh	r2, [r7, #16]
 80030ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030be:	b292      	uxth	r2, r2
 80030c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f007 faea 	bl	800a69c <HAL_PCD_SetupStageCallback>
 80030c8:	e310      	b.n	80036ec <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f280 830c 	bge.w	80036ec <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030e0:	4013      	ands	r3, r2
 80030e2:	83fb      	strh	r3, [r7, #30]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	8bfa      	ldrh	r2, [r7, #30]
 80030ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ee:	b292      	uxth	r2, r2
 80030f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	3306      	adds	r3, #6
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800311a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800311e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <PCD_EP_ISR_Handler+0x1f8>
 8003126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003134:	6959      	ldr	r1, [r3, #20]
 8003136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003138:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800313a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800313e:	b29b      	uxth	r3, r3
 8003140:	f005 fc5e 	bl	8008a00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	441a      	add	r2, r3
 800314e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003150:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003152:	2100      	movs	r1, #0
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f007 fab3 	bl	800a6c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003164:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	2b00      	cmp	r3, #0
 800316e:	f040 82bd 	bne.w	80036ec <PCD_EP_ISR_Handler+0x78a>
 8003172:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003176:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800317a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800317e:	f000 82b5 	beq.w	80036ec <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4413      	add	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b3e      	cmp	r3, #62	; 0x3e
 80031b8:	d91d      	bls.n	80031f6 <PCD_EP_ISR_Handler+0x294>
 80031ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	647b      	str	r3, [r7, #68]	; 0x44
 80031c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <PCD_EP_ISR_Handler+0x272>
 80031ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d0:	3b01      	subs	r3, #1
 80031d2:	647b      	str	r3, [r7, #68]	; 0x44
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031dc:	b29b      	uxth	r3, r3
 80031de:	029b      	lsls	r3, r3, #10
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e026      	b.n	8003244 <PCD_EP_ISR_Handler+0x2e2>
 80031f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <PCD_EP_ISR_Handler+0x2b2>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800320c:	b29a      	uxth	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	e017      	b.n	8003244 <PCD_EP_ISR_Handler+0x2e2>
 8003214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	647b      	str	r3, [r7, #68]	; 0x44
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <PCD_EP_ISR_Handler+0x2cc>
 8003228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322a:	3301      	adds	r3, #1
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29a      	uxth	r2, r3
 8003234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003236:	b29b      	uxth	r3, r3
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	b29b      	uxth	r3, r3
 800323c:	4313      	orrs	r3, r2
 800323e:	b29a      	uxth	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003254:	827b      	strh	r3, [r7, #18]
 8003256:	8a7b      	ldrh	r3, [r7, #18]
 8003258:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800325c:	827b      	strh	r3, [r7, #18]
 800325e:	8a7b      	ldrh	r3, [r7, #18]
 8003260:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003264:	827b      	strh	r3, [r7, #18]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	8a7b      	ldrh	r3, [r7, #18]
 800326c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327c:	b29b      	uxth	r3, r3
 800327e:	8013      	strh	r3, [r2, #0]
 8003280:	e234      	b.n	80036ec <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003296:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800329a:	2b00      	cmp	r3, #0
 800329c:	f280 80fc 	bge.w	8003498 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032b6:	4013      	ands	r3, r2
 80032b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80032ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032d2:	b292      	uxth	r2, r2
 80032d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032d6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ee:	7b1b      	ldrb	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d125      	bne.n	8003340 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	3306      	adds	r3, #6
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8092 	beq.w	800344e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003330:	6959      	ldr	r1, [r3, #20]
 8003332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003334:	88da      	ldrh	r2, [r3, #6]
 8003336:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800333a:	f005 fb61 	bl	8008a00 <USB_ReadPMA>
 800333e:	e086      	b.n	800344e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003342:	78db      	ldrb	r3, [r3, #3]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d10a      	bne.n	800335e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003348:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800334c:	461a      	mov	r2, r3
 800334e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f9d9 	bl	8003708 <HAL_PCD_EP_DB_Receive>
 8003356:	4603      	mov	r3, r0
 8003358:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800335c:	e077      	b.n	800344e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003378:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800338e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800339e:	b29b      	uxth	r3, r3
 80033a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d024      	beq.n	8003406 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	3302      	adds	r3, #2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80033e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02e      	beq.n	800344e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f6:	6959      	ldr	r1, [r3, #20]
 80033f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fa:	891a      	ldrh	r2, [r3, #8]
 80033fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003400:	f005 fafe 	bl	8008a00 <USB_ReadPMA>
 8003404:	e023      	b.n	800344e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	3306      	adds	r3, #6
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003432:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	6959      	ldr	r1, [r3, #20]
 8003442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003444:	895a      	ldrh	r2, [r3, #10]
 8003446:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800344a:	f005 fad9 	bl	8008a00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800344e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003456:	441a      	add	r2, r3
 8003458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800345c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003464:	441a      	add	r2, r3
 8003466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003468:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <PCD_EP_ISR_Handler+0x51c>
 8003472:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	429a      	cmp	r2, r3
 800347c:	d206      	bcs.n	800348c <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800347e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f007 f91b 	bl	800a6c0 <HAL_PCD_DataOutStageCallback>
 800348a:	e005      	b.n	8003498 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003492:	4618      	mov	r0, r3
 8003494:	f003 fd80 	bl	8006f98 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003498:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8123 	beq.w	80036ec <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80034a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	441a      	add	r2, r3
 80034e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80034f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f8:	78db      	ldrb	r3, [r3, #3]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	f040 80a2 	bne.w	8003644 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003502:	2200      	movs	r2, #0
 8003504:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003508:	7b1b      	ldrb	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8093 	beq.w	8003636 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003510:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d046      	beq.n	80035aa <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800351c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d126      	bne.n	8003572 <PCD_EP_ISR_Handler+0x610>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	4413      	add	r3, r2
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	011a      	lsls	r2, r3, #4
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	4413      	add	r3, r2
 8003546:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003556:	b29a      	uxth	r2, r3
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	801a      	strh	r2, [r3, #0]
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356a:	b29a      	uxth	r2, r3
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	e061      	b.n	8003636 <PCD_EP_ISR_Handler+0x6d4>
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d15d      	bne.n	8003636 <PCD_EP_ISR_Handler+0x6d4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003588:	b29b      	uxth	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	4413      	add	r3, r2
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	011a      	lsls	r2, r3, #4
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	4413      	add	r3, r2
 800359c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	2200      	movs	r2, #0
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	e045      	b.n	8003636 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d126      	bne.n	8003606 <PCD_EP_ISR_Handler+0x6a4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	4413      	add	r3, r2
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
 80035d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	011a      	lsls	r2, r3, #4
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	4413      	add	r3, r2
 80035da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035fe:	b29a      	uxth	r2, r3
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	801a      	strh	r2, [r3, #0]
 8003604:	e017      	b.n	8003636 <PCD_EP_ISR_Handler+0x6d4>
 8003606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d113      	bne.n	8003636 <PCD_EP_ISR_Handler+0x6d4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003616:	b29b      	uxth	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361c:	4413      	add	r3, r2
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	011a      	lsls	r2, r3, #4
 8003626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003628:	4413      	add	r3, r2
 800362a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	2200      	movs	r2, #0
 8003634:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f007 f85a 	bl	800a6f6 <HAL_PCD_DataInStageCallback>
 8003642:	e053      	b.n	80036ec <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003644:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d146      	bne.n	80036de <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	3302      	adds	r3, #2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003678:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003684:	429a      	cmp	r2, r3
 8003686:	d907      	bls.n	8003698 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003694:	619a      	str	r2, [r3, #24]
 8003696:	e002      	b.n	800369e <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f007 f822 	bl	800a6f6 <HAL_PCD_DataInStageCallback>
 80036b2:	e01b      	b.n	80036ec <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036bc:	441a      	add	r2, r3
 80036be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80036c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036ca:	441a      	add	r2, r3
 80036cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 fc5e 	bl	8006f98 <USB_EPStartXfer>
 80036dc:	e006      	b.n	80036ec <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036e2:	461a      	mov	r2, r3
 80036e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f91b 	bl	8003922 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b21b      	sxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f6ff ac37 	blt.w	8002f6c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3758      	adds	r7, #88	; 0x58
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d07e      	beq.n	800381e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003728:	b29b      	uxth	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	3302      	adds	r3, #2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003748:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	8b7b      	ldrh	r3, [r7, #26]
 8003750:	429a      	cmp	r2, r3
 8003752:	d306      	bcc.n	8003762 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	8b7b      	ldrh	r3, [r7, #26]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	619a      	str	r2, [r3, #24]
 8003760:	e002      	b.n	8003768 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2200      	movs	r2, #0
 8003766:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d123      	bne.n	80037b8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	833b      	strh	r3, [r7, #24]
 800378c:	8b3b      	ldrh	r3, [r7, #24]
 800378e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003792:	833b      	strh	r3, [r7, #24]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	8b3b      	ldrh	r3, [r7, #24]
 80037a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01f      	beq.n	8003802 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037dc:	82fb      	strh	r3, [r7, #22]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	8afb      	ldrh	r3, [r7, #22]
 80037ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003802:	8b7b      	ldrh	r3, [r7, #26]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8087 	beq.w	8003918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6959      	ldr	r1, [r3, #20]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	891a      	ldrh	r2, [r3, #8]
 8003816:	8b7b      	ldrh	r3, [r7, #26]
 8003818:	f005 f8f2 	bl	8008a00 <USB_ReadPMA>
 800381c:	e07c      	b.n	8003918 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	3306      	adds	r3, #6
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003846:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	8b7b      	ldrh	r3, [r7, #26]
 800384e:	429a      	cmp	r2, r3
 8003850:	d306      	bcc.n	8003860 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	8b7b      	ldrh	r3, [r7, #26]
 8003858:	1ad2      	subs	r2, r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	e002      	b.n	8003866 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2200      	movs	r2, #0
 8003864:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d123      	bne.n	80038b6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003888:	83fb      	strh	r3, [r7, #30]
 800388a:	8bfb      	ldrh	r3, [r7, #30]
 800388c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003890:	83fb      	strh	r3, [r7, #30]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	441a      	add	r2, r3
 80038a0:	8bfb      	ldrh	r3, [r7, #30]
 80038a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11f      	bne.n	8003900 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038da:	83bb      	strh	r3, [r7, #28]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	441a      	add	r2, r3
 80038ea:	8bbb      	ldrh	r3, [r7, #28]
 80038ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	6959      	ldr	r1, [r3, #20]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	895a      	ldrh	r2, [r3, #10]
 8003912:	8b7b      	ldrh	r3, [r7, #26]
 8003914:	f005 f874 	bl	8008a00 <USB_ReadPMA>
    }
  }

  return count;
 8003918:	8b7b      	ldrh	r3, [r7, #26]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b0a4      	sub	sp, #144	; 0x90
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	4613      	mov	r3, r2
 800392e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 81dd 	beq.w	8003cf6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	3302      	adds	r3, #2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003964:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003970:	429a      	cmp	r2, r3
 8003972:	d907      	bls.n	8003984 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800397c:	1ad2      	subs	r2, r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	619a      	str	r2, [r3, #24]
 8003982:	e002      	b.n	800398a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 80b9 	bne.w	8003b06 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d126      	bne.n	80039ea <HAL_PCD_EP_DB_Transmit+0xc8>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	4413      	add	r3, r2
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	011a      	lsls	r2, r3, #4
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	4413      	add	r3, r2
 80039be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	e01a      	b.n	8003a20 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d116      	bne.n	8003a20 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	637b      	str	r3, [r7, #52]	; 0x34
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	4413      	add	r3, r2
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	011a      	lsls	r2, r3, #4
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a12:	4413      	add	r3, r2
 8003a14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d126      	bne.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	011a      	lsls	r2, r3, #4
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	e017      	b.n	8003aac <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d113      	bne.n	8003aac <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	4413      	add	r3, r2
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	011a      	lsls	r2, r3, #4
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f006 fe1f 	bl	800a6f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 82fc 	beq.w	80040bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	82fb      	strh	r3, [r7, #22]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	8afb      	ldrh	r3, [r7, #22]
 8003af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8013      	strh	r3, [r2, #0]
 8003b04:	e2da      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d021      	beq.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	f040 82ae 	bne.w	80040bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b68:	441a      	add	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b76:	441a      	add	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d30b      	bcc.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	621a      	str	r2, [r3, #32]
 8003b9e:	e017      	b.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ba8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bb8:	e00a      	b.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	785b      	ldrb	r3, [r3, #1]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d165      	bne.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x382>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	4413      	add	r3, r2
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	011a      	lsls	r2, r3, #4
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c14:	2b3e      	cmp	r3, #62	; 0x3e
 8003c16:	d91d      	bls.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x332>
 8003c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x310>
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	029b      	lsls	r3, r3, #10
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	e044      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x350>
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e035      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	3301      	adds	r3, #1
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	029b      	lsls	r3, r3, #10
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	e01c      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d118      	bne.n	8003cde <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc0:	4413      	add	r3, r2
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	011a      	lsls	r2, r3, #4
 8003cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ccc:	4413      	add	r3, r2
 8003cce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cdc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6959      	ldr	r1, [r3, #20]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	891a      	ldrh	r2, [r3, #8]
 8003cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f004 fe41 	bl	8008976 <USB_WritePMA>
 8003cf4:	e1e2      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3306      	adds	r3, #6
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d307      	bcc.n	8003d3e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	619a      	str	r2, [r3, #24]
 8003d3c:	e002      	b.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 80c0 	bne.w	8003ece <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d126      	bne.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x482>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d6a:	4413      	add	r3, r2
 8003d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	011a      	lsls	r2, r3, #4
 8003d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d76:	4413      	add	r3, r2
 8003d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8c:	801a      	strh	r2, [r3, #0]
 8003d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	e01a      	b.n	8003dda <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d116      	bne.n	8003dda <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	667b      	str	r3, [r7, #100]	; 0x64
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc0:	4413      	add	r3, r2
 8003dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	011a      	lsls	r2, r3, #4
 8003dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dcc:	4413      	add	r3, r2
 8003dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dd2:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	677b      	str	r3, [r7, #116]	; 0x74
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d12b      	bne.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	4413      	add	r3, r2
 8003dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	011a      	lsls	r2, r3, #4
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e08:	4413      	add	r3, r2
 8003e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e3c:	801a      	strh	r2, [r3, #0]
 8003e3e:	e017      	b.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d113      	bne.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e56:	4413      	add	r3, r2
 8003e58:	677b      	str	r3, [r7, #116]	; 0x74
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	011a      	lsls	r2, r3, #4
 8003e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e62:	4413      	add	r3, r2
 8003e64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e68:	673b      	str	r3, [r7, #112]	; 0x70
 8003e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f006 fc3d 	bl	800a6f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 811a 	bne.w	80040bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	8013      	strh	r3, [r2, #0]
 8003ecc:	e0f6      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d121      	bne.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	f040 80ca 	bne.w	80040bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f30:	441a      	add	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f3e:	441a      	add	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d30b      	bcc.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f60:	1ad2      	subs	r2, r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	621a      	str	r2, [r3, #32]
 8003f66:	e017      	b.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003f70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f80:	e00a      	b.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d165      	bne.n	8004072 <HAL_PCD_EP_DB_Transmit+0x750>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fba:	4413      	add	r3, r2
 8003fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	011a      	lsls	r2, r3, #4
 8003fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe4:	d91d      	bls.n	8004022 <HAL_PCD_EP_DB_Transmit+0x700>
 8003fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29a      	uxth	r2, r3
 8004006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004008:	b29b      	uxth	r3, r3
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	b29b      	uxth	r3, r3
 800400e:	4313      	orrs	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401a:	b29a      	uxth	r2, r3
 800401c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	e041      	b.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_PCD_EP_DB_Transmit+0x71e>
 800402a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004038:	b29a      	uxth	r2, r3
 800403a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	e032      	b.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	66bb      	str	r3, [r7, #104]	; 0x68
 8004048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_PCD_EP_DB_Transmit+0x738>
 8004054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004056:	3301      	adds	r3, #1
 8004058:	66bb      	str	r3, [r7, #104]	; 0x68
 800405a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29a      	uxth	r2, r3
 8004060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004062:	b29b      	uxth	r3, r3
 8004064:	029b      	lsls	r3, r3, #10
 8004066:	b29b      	uxth	r3, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	b29a      	uxth	r2, r3
 800406c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	e019      	b.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d115      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x784>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	4413      	add	r3, r2
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	011a      	lsls	r2, r3, #4
 8004092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004094:	4413      	add	r3, r2
 8004096:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800409a:	653b      	str	r3, [r7, #80]	; 0x50
 800409c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	6959      	ldr	r1, [r3, #20]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	895a      	ldrh	r2, [r3, #10]
 80040b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f004 fc5d 	bl	8008976 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d6:	82bb      	strh	r3, [r7, #20]
 80040d8:	8abb      	ldrh	r3, [r7, #20]
 80040da:	f083 0310 	eor.w	r3, r3, #16
 80040de:	82bb      	strh	r3, [r7, #20]
 80040e0:	8abb      	ldrh	r3, [r7, #20]
 80040e2:	f083 0320 	eor.w	r3, r3, #32
 80040e6:	82bb      	strh	r3, [r7, #20]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	8abb      	ldrh	r3, [r7, #20]
 80040f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004108:	b29b      	uxth	r3, r3
 800410a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3790      	adds	r7, #144	; 0x90
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004116:	b480      	push	{r7}
 8004118:	b087      	sub	sp, #28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	817b      	strh	r3, [r7, #10]
 8004124:	4613      	mov	r3, r2
 8004126:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004128:	897b      	ldrh	r3, [r7, #10]
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004134:	897b      	ldrh	r3, [r7, #10]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e009      	b.n	8004160 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800414c:	897a      	ldrh	r2, [r7, #10]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004160:	893b      	ldrh	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2200      	movs	r2, #0
 800416a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	b29a      	uxth	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	80da      	strh	r2, [r3, #6]
 8004174:	e00b      	b.n	800418e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2201      	movs	r2, #1
 800417a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	b29a      	uxth	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b29a      	uxth	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
	...

0800419c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e272      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8087 	beq.w	80042ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041bc:	4b92      	ldr	r3, [pc, #584]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c8:	4b8f      	ldr	r3, [pc, #572]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d112      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
 80041d4:	4b8c      	ldr	r3, [pc, #560]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d10b      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d06c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x12c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d168      	bne.n	80042c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e24c      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x76>
 8004204:	4b80      	ldr	r3, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7f      	ldr	r2, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e02e      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x98>
 800421a:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7a      	ldr	r2, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0xbc>
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a71      	ldr	r2, [pc, #452]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6e      	ldr	r2, [pc, #440]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a67      	ldr	r2, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd f8f2 	bl	8001460 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd f8ee 	bl	8001460 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e200      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xe4>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fd f8de 	bl	8001460 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd f8da 	bl	8001460 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1ec      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x10c>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042e2:	4b49      	ldr	r3, [pc, #292]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c0      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4939      	ldr	r1, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fd f893 	bl	8001460 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433e:	f7fd f88f 	bl	8001460 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4927      	ldr	r1, [pc, #156]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd f872 	bl	8001460 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fd f86e 	bl	8001460 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e180      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d03a      	beq.n	8004420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7fd f852 	bl	8001460 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fd f84e 	bl	8001460 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e160      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043de:	2001      	movs	r0, #1
 80043e0:	f000 face 	bl	8004980 <RCC_Delay>
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ec:	f7fd f838 	bl	8001460 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f2:	e00f      	b.n	8004414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f4:	f7fd f834 	bl	8001460 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d908      	bls.n	8004414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e146      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	42420000 	.word	0x42420000
 8004410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	4b92      	ldr	r3, [pc, #584]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e9      	bne.n	80043f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a6 	beq.w	800457a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004432:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a87      	ldr	r2, [pc, #540]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	61d3      	str	r3, [r2, #28]
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b82      	ldr	r3, [pc, #520]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7e      	ldr	r2, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fc fff5 	bl	8001460 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fc fff1 	bl	8001460 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e103      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b75      	ldr	r3, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x312>
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a6e      	ldr	r2, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6213      	str	r3, [r2, #32]
 80044ac:	e02d      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x334>
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a69      	ldr	r2, [pc, #420]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a66      	ldr	r2, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	e01c      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCC_OscConfig+0x356>
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6213      	str	r3, [r2, #32]
 80044e4:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a5d      	ldr	r2, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	e00b      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a5a      	ldr	r2, [pc, #360]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a57      	ldr	r2, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d015      	beq.n	800453e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7fc ffa5 	bl	8001460 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	e00a      	b.n	8004530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fc ffa1 	bl	8001460 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e0b1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCC_OscConfig+0x37e>
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7fc ff8f 	bl	8001460 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fc ff8b 	bl	8001460 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e09b      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ee      	bne.n	8004546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456e:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8087 	beq.w	8004692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b08      	cmp	r3, #8
 800458e:	d061      	beq.n	8004654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d146      	bne.n	8004626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fc ff5f 	bl	8001460 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fc ff5b 	bl	8001460 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e06d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4921      	ldr	r1, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a19      	ldr	r1, [r3, #32]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	491b      	ldr	r1, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fc ff2f 	bl	8001460 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7fc ff2b 	bl	8001460 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e03d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x46a>
 8004624:	e035      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fc ff18 	bl	8001460 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fc ff14 	bl	8001460 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e026      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x498>
 8004652:	e01e      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e019      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
 8004668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_OscConfig+0x500>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	429a      	cmp	r2, r3
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000

080046a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0d0      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d910      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 0207 	bic.w	r2, r3, #7
 80046ca:	4965      	ldr	r1, [pc, #404]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0b8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a52      	ldr	r2, [pc, #328]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800471e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d040      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d115      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e073      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06b      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4936      	ldr	r1, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004790:	f7fc fe66 	bl	8001460 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fc fe62 	bl	8001460 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e053      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 020c 	and.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1eb      	bne.n	8004798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d210      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	4922      	ldr	r1, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e032      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4916      	ldr	r1, [pc, #88]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1cc>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1d0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fdc4 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000
 8004864:	40021000 	.word	0x40021000
 8004868:	0800ac78 	.word	0x0800ac78
 800486c:	2000000c 	.word	0x2000000c
 8004870:	20000010 	.word	0x20000010

08004874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_RCC_GetSysClockFreq+0x94>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b04      	cmp	r3, #4
 800489c:	d002      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x30>
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d003      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x36>
 80048a2:	e027      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCC_GetSysClockFreq+0x98>)
 80048a6:	613b      	str	r3, [r7, #16]
      break;
 80048a8:	e027      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	0c9b      	lsrs	r3, r3, #18
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048b4:	5cd3      	ldrb	r3, [r2, r3]
 80048b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d010      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048c2:	4b11      	ldr	r3, [pc, #68]	; (8004908 <HAL_RCC_GetSysClockFreq+0x94>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	0c5b      	lsrs	r3, r3, #17
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	4a11      	ldr	r2, [pc, #68]	; (8004914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a0d      	ldr	r2, [pc, #52]	; (800490c <HAL_RCC_GetSysClockFreq+0x98>)
 80048d6:	fb03 f202 	mul.w	r2, r3, r2
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e004      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	613b      	str	r3, [r7, #16]
      break;
 80048f2:	e002      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetSysClockFreq+0x98>)
 80048f6:	613b      	str	r3, [r7, #16]
      break;
 80048f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fa:	693b      	ldr	r3, [r7, #16]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
 800490c:	007a1200 	.word	0x007a1200
 8004910:	0800ac90 	.word	0x0800ac90
 8004914:	0800aca0 	.word	0x0800aca0
 8004918:	003d0900 	.word	0x003d0900

0800491c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <HAL_RCC_GetHCLKFreq+0x10>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	2000000c 	.word	0x2000000c

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff2 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	0800ac88 	.word	0x0800ac88

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800495c:	f7ff ffde 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	0adb      	lsrs	r3, r3, #11
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	0800ac88 	.word	0x0800ac88

08004980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <RCC_Delay+0x34>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <RCC_Delay+0x38>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800499c:	bf00      	nop
  }
  while (Delay --);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1e5a      	subs	r2, r3, #1
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f9      	bne.n	800499c <RCC_Delay+0x1c>
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	2000000c 	.word	0x2000000c
 80049b8:	10624dd3 	.word	0x10624dd3

080049bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d07d      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049d8:	2300      	movs	r3, #0
 80049da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049dc:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e8:	4b4c      	ldr	r3, [pc, #304]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	4a4b      	ldr	r2, [pc, #300]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f2:	61d3      	str	r3, [r2, #28]
 80049f4:	4b49      	ldr	r3, [pc, #292]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d118      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a10:	4b43      	ldr	r3, [pc, #268]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a42      	ldr	r2, [pc, #264]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1c:	f7fc fd20 	bl	8001460 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a22:	e008      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fc fd1c 	bl	8001460 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e06d      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a36:	4b3a      	ldr	r3, [pc, #232]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a42:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d027      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a60:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a76:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d014      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7fc fceb 	bl	8001460 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fc fce7 	bl	8001460 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e036      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ee      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4917      	ldr	r1, [pc, #92]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d105      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	490b      	ldr	r1, [pc, #44]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4904      	ldr	r1, [pc, #16]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40007000 	.word	0x40007000
 8004b24:	42420440 	.word	0x42420440

08004b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e041      	b.n	8004bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc fae6 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f000 fb86 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d001      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e03a      	b.n	8004c56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <HAL_TIM_Base_Start_IT+0x98>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x58>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d009      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x58>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x58>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d111      	bne.n	8004c44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d010      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c42:	e007      	b.n	8004c54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800

08004c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e041      	b.n	8004d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fa6a 	bl	800116c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f000 fae4 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d122      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d11b      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0202 	mvn.w	r2, #2
 8004d36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fa77 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004d52:	e005      	b.n	8004d60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fa6a 	bl	800522e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa79 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d122      	bne.n	8004dba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d11b      	bne.n	8004dba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0204 	mvn.w	r2, #4
 8004d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa4d 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004da6:	e005      	b.n	8004db4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fa40 	bl	800522e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa4f 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d122      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d11b      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f06f 0208 	mvn.w	r2, #8
 8004dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2204      	movs	r2, #4
 8004de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fa23 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004dfa:	e005      	b.n	8004e08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fa16 	bl	800522e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa25 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d122      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d11b      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f06f 0210 	mvn.w	r2, #16
 8004e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2208      	movs	r2, #8
 8004e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f9f9 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004e4e:	e005      	b.n	8004e5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f9ec 	bl	800522e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9fb 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d10e      	bne.n	8004e8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d107      	bne.n	8004e8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f06f 0201 	mvn.w	r2, #1
 8004e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7fb f9d5 	bl	8000238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b80      	cmp	r3, #128	; 0x80
 8004e9a:	d10e      	bne.n	8004eba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	2b80      	cmp	r3, #128	; 0x80
 8004ea8:	d107      	bne.n	8004eba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fcc6 	bl	8005846 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d10e      	bne.n	8004ee6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d107      	bne.n	8004ee6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f9bf 	bl	8005264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d10e      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d107      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f06f 0220 	mvn.w	r2, #32
 8004f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fc91 	bl	8005834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e0ae      	b.n	8005098 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	f200 809f 	bhi.w	8005088 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08005089 	.word	0x08005089
 8004f58:	08005089 	.word	0x08005089
 8004f5c:	08005089 	.word	0x08005089
 8004f60:	08004fc5 	.word	0x08004fc5
 8004f64:	08005089 	.word	0x08005089
 8004f68:	08005089 	.word	0x08005089
 8004f6c:	08005089 	.word	0x08005089
 8004f70:	08005007 	.word	0x08005007
 8004f74:	08005089 	.word	0x08005089
 8004f78:	08005089 	.word	0x08005089
 8004f7c:	08005089 	.word	0x08005089
 8004f80:	08005047 	.word	0x08005047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f9d6 	bl	800533c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0208 	orr.w	r2, r2, #8
 8004f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0204 	bic.w	r2, r2, #4
 8004fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6999      	ldr	r1, [r3, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	619a      	str	r2, [r3, #24]
      break;
 8004fc2:	e064      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fa1c 	bl	8005408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6999      	ldr	r1, [r3, #24]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	619a      	str	r2, [r3, #24]
      break;
 8005004:	e043      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fa65 	bl	80054dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0208 	orr.w	r2, r2, #8
 8005020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0204 	bic.w	r2, r2, #4
 8005030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	61da      	str	r2, [r3, #28]
      break;
 8005044:	e023      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 faaf 	bl	80055b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69d9      	ldr	r1, [r3, #28]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	021a      	lsls	r2, r3, #8
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	61da      	str	r2, [r3, #28]
      break;
 8005086:	e002      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	75fb      	strb	r3, [r7, #23]
      break;
 800508c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_ConfigClockSource+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0b4      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x186>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f4:	d03e      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0xd4>
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	f200 8087 	bhi.w	800520c <HAL_TIM_ConfigClockSource+0x16c>
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005102:	f000 8086 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x172>
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510a:	d87f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b70      	cmp	r3, #112	; 0x70
 800510e:	d01a      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0xa6>
 8005110:	2b70      	cmp	r3, #112	; 0x70
 8005112:	d87b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b60      	cmp	r3, #96	; 0x60
 8005116:	d050      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x11a>
 8005118:	2b60      	cmp	r3, #96	; 0x60
 800511a:	d877      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b50      	cmp	r3, #80	; 0x50
 800511e:	d03c      	beq.n	800519a <HAL_TIM_ConfigClockSource+0xfa>
 8005120:	2b50      	cmp	r3, #80	; 0x50
 8005122:	d873      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d058      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x13a>
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d86f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b30      	cmp	r3, #48	; 0x30
 800512e:	d064      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b30      	cmp	r3, #48	; 0x30
 8005132:	d86b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d060      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005138:	2b20      	cmp	r3, #32
 800513a:	d867      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d05c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d05a      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005144:	e062      	b.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005156:	f000 faf0 	bl	800573a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	609a      	str	r2, [r3, #8]
      break;
 8005172:	e04f      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005184:	f000 fad9 	bl	800573a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005196:	609a      	str	r2, [r3, #8]
      break;
 8005198:	e03c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fa50 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2150      	movs	r1, #80	; 0x50
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 faa7 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 80051b8:	e02c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fa6e 	bl	80056a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2160      	movs	r1, #96	; 0x60
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fa97 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 80051d8:	e01c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fa30 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2140      	movs	r1, #64	; 0x40
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fa87 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 80051f8:	e00c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 fa7e 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 800520a:	e003      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e000      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr
	...

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a29      	ldr	r2, [pc, #164]	; (8005330 <TIM_Base_SetConfig+0xb8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_Base_SetConfig+0x30>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d007      	beq.n	80052a8 <TIM_Base_SetConfig+0x30>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a26      	ldr	r2, [pc, #152]	; (8005334 <TIM_Base_SetConfig+0xbc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0x30>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a25      	ldr	r2, [pc, #148]	; (8005338 <TIM_Base_SetConfig+0xc0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d108      	bne.n	80052ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <TIM_Base_SetConfig+0xb8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_Base_SetConfig+0x62>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d007      	beq.n	80052da <TIM_Base_SetConfig+0x62>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a19      	ldr	r2, [pc, #100]	; (8005334 <TIM_Base_SetConfig+0xbc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0x62>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a18      	ldr	r2, [pc, #96]	; (8005338 <TIM_Base_SetConfig+0xc0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d108      	bne.n	80052ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <TIM_Base_SetConfig+0xb8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d103      	bne.n	8005320 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	615a      	str	r2, [r3, #20]
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800

0800533c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 0201 	bic.w	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 0302 	bic.w	r3, r3, #2
 8005384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <TIM_OC1_SetConfig+0xc8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10c      	bne.n	80053b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0308 	bic.w	r3, r3, #8
 800539e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 0304 	bic.w	r3, r3, #4
 80053b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a13      	ldr	r2, [pc, #76]	; (8005404 <TIM_OC1_SetConfig+0xc8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d111      	bne.n	80053de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00

08005408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f023 0210 	bic.w	r2, r3, #16
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0320 	bic.w	r3, r3, #32
 8005452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <TIM_OC2_SetConfig+0xd0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10d      	bne.n	8005484 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <TIM_OC2_SetConfig+0xd0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d113      	bne.n	80054b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800549a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr
 80054d8:	40012c00 	.word	0x40012c00

080054dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <TIM_OC3_SetConfig+0xd0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10d      	bne.n	8005556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a14      	ldr	r2, [pc, #80]	; (80055ac <TIM_OC3_SetConfig+0xd0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d113      	bne.n	8005586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40012c00 	.word	0x40012c00

080055b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	031b      	lsls	r3, r3, #12
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a0f      	ldr	r2, [pc, #60]	; (8005648 <TIM_OC4_SetConfig+0x98>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d109      	bne.n	8005624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	40012c00 	.word	0x40012c00

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0210 	bic.w	r2, r3, #16
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	031b      	lsls	r3, r3, #12
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	621a      	str	r2, [r3, #32]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr

08005706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	f043 0307 	orr.w	r3, r3, #7
 8005728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	609a      	str	r2, [r3, #8]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr

0800573a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800573a:	b480      	push	{r7}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
 8005746:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005754:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	021a      	lsls	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	431a      	orrs	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4313      	orrs	r3, r2
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	609a      	str	r2, [r3, #8]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800578c:	2302      	movs	r3, #2
 800578e:	e046      	b.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d009      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a10      	ldr	r2, [pc, #64]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d10c      	bne.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4313      	orrs	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800

08005834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e042      	b.n	80058f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fcc6 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fcd5 	bl	800624c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d112      	bne.n	8005938 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_UART_Receive_IT+0x26>
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e00b      	b.n	800593a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	461a      	mov	r2, r3
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fab7 	bl	8005ea2 <UART_Start_Receive_IT>
 8005934:	4603      	mov	r3, r0
 8005936:	e000      	b.n	800593a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b0ba      	sub	sp, #232	; 0xe8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005970:	2300      	movs	r3, #0
 8005972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10f      	bne.n	80059aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_UART_IRQHandler+0x66>
 8005996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fb93 	bl	80060ce <UART_Receive_IT>
      return;
 80059a8:	e25b      	b.n	8005e62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80de 	beq.w	8005b70 <HAL_UART_IRQHandler+0x22c>
 80059b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d106      	bne.n	80059ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80d1 	beq.w	8005b70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00b      	beq.n	80059f2 <HAL_UART_IRQHandler+0xae>
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f043 0201 	orr.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_UART_IRQHandler+0xd2>
 80059fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	f043 0202 	orr.w	r2, r3, #2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_UART_IRQHandler+0xf6>
 8005a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	f043 0204 	orr.w	r2, r3, #4
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <HAL_UART_IRQHandler+0x126>
 8005a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d105      	bne.n	8005a5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a62:	f043 0208 	orr.w	r2, r3, #8
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 81f2 	beq.w	8005e58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_UART_IRQHandler+0x14e>
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fb1e 	bl	80060ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <HAL_UART_IRQHandler+0x17a>
 8005ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d04f      	beq.n	8005b5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa28 	bl	8005f14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d041      	beq.n	8005b56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3314      	adds	r3, #20
 8005afa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005afe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1d9      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d013      	beq.n	8005b4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2a:	4a7e      	ldr	r2, [pc, #504]	; (8005d24 <HAL_UART_IRQHandler+0x3e0>)
 8005b2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fc fa64 	bl	8002000 <HAL_DMA_Abort_IT>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	e00e      	b.n	8005b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f993 	bl	8005e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00a      	b.n	8005b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f98f 	bl	8005e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e006      	b.n	8005b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f98b 	bl	8005e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b6a:	e175      	b.n	8005e58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6c:	bf00      	nop
    return;
 8005b6e:	e173      	b.n	8005e58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	f040 814f 	bne.w	8005e18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8148 	beq.w	8005e18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8141 	beq.w	8005e18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80b6 	beq.w	8005d28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8145 	beq.w	8005e5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	f080 813e 	bcs.w	8005e5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005be6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f000 8088 	beq.w	8005d04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c20:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1d9      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e1      	bne.n	8005c40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ca0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e3      	bne.n	8005c7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
 8005cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ce6:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ce8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e3      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fc f942 	bl	8001f88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8b6 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d20:	e09c      	b.n	8005e5c <HAL_UART_IRQHandler+0x518>
 8005d22:	bf00      	nop
 8005d24:	08005fd9 	.word	0x08005fd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 808e 	beq.w	8005e60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8089 	beq.w	8005e60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	330c      	adds	r3, #12
 8005d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d72:	647a      	str	r2, [r7, #68]	; 0x44
 8005d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e3      	bne.n	8005d4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	623b      	str	r3, [r7, #32]
   return(result);
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005daa:	633a      	str	r2, [r7, #48]	; 0x30
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e3      	bne.n	8005d86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
 8005de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005df0:	61fa      	str	r2, [r7, #28]
 8005df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	69b9      	ldr	r1, [r7, #24]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e3      	bne.n	8005dcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f83b 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e16:	e023      	b.n	8005e60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <HAL_UART_IRQHandler+0x4f4>
 8005e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8e5 	bl	8006000 <UART_Transmit_IT>
    return;
 8005e36:	e014      	b.n	8005e62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00e      	beq.n	8005e62 <HAL_UART_IRQHandler+0x51e>
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f924 	bl	800609e <UART_EndTransmit_IT>
    return;
 8005e56:	e004      	b.n	8005e62 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e58:	bf00      	nop
 8005e5a:	e002      	b.n	8005e62 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e5c:	bf00      	nop
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e60:	bf00      	nop
  }
}
 8005e62:	37e8      	adds	r7, #232	; 0xe8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2222      	movs	r2, #34	; 0x22
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0220 	orr.w	r2, r2, #32
 8005f06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b095      	sub	sp, #84	; 0x54
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f3c:	643a      	str	r2, [r7, #64]	; 0x40
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e5      	bne.n	8005f1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d119      	bne.n	8005fc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0310 	bic.w	r3, r3, #16
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fac:	61ba      	str	r2, [r7, #24]
 8005fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e5      	bne.n	8005f8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fce:	bf00      	nop
 8005fd0:	3754      	adds	r7, #84	; 0x54
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff41 	bl	8005e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b21      	cmp	r3, #33	; 0x21
 8006012:	d13e      	bne.n	8006092 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601c:	d114      	bne.n	8006048 <UART_Transmit_IT+0x48>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d110      	bne.n	8006048 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800603a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	1c9a      	adds	r2, r3, #2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	621a      	str	r2, [r3, #32]
 8006046:	e008      	b.n	800605a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	1c59      	adds	r1, r3, #1
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6211      	str	r1, [r2, #32]
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	4619      	mov	r1, r3
 8006068:	84d1      	strh	r1, [r2, #38]	; 0x26
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10f      	bne.n	800608e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	e000      	b.n	8006094 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006092:	2302      	movs	r3, #2
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fed2 	bl	8005e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08c      	sub	sp, #48	; 0x30
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b22      	cmp	r3, #34	; 0x22
 80060e0:	f040 80ae 	bne.w	8006240 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ec:	d117      	bne.n	800611e <UART_Receive_IT+0x50>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d113      	bne.n	800611e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610c:	b29a      	uxth	r2, r3
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	1c9a      	adds	r2, r3, #2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	629a      	str	r2, [r3, #40]	; 0x28
 800611c:	e026      	b.n	800616c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006130:	d007      	beq.n	8006142 <UART_Receive_IT+0x74>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <UART_Receive_IT+0x82>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e008      	b.n	8006162 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29b      	uxth	r3, r3
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4619      	mov	r1, r3
 800617a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800617c:	2b00      	cmp	r3, #0
 800617e:	d15d      	bne.n	800623c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0220 	bic.w	r2, r2, #32
 800618e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800619e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d135      	bne.n	8006232 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	613b      	str	r3, [r7, #16]
   return(result);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f023 0310 	bic.w	r3, r3, #16
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ec:	623a      	str	r2, [r7, #32]
 80061ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	69f9      	ldr	r1, [r7, #28]
 80061f2:	6a3a      	ldr	r2, [r7, #32]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b10      	cmp	r3, #16
 800620c:	d10a      	bne.n	8006224 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fe2e 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
 8006230:	e002      	b.n	8006238 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fa f844 	bl	80002c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e002      	b.n	8006242 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006240:	2302      	movs	r3, #2
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	3730      	adds	r7, #48	; 0x30
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006286:	f023 030c 	bic.w	r3, r3, #12
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	430b      	orrs	r3, r1
 8006292:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <UART_SetConfig+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d103      	bne.n	80062bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062b4:	f7fe fb50 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	e002      	b.n	80062c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062bc:	f7fe fb38 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 80062c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009a      	lsls	r2, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	4a22      	ldr	r2, [pc, #136]	; (8006364 <UART_SetConfig+0x118>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	0119      	lsls	r1, r3, #4
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009a      	lsls	r2, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062f8:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <UART_SetConfig+0x118>)
 80062fa:	fba3 0302 	umull	r0, r3, r3, r2
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	2064      	movs	r0, #100	; 0x64
 8006302:	fb00 f303 	mul.w	r3, r0, r3
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	3332      	adds	r3, #50	; 0x32
 800630c:	4a15      	ldr	r2, [pc, #84]	; (8006364 <UART_SetConfig+0x118>)
 800630e:	fba2 2303 	umull	r2, r3, r2, r3
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006318:	4419      	add	r1, r3
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	009a      	lsls	r2, r3, #2
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <UART_SetConfig+0x118>)
 8006332:	fba3 0302 	umull	r0, r3, r3, r2
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	2064      	movs	r0, #100	; 0x64
 800633a:	fb00 f303 	mul.w	r3, r0, r3
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	3332      	adds	r3, #50	; 0x32
 8006344:	4a07      	ldr	r2, [pc, #28]	; (8006364 <UART_SetConfig+0x118>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f003 020f 	and.w	r2, r3, #15
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	440a      	add	r2, r1
 8006356:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40013800 	.word	0x40013800
 8006364:	51eb851f 	.word	0x51eb851f

08006368 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006368:	b084      	sub	sp, #16
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	f107 0014 	add.w	r0, r7, #20
 8006376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	b004      	add	sp, #16
 8006386:	4770      	bx	lr

08006388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006398:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800639c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80063c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	43db      	mvns	r3, r3
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006400:	b084      	sub	sp, #16
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	f107 0014 	add.w	r0, r7, #20
 800640e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	bc80      	pop	{r7}
 800643c:	b004      	add	sp, #16
 800643e:	4770      	bx	lr

08006440 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006440:	b480      	push	{r7}
 8006442:	b09d      	sub	sp, #116	; 0x74
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	78db      	ldrb	r3, [r3, #3]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d81f      	bhi.n	80064b2 <USB_ActivateEndpoint+0x72>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <USB_ActivateEndpoint+0x38>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	08006489 	.word	0x08006489
 800647c:	080064a5 	.word	0x080064a5
 8006480:	080064bb 	.word	0x080064bb
 8006484:	08006497 	.word	0x08006497
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006488:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800648c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006490:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006494:	e012      	b.n	80064bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006496:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800649a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800649e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064a2:	e00b      	b.n	80064bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80064a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064b0:	e004      	b.n	80064bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80064b8:	e000      	b.n	80064bc <USB_ActivateEndpoint+0x7c>
      break;
 80064ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064da:	b29b      	uxth	r3, r3
 80064dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	7b1b      	ldrb	r3, [r3, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f040 8178 	bne.w	800681e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8084 	beq.w	8006640 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	88db      	ldrh	r3, [r3, #6]
 8006560:	085b      	lsrs	r3, r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	827b      	strh	r3, [r7, #18]
 800657a:	8a7b      	ldrh	r3, [r7, #18]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01b      	beq.n	80065bc <USB_ActivateEndpoint+0x17c>
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	823b      	strh	r3, [r7, #16]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	441a      	add	r2, r3
 80065a6:	8a3b      	ldrh	r3, [r7, #16]
 80065a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	78db      	ldrb	r3, [r3, #3]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d020      	beq.n	8006606 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065da:	81bb      	strh	r3, [r7, #12]
 80065dc:	89bb      	ldrh	r3, [r7, #12]
 80065de:	f083 0320 	eor.w	r3, r3, #32
 80065e2:	81bb      	strh	r3, [r7, #12]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	89bb      	ldrh	r3, [r7, #12]
 80065f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006600:	b29b      	uxth	r3, r3
 8006602:	8013      	strh	r3, [r2, #0]
 8006604:	e2d5      	b.n	8006bb2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661c:	81fb      	strh	r3, [r7, #14]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	89fb      	ldrh	r3, [r7, #14]
 800662a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	b29b      	uxth	r3, r3
 800663c:	8013      	strh	r3, [r2, #0]
 800663e:	e2b8      	b.n	8006bb2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	4413      	add	r3, r2
 8006652:	633b      	str	r3, [r7, #48]	; 0x30
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	011a      	lsls	r2, r3, #4
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	4413      	add	r3, r2
 800665e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	88db      	ldrh	r3, [r3, #6]
 8006668:	085b      	lsrs	r3, r3, #1
 800666a:	b29b      	uxth	r3, r3
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800667e:	b29b      	uxth	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	4413      	add	r3, r2
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	011a      	lsls	r2, r3, #4
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	4413      	add	r3, r2
 8006692:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b3e      	cmp	r3, #62	; 0x3e
 80066ae:	d91d      	bls.n	80066ec <USB_ActivateEndpoint+0x2ac>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <USB_ActivateEndpoint+0x28a>
 80066c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066c6:	3b01      	subs	r3, #1
 80066c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e026      	b.n	800673a <USB_ActivateEndpoint+0x2fa>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <USB_ActivateEndpoint+0x2ca>
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006702:	b29a      	uxth	r2, r3
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	e017      	b.n	800673a <USB_ActivateEndpoint+0x2fa>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	66bb      	str	r3, [r7, #104]	; 0x68
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <USB_ActivateEndpoint+0x2e4>
 800671e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006720:	3301      	adds	r3, #1
 8006722:	66bb      	str	r3, [r7, #104]	; 0x68
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29a      	uxth	r2, r3
 800672a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29b      	uxth	r3, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	b29a      	uxth	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	847b      	strh	r3, [r7, #34]	; 0x22
 8006748:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800674a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01b      	beq.n	800678a <USB_ActivateEndpoint+0x34a>
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	843b      	strh	r3, [r7, #32]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	441a      	add	r2, r3
 8006774:	8c3b      	ldrh	r3, [r7, #32]
 8006776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006786:	b29b      	uxth	r3, r3
 8006788:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d124      	bne.n	80067dc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a8:	83bb      	strh	r3, [r7, #28]
 80067aa:	8bbb      	ldrh	r3, [r7, #28]
 80067ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067b0:	83bb      	strh	r3, [r7, #28]
 80067b2:	8bbb      	ldrh	r3, [r7, #28]
 80067b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067b8:	83bb      	strh	r3, [r7, #28]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	8bbb      	ldrh	r3, [r7, #28]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
 80067da:	e1ea      	b.n	8006bb2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	83fb      	strh	r3, [r7, #30]
 80067f4:	8bfb      	ldrh	r3, [r7, #30]
 80067f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067fa:	83fb      	strh	r3, [r7, #30]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	8bfb      	ldrh	r3, [r7, #30]
 8006808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
 800681c:	e1c9      	b.n	8006bb2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	78db      	ldrb	r3, [r3, #3]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d11e      	bne.n	8006864 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800684e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006856:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800685a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]
 8006862:	e01d      	b.n	80068a0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800688c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689c:	b29b      	uxth	r3, r3
 800689e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b0:	4413      	add	r3, r2
 80068b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	011a      	lsls	r2, r3, #4
 80068ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	891b      	ldrh	r3, [r3, #8]
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	657b      	str	r3, [r7, #84]	; 0x54
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068de:	b29b      	uxth	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e4:	4413      	add	r3, r2
 80068e6:	657b      	str	r3, [r7, #84]	; 0x54
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	011a      	lsls	r2, r3, #4
 80068ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068f6:	653b      	str	r3, [r7, #80]	; 0x50
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	895b      	ldrh	r3, [r3, #10]
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	b29b      	uxth	r3, r3
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006906:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f040 8093 	bne.w	8006a38 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01b      	beq.n	8006966 <USB_ActivateEndpoint+0x526>
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	441a      	add	r2, r3
 8006950:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006974:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01b      	beq.n	80069b6 <USB_ActivateEndpoint+0x576>
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80069ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80069d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	8013      	strh	r3, [r2, #0]
 8006a36:	e0bc      	b.n	8006bb2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01d      	beq.n	8006a90 <USB_ActivateEndpoint+0x650>
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006aa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01d      	beq.n	8006ae8 <USB_ActivateEndpoint+0x6a8>
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	78db      	ldrb	r3, [r3, #3]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d024      	beq.n	8006b3a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b0e:	f083 0320 	eor.w	r3, r3, #32
 8006b12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8013      	strh	r3, [r2, #0]
 8006b38:	e01d      	b.n	8006b76 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006bb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3774      	adds	r7, #116	; 0x74
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b08d      	sub	sp, #52	; 0x34
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	7b1b      	ldrb	r3, [r3, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f040 808e 	bne.w	8006cf0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d044      	beq.n	8006c66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	81bb      	strh	r3, [r7, #12]
 8006bea:	89bb      	ldrh	r3, [r7, #12]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01b      	beq.n	8006c2c <USB_DeactivateEndpoint+0x6c>
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	817b      	strh	r3, [r7, #10]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	897b      	ldrh	r3, [r7, #10]
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c42:	813b      	strh	r3, [r7, #8]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	441a      	add	r2, r3
 8006c4e:	893b      	ldrh	r3, [r7, #8]
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]
 8006c64:	e192      	b.n	8006f8c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	827b      	strh	r3, [r7, #18]
 8006c74:	8a7b      	ldrh	r3, [r7, #18]
 8006c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01b      	beq.n	8006cb6 <USB_DeactivateEndpoint+0xf6>
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	823b      	strh	r3, [r7, #16]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	8a3b      	ldrh	r3, [r7, #16]
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ccc:	81fb      	strh	r3, [r7, #14]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	89fb      	ldrh	r3, [r7, #14]
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]
 8006cee:	e14d      	b.n	8006f8c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f040 80a5 	bne.w	8006e44 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	843b      	strh	r3, [r7, #32]
 8006d08:	8c3b      	ldrh	r3, [r7, #32]
 8006d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01b      	beq.n	8006d4a <USB_DeactivateEndpoint+0x18a>
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	83fb      	strh	r3, [r7, #30]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	441a      	add	r2, r3
 8006d34:	8bfb      	ldrh	r3, [r7, #30]
 8006d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	83bb      	strh	r3, [r7, #28]
 8006d58:	8bbb      	ldrh	r3, [r7, #28]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01b      	beq.n	8006d9a <USB_DeactivateEndpoint+0x1da>
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d78:	837b      	strh	r3, [r7, #26]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	8b7b      	ldrh	r3, [r7, #26]
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db0:	833b      	strh	r3, [r7, #24]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	8b3b      	ldrh	r3, [r7, #24]
 8006dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	82fb      	strh	r3, [r7, #22]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	441a      	add	r2, r3
 8006df4:	8afb      	ldrh	r3, [r7, #22]
 8006df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e20:	82bb      	strh	r3, [r7, #20]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	8abb      	ldrh	r3, [r7, #20]
 8006e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8013      	strh	r3, [r2, #0]
 8006e42:	e0a3      	b.n	8006f8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01b      	beq.n	8006e94 <USB_DeactivateEndpoint+0x2d4>
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	441a      	add	r2, r3
 8006e7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ea2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01b      	beq.n	8006ee4 <USB_DeactivateEndpoint+0x324>
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006edc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	441a      	add	r2, r3
 8006f06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	441a      	add	r2, r3
 8006f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3734      	adds	r7, #52	; 0x34
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b0c2      	sub	sp, #264	; 0x108
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa6:	6018      	str	r0, [r3, #0]
 8006fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	f040 86b7 	bne.w	8007d32 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d908      	bls.n	8006ff2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ff0:	e007      	b.n	8007002 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	7b1b      	ldrb	r3, [r3, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d13a      	bne.n	8007088 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6959      	ldr	r1, [r3, #20]
 800701e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	88da      	ldrh	r2, [r3, #6]
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702e:	b29b      	uxth	r3, r3
 8007030:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007034:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007038:	6800      	ldr	r0, [r0, #0]
 800703a:	f001 fc9c 	bl	8008976 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007058:	b29b      	uxth	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	011a      	lsls	r2, r3, #4
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	f000 be1f 	b.w	8007cc6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	78db      	ldrb	r3, [r3, #3]
 8007094:	2b02      	cmp	r3, #2
 8007096:	f040 8462 	bne.w	800795e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	f240 83df 	bls.w	8007876 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80070e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007108:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	b29b      	uxth	r3, r3
 8007112:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 81c7 	beq.w	80074e8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d177      	bne.n	8007266 <USB_EPStartXfer+0x2ce>
 8007176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	62bb      	str	r3, [r7, #40]	; 0x28
 8007182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	4413      	add	r3, r2
 8007198:	62bb      	str	r3, [r7, #40]	; 0x28
 800719a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	011a      	lsls	r2, r3, #4
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	4413      	add	r3, r2
 80071ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071bc:	b29a      	uxth	r2, r3
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c6:	2b3e      	cmp	r3, #62	; 0x3e
 80071c8:	d921      	bls.n	800720e <USB_EPStartXfer+0x276>
 80071ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <USB_EPStartXfer+0x252>
 80071e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071e4:	3b01      	subs	r3, #1
 80071e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	029b      	lsls	r3, r3, #10
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007206:	b29a      	uxth	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e050      	b.n	80072b0 <USB_EPStartXfer+0x318>
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <USB_EPStartXfer+0x294>
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007224:	b29a      	uxth	r2, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e041      	b.n	80072b0 <USB_EPStartXfer+0x318>
 800722c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <USB_EPStartXfer+0x2b4>
 8007242:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007246:	3301      	adds	r3, #1
 8007248:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29a      	uxth	r2, r3
 8007252:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007256:	b29b      	uxth	r3, r3
 8007258:	029b      	lsls	r3, r3, #10
 800725a:	b29b      	uxth	r3, r3
 800725c:	4313      	orrs	r3, r2
 800725e:	b29a      	uxth	r2, r3
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e024      	b.n	80072b0 <USB_EPStartXfer+0x318>
 8007266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d11c      	bne.n	80072b0 <USB_EPStartXfer+0x318>
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007284:	b29b      	uxth	r3, r3
 8007286:	461a      	mov	r2, r3
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	4413      	add	r3, r2
 800728c:	633b      	str	r3, [r7, #48]	; 0x30
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	011a      	lsls	r2, r3, #4
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	4413      	add	r3, r2
 80072a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	895b      	ldrh	r3, [r3, #10]
 80072bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6959      	ldr	r1, [r3, #20]
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	f001 fb49 	bl	8008976 <USB_WritePMA>
            ep->xfer_buff += len;
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695a      	ldr	r2, [r3, #20]
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f4:	441a      	add	r2, r3
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	d90f      	bls.n	800733e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6a1a      	ldr	r2, [r3, #32]
 800732a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	621a      	str	r2, [r3, #32]
 800733c:	e00e      	b.n	800735c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800734e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2200      	movs	r2, #0
 800735a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	785b      	ldrb	r3, [r3, #1]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d177      	bne.n	800745c <USB_EPStartXfer+0x4c4>
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	4413      	add	r3, r2
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	011a      	lsls	r2, r3, #4
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	4413      	add	r3, r2
 80073a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073bc:	2b3e      	cmp	r3, #62	; 0x3e
 80073be:	d921      	bls.n	8007404 <USB_EPStartXfer+0x46c>
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <USB_EPStartXfer+0x448>
 80073d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073da:	3b01      	subs	r3, #1
 80073dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	4313      	orrs	r3, r2
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e056      	b.n	80074b2 <USB_EPStartXfer+0x51a>
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <USB_EPStartXfer+0x48a>
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741a:	b29a      	uxth	r2, r3
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e047      	b.n	80074b2 <USB_EPStartXfer+0x51a>
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <USB_EPStartXfer+0x4aa>
 8007438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800743c:	3301      	adds	r3, #1
 800743e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744c:	b29b      	uxth	r3, r3
 800744e:	029b      	lsls	r3, r3, #10
 8007450:	b29b      	uxth	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b29a      	uxth	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	801a      	strh	r2, [r3, #0]
 800745a:	e02a      	b.n	80074b2 <USB_EPStartXfer+0x51a>
 800745c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	785b      	ldrb	r3, [r3, #1]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d122      	bne.n	80074b2 <USB_EPStartXfer+0x51a>
 800746c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	623b      	str	r3, [r7, #32]
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007486:	b29b      	uxth	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	4413      	add	r3, r2
 800748e:	623b      	str	r3, [r7, #32]
 8007490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	011a      	lsls	r2, r3, #4
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	4413      	add	r3, r2
 80074a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	891b      	ldrh	r3, [r3, #8]
 80074be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6959      	ldr	r1, [r3, #20]
 80074ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074e0:	6800      	ldr	r0, [r0, #0]
 80074e2:	f001 fa48 	bl	8008976 <USB_WritePMA>
 80074e6:	e3ee      	b.n	8007cc6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d177      	bne.n	80075e8 <USB_EPStartXfer+0x650>
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	64bb      	str	r3, [r7, #72]	; 0x48
 8007504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007512:	b29b      	uxth	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007518:	4413      	add	r3, r2
 800751a:	64bb      	str	r3, [r7, #72]	; 0x48
 800751c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	011a      	lsls	r2, r3, #4
 800752a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800752c:	4413      	add	r3, r2
 800752e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007532:	647b      	str	r3, [r7, #68]	; 0x44
 8007534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800753e:	b29a      	uxth	r2, r3
 8007540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007548:	2b3e      	cmp	r3, #62	; 0x3e
 800754a:	d921      	bls.n	8007590 <USB_EPStartXfer+0x5f8>
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <USB_EPStartXfer+0x5d4>
 8007562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007566:	3b01      	subs	r3, #1
 8007568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800756c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	b29a      	uxth	r2, r3
 8007572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007576:	b29b      	uxth	r3, r3
 8007578:	029b      	lsls	r3, r3, #10
 800757a:	b29b      	uxth	r3, r3
 800757c:	4313      	orrs	r3, r2
 800757e:	b29b      	uxth	r3, r3
 8007580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007588:	b29a      	uxth	r2, r3
 800758a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e056      	b.n	800763e <USB_EPStartXfer+0x6a6>
 8007590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <USB_EPStartXfer+0x616>
 8007598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e047      	b.n	800763e <USB_EPStartXfer+0x6a6>
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <USB_EPStartXfer+0x636>
 80075c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075c8:	3301      	adds	r3, #1
 80075ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075d8:	b29b      	uxth	r3, r3
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	b29b      	uxth	r3, r3
 80075de:	4313      	orrs	r3, r2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e02a      	b.n	800763e <USB_EPStartXfer+0x6a6>
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d122      	bne.n	800763e <USB_EPStartXfer+0x6a6>
 80075f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	653b      	str	r3, [r7, #80]	; 0x50
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007618:	4413      	add	r3, r2
 800761a:	653b      	str	r3, [r7, #80]	; 0x50
 800761c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	011a      	lsls	r2, r3, #4
 800762a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800762c:	4413      	add	r3, r2
 800762e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007638:	b29a      	uxth	r2, r3
 800763a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800763e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	891b      	ldrh	r3, [r3, #8]
 800764a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6959      	ldr	r1, [r3, #20]
 800765a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765e:	b29b      	uxth	r3, r3
 8007660:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007664:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007668:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800766c:	6800      	ldr	r0, [r0, #0]
 800766e:	f001 f982 	bl	8008976 <USB_WritePMA>
            ep->xfer_buff += len;
 8007672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695a      	ldr	r2, [r3, #20]
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	441a      	add	r2, r3
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6a1a      	ldr	r2, [r3, #32]
 800769c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d90f      	bls.n	80076cc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a1a      	ldr	r2, [r3, #32]
 80076b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076bc:	1ad2      	subs	r2, r2, r3
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	621a      	str	r2, [r3, #32]
 80076ca:	e00e      	b.n	80076ea <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80076cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	643b      	str	r3, [r7, #64]	; 0x40
 80076f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d177      	bne.n	80077f6 <USB_EPStartXfer+0x85e>
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	63bb      	str	r3, [r7, #56]	; 0x38
 8007712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007720:	b29b      	uxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	4413      	add	r3, r2
 8007728:	63bb      	str	r3, [r7, #56]	; 0x38
 800772a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	011a      	lsls	r2, r3, #4
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	4413      	add	r3, r2
 800773c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800774c:	b29a      	uxth	r2, r3
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007756:	2b3e      	cmp	r3, #62	; 0x3e
 8007758:	d921      	bls.n	800779e <USB_EPStartXfer+0x806>
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007768:	f003 031f 	and.w	r3, r3, #31
 800776c:	2b00      	cmp	r3, #0
 800776e:	d104      	bne.n	800777a <USB_EPStartXfer+0x7e2>
 8007770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007774:	3b01      	subs	r3, #1
 8007776:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29a      	uxth	r2, r3
 8007780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007784:	b29b      	uxth	r3, r3
 8007786:	029b      	lsls	r3, r3, #10
 8007788:	b29b      	uxth	r3, r3
 800778a:	4313      	orrs	r3, r2
 800778c:	b29b      	uxth	r3, r3
 800778e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007796:	b29a      	uxth	r2, r3
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	e050      	b.n	8007840 <USB_EPStartXfer+0x8a8>
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10a      	bne.n	80077bc <USB_EPStartXfer+0x824>
 80077a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	e041      	b.n	8007840 <USB_EPStartXfer+0x8a8>
 80077bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <USB_EPStartXfer+0x844>
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d6:	3301      	adds	r3, #1
 80077d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	029b      	lsls	r3, r3, #10
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4313      	orrs	r3, r2
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e024      	b.n	8007840 <USB_EPStartXfer+0x8a8>
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d11c      	bne.n	8007840 <USB_EPStartXfer+0x8a8>
 8007806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007814:	b29b      	uxth	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800781a:	4413      	add	r3, r2
 800781c:	643b      	str	r3, [r7, #64]	; 0x40
 800781e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	011a      	lsls	r2, r3, #4
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	4413      	add	r3, r2
 8007830:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	b29a      	uxth	r2, r3
 800783c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	895b      	ldrh	r3, [r3, #10]
 800784c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6959      	ldr	r1, [r3, #20]
 800785c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007860:	b29b      	uxth	r3, r3
 8007862:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007866:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800786a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800786e:	6800      	ldr	r0, [r0, #0]
 8007870:	f001 f881 	bl	8008976 <USB_WritePMA>
 8007874:	e227      	b.n	8007cc6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80078a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	441a      	add	r2, r3
 80078ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078de:	b29b      	uxth	r3, r3
 80078e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007902:	4413      	add	r3, r2
 8007904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	011a      	lsls	r2, r3, #4
 8007914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007916:	4413      	add	r3, r2
 8007918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800791c:	65bb      	str	r3, [r7, #88]	; 0x58
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007922:	b29a      	uxth	r2, r3
 8007924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007926:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	891b      	ldrh	r3, [r3, #8]
 8007934:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6959      	ldr	r1, [r3, #20]
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007948:	b29b      	uxth	r3, r3
 800794a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800794e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007952:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007956:	6800      	ldr	r0, [r0, #0]
 8007958:	f001 f80d 	bl	8008976 <USB_WritePMA>
 800795c:	e1b3      	b.n	8007cc6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80c6 	beq.w	8007b30 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	673b      	str	r3, [r7, #112]	; 0x70
 80079b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d177      	bne.n	8007ab0 <USB_EPStartXfer+0xb18>
 80079c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80079cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079da:	b29b      	uxth	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079e0:	4413      	add	r3, r2
 80079e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	011a      	lsls	r2, r3, #4
 80079f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079f4:	4413      	add	r3, r2
 80079f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079fa:	667b      	str	r3, [r7, #100]	; 0x64
 80079fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a0a:	801a      	strh	r2, [r3, #0]
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a10:	2b3e      	cmp	r3, #62	; 0x3e
 8007a12:	d921      	bls.n	8007a58 <USB_EPStartXfer+0xac0>
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a22:	f003 031f 	and.w	r3, r3, #31
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d104      	bne.n	8007a34 <USB_EPStartXfer+0xa9c>
 8007a2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	029b      	lsls	r3, r3, #10
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4313      	orrs	r3, r2
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e050      	b.n	8007afa <USB_EPStartXfer+0xb62>
 8007a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <USB_EPStartXfer+0xade>
 8007a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	e041      	b.n	8007afa <USB_EPStartXfer+0xb62>
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <USB_EPStartXfer+0xafe>
 8007a8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a90:	3301      	adds	r3, #1
 8007a92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	029b      	lsls	r3, r3, #10
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e024      	b.n	8007afa <USB_EPStartXfer+0xb62>
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d11c      	bne.n	8007afa <USB_EPStartXfer+0xb62>
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad4:	4413      	add	r3, r2
 8007ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	011a      	lsls	r2, r3, #4
 8007ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae8:	4413      	add	r3, r2
 8007aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	895b      	ldrh	r3, [r3, #10]
 8007b06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6959      	ldr	r1, [r3, #20]
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b28:	6800      	ldr	r0, [r0, #0]
 8007b2a:	f000 ff24 	bl	8008976 <USB_WritePMA>
 8007b2e:	e0ca      	b.n	8007cc6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d177      	bne.n	8007c30 <USB_EPStartXfer+0xc98>
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b60:	4413      	add	r3, r2
 8007b62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	011a      	lsls	r2, r3, #4
 8007b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b74:	4413      	add	r3, r2
 8007b76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b90:	2b3e      	cmp	r3, #62	; 0x3e
 8007b92:	d921      	bls.n	8007bd8 <USB_EPStartXfer+0xc40>
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <USB_EPStartXfer+0xc1c>
 8007baa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	029b      	lsls	r3, r3, #10
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	e05c      	b.n	8007c92 <USB_EPStartXfer+0xcfa>
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <USB_EPStartXfer+0xc5e>
 8007be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e04d      	b.n	8007c92 <USB_EPStartXfer+0xcfa>
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <USB_EPStartXfer+0xc7e>
 8007c0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c10:	3301      	adds	r3, #1
 8007c12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	029b      	lsls	r3, r3, #10
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4313      	orrs	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	e030      	b.n	8007c92 <USB_EPStartXfer+0xcfa>
 8007c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d128      	bne.n	8007c92 <USB_EPStartXfer+0xcfa>
 8007c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c64:	4413      	add	r3, r2
 8007c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	011a      	lsls	r2, r3, #4
 8007c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	891b      	ldrh	r3, [r3, #8]
 8007c9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6959      	ldr	r1, [r3, #20]
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007cb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007cbc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007cc0:	6800      	ldr	r0, [r0, #0]
 8007cc2:	f000 fe58 	bl	8008976 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cec:	817b      	strh	r3, [r7, #10]
 8007cee:	897b      	ldrh	r3, [r7, #10]
 8007cf0:	f083 0310 	eor.w	r3, r3, #16
 8007cf4:	817b      	strh	r3, [r7, #10]
 8007cf6:	897b      	ldrh	r3, [r7, #10]
 8007cf8:	f083 0320 	eor.w	r3, r3, #32
 8007cfc:	817b      	strh	r3, [r7, #10]
 8007cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	441a      	add	r2, r3
 8007d18:	897b      	ldrh	r3, [r7, #10]
 8007d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	8013      	strh	r3, [r2, #0]
 8007d2e:	f000 bcde 	b.w	80086ee <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	7b1b      	ldrb	r3, [r3, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 80bb 	bne.w	8007eba <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d917      	bls.n	8007d90 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d80:	1ad2      	subs	r2, r2, r3
 8007d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	619a      	str	r2, [r3, #24]
 8007d8e:	e00e      	b.n	8007dae <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2200      	movs	r2, #0
 8007dac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	011a      	lsls	r2, r3, #4
 8007de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dea:	4413      	add	r3, r2
 8007dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007df0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e06:	801a      	strh	r2, [r3, #0]
 8007e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e0c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e0e:	d924      	bls.n	8007e5a <USB_EPStartXfer+0xec2>
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <USB_EPStartXfer+0xe98>
 8007e26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	029b      	lsls	r3, r3, #10
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4313      	orrs	r3, r2
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e54:	801a      	strh	r2, [r3, #0]
 8007e56:	f000 bc10 	b.w	800867a <USB_EPStartXfer+0x16e2>
 8007e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10c      	bne.n	8007e7c <USB_EPStartXfer+0xee4>
 8007e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e3fe      	b.n	800867a <USB_EPStartXfer+0x16e2>
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d004      	beq.n	8007e9c <USB_EPStartXfer+0xf04>
 8007e92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e96:	3301      	adds	r3, #1
 8007e98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	029b      	lsls	r3, r3, #10
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	e3df      	b.n	800867a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	f040 8218 	bne.w	80082fc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	785b      	ldrb	r3, [r3, #1]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f040 809d 	bne.w	8008018 <USB_EPStartXfer+0x1080>
 8007ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f02:	4413      	add	r3, r2
 8007f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	011a      	lsls	r2, r3, #4
 8007f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b3e      	cmp	r3, #62	; 0x3e
 8007f46:	d92b      	bls.n	8007fa0 <USB_EPStartXfer+0x1008>
 8007f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 031f 	and.w	r3, r3, #31
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <USB_EPStartXfer+0xfe0>
 8007f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f72:	3b01      	subs	r3, #1
 8007f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f9c:	801a      	strh	r2, [r3, #0]
 8007f9e:	e070      	b.n	8008082 <USB_EPStartXfer+0x10ea>
 8007fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10c      	bne.n	8007fca <USB_EPStartXfer+0x1032>
 8007fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	e05b      	b.n	8008082 <USB_EPStartXfer+0x10ea>
 8007fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	085b      	lsrs	r3, r3, #1
 8007fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <USB_EPStartXfer+0x1062>
 8007ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29a      	uxth	r2, r3
 8008002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008006:	b29b      	uxth	r3, r3
 8008008:	029b      	lsls	r3, r3, #10
 800800a:	b29b      	uxth	r3, r3
 800800c:	4313      	orrs	r3, r2
 800800e:	b29a      	uxth	r2, r3
 8008010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	e034      	b.n	8008082 <USB_EPStartXfer+0x10ea>
 8008018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d12c      	bne.n	8008082 <USB_EPStartXfer+0x10ea>
 8008028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008044:	b29b      	uxth	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800804c:	4413      	add	r3, r2
 800804e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	011a      	lsls	r2, r3, #4
 8008060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008064:	4413      	add	r3, r2
 8008066:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800806a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800806e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 809d 	bne.w	80081dc <USB_EPStartXfer+0x1244>
 80080a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080be:	b29b      	uxth	r3, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080c6:	4413      	add	r3, r2
 80080c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	011a      	lsls	r2, r3, #4
 80080da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080de:	4413      	add	r3, r2
 80080e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080fa:	801a      	strh	r2, [r3, #0]
 80080fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b3e      	cmp	r3, #62	; 0x3e
 800810a:	d92b      	bls.n	8008164 <USB_EPStartXfer+0x11cc>
 800810c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800811e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 031f 	and.w	r3, r3, #31
 800812e:	2b00      	cmp	r3, #0
 8008130:	d104      	bne.n	800813c <USB_EPStartXfer+0x11a4>
 8008132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008136:	3b01      	subs	r3, #1
 8008138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800813c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29a      	uxth	r2, r3
 8008144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008148:	b29b      	uxth	r3, r3
 800814a:	029b      	lsls	r3, r3, #10
 800814c:	b29b      	uxth	r3, r3
 800814e:	4313      	orrs	r3, r2
 8008150:	b29b      	uxth	r3, r3
 8008152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815a:	b29a      	uxth	r2, r3
 800815c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	e069      	b.n	8008238 <USB_EPStartXfer+0x12a0>
 8008164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10c      	bne.n	800818e <USB_EPStartXfer+0x11f6>
 8008174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008184:	b29a      	uxth	r2, r3
 8008186:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800818a:	801a      	strh	r2, [r3, #0]
 800818c:	e054      	b.n	8008238 <USB_EPStartXfer+0x12a0>
 800818e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <USB_EPStartXfer+0x1226>
 80081b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b8:	3301      	adds	r3, #1
 80081ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	029b      	lsls	r3, r3, #10
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	e02d      	b.n	8008238 <USB_EPStartXfer+0x12a0>
 80081dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d125      	bne.n	8008238 <USB_EPStartXfer+0x12a0>
 80081ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008202:	4413      	add	r3, r2
 8008204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	011a      	lsls	r2, r3, #4
 8008216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800821a:	4413      	add	r3, r2
 800821c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	b29a      	uxth	r2, r3
 8008232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008236:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8218 	beq.w	800867a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800826a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800826e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <USB_EPStartXfer+0x12ea>
 8008276:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800827a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10d      	bne.n	800829e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008282:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800828a:	2b00      	cmp	r3, #0
 800828c:	f040 81f5 	bne.w	800867a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008290:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 81ee 	bne.w	800867a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800829e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80082c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80082e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	8013      	strh	r3, [r2, #0]
 80082fa:	e1be      	b.n	800867a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80082fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	78db      	ldrb	r3, [r3, #3]
 8008308:	2b01      	cmp	r3, #1
 800830a:	f040 81b4 	bne.w	8008676 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800830e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	429a      	cmp	r2, r3
 8008328:	d917      	bls.n	800835a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800832a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800833a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800834a:	1ad2      	subs	r2, r2, r3
 800834c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	619a      	str	r2, [r3, #24]
 8008358:	e00e      	b.n	8008378 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2200      	movs	r2, #0
 8008376:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f040 8085 	bne.w	8008494 <USB_EPStartXfer+0x14fc>
 800838a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083ae:	4413      	add	r3, r2
 80083b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	011a      	lsls	r2, r3, #4
 80083c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083c6:	4413      	add	r3, r2
 80083c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083dc:	b29a      	uxth	r2, r3
 80083de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e2:	801a      	strh	r2, [r3, #0]
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ea:	d923      	bls.n	8008434 <USB_EPStartXfer+0x149c>
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <USB_EPStartXfer+0x1474>
 8008402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008406:	3b01      	subs	r3, #1
 8008408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800840c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29a      	uxth	r2, r3
 8008414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008418:	b29b      	uxth	r3, r3
 800841a:	029b      	lsls	r3, r3, #10
 800841c:	b29b      	uxth	r3, r3
 800841e:	4313      	orrs	r3, r2
 8008420:	b29b      	uxth	r3, r3
 8008422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800842a:	b29a      	uxth	r2, r3
 800842c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008430:	801a      	strh	r2, [r3, #0]
 8008432:	e060      	b.n	80084f6 <USB_EPStartXfer+0x155e>
 8008434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10c      	bne.n	8008456 <USB_EPStartXfer+0x14be>
 800843c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800844c:	b29a      	uxth	r2, r3
 800844e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	e04f      	b.n	80084f6 <USB_EPStartXfer+0x155e>
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <USB_EPStartXfer+0x14de>
 800846c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008470:	3301      	adds	r3, #1
 8008472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	b29a      	uxth	r2, r3
 800847e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008482:	b29b      	uxth	r3, r3
 8008484:	029b      	lsls	r3, r3, #10
 8008486:	b29b      	uxth	r3, r3
 8008488:	4313      	orrs	r3, r2
 800848a:	b29a      	uxth	r2, r3
 800848c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008490:	801a      	strh	r2, [r3, #0]
 8008492:	e030      	b.n	80084f6 <USB_EPStartXfer+0x155e>
 8008494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d128      	bne.n	80084f6 <USB_EPStartXfer+0x155e>
 80084a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084c8:	4413      	add	r3, r2
 80084ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	011a      	lsls	r2, r3, #4
 80084dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084e0:	4413      	add	r3, r2
 80084e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b00      	cmp	r3, #0
 8008512:	f040 8085 	bne.w	8008620 <USB_EPStartXfer+0x1688>
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008532:	b29b      	uxth	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800853a:	4413      	add	r3, r2
 800853c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	011a      	lsls	r2, r3, #4
 800854e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008552:	4413      	add	r3, r2
 8008554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800855c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008568:	b29a      	uxth	r2, r3
 800856a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008574:	2b3e      	cmp	r3, #62	; 0x3e
 8008576:	d923      	bls.n	80085c0 <USB_EPStartXfer+0x1628>
 8008578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857c:	095b      	lsrs	r3, r3, #5
 800857e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <USB_EPStartXfer+0x1600>
 800858e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008592:	3b01      	subs	r3, #1
 8008594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29a      	uxth	r2, r3
 80085a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	029b      	lsls	r3, r3, #10
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4313      	orrs	r3, r2
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085bc:	801a      	strh	r2, [r3, #0]
 80085be:	e05c      	b.n	800867a <USB_EPStartXfer+0x16e2>
 80085c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10c      	bne.n	80085e2 <USB_EPStartXfer+0x164a>
 80085c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d8:	b29a      	uxth	r2, r3
 80085da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085de:	801a      	strh	r2, [r3, #0]
 80085e0:	e04b      	b.n	800867a <USB_EPStartXfer+0x16e2>
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e6:	085b      	lsrs	r3, r3, #1
 80085e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <USB_EPStartXfer+0x166a>
 80085f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085fc:	3301      	adds	r3, #1
 80085fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860e:	b29b      	uxth	r3, r3
 8008610:	029b      	lsls	r3, r3, #10
 8008612:	b29b      	uxth	r3, r3
 8008614:	4313      	orrs	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800861c:	801a      	strh	r2, [r3, #0]
 800861e:	e02c      	b.n	800867a <USB_EPStartXfer+0x16e2>
 8008620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d124      	bne.n	800867a <USB_EPStartXfer+0x16e2>
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	011a      	lsls	r2, r3, #4
 800865a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800865e:	4413      	add	r3, r2
 8008660:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866c:	b29a      	uxth	r2, r3
 800866e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	e001      	b.n	800867a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e03a      	b.n	80086f0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800867a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800869c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80086a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80086a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80086b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80086b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80086bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d020      	beq.n	800874e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008722:	81bb      	strh	r3, [r7, #12]
 8008724:	89bb      	ldrh	r3, [r7, #12]
 8008726:	f083 0310 	eor.w	r3, r3, #16
 800872a:	81bb      	strh	r3, [r7, #12]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	441a      	add	r2, r3
 8008736:	89bb      	ldrh	r3, [r7, #12]
 8008738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008748:	b29b      	uxth	r3, r3
 800874a:	8013      	strh	r3, [r2, #0]
 800874c:	e01f      	b.n	800878e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008764:	81fb      	strh	r3, [r7, #14]
 8008766:	89fb      	ldrh	r3, [r7, #14]
 8008768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800876c:	81fb      	strh	r3, [r7, #14]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	441a      	add	r2, r3
 8008778:	89fb      	ldrh	r3, [r7, #14]
 800877a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878a:	b29b      	uxth	r3, r3
 800878c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr

0800879a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800879a:	b480      	push	{r7}
 800879c:	b087      	sub	sp, #28
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	7b1b      	ldrb	r3, [r3, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f040 809d 	bne.w	80088e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	785b      	ldrb	r3, [r3, #1]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d04c      	beq.n	8008850 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	823b      	strh	r3, [r7, #16]
 80087c4:	8a3b      	ldrh	r3, [r7, #16]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01b      	beq.n	8008806 <USB_EPClearStall+0x6c>
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e4:	81fb      	strh	r3, [r7, #14]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	441a      	add	r2, r3
 80087f0:	89fb      	ldrh	r3, [r7, #14]
 80087f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008802:	b29b      	uxth	r3, r3
 8008804:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	78db      	ldrb	r3, [r3, #3]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d06c      	beq.n	80088e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	81bb      	strh	r3, [r7, #12]
 8008826:	89bb      	ldrh	r3, [r7, #12]
 8008828:	f083 0320 	eor.w	r3, r3, #32
 800882c:	81bb      	strh	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	89bb      	ldrh	r3, [r7, #12]
 800883a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884a:	b29b      	uxth	r3, r3
 800884c:	8013      	strh	r3, [r2, #0]
 800884e:	e04b      	b.n	80088e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	82fb      	strh	r3, [r7, #22]
 800885e:	8afb      	ldrh	r3, [r7, #22]
 8008860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01b      	beq.n	80088a0 <USB_EPClearStall+0x106>
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	82bb      	strh	r3, [r7, #20]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	8abb      	ldrh	r3, [r7, #20]
 800888c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889c:	b29b      	uxth	r3, r3
 800889e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b6:	827b      	strh	r3, [r7, #18]
 80088b8:	8a7b      	ldrh	r3, [r7, #18]
 80088ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088be:	827b      	strh	r3, [r7, #18]
 80088c0:	8a7b      	ldrh	r3, [r7, #18]
 80088c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088c6:	827b      	strh	r3, [r7, #18]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	441a      	add	r2, r3
 80088d2:	8a7b      	ldrh	r3, [r7, #18]
 80088d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr

080088f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2280      	movs	r2, #128	; 0x80
 800890a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr

0800891a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	bc80      	pop	{r7}
 800892c:	4770      	bx	lr

0800892e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr

08008942 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008950:	b29b      	uxth	r3, r3
 8008952:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008954:	68fb      	ldr	r3, [r7, #12]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr

08008976 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008976:	b480      	push	{r7}
 8008978:	b08b      	sub	sp, #44	; 0x2c
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	4611      	mov	r1, r2
 8008982:	461a      	mov	r2, r3
 8008984:	460b      	mov	r3, r1
 8008986:	80fb      	strh	r3, [r7, #6]
 8008988:	4613      	mov	r3, r2
 800898a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800898c:	88bb      	ldrh	r3, [r7, #4]
 800898e:	3301      	adds	r3, #1
 8008990:	085b      	lsrs	r3, r3, #1
 8008992:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	005a      	lsls	r2, r3, #1
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
 80089ae:	e01e      	b.n	80089ee <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	3301      	adds	r3, #1
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	b21a      	sxth	r2, r3
 80089c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	b21b      	sxth	r3, r3
 80089c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	8a7a      	ldrh	r2, [r7, #18]
 80089ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	3302      	adds	r3, #2
 80089d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	3302      	adds	r3, #2
 80089da:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	3301      	adds	r3, #1
 80089e0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	3301      	adds	r3, #1
 80089e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	3b01      	subs	r3, #1
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1dd      	bne.n	80089b0 <USB_WritePMA+0x3a>
  }
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	372c      	adds	r7, #44	; 0x2c
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr

08008a00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b08b      	sub	sp, #44	; 0x2c
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	460b      	mov	r3, r1
 8008a10:	80fb      	strh	r3, [r7, #6]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a16:	88bb      	ldrh	r3, [r7, #4]
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	005a      	lsls	r2, r3, #1
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	627b      	str	r3, [r7, #36]	; 0x24
 8008a38:	e01b      	b.n	8008a72 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	3302      	adds	r3, #2
 8008a46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	3301      	adds	r3, #1
 8008a54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	3301      	adds	r3, #1
 8008a64:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	3302      	adds	r3, #2
 8008a6a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e0      	bne.n	8008a3a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008a78:	88bb      	ldrh	r3, [r7, #4]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d007      	beq.n	8008a94 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	701a      	strb	r2, [r3, #0]
  }
}
 8008a94:	bf00      	nop
 8008a96:	372c      	adds	r7, #44	; 0x2c
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr

08008a9e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7c1b      	ldrb	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d115      	bne.n	8008ae2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aba:	2202      	movs	r2, #2
 8008abc:	2181      	movs	r1, #129	; 0x81
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fefd 	bl	800a8be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ace:	2202      	movs	r2, #2
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 fef3 	bl	800a8be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008ae0:	e012      	b.n	8008b08 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ae2:	2340      	movs	r3, #64	; 0x40
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	2181      	movs	r1, #129	; 0x81
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fee8 	bl	800a8be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008af4:	2340      	movs	r3, #64	; 0x40
 8008af6:	2202      	movs	r2, #2
 8008af8:	2101      	movs	r1, #1
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fedf 	bl	800a8be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b08:	2308      	movs	r3, #8
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	2182      	movs	r1, #130	; 0x82
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 fed5 	bl	800a8be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b1a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b1e:	f001 fff5 	bl	800ab0c <USBD_static_malloc>
 8008b22:	4602      	mov	r2, r0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008b34:	2301      	movs	r3, #1
 8008b36:	73fb      	strb	r3, [r7, #15]
 8008b38:	e026      	b.n	8008b88 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b40:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	7c1b      	ldrb	r3, [r3, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d109      	bne.n	8008b78 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b6e:	2101      	movs	r1, #1
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 ff95 	bl	800aaa0 <USBD_LL_PrepareReceive>
 8008b76:	e007      	b.n	8008b88 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b7e:	2340      	movs	r3, #64	; 0x40
 8008b80:	2101      	movs	r1, #1
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 ff8c 	bl	800aaa0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ba2:	2181      	movs	r1, #129	; 0x81
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 feb0 	bl	800a90a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fea9 	bl	800a90a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008bc0:	2182      	movs	r1, #130	; 0x82
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 fea1 	bl	800a90a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00e      	beq.n	8008bf6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 ff9b 	bl	800ab24 <USBD_static_free>
    pdev->pClassData = NULL;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c10:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d039      	beq.n	8008c9e <USBD_CDC_Setup+0x9e>
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d17f      	bne.n	8008d2e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	88db      	ldrh	r3, [r3, #6]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d029      	beq.n	8008c8a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	b25b      	sxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	da11      	bge.n	8008c64 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008c4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	88d2      	ldrh	r2, [r2, #6]
 8008c52:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c54:	6939      	ldr	r1, [r7, #16]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	88db      	ldrh	r3, [r3, #6]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 fa0a 	bl	800a076 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008c62:	e06b      	b.n	8008d3c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	785a      	ldrb	r2, [r3, #1]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c7a:	6939      	ldr	r1, [r7, #16]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	88db      	ldrh	r3, [r3, #6]
 8008c80:	461a      	mov	r2, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 fa25 	bl	800a0d2 <USBD_CtlPrepareRx>
      break;
 8008c88:	e058      	b.n	8008d3c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	7850      	ldrb	r0, [r2, #1]
 8008c96:	2200      	movs	r2, #0
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	4798      	blx	r3
      break;
 8008c9c:	e04e      	b.n	8008d3c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	785b      	ldrb	r3, [r3, #1]
 8008ca2:	2b0b      	cmp	r3, #11
 8008ca4:	d02e      	beq.n	8008d04 <USBD_CDC_Setup+0x104>
 8008ca6:	2b0b      	cmp	r3, #11
 8008ca8:	dc38      	bgt.n	8008d1c <USBD_CDC_Setup+0x11c>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <USBD_CDC_Setup+0xb4>
 8008cae:	2b0a      	cmp	r3, #10
 8008cb0:	d014      	beq.n	8008cdc <USBD_CDC_Setup+0xdc>
 8008cb2:	e033      	b.n	8008d1c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d107      	bne.n	8008cce <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008cbe:	f107 030c 	add.w	r3, r7, #12
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 f9d5 	bl	800a076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ccc:	e02e      	b.n	8008d2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f966 	bl	8009fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cda:	e027      	b.n	8008d2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d107      	bne.n	8008cf6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ce6:	f107 030f 	add.w	r3, r7, #15
 8008cea:	2201      	movs	r2, #1
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 f9c1 	bl	800a076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cf4:	e01a      	b.n	8008d2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f952 	bl	8009fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	75fb      	strb	r3, [r7, #23]
          break;
 8008d02:	e013      	b.n	8008d2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d00d      	beq.n	8008d2a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 f946 	bl	8009fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d16:	2302      	movs	r3, #2
 8008d18:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d1a:	e006      	b.n	8008d2a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f93f 	bl	8009fa2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d24:	2302      	movs	r3, #2
 8008d26:	75fb      	strb	r3, [r7, #23]
          break;
 8008d28:	e000      	b.n	8008d2c <USBD_CDC_Setup+0x12c>
          break;
 8008d2a:	bf00      	nop
      }
      break;
 8008d2c:	e006      	b.n	8008d3c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f001 f936 	bl	8009fa2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3a:	bf00      	nop
  }

  return ret;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d58:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d03a      	beq.n	8008de2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	331c      	adds	r3, #28
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d029      	beq.n	8008dd6 <USBD_CDC_DataIn+0x90>
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	440b      	add	r3, r1
 8008d90:	331c      	adds	r3, #28
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	78f9      	ldrb	r1, [r7, #3]
 8008d96:	68b8      	ldr	r0, [r7, #8]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	4403      	add	r3, r0
 8008da2:	3338      	adds	r3, #56	; 0x38
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	fbb2 f1f3 	udiv	r1, r2, r3
 8008daa:	fb01 f303 	mul.w	r3, r1, r3
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d110      	bne.n	8008dd6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	331c      	adds	r3, #28
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dc8:	78f9      	ldrb	r1, [r7, #3]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2200      	movs	r2, #0
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fe43 	bl	800aa5a <USBD_LL_Transmit>
 8008dd4:	e003      	b.n	8008dde <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e000      	b.n	8008de4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008de2:	2302      	movs	r3, #2
  }
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fe6e 	bl	800aae6 <USBD_LL_GetRxDataSize>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00d      	beq.n	8008e38 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e30:	4611      	mov	r1, r2
 8008e32:	4798      	blx	r3

    return USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	e000      	b.n	8008e3a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008e38:	2302      	movs	r3, #2
  }
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e50:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d015      	beq.n	8008e88 <USBD_CDC_EP0_RxReady+0x46>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e62:	2bff      	cmp	r3, #255	; 0xff
 8008e64:	d010      	beq.n	8008e88 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008e74:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	22ff      	movs	r2, #255	; 0xff
 8008e84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2243      	movs	r2, #67	; 0x43
 8008ea0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ea2:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	200000a0 	.word	0x200000a0

08008eb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2243      	movs	r2, #67	; 0x43
 8008ec0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008ec2:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	2000005c 	.word	0x2000005c

08008ed4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2243      	movs	r2, #67	; 0x43
 8008ee0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ee2:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	200000e4 	.word	0x200000e4

08008ef4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	220a      	movs	r2, #10
 8008f00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008f02:	4b03      	ldr	r3, [pc, #12]	; (8008f10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bc80      	pop	{r7}
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	20000018 	.word	0x20000018

08008f14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr

08008f40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	371c      	adds	r7, #28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bc80      	pop	{r7}
 8008f70:	4770      	bx	lr

08008f72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b085      	sub	sp, #20
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr

08008f98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01c      	beq.n	8008fec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d115      	bne.n	8008fe8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2181      	movs	r1, #129	; 0x81
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fd3b 	bl	800aa5a <USBD_LL_Transmit>

      return USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e002      	b.n	8008fee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e000      	b.n	8008fee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009004:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d017      	beq.n	8009040 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7c1b      	ldrb	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800901e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009022:	2101      	movs	r1, #1
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 fd3b 	bl	800aaa0 <USBD_LL_PrepareReceive>
 800902a:	e007      	b.n	800903c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009032:	2340      	movs	r3, #64	; 0x40
 8009034:	2101      	movs	r1, #1
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fd32 	bl	800aaa0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	e000      	b.n	8009042 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009040:	2302      	movs	r3, #2
  }
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800905e:	2302      	movs	r3, #2
 8009060:	e01a      	b.n	8009098 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	79fa      	ldrb	r2, [r7, #7]
 800908e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f001 fb9f 	bl	800a7d4 <USBD_LL_Init>

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d006      	beq.n	80090c2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
 80090c0:	e001      	b.n	80090c6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80090c2:	2302      	movs	r3, #2
 80090c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 fbd4 	bl	800a888 <USBD_LL_Start>

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr

080090fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800910a:	2302      	movs	r3, #2
 800910c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00c      	beq.n	8009132 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	4611      	mov	r1, r2
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	4611      	mov	r1, r2
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	4798      	blx	r3

  return USBD_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b082      	sub	sp, #8
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fed8 	bl	8009f2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009188:	461a      	mov	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009196:	f003 031f 	and.w	r3, r3, #31
 800919a:	2b02      	cmp	r3, #2
 800919c:	d016      	beq.n	80091cc <USBD_LL_SetupStage+0x6a>
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d81c      	bhi.n	80091dc <USBD_LL_SetupStage+0x7a>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <USBD_LL_SetupStage+0x4a>
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d008      	beq.n	80091bc <USBD_LL_SetupStage+0x5a>
 80091aa:	e017      	b.n	80091dc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f9cb 	bl	8009550 <USBD_StdDevReq>
      break;
 80091ba:	e01a      	b.n	80091f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fa2d 	bl	8009624 <USBD_StdItfReq>
      break;
 80091ca:	e012      	b.n	80091f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fa6d 	bl	80096b4 <USBD_StdEPReq>
      break;
 80091da:	e00a      	b.n	80091f2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80091e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fbac 	bl	800a948 <USBD_LL_StallEP>
      break;
 80091f0:	bf00      	nop
  }

  return USBD_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	460b      	mov	r3, r1
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d14b      	bne.n	80092a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009216:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800921e:	2b03      	cmp	r3, #3
 8009220:	d134      	bne.n	800928c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	429a      	cmp	r2, r3
 800922c:	d919      	bls.n	8009262 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	1ad2      	subs	r2, r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009244:	429a      	cmp	r2, r3
 8009246:	d203      	bcs.n	8009250 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800924c:	b29b      	uxth	r3, r3
 800924e:	e002      	b.n	8009256 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009254:	b29b      	uxth	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 ff57 	bl	800a10e <USBD_CtlContinueRx>
 8009260:	e038      	b.n	80092d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009274:	2b03      	cmp	r3, #3
 8009276:	d105      	bne.n	8009284 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 ff54 	bl	800a132 <USBD_CtlSendStatus>
 800928a:	e023      	b.n	80092d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009292:	2b05      	cmp	r3, #5
 8009294:	d11e      	bne.n	80092d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800929e:	2100      	movs	r1, #0
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f001 fb51 	bl	800a948 <USBD_LL_StallEP>
 80092a6:	e015      	b.n	80092d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00d      	beq.n	80092d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d108      	bne.n	80092d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	7afa      	ldrb	r2, [r7, #11]
 80092c8:	4611      	mov	r1, r2
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	4798      	blx	r3
 80092ce:	e001      	b.n	80092d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80092d0:	2302      	movs	r3, #2
 80092d2:	e000      	b.n	80092d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	460b      	mov	r3, r1
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d17f      	bne.n	80093f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3314      	adds	r3, #20
 80092f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d15c      	bne.n	80093bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	68da      	ldr	r2, [r3, #12]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	429a      	cmp	r2, r3
 800930c:	d915      	bls.n	800933a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	b29b      	uxth	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 fec1 	bl	800a0ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932c:	2300      	movs	r3, #0
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f001 fbb4 	bl	800aaa0 <USBD_LL_PrepareReceive>
 8009338:	e04e      	b.n	80093d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	6912      	ldr	r2, [r2, #16]
 8009342:	fbb3 f1f2 	udiv	r1, r3, r2
 8009346:	fb01 f202 	mul.w	r2, r1, r2
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11c      	bne.n	800938a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009358:	429a      	cmp	r2, r3
 800935a:	d316      	bcc.n	800938a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009366:	429a      	cmp	r2, r3
 8009368:	d20f      	bcs.n	800938a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fe9d 	bl	800a0ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800937c:	2300      	movs	r3, #0
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f001 fb8c 	bl	800aaa0 <USBD_LL_PrepareReceive>
 8009388:	e026      	b.n	80093d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800939c:	2b03      	cmp	r3, #3
 800939e:	d105      	bne.n	80093ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80093ac:	2180      	movs	r1, #128	; 0x80
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f001 faca 	bl	800a948 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fecf 	bl	800a158 <USBD_CtlReceiveStatus>
 80093ba:	e00d      	b.n	80093d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d004      	beq.n	80093d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d103      	bne.n	80093d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80093d0:	2180      	movs	r1, #128	; 0x80
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f001 fab8 	bl	800a948 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d11d      	bne.n	800941e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff fe81 	bl	80090ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093f0:	e015      	b.n	800941e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009404:	2b03      	cmp	r3, #3
 8009406:	d108      	bne.n	800941a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	7afa      	ldrb	r2, [r7, #11]
 8009412:	4611      	mov	r1, r2
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	4798      	blx	r3
 8009418:	e001      	b.n	800941e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800941a:	2302      	movs	r3, #2
 800941c:	e000      	b.n	8009420 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009430:	2340      	movs	r3, #64	; 0x40
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 fa41 	bl	800a8be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2240      	movs	r2, #64	; 0x40
 8009448:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800944c:	2340      	movs	r3, #64	; 0x40
 800944e:	2200      	movs	r2, #0
 8009450:	2180      	movs	r1, #128	; 0x80
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 fa33 	bl	800a8be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2240      	movs	r2, #64	; 0x40
 8009462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d009      	beq.n	80094a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6852      	ldr	r2, [r2, #4]
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	4611      	mov	r1, r2
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	4798      	blx	r3
  }

  return USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bc80      	pop	{r7}
 80094c6:	4770      	bx	lr

080094c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2204      	movs	r2, #4
 80094e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr

080094f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d105      	bne.n	800950e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr

0800951a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009528:	2b03      	cmp	r3, #3
 800952a:	d10b      	bne.n	8009544 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d005      	beq.n	8009544 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009566:	2b40      	cmp	r3, #64	; 0x40
 8009568:	d005      	beq.n	8009576 <USBD_StdDevReq+0x26>
 800956a:	2b40      	cmp	r3, #64	; 0x40
 800956c:	d84f      	bhi.n	800960e <USBD_StdDevReq+0xbe>
 800956e:	2b00      	cmp	r3, #0
 8009570:	d009      	beq.n	8009586 <USBD_StdDevReq+0x36>
 8009572:	2b20      	cmp	r3, #32
 8009574:	d14b      	bne.n	800960e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	4798      	blx	r3
      break;
 8009584:	e048      	b.n	8009618 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	2b09      	cmp	r3, #9
 800958c:	d839      	bhi.n	8009602 <USBD_StdDevReq+0xb2>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <USBD_StdDevReq+0x44>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095e5 	.word	0x080095e5
 8009598:	080095f9 	.word	0x080095f9
 800959c:	08009603 	.word	0x08009603
 80095a0:	080095ef 	.word	0x080095ef
 80095a4:	08009603 	.word	0x08009603
 80095a8:	080095c7 	.word	0x080095c7
 80095ac:	080095bd 	.word	0x080095bd
 80095b0:	08009603 	.word	0x08009603
 80095b4:	080095db 	.word	0x080095db
 80095b8:	080095d1 	.word	0x080095d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f9dc 	bl	800997c <USBD_GetDescriptor>
          break;
 80095c4:	e022      	b.n	800960c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fb3f 	bl	8009c4c <USBD_SetAddress>
          break;
 80095ce:	e01d      	b.n	800960c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fb7e 	bl	8009cd4 <USBD_SetConfig>
          break;
 80095d8:	e018      	b.n	800960c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fc07 	bl	8009df0 <USBD_GetConfig>
          break;
 80095e2:	e013      	b.n	800960c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fc37 	bl	8009e5a <USBD_GetStatus>
          break;
 80095ec:	e00e      	b.n	800960c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fc65 	bl	8009ec0 <USBD_SetFeature>
          break;
 80095f6:	e009      	b.n	800960c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fc74 	bl	8009ee8 <USBD_ClrFeature>
          break;
 8009600:	e004      	b.n	800960c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fccc 	bl	8009fa2 <USBD_CtlError>
          break;
 800960a:	bf00      	nop
      }
      break;
 800960c:	e004      	b.n	8009618 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fcc6 	bl	8009fa2 <USBD_CtlError>
      break;
 8009616:	bf00      	nop
  }

  return ret;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop

08009624 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	d005      	beq.n	800964a <USBD_StdItfReq+0x26>
 800963e:	2b40      	cmp	r3, #64	; 0x40
 8009640:	d82e      	bhi.n	80096a0 <USBD_StdItfReq+0x7c>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <USBD_StdItfReq+0x26>
 8009646:	2b20      	cmp	r3, #32
 8009648:	d12a      	bne.n	80096a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009650:	3b01      	subs	r3, #1
 8009652:	2b02      	cmp	r3, #2
 8009654:	d81d      	bhi.n	8009692 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	889b      	ldrh	r3, [r3, #4]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b01      	cmp	r3, #1
 800965e:	d813      	bhi.n	8009688 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	88db      	ldrh	r3, [r3, #6]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d110      	bne.n	800969c <USBD_StdItfReq+0x78>
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10d      	bne.n	800969c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fd56 	bl	800a132 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009686:	e009      	b.n	800969c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fc89 	bl	8009fa2 <USBD_CtlError>
          break;
 8009690:	e004      	b.n	800969c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc84 	bl	8009fa2 <USBD_CtlError>
          break;
 800969a:	e000      	b.n	800969e <USBD_StdItfReq+0x7a>
          break;
 800969c:	bf00      	nop
      }
      break;
 800969e:	e004      	b.n	80096aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fc7d 	bl	8009fa2 <USBD_CtlError>
      break;
 80096a8:	bf00      	nop
  }

  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	889b      	ldrh	r3, [r3, #4]
 80096c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096d0:	2b40      	cmp	r3, #64	; 0x40
 80096d2:	d007      	beq.n	80096e4 <USBD_StdEPReq+0x30>
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	f200 8146 	bhi.w	8009966 <USBD_StdEPReq+0x2b2>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <USBD_StdEPReq+0x40>
 80096de:	2b20      	cmp	r3, #32
 80096e0:	f040 8141 	bne.w	8009966 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
      break;
 80096f2:	e13d      	b.n	8009970 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	d10a      	bne.n	8009716 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	e12d      	b.n	8009972 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b03      	cmp	r3, #3
 800971c:	d007      	beq.n	800972e <USBD_StdEPReq+0x7a>
 800971e:	2b03      	cmp	r3, #3
 8009720:	f300 811b 	bgt.w	800995a <USBD_StdEPReq+0x2a6>
 8009724:	2b00      	cmp	r3, #0
 8009726:	d072      	beq.n	800980e <USBD_StdEPReq+0x15a>
 8009728:	2b01      	cmp	r3, #1
 800972a:	d03a      	beq.n	80097a2 <USBD_StdEPReq+0xee>
 800972c:	e115      	b.n	800995a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009734:	2b02      	cmp	r3, #2
 8009736:	d002      	beq.n	800973e <USBD_StdEPReq+0x8a>
 8009738:	2b03      	cmp	r3, #3
 800973a:	d015      	beq.n	8009768 <USBD_StdEPReq+0xb4>
 800973c:	e02b      	b.n	8009796 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00c      	beq.n	800975e <USBD_StdEPReq+0xaa>
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b80      	cmp	r3, #128	; 0x80
 8009748:	d009      	beq.n	800975e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 f8fa 	bl	800a948 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009754:	2180      	movs	r1, #128	; 0x80
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 f8f6 	bl	800a948 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800975c:	e020      	b.n	80097a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fc1e 	bl	8009fa2 <USBD_CtlError>
              break;
 8009766:	e01b      	b.n	80097a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	885b      	ldrh	r3, [r3, #2]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10e      	bne.n	800978e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00b      	beq.n	800978e <USBD_StdEPReq+0xda>
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	2b80      	cmp	r3, #128	; 0x80
 800977a:	d008      	beq.n	800978e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	88db      	ldrh	r3, [r3, #6]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d104      	bne.n	800978e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 f8dd 	bl	800a948 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fccf 	bl	800a132 <USBD_CtlSendStatus>

              break;
 8009794:	e004      	b.n	80097a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fc02 	bl	8009fa2 <USBD_CtlError>
              break;
 800979e:	bf00      	nop
          }
          break;
 80097a0:	e0e0      	b.n	8009964 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d002      	beq.n	80097b2 <USBD_StdEPReq+0xfe>
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d015      	beq.n	80097dc <USBD_StdEPReq+0x128>
 80097b0:	e026      	b.n	8009800 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00c      	beq.n	80097d2 <USBD_StdEPReq+0x11e>
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b80      	cmp	r3, #128	; 0x80
 80097bc:	d009      	beq.n	80097d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 f8c0 	bl	800a948 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80097c8:	2180      	movs	r1, #128	; 0x80
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 f8bc 	bl	800a948 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097d0:	e01c      	b.n	800980c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fbe4 	bl	8009fa2 <USBD_CtlError>
              break;
 80097da:	e017      	b.n	800980c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	885b      	ldrh	r3, [r3, #2]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d112      	bne.n	800980a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d004      	beq.n	80097f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f8c7 	bl	800a986 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fc9a 	bl	800a132 <USBD_CtlSendStatus>
              }
              break;
 80097fe:	e004      	b.n	800980a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fbcd 	bl	8009fa2 <USBD_CtlError>
              break;
 8009808:	e000      	b.n	800980c <USBD_StdEPReq+0x158>
              break;
 800980a:	bf00      	nop
          }
          break;
 800980c:	e0aa      	b.n	8009964 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009814:	2b02      	cmp	r3, #2
 8009816:	d002      	beq.n	800981e <USBD_StdEPReq+0x16a>
 8009818:	2b03      	cmp	r3, #3
 800981a:	d032      	beq.n	8009882 <USBD_StdEPReq+0x1ce>
 800981c:	e097      	b.n	800994e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d007      	beq.n	8009834 <USBD_StdEPReq+0x180>
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d004      	beq.n	8009834 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fbb8 	bl	8009fa2 <USBD_CtlError>
                break;
 8009832:	e091      	b.n	8009958 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009838:	2b00      	cmp	r3, #0
 800983a:	da0b      	bge.n	8009854 <USBD_StdEPReq+0x1a0>
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	3310      	adds	r3, #16
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	4413      	add	r3, r2
 8009850:	3304      	adds	r3, #4
 8009852:	e00b      	b.n	800986c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	3304      	adds	r3, #4
 800986c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2202      	movs	r2, #2
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fbfb 	bl	800a076 <USBD_CtlSendData>
              break;
 8009880:	e06a      	b.n	8009958 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009886:	2b00      	cmp	r3, #0
 8009888:	da11      	bge.n	80098ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	f003 020f 	and.w	r2, r3, #15
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	3318      	adds	r3, #24
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d117      	bne.n	80098d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fb7b 	bl	8009fa2 <USBD_CtlError>
                  break;
 80098ac:	e054      	b.n	8009958 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	f003 020f 	and.w	r2, r3, #15
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	440b      	add	r3, r1
 80098c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d104      	bne.n	80098d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fb68 	bl	8009fa2 <USBD_CtlError>
                  break;
 80098d2:	e041      	b.n	8009958 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	da0b      	bge.n	80098f4 <USBD_StdEPReq+0x240>
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	3310      	adds	r3, #16
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	4413      	add	r3, r2
 80098f0:	3304      	adds	r3, #4
 80098f2:	e00b      	b.n	800990c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	4413      	add	r3, r2
 800990a:	3304      	adds	r3, #4
 800990c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <USBD_StdEPReq+0x266>
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	2b80      	cmp	r3, #128	; 0x80
 8009918:	d103      	bne.n	8009922 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e00e      	b.n	8009940 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 f84c 	bl	800a9c4 <USBD_LL_IsStallEP>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2201      	movs	r2, #1
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e002      	b.n	8009940 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2202      	movs	r2, #2
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fb95 	bl	800a076 <USBD_CtlSendData>
              break;
 800994c:	e004      	b.n	8009958 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fb26 	bl	8009fa2 <USBD_CtlError>
              break;
 8009956:	bf00      	nop
          }
          break;
 8009958:	e004      	b.n	8009964 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fb20 	bl	8009fa2 <USBD_CtlError>
          break;
 8009962:	bf00      	nop
      }
      break;
 8009964:	e004      	b.n	8009970 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fb1a 	bl	8009fa2 <USBD_CtlError>
      break;
 800996e:	bf00      	nop
  }

  return ret;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009986:	2300      	movs	r3, #0
 8009988:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	885b      	ldrh	r3, [r3, #2]
 8009996:	0a1b      	lsrs	r3, r3, #8
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	2b06      	cmp	r3, #6
 800999e:	f200 8128 	bhi.w	8009bf2 <USBD_GetDescriptor+0x276>
 80099a2:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <USBD_GetDescriptor+0x2c>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099c5 	.word	0x080099c5
 80099ac:	080099dd 	.word	0x080099dd
 80099b0:	08009a1d 	.word	0x08009a1d
 80099b4:	08009bf3 	.word	0x08009bf3
 80099b8:	08009bf3 	.word	0x08009bf3
 80099bc:	08009b93 	.word	0x08009b93
 80099c0:	08009bbf 	.word	0x08009bbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	7c12      	ldrb	r2, [r2, #16]
 80099d0:	f107 0108 	add.w	r1, r7, #8
 80099d4:	4610      	mov	r0, r2
 80099d6:	4798      	blx	r3
 80099d8:	60f8      	str	r0, [r7, #12]
      break;
 80099da:	e112      	b.n	8009c02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	7c1b      	ldrb	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10d      	bne.n	8009a00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ec:	f107 0208 	add.w	r2, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	2202      	movs	r2, #2
 80099fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099fe:	e100      	b.n	8009c02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	f107 0208 	add.w	r2, r7, #8
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
 8009a10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	2202      	movs	r2, #2
 8009a18:	701a      	strb	r2, [r3, #0]
      break;
 8009a1a:	e0f2      	b.n	8009c02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	885b      	ldrh	r3, [r3, #2]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	f200 80ac 	bhi.w	8009b80 <USBD_GetDescriptor+0x204>
 8009a28:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <USBD_GetDescriptor+0xb4>)
 8009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2e:	bf00      	nop
 8009a30:	08009a49 	.word	0x08009a49
 8009a34:	08009a7d 	.word	0x08009a7d
 8009a38:	08009ab1 	.word	0x08009ab1
 8009a3c:	08009ae5 	.word	0x08009ae5
 8009a40:	08009b19 	.word	0x08009b19
 8009a44:	08009b4d 	.word	0x08009b4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7c12      	ldrb	r2, [r2, #16]
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6a:	e091      	b.n	8009b90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa97 	bl	8009fa2 <USBD_CtlError>
            err++;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	3301      	adds	r3, #1
 8009a78:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7a:	e089      	b.n	8009b90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	7c12      	ldrb	r2, [r2, #16]
 8009a94:	f107 0108 	add.w	r1, r7, #8
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
 8009a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a9e:	e077      	b.n	8009b90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa7d 	bl	8009fa2 <USBD_CtlError>
            err++;
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	72fb      	strb	r3, [r7, #11]
          break;
 8009aae:	e06f      	b.n	8009b90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	7c12      	ldrb	r2, [r2, #16]
 8009ac8:	f107 0108 	add.w	r1, r7, #8
 8009acc:	4610      	mov	r0, r2
 8009ace:	4798      	blx	r3
 8009ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ad2:	e05d      	b.n	8009b90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fa63 	bl	8009fa2 <USBD_CtlError>
            err++;
 8009adc:	7afb      	ldrb	r3, [r7, #11]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ae2:	e055      	b.n	8009b90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00b      	beq.n	8009b08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	7c12      	ldrb	r2, [r2, #16]
 8009afc:	f107 0108 	add.w	r1, r7, #8
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b06:	e043      	b.n	8009b90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa49 	bl	8009fa2 <USBD_CtlError>
            err++;
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	3301      	adds	r3, #1
 8009b14:	72fb      	strb	r3, [r7, #11]
          break;
 8009b16:	e03b      	b.n	8009b90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	7c12      	ldrb	r2, [r2, #16]
 8009b30:	f107 0108 	add.w	r1, r7, #8
 8009b34:	4610      	mov	r0, r2
 8009b36:	4798      	blx	r3
 8009b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b3a:	e029      	b.n	8009b90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa2f 	bl	8009fa2 <USBD_CtlError>
            err++;
 8009b44:	7afb      	ldrb	r3, [r7, #11]
 8009b46:	3301      	adds	r3, #1
 8009b48:	72fb      	strb	r3, [r7, #11]
          break;
 8009b4a:	e021      	b.n	8009b90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	7c12      	ldrb	r2, [r2, #16]
 8009b64:	f107 0108 	add.w	r1, r7, #8
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4798      	blx	r3
 8009b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b6e:	e00f      	b.n	8009b90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa15 	bl	8009fa2 <USBD_CtlError>
            err++;
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b7e:	e007      	b.n	8009b90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fa0d 	bl	8009fa2 <USBD_CtlError>
          err++;
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009b8e:	e038      	b.n	8009c02 <USBD_GetDescriptor+0x286>
 8009b90:	e037      	b.n	8009c02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	7c1b      	ldrb	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d109      	bne.n	8009bae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba2:	f107 0208 	add.w	r2, r7, #8
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	4798      	blx	r3
 8009baa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bac:	e029      	b.n	8009c02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f9f6 	bl	8009fa2 <USBD_CtlError>
        err++;
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	72fb      	strb	r3, [r7, #11]
      break;
 8009bbc:	e021      	b.n	8009c02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	7c1b      	ldrb	r3, [r3, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10d      	bne.n	8009be2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f107 0208 	add.w	r2, r7, #8
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	4798      	blx	r3
 8009bd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	2207      	movs	r2, #7
 8009bde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009be0:	e00f      	b.n	8009c02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f9dc 	bl	8009fa2 <USBD_CtlError>
        err++;
 8009bea:	7afb      	ldrb	r3, [r7, #11]
 8009bec:	3301      	adds	r3, #1
 8009bee:	72fb      	strb	r3, [r7, #11]
      break;
 8009bf0:	e007      	b.n	8009c02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f9d4 	bl	8009fa2 <USBD_CtlError>
      err++;
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009c00:	bf00      	nop
  }

  if (err != 0U)
 8009c02:	7afb      	ldrb	r3, [r7, #11]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d11c      	bne.n	8009c42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009c08:	893b      	ldrh	r3, [r7, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d011      	beq.n	8009c32 <USBD_GetDescriptor+0x2b6>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	88db      	ldrh	r3, [r3, #6]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00d      	beq.n	8009c32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	88da      	ldrh	r2, [r3, #6]
 8009c1a:	893b      	ldrh	r3, [r7, #8]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	bf28      	it	cs
 8009c20:	4613      	movcs	r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c26:	893b      	ldrh	r3, [r7, #8]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	68f9      	ldr	r1, [r7, #12]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fa22 	bl	800a076 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	88db      	ldrh	r3, [r3, #6]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d104      	bne.n	8009c44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fa79 	bl	800a132 <USBD_CtlSendStatus>
 8009c40:	e000      	b.n	8009c44 <USBD_GetDescriptor+0x2c8>
    return;
 8009c42:	bf00      	nop
    }
  }
}
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop

08009c4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	889b      	ldrh	r3, [r3, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d130      	bne.n	8009cc0 <USBD_SetAddress+0x74>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	88db      	ldrh	r3, [r3, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d12c      	bne.n	8009cc0 <USBD_SetAddress+0x74>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c6c:	d828      	bhi.n	8009cc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d104      	bne.n	8009c8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f98b 	bl	8009fa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8c:	e01d      	b.n	8009cca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	7bfa      	ldrb	r2, [r7, #15]
 8009c92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 febe 	bl	800aa1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fa46 	bl	800a132 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d004      	beq.n	8009cb6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb4:	e009      	b.n	8009cca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbe:	e004      	b.n	8009cca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f96d 	bl	8009fa2 <USBD_CtlError>
  }
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	885b      	ldrh	r3, [r3, #2]
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	4b41      	ldr	r3, [pc, #260]	; (8009dec <USBD_SetConfig+0x118>)
 8009ce6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ce8:	4b40      	ldr	r3, [pc, #256]	; (8009dec <USBD_SetConfig+0x118>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d904      	bls.n	8009cfa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f955 	bl	8009fa2 <USBD_CtlError>
 8009cf8:	e075      	b.n	8009de6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d002      	beq.n	8009d0a <USBD_SetConfig+0x36>
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d023      	beq.n	8009d50 <USBD_SetConfig+0x7c>
 8009d08:	e062      	b.n	8009dd0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009d0a:	4b38      	ldr	r3, [pc, #224]	; (8009dec <USBD_SetConfig+0x118>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d01a      	beq.n	8009d48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009d12:	4b36      	ldr	r3, [pc, #216]	; (8009dec <USBD_SetConfig+0x118>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2203      	movs	r2, #3
 8009d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d24:	4b31      	ldr	r3, [pc, #196]	; (8009dec <USBD_SetConfig+0x118>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff f9e7 	bl	80090fe <USBD_SetClassConfig>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d104      	bne.n	8009d40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f932 	bl	8009fa2 <USBD_CtlError>
            return;
 8009d3e:	e052      	b.n	8009de6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f9f6 	bl	800a132 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d46:	e04e      	b.n	8009de6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f9f2 	bl	800a132 <USBD_CtlSendStatus>
        break;
 8009d4e:	e04a      	b.n	8009de6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009d50:	4b26      	ldr	r3, [pc, #152]	; (8009dec <USBD_SetConfig+0x118>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d112      	bne.n	8009d7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009d60:	4b22      	ldr	r3, [pc, #136]	; (8009dec <USBD_SetConfig+0x118>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	461a      	mov	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009d6a:	4b20      	ldr	r3, [pc, #128]	; (8009dec <USBD_SetConfig+0x118>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff f9e3 	bl	800913c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f9db 	bl	800a132 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d7c:	e033      	b.n	8009de6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009d7e:	4b1b      	ldr	r3, [pc, #108]	; (8009dec <USBD_SetConfig+0x118>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d01d      	beq.n	8009dc8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff f9d1 	bl	800913c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d9a:	4b14      	ldr	r3, [pc, #80]	; (8009dec <USBD_SetConfig+0x118>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009da4:	4b11      	ldr	r3, [pc, #68]	; (8009dec <USBD_SetConfig+0x118>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff f9a7 	bl	80090fe <USBD_SetClassConfig>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d104      	bne.n	8009dc0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f8f2 	bl	8009fa2 <USBD_CtlError>
            return;
 8009dbe:	e012      	b.n	8009de6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f9b6 	bl	800a132 <USBD_CtlSendStatus>
        break;
 8009dc6:	e00e      	b.n	8009de6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f9b2 	bl	800a132 <USBD_CtlSendStatus>
        break;
 8009dce:	e00a      	b.n	8009de6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f8e5 	bl	8009fa2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009dd8:	4b04      	ldr	r3, [pc, #16]	; (8009dec <USBD_SetConfig+0x118>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff f9ac 	bl	800913c <USBD_ClrClassConfig>
        break;
 8009de4:	bf00      	nop
    }
  }
}
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000a4c 	.word	0x20000a4c

08009df0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88db      	ldrh	r3, [r3, #6]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d004      	beq.n	8009e0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f8cc 	bl	8009fa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e0a:	e022      	b.n	8009e52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	dc02      	bgt.n	8009e1c <USBD_GetConfig+0x2c>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	dc03      	bgt.n	8009e22 <USBD_GetConfig+0x32>
 8009e1a:	e015      	b.n	8009e48 <USBD_GetConfig+0x58>
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d00b      	beq.n	8009e38 <USBD_GetConfig+0x48>
 8009e20:	e012      	b.n	8009e48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f920 	bl	800a076 <USBD_CtlSendData>
        break;
 8009e36:	e00c      	b.n	8009e52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f918 	bl	800a076 <USBD_CtlSendData>
        break;
 8009e46:	e004      	b.n	8009e52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f8a9 	bl	8009fa2 <USBD_CtlError>
        break;
 8009e50:	bf00      	nop
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d81e      	bhi.n	8009eae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	88db      	ldrh	r3, [r3, #6]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d004      	beq.n	8009e82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f891 	bl	8009fa2 <USBD_CtlError>
        break;
 8009e80:	e01a      	b.n	8009eb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d005      	beq.n	8009e9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f043 0202 	orr.w	r2, r3, #2
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f8e5 	bl	800a076 <USBD_CtlSendData>
      break;
 8009eac:	e004      	b.n	8009eb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f876 	bl	8009fa2 <USBD_CtlError>
      break;
 8009eb6:	bf00      	nop
  }
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	885b      	ldrh	r3, [r3, #2]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d106      	bne.n	8009ee0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f929 	bl	800a132 <USBD_CtlSendStatus>
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d80b      	bhi.n	8009f16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	885b      	ldrh	r3, [r3, #2]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d10c      	bne.n	8009f20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f90f 	bl	800a132 <USBD_CtlSendStatus>
      }
      break;
 8009f14:	e004      	b.n	8009f20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f842 	bl	8009fa2 <USBD_CtlError>
      break;
 8009f1e:	e000      	b.n	8009f22 <USBD_ClrFeature+0x3a>
      break;
 8009f20:	bf00      	nop
  }
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781a      	ldrb	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	785a      	ldrb	r2, [r3, #1]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	3302      	adds	r3, #2
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	3303      	adds	r3, #3
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	4413      	add	r3, r2
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	3304      	adds	r3, #4
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	3305      	adds	r3, #5
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	021b      	lsls	r3, r3, #8
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	4413      	add	r3, r2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	3306      	adds	r3, #6
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	3307      	adds	r3, #7
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	021b      	lsls	r3, r3, #8
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	4413      	add	r3, r2
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	80da      	strh	r2, [r3, #6]

}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr

08009fa2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009fac:	2180      	movs	r1, #128	; 0x80
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fcca 	bl	800a948 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fcc6 	bl	800a948 <USBD_LL_StallEP>
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d032      	beq.n	800a040 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 f834 	bl	800a048 <USBD_GetLen>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	1c5a      	adds	r2, r3, #1
 8009ff2:	75fa      	strb	r2, [r7, #23]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	7812      	ldrb	r2, [r2, #0]
 8009ffe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a000:	7dfb      	ldrb	r3, [r7, #23]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	75fa      	strb	r2, [r7, #23]
 800a006:	461a      	mov	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4413      	add	r3, r2
 800a00c:	2203      	movs	r2, #3
 800a00e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a010:	e012      	b.n	800a038 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	60fa      	str	r2, [r7, #12]
 800a018:	7dfa      	ldrb	r2, [r7, #23]
 800a01a:	1c51      	adds	r1, r2, #1
 800a01c:	75f9      	strb	r1, [r7, #23]
 800a01e:	4611      	mov	r1, r2
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	440a      	add	r2, r1
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	75fa      	strb	r2, [r7, #23]
 800a02e:	461a      	mov	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	4413      	add	r3, r2
 800a034:	2200      	movs	r2, #0
 800a036:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1e8      	bne.n	800a012 <USBD_GetString+0x4e>
    }
  }
}
 800a040:	bf00      	nop
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a054:	e005      	b.n	800a062 <USBD_GetLen+0x1a>
  {
    len++;
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	3301      	adds	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3301      	adds	r3, #1
 800a060:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1f5      	bne.n	800a056 <USBD_GetLen+0xe>
  }

  return len;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr

0800a076 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	4613      	mov	r3, r2
 800a082:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2202      	movs	r2, #2
 800a088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a08c:	88fa      	ldrh	r2, [r7, #6]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a092:	88fa      	ldrh	r2, [r7, #6]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a098:	88fb      	ldrh	r3, [r7, #6]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	2100      	movs	r1, #0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fcdb 	bl	800aa5a <USBD_LL_Transmit>

  return USBD_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0bc:	88fb      	ldrh	r3, [r7, #6]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 fcc9 	bl	800aa5a <USBD_LL_Transmit>

  return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0e8:	88fa      	ldrh	r2, [r7, #6]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a0f0:	88fa      	ldrh	r2, [r7, #6]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0f8:	88fb      	ldrh	r3, [r7, #6]
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 fcce 	bl	800aaa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	4613      	mov	r3, r2
 800a11a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a11c:	88fb      	ldrh	r3, [r7, #6]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fcbc 	bl	800aaa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2204      	movs	r2, #4
 800a13e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a142:	2300      	movs	r3, #0
 800a144:	2200      	movs	r2, #0
 800a146:	2100      	movs	r1, #0
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fc86 	bl	800aa5a <USBD_LL_Transmit>

  return USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2205      	movs	r2, #5
 800a164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a168:	2300      	movs	r3, #0
 800a16a:	2200      	movs	r2, #0
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fc96 	bl	800aaa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a184:	2200      	movs	r2, #0
 800a186:	4912      	ldr	r1, [pc, #72]	; (800a1d0 <MX_USB_DEVICE_Init+0x50>)
 800a188:	4812      	ldr	r0, [pc, #72]	; (800a1d4 <MX_USB_DEVICE_Init+0x54>)
 800a18a:	f7fe ff5e 	bl	800904a <USBD_Init>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a194:	f7f6 fefa 	bl	8000f8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a198:	490f      	ldr	r1, [pc, #60]	; (800a1d8 <MX_USB_DEVICE_Init+0x58>)
 800a19a:	480e      	ldr	r0, [pc, #56]	; (800a1d4 <MX_USB_DEVICE_Init+0x54>)
 800a19c:	f7fe ff80 	bl	80090a0 <USBD_RegisterClass>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1a6:	f7f6 fef1 	bl	8000f8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1aa:	490c      	ldr	r1, [pc, #48]	; (800a1dc <MX_USB_DEVICE_Init+0x5c>)
 800a1ac:	4809      	ldr	r0, [pc, #36]	; (800a1d4 <MX_USB_DEVICE_Init+0x54>)
 800a1ae:	f7fe feb1 	bl	8008f14 <USBD_CDC_RegisterInterface>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1b8:	f7f6 fee8 	bl	8000f8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1bc:	4805      	ldr	r0, [pc, #20]	; (800a1d4 <MX_USB_DEVICE_Init+0x54>)
 800a1be:	f7fe ff88 	bl	80090d2 <USBD_Start>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1c8:	f7f6 fee0 	bl	8000f8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1cc:	bf00      	nop
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000138 	.word	0x20000138
 800a1d4:	20000a50 	.word	0x20000a50
 800a1d8:	20000024 	.word	0x20000024
 800a1dc:	20000128 	.word	0x20000128

0800a1e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4905      	ldr	r1, [pc, #20]	; (800a1fc <CDC_Init_FS+0x1c>)
 800a1e8:	4805      	ldr	r0, [pc, #20]	; (800a200 <CDC_Init_FS+0x20>)
 800a1ea:	f7fe fea9 	bl	8008f40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1ee:	4905      	ldr	r1, [pc, #20]	; (800a204 <CDC_Init_FS+0x24>)
 800a1f0:	4803      	ldr	r0, [pc, #12]	; (800a200 <CDC_Init_FS+0x20>)
 800a1f2:	f7fe febe 	bl	8008f72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000e14 	.word	0x20000e14
 800a200:	20000a50 	.word	0x20000a50
 800a204:	20000d14 	.word	0x20000d14

0800a208 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a20c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a20e:	4618      	mov	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	bc80      	pop	{r7}
 800a214:	4770      	bx	lr
	...

0800a218 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	6039      	str	r1, [r7, #0]
 800a222:	71fb      	strb	r3, [r7, #7]
 800a224:	4613      	mov	r3, r2
 800a226:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	2b23      	cmp	r3, #35	; 0x23
 800a22c:	f200 808c 	bhi.w	800a348 <CDC_Control_FS+0x130>
 800a230:	a201      	add	r2, pc, #4	; (adr r2, 800a238 <CDC_Control_FS+0x20>)
 800a232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a236:	bf00      	nop
 800a238:	0800a349 	.word	0x0800a349
 800a23c:	0800a349 	.word	0x0800a349
 800a240:	0800a349 	.word	0x0800a349
 800a244:	0800a349 	.word	0x0800a349
 800a248:	0800a349 	.word	0x0800a349
 800a24c:	0800a349 	.word	0x0800a349
 800a250:	0800a349 	.word	0x0800a349
 800a254:	0800a349 	.word	0x0800a349
 800a258:	0800a349 	.word	0x0800a349
 800a25c:	0800a349 	.word	0x0800a349
 800a260:	0800a349 	.word	0x0800a349
 800a264:	0800a349 	.word	0x0800a349
 800a268:	0800a349 	.word	0x0800a349
 800a26c:	0800a349 	.word	0x0800a349
 800a270:	0800a349 	.word	0x0800a349
 800a274:	0800a349 	.word	0x0800a349
 800a278:	0800a349 	.word	0x0800a349
 800a27c:	0800a349 	.word	0x0800a349
 800a280:	0800a349 	.word	0x0800a349
 800a284:	0800a349 	.word	0x0800a349
 800a288:	0800a349 	.word	0x0800a349
 800a28c:	0800a349 	.word	0x0800a349
 800a290:	0800a349 	.word	0x0800a349
 800a294:	0800a349 	.word	0x0800a349
 800a298:	0800a349 	.word	0x0800a349
 800a29c:	0800a349 	.word	0x0800a349
 800a2a0:	0800a349 	.word	0x0800a349
 800a2a4:	0800a349 	.word	0x0800a349
 800a2a8:	0800a349 	.word	0x0800a349
 800a2ac:	0800a349 	.word	0x0800a349
 800a2b0:	0800a349 	.word	0x0800a349
 800a2b4:	0800a349 	.word	0x0800a349
 800a2b8:	0800a2c9 	.word	0x0800a2c9
 800a2bc:	0800a303 	.word	0x0800a303
 800a2c0:	0800a349 	.word	0x0800a349
 800a2c4:	0800a349 	.word	0x0800a349
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	myLineCodeBuf[0] = pbuf[0];
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781a      	ldrb	r2, [r3, #0]
 800a2cc:	4b22      	ldr	r3, [pc, #136]	; (800a358 <CDC_Control_FS+0x140>)
 800a2ce:	701a      	strb	r2, [r3, #0]
    	myLineCodeBuf[1] = pbuf[1];
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	785a      	ldrb	r2, [r3, #1]
 800a2d4:	4b20      	ldr	r3, [pc, #128]	; (800a358 <CDC_Control_FS+0x140>)
 800a2d6:	705a      	strb	r2, [r3, #1]
    	myLineCodeBuf[2] = pbuf[2];
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	789a      	ldrb	r2, [r3, #2]
 800a2dc:	4b1e      	ldr	r3, [pc, #120]	; (800a358 <CDC_Control_FS+0x140>)
 800a2de:	709a      	strb	r2, [r3, #2]
    	myLineCodeBuf[3] = pbuf[3];
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	78da      	ldrb	r2, [r3, #3]
 800a2e4:	4b1c      	ldr	r3, [pc, #112]	; (800a358 <CDC_Control_FS+0x140>)
 800a2e6:	70da      	strb	r2, [r3, #3]
    	myLineCodeBuf[4] = pbuf[4];
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	791a      	ldrb	r2, [r3, #4]
 800a2ec:	4b1a      	ldr	r3, [pc, #104]	; (800a358 <CDC_Control_FS+0x140>)
 800a2ee:	711a      	strb	r2, [r3, #4]
    	myLineCodeBuf[5] = pbuf[5];
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	795a      	ldrb	r2, [r3, #5]
 800a2f4:	4b18      	ldr	r3, [pc, #96]	; (800a358 <CDC_Control_FS+0x140>)
 800a2f6:	715a      	strb	r2, [r3, #5]
    	myLineCodeBuf[6] = pbuf[6];
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	799a      	ldrb	r2, [r3, #6]
 800a2fc:	4b16      	ldr	r3, [pc, #88]	; (800a358 <CDC_Control_FS+0x140>)
 800a2fe:	719a      	strb	r2, [r3, #6]
    break;
 800a300:	e023      	b.n	800a34a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = myLineCodeBuf[0];
 800a302:	4b15      	ldr	r3, [pc, #84]	; (800a358 <CDC_Control_FS+0x140>)
 800a304:	781a      	ldrb	r2, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = myLineCodeBuf[1];
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	3301      	adds	r3, #1
 800a30e:	4a12      	ldr	r2, [pc, #72]	; (800a358 <CDC_Control_FS+0x140>)
 800a310:	7852      	ldrb	r2, [r2, #1]
 800a312:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = myLineCodeBuf[2];
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	3302      	adds	r3, #2
 800a318:	4a0f      	ldr	r2, [pc, #60]	; (800a358 <CDC_Control_FS+0x140>)
 800a31a:	7892      	ldrb	r2, [r2, #2]
 800a31c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = myLineCodeBuf[3];
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	3303      	adds	r3, #3
 800a322:	4a0d      	ldr	r2, [pc, #52]	; (800a358 <CDC_Control_FS+0x140>)
 800a324:	78d2      	ldrb	r2, [r2, #3]
 800a326:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = myLineCodeBuf[4];
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4a0a      	ldr	r2, [pc, #40]	; (800a358 <CDC_Control_FS+0x140>)
 800a32e:	7912      	ldrb	r2, [r2, #4]
 800a330:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = myLineCodeBuf[5];
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	3305      	adds	r3, #5
 800a336:	4a08      	ldr	r2, [pc, #32]	; (800a358 <CDC_Control_FS+0x140>)
 800a338:	7952      	ldrb	r2, [r2, #5]
 800a33a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = myLineCodeBuf[6];
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	3306      	adds	r3, #6
 800a340:	4a05      	ldr	r2, [pc, #20]	; (800a358 <CDC_Control_FS+0x140>)
 800a342:	7992      	ldrb	r2, [r2, #6]
 800a344:	701a      	strb	r2, [r3, #0]
    break;
 800a346:	e000      	b.n	800a34a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a348:	bf00      	nop
  }

  return (USBD_OK);
 800a34a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	bc80      	pop	{r7}
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	20000f14 	.word	0x20000f14

0800a35c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a366:	4b16      	ldr	r3, [pc, #88]	; (800a3c0 <CDC_Receive_FS+0x64>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d007      	beq.n	800a37e <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a36e:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <CDC_Receive_FS+0x64>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	6812      	ldr	r2, [r2, #0]
 800a376:	b292      	uxth	r2, r2
 800a378:	4611      	mov	r1, r2
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	4810      	ldr	r0, [pc, #64]	; (800a3c4 <CDC_Receive_FS+0x68>)
 800a382:	f7fe fdf6 	bl	8008f72 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a386:	480f      	ldr	r0, [pc, #60]	; (800a3c4 <CDC_Receive_FS+0x68>)
 800a388:	f7fe fe35 	bl	8008ff6 <USBD_CDC_ReceivePacket>

	memset (datosComUSB.bufferRx, '\0', 256);  // clear the buffer
 800a38c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a390:	2100      	movs	r1, #0
 800a392:	480d      	ldr	r0, [pc, #52]	; (800a3c8 <CDC_Receive_FS+0x6c>)
 800a394:	f000 fc06 	bl	800aba4 <memset>
	uint8_t len = (uint8_t)*Len;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	73fb      	strb	r3, [r7, #15]
	memcpy(datosComUSB.bufferRx, Buf, len);  // copy the data to the buffer
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	4808      	ldr	r0, [pc, #32]	; (800a3c8 <CDC_Receive_FS+0x6c>)
 800a3a6:	f000 fc29 	bl	800abfc <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fbf7 	bl	800aba4 <memset>

	return (USBD_OK);
 800a3b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20000f1c 	.word	0x20000f1c
 800a3c4:	20000a50 	.word	0x20000a50
 800a3c8:	20000543 	.word	0x20000543

0800a3cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3dc:	4b0d      	ldr	r3, [pc, #52]	; (800a414 <CDC_Transmit_FS+0x48>)
 800a3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e00b      	b.n	800a40a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3f2:	887b      	ldrh	r3, [r7, #2]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	4806      	ldr	r0, [pc, #24]	; (800a414 <CDC_Transmit_FS+0x48>)
 800a3fa:	f7fe fda1 	bl	8008f40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3fe:	4805      	ldr	r0, [pc, #20]	; (800a414 <CDC_Transmit_FS+0x48>)
 800a400:	f7fe fdca 	bl	8008f98 <USBD_CDC_TransmitPacket>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000a50 	.word	0x20000a50

0800a418 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a420:	4a03      	ldr	r2, [pc, #12]	; (800a430 <CDC_AttachRxData+0x18>)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6013      	str	r3, [r2, #0]
}
 800a426:	bf00      	nop
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bc80      	pop	{r7}
 800a42e:	4770      	bx	lr
 800a430:	20000f1c 	.word	0x20000f1c

0800a434 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2212      	movs	r2, #18
 800a444:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a446:	4b03      	ldr	r3, [pc, #12]	; (800a454 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bc80      	pop	{r7}
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20000154 	.word	0x20000154

0800a458 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	6039      	str	r1, [r7, #0]
 800a462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2204      	movs	r2, #4
 800a468:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a46a:	4b03      	ldr	r3, [pc, #12]	; (800a478 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	bc80      	pop	{r7}
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	20000168 	.word	0x20000168

0800a47c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	6039      	str	r1, [r7, #0]
 800a486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d105      	bne.n	800a49a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	4907      	ldr	r1, [pc, #28]	; (800a4b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a492:	4808      	ldr	r0, [pc, #32]	; (800a4b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a494:	f7ff fd96 	bl	8009fc4 <USBD_GetString>
 800a498:	e004      	b.n	800a4a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	4904      	ldr	r1, [pc, #16]	; (800a4b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a49e:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4a0:	f7ff fd90 	bl	8009fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4a4:	4b02      	ldr	r3, [pc, #8]	; (800a4b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000f20 	.word	0x20000f20
 800a4b4:	0800ac30 	.word	0x0800ac30

0800a4b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	6039      	str	r1, [r7, #0]
 800a4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	4904      	ldr	r1, [pc, #16]	; (800a4d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4c8:	4804      	ldr	r0, [pc, #16]	; (800a4dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4ca:	f7ff fd7b 	bl	8009fc4 <USBD_GetString>
  return USBD_StrDesc;
 800a4ce:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20000f20 	.word	0x20000f20
 800a4dc:	0800ac48 	.word	0x0800ac48

0800a4e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	221a      	movs	r2, #26
 800a4f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4f2:	f000 f843 	bl	800a57c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4f6:	4b02      	ldr	r3, [pc, #8]	; (800a500 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	2000016c 	.word	0x2000016c

0800a504 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	6039      	str	r1, [r7, #0]
 800a50e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	4907      	ldr	r1, [pc, #28]	; (800a538 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a51a:	4808      	ldr	r0, [pc, #32]	; (800a53c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a51c:	f7ff fd52 	bl	8009fc4 <USBD_GetString>
 800a520:	e004      	b.n	800a52c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	4904      	ldr	r1, [pc, #16]	; (800a538 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a526:	4805      	ldr	r0, [pc, #20]	; (800a53c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a528:	f7ff fd4c 	bl	8009fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a52c:	4b02      	ldr	r3, [pc, #8]	; (800a538 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20000f20 	.word	0x20000f20
 800a53c:	0800ac5c 	.word	0x0800ac5c

0800a540 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	6039      	str	r1, [r7, #0]
 800a54a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a54c:	79fb      	ldrb	r3, [r7, #7]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d105      	bne.n	800a55e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	4907      	ldr	r1, [pc, #28]	; (800a574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a556:	4808      	ldr	r0, [pc, #32]	; (800a578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a558:	f7ff fd34 	bl	8009fc4 <USBD_GetString>
 800a55c:	e004      	b.n	800a568 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	4904      	ldr	r1, [pc, #16]	; (800a574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a562:	4805      	ldr	r0, [pc, #20]	; (800a578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a564:	f7ff fd2e 	bl	8009fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a568:	4b02      	ldr	r3, [pc, #8]	; (800a574 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000f20 	.word	0x20000f20
 800a578:	0800ac68 	.word	0x0800ac68

0800a57c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a582:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <Get_SerialNum+0x44>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a588:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <Get_SerialNum+0x48>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a58e:	4b0e      	ldr	r3, [pc, #56]	; (800a5c8 <Get_SerialNum+0x4c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4413      	add	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d009      	beq.n	800a5b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5a2:	2208      	movs	r2, #8
 800a5a4:	4909      	ldr	r1, [pc, #36]	; (800a5cc <Get_SerialNum+0x50>)
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f814 	bl	800a5d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5ac:	2204      	movs	r2, #4
 800a5ae:	4908      	ldr	r1, [pc, #32]	; (800a5d0 <Get_SerialNum+0x54>)
 800a5b0:	68b8      	ldr	r0, [r7, #8]
 800a5b2:	f000 f80f 	bl	800a5d4 <IntToUnicode>
  }
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	1ffff7e8 	.word	0x1ffff7e8
 800a5c4:	1ffff7ec 	.word	0x1ffff7ec
 800a5c8:	1ffff7f0 	.word	0x1ffff7f0
 800a5cc:	2000016e 	.word	0x2000016e
 800a5d0:	2000017e 	.word	0x2000017e

0800a5d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75fb      	strb	r3, [r7, #23]
 800a5ea:	e027      	b.n	800a63c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	0f1b      	lsrs	r3, r3, #28
 800a5f0:	2b09      	cmp	r3, #9
 800a5f2:	d80b      	bhi.n	800a60c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	0f1b      	lsrs	r3, r3, #28
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	4619      	mov	r1, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	440b      	add	r3, r1
 800a604:	3230      	adds	r2, #48	; 0x30
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	e00a      	b.n	800a622 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	0f1b      	lsrs	r3, r3, #28
 800a610:	b2da      	uxtb	r2, r3
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4619      	mov	r1, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	440b      	add	r3, r1
 800a61c:	3237      	adds	r2, #55	; 0x37
 800a61e:	b2d2      	uxtb	r2, r2
 800a620:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	011b      	lsls	r3, r3, #4
 800a626:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	3301      	adds	r3, #1
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	3301      	adds	r3, #1
 800a63a:	75fb      	strb	r3, [r7, #23]
 800a63c:	7dfa      	ldrb	r2, [r7, #23]
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	429a      	cmp	r2, r3
 800a642:	d3d3      	bcc.n	800a5ec <IntToUnicode+0x18>
  }
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bc80      	pop	{r7}
 800a64e:	4770      	bx	lr

0800a650 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a0d      	ldr	r2, [pc, #52]	; (800a694 <HAL_PCD_MspInit+0x44>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d113      	bne.n	800a68a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a662:	4b0d      	ldr	r3, [pc, #52]	; (800a698 <HAL_PCD_MspInit+0x48>)
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	4a0c      	ldr	r2, [pc, #48]	; (800a698 <HAL_PCD_MspInit+0x48>)
 800a668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a66c:	61d3      	str	r3, [r2, #28]
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <HAL_PCD_MspInit+0x48>)
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a67a:	2200      	movs	r2, #0
 800a67c:	2100      	movs	r1, #0
 800a67e:	2014      	movs	r0, #20
 800a680:	f7f7 fb91 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a684:	2014      	movs	r0, #20
 800a686:	f7f7 fbaa 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	40005c00 	.word	0x40005c00
 800a698:	40021000 	.word	0x40021000

0800a69c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	f7fe fd55 	bl	8009162 <USBD_LL_SetupStage>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a6d2:	78fa      	ldrb	r2, [r7, #3]
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	440b      	add	r3, r1
 800a6e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	78fb      	ldrb	r3, [r7, #3]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	f7fe fd87 	bl	80091fc <USBD_LL_DataOutStage>
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	460b      	mov	r3, r1
 800a700:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a708:	78fa      	ldrb	r2, [r7, #3]
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	440b      	add	r3, r1
 800a716:	333c      	adds	r3, #60	; 0x3c
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	78fb      	ldrb	r3, [r7, #3]
 800a71c:	4619      	mov	r1, r3
 800a71e:	f7fe fdde 	bl	80092de <USBD_LL_DataInStage>
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe feee 	bl	800951a <USBD_LL_SOF>
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a74e:	2301      	movs	r3, #1
 800a750:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	2b02      	cmp	r3, #2
 800a758:	d001      	beq.n	800a75e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a75a:	f7f6 fc17 	bl	8000f8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a764:	7bfa      	ldrb	r2, [r7, #15]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe fe9e 	bl	80094aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe fe57 	bl	8009428 <USBD_LL_Reset>
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a792:	4618      	mov	r0, r3
 800a794:	f7fe fe98 	bl	80094c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7a0:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <HAL_PCD_SuspendCallback+0x30>)
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	4a03      	ldr	r2, [pc, #12]	; (800a7b4 <HAL_PCD_SuspendCallback+0x30>)
 800a7a6:	f043 0306 	orr.w	r3, r3, #6
 800a7aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	e000ed00 	.word	0xe000ed00

0800a7b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fe92 	bl	80094f0 <USBD_LL_Resume>
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a7dc:	4a28      	ldr	r2, [pc, #160]	; (800a880 <USBD_LL_Init+0xac>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a26      	ldr	r2, [pc, #152]	; (800a880 <USBD_LL_Init+0xac>)
 800a7e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a7ec:	4b24      	ldr	r3, [pc, #144]	; (800a880 <USBD_LL_Init+0xac>)
 800a7ee:	4a25      	ldr	r2, [pc, #148]	; (800a884 <USBD_LL_Init+0xb0>)
 800a7f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a7f2:	4b23      	ldr	r3, [pc, #140]	; (800a880 <USBD_LL_Init+0xac>)
 800a7f4:	2208      	movs	r2, #8
 800a7f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a7f8:	4b21      	ldr	r3, [pc, #132]	; (800a880 <USBD_LL_Init+0xac>)
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a7fe:	4b20      	ldr	r3, [pc, #128]	; (800a880 <USBD_LL_Init+0xac>)
 800a800:	2200      	movs	r2, #0
 800a802:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a804:	4b1e      	ldr	r3, [pc, #120]	; (800a880 <USBD_LL_Init+0xac>)
 800a806:	2200      	movs	r2, #0
 800a808:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a80a:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <USBD_LL_Init+0xac>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a810:	481b      	ldr	r0, [pc, #108]	; (800a880 <USBD_LL_Init+0xac>)
 800a812:	f7f7 ff54 	bl	80026be <HAL_PCD_Init>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d001      	beq.n	800a820 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a81c:	f7f6 fbb6 	bl	8000f8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a826:	2318      	movs	r3, #24
 800a828:	2200      	movs	r2, #0
 800a82a:	2100      	movs	r1, #0
 800a82c:	f7f9 fc73 	bl	8004116 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a836:	2358      	movs	r3, #88	; 0x58
 800a838:	2200      	movs	r2, #0
 800a83a:	2180      	movs	r1, #128	; 0x80
 800a83c:	f7f9 fc6b 	bl	8004116 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a846:	23c0      	movs	r3, #192	; 0xc0
 800a848:	2200      	movs	r2, #0
 800a84a:	2181      	movs	r1, #129	; 0x81
 800a84c:	f7f9 fc63 	bl	8004116 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a856:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a85a:	2200      	movs	r2, #0
 800a85c:	2101      	movs	r1, #1
 800a85e:	f7f9 fc5a 	bl	8004116 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a86c:	2200      	movs	r2, #0
 800a86e:	2182      	movs	r1, #130	; 0x82
 800a870:	f7f9 fc51 	bl	8004116 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20001120 	.word	0x20001120
 800a884:	40005c00 	.word	0x40005c00

0800a888 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f8 f80c 	bl	80028bc <HAL_PCD_Start>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 f94e 	bl	800ab4c <USBD_Get_USB_Status>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	4608      	mov	r0, r1
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	70fb      	strb	r3, [r7, #3]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	70bb      	strb	r3, [r7, #2]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8e6:	78bb      	ldrb	r3, [r7, #2]
 800a8e8:	883a      	ldrh	r2, [r7, #0]
 800a8ea:	78f9      	ldrb	r1, [r7, #3]
 800a8ec:	f7f8 f961 	bl	8002bb2 <HAL_PCD_EP_Open>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f928 	bl	800ab4c <USBD_Get_USB_Status>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a900:	7bbb      	ldrb	r3, [r7, #14]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	460b      	mov	r3, r1
 800a914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f7f8 f99f 	bl	8002c6c <HAL_PCD_EP_Close>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 f909 	bl	800ab4c <USBD_Get_USB_Status>
 800a93a:	4603      	mov	r3, r0
 800a93c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a962:	78fa      	ldrb	r2, [r7, #3]
 800a964:	4611      	mov	r1, r2
 800a966:	4618      	mov	r0, r3
 800a968:	f7f8 fa47 	bl	8002dfa <HAL_PCD_EP_SetStall>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	4618      	mov	r0, r3
 800a974:	f000 f8ea 	bl	800ab4c <USBD_Get_USB_Status>
 800a978:	4603      	mov	r3, r0
 800a97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b084      	sub	sp, #16
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	460b      	mov	r3, r1
 800a990:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7f8 fa88 	bl	8002eba <HAL_PCD_EP_ClrStall>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 f8cb 	bl	800ab4c <USBD_Get_USB_Status>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	da0c      	bge.n	800a9fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9e0:	78fb      	ldrb	r3, [r7, #3]
 800a9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e6:	68f9      	ldr	r1, [r7, #12]
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	440b      	add	r3, r1
 800a9f4:	3302      	adds	r3, #2
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	e00b      	b.n	800aa12 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa00:	68f9      	ldr	r1, [r7, #12]
 800aa02:	4613      	mov	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	440b      	add	r3, r1
 800aa0c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aa10:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bc80      	pop	{r7}
 800aa1a:	4770      	bx	lr

0800aa1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7f8 f894 	bl	8002b68 <HAL_PCD_SetAddress>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 f880 	bl	800ab4c <USBD_Get_USB_Status>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	461a      	mov	r2, r3
 800aa66:	460b      	mov	r3, r1
 800aa68:	72fb      	strb	r3, [r7, #11]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa7c:	893b      	ldrh	r3, [r7, #8]
 800aa7e:	7af9      	ldrb	r1, [r7, #11]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	f7f8 f983 	bl	8002d8c <HAL_PCD_EP_Transmit>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 f85d 	bl	800ab4c <USBD_Get_USB_Status>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa96:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	460b      	mov	r3, r1
 800aaae:	72fb      	strb	r3, [r7, #11]
 800aab0:	4613      	mov	r3, r2
 800aab2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aac2:	893b      	ldrh	r3, [r7, #8]
 800aac4:	7af9      	ldrb	r1, [r7, #11]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	f7f8 f918 	bl	8002cfc <HAL_PCD_EP_Receive>
 800aacc:	4603      	mov	r3, r0
 800aace:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 f83a 	bl	800ab4c <USBD_Get_USB_Status>
 800aad8:	4603      	mov	r3, r0
 800aada:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aadc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b082      	sub	sp, #8
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf8:	78fa      	ldrb	r2, [r7, #3]
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7f8 f92e 	bl	8002d5e <HAL_PCD_EP_GetRxCount>
 800ab02:	4603      	mov	r3, r0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab14:	4b02      	ldr	r3, [pc, #8]	; (800ab20 <USBD_static_malloc+0x14>)
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bc80      	pop	{r7}
 800ab1e:	4770      	bx	lr
 800ab20:	20001410 	.word	0x20001410

0800ab24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]

}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr

0800ab36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	460b      	mov	r3, r1
 800ab40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc80      	pop	{r7}
 800ab4a:	4770      	bx	lr

0800ab4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d817      	bhi.n	800ab90 <USBD_Get_USB_Status+0x44>
 800ab60:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <USBD_Get_USB_Status+0x1c>)
 800ab62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab66:	bf00      	nop
 800ab68:	0800ab79 	.word	0x0800ab79
 800ab6c:	0800ab7f 	.word	0x0800ab7f
 800ab70:	0800ab85 	.word	0x0800ab85
 800ab74:	0800ab8b 	.word	0x0800ab8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab7c:	e00b      	b.n	800ab96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab7e:	2302      	movs	r3, #2
 800ab80:	73fb      	strb	r3, [r7, #15]
    break;
 800ab82:	e008      	b.n	800ab96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab84:	2301      	movs	r3, #1
 800ab86:	73fb      	strb	r3, [r7, #15]
    break;
 800ab88:	e005      	b.n	800ab96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8e:	e002      	b.n	800ab96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab90:	2302      	movs	r3, #2
 800ab92:	73fb      	strb	r3, [r7, #15]
    break;
 800ab94:	bf00      	nop
  }
  return usb_status;
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bc80      	pop	{r7}
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop

0800aba4 <memset>:
 800aba4:	4603      	mov	r3, r0
 800aba6:	4402      	add	r2, r0
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d100      	bne.n	800abae <memset+0xa>
 800abac:	4770      	bx	lr
 800abae:	f803 1b01 	strb.w	r1, [r3], #1
 800abb2:	e7f9      	b.n	800aba8 <memset+0x4>

0800abb4 <__libc_init_array>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	2600      	movs	r6, #0
 800abb8:	4d0c      	ldr	r5, [pc, #48]	; (800abec <__libc_init_array+0x38>)
 800abba:	4c0d      	ldr	r4, [pc, #52]	; (800abf0 <__libc_init_array+0x3c>)
 800abbc:	1b64      	subs	r4, r4, r5
 800abbe:	10a4      	asrs	r4, r4, #2
 800abc0:	42a6      	cmp	r6, r4
 800abc2:	d109      	bne.n	800abd8 <__libc_init_array+0x24>
 800abc4:	f000 f828 	bl	800ac18 <_init>
 800abc8:	2600      	movs	r6, #0
 800abca:	4d0a      	ldr	r5, [pc, #40]	; (800abf4 <__libc_init_array+0x40>)
 800abcc:	4c0a      	ldr	r4, [pc, #40]	; (800abf8 <__libc_init_array+0x44>)
 800abce:	1b64      	subs	r4, r4, r5
 800abd0:	10a4      	asrs	r4, r4, #2
 800abd2:	42a6      	cmp	r6, r4
 800abd4:	d105      	bne.n	800abe2 <__libc_init_array+0x2e>
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abdc:	4798      	blx	r3
 800abde:	3601      	adds	r6, #1
 800abe0:	e7ee      	b.n	800abc0 <__libc_init_array+0xc>
 800abe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe6:	4798      	blx	r3
 800abe8:	3601      	adds	r6, #1
 800abea:	e7f2      	b.n	800abd2 <__libc_init_array+0x1e>
 800abec:	0800aca4 	.word	0x0800aca4
 800abf0:	0800aca4 	.word	0x0800aca4
 800abf4:	0800aca4 	.word	0x0800aca4
 800abf8:	0800aca8 	.word	0x0800aca8

0800abfc <memcpy>:
 800abfc:	440a      	add	r2, r1
 800abfe:	4291      	cmp	r1, r2
 800ac00:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac04:	d100      	bne.n	800ac08 <memcpy+0xc>
 800ac06:	4770      	bx	lr
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac0e:	4291      	cmp	r1, r2
 800ac10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac14:	d1f9      	bne.n	800ac0a <memcpy+0xe>
 800ac16:	bd10      	pop	{r4, pc}

0800ac18 <_init>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	bf00      	nop
 800ac1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac1e:	bc08      	pop	{r3}
 800ac20:	469e      	mov	lr, r3
 800ac22:	4770      	bx	lr

0800ac24 <_fini>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	bf00      	nop
 800ac28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac2a:	bc08      	pop	{r3}
 800ac2c:	469e      	mov	lr, r3
 800ac2e:	4770      	bx	lr
